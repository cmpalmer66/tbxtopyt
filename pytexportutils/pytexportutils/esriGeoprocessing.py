'Type library'
__all__ = ['IProtectNameGeoprocessing', 'IGPProtectNames', 'IGPEnvironment', 'IGPEnvironmentManager', 'IGPVariableManager', 'IMdVariable', 'IEnumMdVariable', 'IGPToolboxName', 'IGPToolName', 'IEnumGPToolName', 'IGPParameter', 'IMdParameter', 'IGPParameter2', 'IBStringArray', 'IGPFieldMap', 'IGPFieldMapping', 'IGPFieldInfo', 'IGPFieldInfo2', 'IGPFieldInfo3', 'IGPFieldInfoProperty', 'IGPFieldInfoProperty2', 'IGPFieldInfoProperty3', 'IGPValueTable', 'IGPValueTableType', 'IGPMultiValue', 'IGPMultiValueType', 'IGPMultiValueDataTypeName', 'IGPVariant', 'IGPBoolean', 'IGPString', 'IGPDate', 'IGPDouble', 'IGPLong', 'IGPEnvelope', 'IGPExtent', 'IGPSpatialReference', 'IGPCoordinateSystem', 'IGPXYDomain', 'IGPZDomain', 'IGPMDomain', 'IGPPoint', 'IGPPoint2', 'IGPPolygon', 'IGPPolygon2', 'IGPLine', 'IGPLine2', 'IGPFeatureLayer', 'IGPRouteMeasureEventProperties', 'IGPTableView', 'IGPCodedValueDomainProperty', 'IDataElementDomain', 'IGPFieldInfoDomain', 'IGPWorkspaceDomain', 'IGPFileDomain', 'IGPDatasetDomain', 'IGPFeatureClassDomain', 'IGPCoverageFeatureClassDomain', 'IGPCoverageDomain', 'IGPFieldDomain', 'IGPFieldDomain2', 'IGPArcInfoItemDomain', 'IGPFeatureSchema', 'IGPTableSchema', 'IGPRasterSchema', 'IGPContainerSchema', 'IGPParameterEdit', 'IGPParameterEdit2', 'IGPEnvironmentImpl', 'IEnumGPEnvironment', 'IGPSchemaCheckImpl', 'IGPDefaultNameList', 'IGeoProcessorSettings', 'IGeoProcessorSettings2', 'IGPFunction', 'IGPFunction2', 'IGPFunctionName', 'IGPFunctionFactory', 'IGPFunctionFactory2', 'IGPParseString', 'IGPParseString2', 'IGPUtilities', 'IGPUtilities2', 'IGPUtilities3', 'IGPUtilities4', 'IGPCompositeDataType', 'IGPCompositeDomain', 'IGPFileSupport', 'IGPLinearUnit', 'IGPArealUnit', 'IGPLinearUnit2', 'IGPRandomNumberGenerator', 'IGPRasterLayer', 'IGPNumericDomain', 'IGPCompositeLayer', 'IGPStandaloneTableCollection', 'IDEUtilities', 'IGPLayerSupport', 'IGPValueExpression', 'IGPCreateTiles', 'IGPRecordSet', 'IGPFeatureRecordSet', 'IGPRasterData', 'IGPLayerDescription', 'IGPDataFile', 'IGPRasterBuilder', 'IGPCellSizeXY', 'IGPTest', 'IMdDisplayNode', 'IMdDisplayEdge', 'IMdDiagramProperties', 'IMdVariable2', 'IMdVariable3', 'IMdList', 'IMdModelIteration', 'IMBProgressor', 'IEnumGPToolboxName', 'IGPParameterInfo', 'IGPParameterInfos', 'IGPToolInfo', 'IGPToolboxEvents2', 'IGPFunctionTool', 'IGPScriptTool', 'IGPScriptTool2', 'IDEToolbox', 'IDEToolbox2', 'IGpEnumList', 'IGpEnumObject', 'IGpDescribeData', 'IGpSpRefObject', 'IGpValueTableObject', 'IGpValueTableObject2', 'IGPEnvironmentManagerImpl', 'IGeoProcessorResult', 'IGeoProcessorEvents3', 'IGpObjectArray', 'IGpDescribeGeometry', 'IGpPointObject', 'IGpPointObject2', 'IGpRandomNumberGeneratorObject', 'IGpCursorRow', 'IGpCursorRow2', 'IGpFieldMappingsObject', 'IGpFieldMapObject', 'IGpDescribeField', 'IGpDescribeIndex', 'IGpFieldInfoObject', 'IGPNetCDFWorkspace', 'IGPToolBackground', 'IGPComHelper', 'IGpDispatch', 'IGPArc', 'IGPLayersAndTablesDomain', 'IGPTablesDomain', 'IGPTablesDomain2', 'IMdElementDialogSupport', 'IEnumGPVariable', 'IEnumGPDataType', 'IEnumFieldType', 'IEnumGeometryType', 'IGPSAGeoDataDomain', 'IGPGraphUtilitiesUI', 'INAClassFieldMapItemHelperImpl', 'INAClassFieldMappingsHelperImpl', 'INASolverPropertiesHelperImpl', 'IGPToolCommandHelperImpl', 'IGPTableViewImpl', 'IMdElementDebug', 'IMdDiagramPropertiesImpl', 'IToolboxWorkspaceImpl', 'IGPServerTool', 'IGPServerToolbox', 'IGPFileSystemToolbox', 'IGDBToolbox', 'IGPToolboxNameImpl', 'IGPToolImpl', 'IGPTaskImpl', 'IGPToolLicenseImpl', 'IGPToolBackgroundImpl', 'IGPToolLocalizeImpl', 'IGPToolID', 'IGPRecordSetImpl', 'IMdDiagramState', 'IThreadedTrackCancel', 'IGeoProcessorWorker', 'IGPScriptToolImpl', 'IGPDefaultNameListImpl', 'IGPWrapper', 'IMdVariableImpl', 'IMdElementImpl', 'IGPEnvironmentImpl2', 'IGPModelToolImpl', 'IGPServerToolName', 'IGPServerToolboxName', 'IGPFunctionFactoryImpl', 'IBuildCoverageFeatureClassName', 'IBuildCoverageFeatureClassName2', 'IGPPythonScriptTool', 'IGPFunctionImpl', 'ITransactionsObject', 'IGeoprocessingAppHelper', 'IGPUtilitiesImpl', 'IGPSAGeoDataTypeName', 'IGPRasterUtil', 'IGPCompositeDataTypeName', 'IGPValueTableTypeName', 'IGPValueTableTypeNameProperty', 'IGPGxFilter', 'IDEUtilitiesImpl', 'IGPEncryptedString', 'IGPFieldInfo4', 'IGpDispatchImpl', 'IGpDispatchObjectImpl', 'IGPFieldMapImpl', 'IGPRandomNumberGeneratorImpl', 'IGPFieldMappingImpl', 'IGeoProcessorSettingsImpl', 'IGPIterator', 'IGPLayerEditTemplateManagerImpl', 'IGPInMemoryToolbox', 'IGPPythonToolbox', 'IGPPythonToolboxName', 'IGPDataTable', 'IGPGraphDataTable', 'IGPGraph', 'IGPGraphUtilities', 'IGPMosaicDatasetUtilities', 'ILocalFunctionRasterEnv', 'IJobResult', 'IGPParseStringImpl', 'IGPPythonScriptParseRecord', 'IGPExportWebMapExtensionImpl', 'IGPSAGeoDataType', 'IGPRasterFormulated', 'IGPRAFieldDomain', 'IGPAnalysisCellSizeType', 'IMapCacheTileManager', 'IMapCacheTileManagerJobResultHandler', 'IMapCacheTileManagerJob', 'IGPRasterGDBEnvCompression', 'IGPRasterGDBEnvPyramid', 'IGPRasterGDBEnvPyramid2', 'IGPRasterGDBEnvPyramid3', 'IGPRasterGDBEnvStatistics', 'IGPRasterGDBEnvTileSize', 'IGPRasterEnvStorageDefAdvanced', 'IGPFunctionPS', 'IGPRasterFormulatedPS', 'IGPAnalysisCellSizePS', 'IGPSAGeoDataBase', 'IGPSAValueTablePS', 'IGPSAGeoValueTablePS', 'IGPRasterValueTablePS', 'IGPRepresentationLayerDomain', 'IGeocompare', 'IGeocompareResult', 'IGeocompareReport', 'IFeatureClassGeocompare', 'ITableGeocompare', 'IFieldGeocompare', 'IRelationshipClassGeocompare', 'ISubtypesGeocompare', 'ISpatialReferenceGeocompare', 'IGeometryGeocompare', 'IRasterDatasetGeocompare', 'IRasterGeocompare', 'IRasterCatalogGeocompare', 'IMosaicDatasetGeocompare', 'ISDERasterDatasetGeocompare', 'IFileGeocompare', 'ITinGeocompare', 'IGPValues', 'IGPToolInfo2', 'IGPToolInfos', 'IGPResult', 'IGPResultOptions', 'IGPResultOptions2', 'IGPServer', 'IGPServer2', 'IGPJobServerExe', 'IGPServerSync', 'IGPServerTrackCancel', 'IGPServerTrackCancel2', 'IGPServerExecute', 'IGPServerDir', 'ILogUsage', 'IWPSServer', 'IDBGridMask', 'ICoordinateSystemRecordSet', 'ICoordinateSystemZones', 'ISpatialReferenceCalculator', 'IDBGridPattern', 'IDBGridAnnoGroup', 'IDBGridAnno', 'IDBGridEndPoint', 'IDBGridTick', 'IDBGridLine', 'IDBGridPoint', 'IDBGridSegment', 'IDBGridNeatline', 'IDBGrid', 'IDBGridMessages', 'IDBGridUtilities', 'IMdModel', 'IGPModelTool', 'IMBImport', 'IGPVariableManagerImpl', 'IModelScriptConverter', 'IMdElement', 'IEnumMdElement', 'IMdModelIteration2', 'IMdModelName', 'IEnumMdProcess', 'IMdProcess', 'IProcessLayer', 'IMdModelEvents', 'IGPTask', 'IGeoProcessorResult2', 'IGeoProcessorEvents2', 'IMdModelImpl', 'IModelScriptConverterEngineCallback', 'IModelScriptConverterEngine', 'IGPJobRequest', 'IGPJobResult', 'IGPJobServer', 'IGPTool', 'IEnumGPTool', 'IGPToolboxEvents', 'IGPToolEdit', 'IGeoProcessorEvents', 'IGeoProcessor', 'IGeoProcessor2', 'IGPToolCommandHelper', 'IGPToolCommandHelper2', 'IGPToolCache', 'IGeoProcessorResultImpl', 'IMdProcessImpl', 'IAnalyzeTask', 'IGPRuntimeSupport', 'IGeoProcessorSupport', 'IGpPythonInterpreter', 'IGpPythonExpression', 'IMdUtilities', 'IMdUtilities2', 'IMdUtilities3', 'IGPToolbox', 'IEnumGPToolbox', 'IToolboxWorkspace', 'IGPToolboxFactory', 'IGPToolset', 'IEnumGPToolset', 'IGPToolboxCache', 'IGPToolboxImpl', 'IGPToolboxImplEvents', 'IGxGPToolsetImpl', 'IGeoProcessorImpl', 'IArcToolboxExtensionImpl', 'IGPInternalEnvironment', 'ITaskAnalyzer', 'IAnalyzeTaskToolbox', 'IGPHolder', 'IGPUtilitiesUI', 'IGPToolExtension', 'IGPToolExtensionFactory', 'IGPCustomTool', 'IGPCustomToolHelper', 'IGPToolbox2', 'IGPToolbox3', 'IGPParameter3', 'IGPSchema', 'IGPParameterEdit3', 'IGPToolExtensionGen', 'IGPToolExtensionFactoryGen', 'IGPCustomToolGen', 'ISDMapper', 'ISDMapping', 'ISDConfigurationMapping', 'ISDResourceMappingImpl', 'ISDConfigurationMappingImpl', 'IEnumSDDatabaseMapping', 'ISDDatabaseMapping', 'ISDDatasetMapping', 'IEnumSDDatasetMapping', 'ISDResourceMapping', 'ISDMappingImpl', 'ISDDatabaseMappingImpl', 'ISDDatasetMappingImpl', 'IEnumDBGridComponent', 'IDBGridComponent', 'IDBGridEnvironment', 'GPBooleanType', 'GPEncryptedStringType', 'GPStringType', 'GPDateType', 'GPDoubleType', 'GPLongType', 'GPVariantType', 'GPEnvelopeType', 'GPSpatialReferenceType', 'GPCoordinateSystemType', 'GPXYDomainType', 'GPZDomainType', 'GPMDomainType', 'GPPointType', 'GPPolygonType', 'GPLineType', 'GPValueTableType', 'GPValueTable', 'GPFieldInfoType', 'GPFieldInfo', 'GPFieldInfoProperty', 'GPFieldMappingType', 'GPFieldMapping', 'GPFieldMap', 'GPMultiValueType', 'GPMultiValueTypeName', 'GPMultiValue', 'GPVariant', 'GPBoolean', 'GPString', 'GPEncryptedString', 'GPDate', 'GPDouble', 'GPLong', 'GPEnvelope', 'GPSpatialReference', 'GPCoordinateSystem', 'GPXYDomain', 'GPZDomain', 'GPMDomain', 'GPPoint', 'GPPolygon', 'GPLine', 'GPLayerType', 'GPFeatureLayerType', 'GPFeatureLayer', 'GPLayer', 'GPRasterCatalogLayerType', 'GPRasterCatalogLayer', 'GPMosaicLayerType', 'GPMosaicLayer', 'GPTopologyLayerType', 'GPTopologyLayer', 'GPNetworkDatasetLayerType', 'GPNetworkDatasetLayer', 'GPRouteMeasureEventPropertiesType', 'GPRouteMeasureEventProperties', 'GPTinLayerType', 'GPTinLayer', 'GPTerrainLayerType', 'GPTerrainLayer', 'GPLasDatasetLayerType', 'GPLasDatasetLayer', 'GPCadastralFabricLayerType', 'GPCadastralFabricLayer', 'GPTableViewType', 'GPTableView', 'GPCodedValueDomain', 'GPCodedValueDomainProperty', 'GPRangeDomain', 'GPWorkspaceDomain', 'GPDatasetDomain', 'GPFeatureClassDomain', 'GPGdbAnnoDomain', 'GPCovAnnoDomain', 'GPCadAnnoDomain', 'GPCoverageFeatureClassDomain', 'GPCoverageDomain', 'GPFieldDomain', 'GPArcInfoItemDomain', 'DataElementDomain', 'GPFieldInfoDomain', 'GPFileDomain', 'GPParameter', 'GPFeatureSchema', 'GPTableSchema', 'GPRasterSchema', 'GPContainerSchema', 'GPFunctionName', 'GPVariable', 'GPEnvironment', 'GPParseString', 'GPUtilities', 'GPCompositeDataType', 'GPCompositeDomain', 'EnumBSTR', 'EnumGPName', 'EnumGPEnvironment', 'GPLinearUnitType', 'GPLinearUnit', 'GPArealUnitType', 'GPArealUnit', 'GPRandomNumberGeneratorType', 'GPRandomNumberGenerator', 'GPSQLExpressionType', 'GPSQLExpression', 'GPINFOExpressionType', 'GPINFOExpression', 'GPType', 'DEType', 'DEDatasetType', 'DEGeoDatasetType', 'GPExtentType', 'GPExtent', 'GPNumericDomain', 'GPRasterLayerType', 'GPRasterLayer', 'GPRouteDomain', 'GPRouteMeasureEventDomain', 'GPQueryTableFieldsDomain', 'GPQueryTableIDsDomain', 'GPVirtualTableDomain', 'GPRouteIDFieldsDomain', 'GPMeasureFieldsDomain', 'GPFieldChoiceList', 'GPArcInfoItemChoiceList', 'GPGroupLayerType', 'GPGroupLayer', 'GPCompositeLayerType', 'GPCompositeLayer', 'GPCreateTiles', 'GPTest', 'DEUtilities', 'GpVirtualPathParser', 'StandaloneCatalogPathParser', 'AGSCatalogPathParser', 'AGOCatalogPathParser', 'TaskServicesCatalogPathParser', 'GDSCatalogPathParser', 'ProcessLayerFactory', 'ProcessLayer', 'GPRecordSetType', 'GPRecordSet', 'GPRasterDataType', 'GPRasterData', 'GPFeatureRecordSetLayerType', 'GPFeatureRecordSetLayer', 'GPRasterDataLayerType', 'GPRasterDataLayer', 'GPDataFileType', 'GPDataFile', 'GPRasterBuilderType', 'GPRasterBuilder', 'WCSCatalogPathParser', 'GPCellSizeXYType', 'GPCellSizeXY', 'GPCalculatorExpressionType', 'GPCalculatorExpression', 'MdVariable', 'MdParameter', 'MdProcess', 'MdModel', 'MdModelEventsHelper', 'ToolboxWorkspaceFactory', 'ToolboxWorkspaceExtension', 'GPToolboxName', 'GPToolName', 'GPToolboxEventsHelper', 'GPToolboxEvents2Helper', 'DEToolbox', 'DEToolboxType', 'DETool', 'DEToolType', 'GeoProcessor', 'GeoProcessorResult', 'GPEnvironmentManager', 'GpSpRefObject', 'GpObjectArray', 'GpPointObject', 'GpRandomNumberGeneratorObject', 'GpFieldMappingsObject', 'GpFieldMapObject', 'GpDescribeField', 'GpValueTableObject', 'GpFieldInfoObject', 'GPNetCDFWorkspace', 'GPHolder', 'GpDispatch', 'GPArc', 'GPLayersAndTablesDomain', 'GPTablesDomain', 'SDMapper', 'SDMapping', 'SDDatabaseMapping', 'SDDatasetMapping', 'SDResourceMapping', 'SDConfigurationMapping', 'GPServerToolName', 'GPServerToolboxName', 'GPBuildCoverageFeatureClassName', 'GPToolboxWorkspace', 'GPToolbox', 'GdbToolboxWorkspace', 'GdbToolbox', 'GPServerToolbox', 'GPFunctionTool', 'GPServerTool', 'GPModelTool', 'GPTask', 'GPScriptTool', 'TaskAnalyzer', 'TaskSolutionBuilder', 'AnalyzeToolScriptSyntaxError', 'AnalyzeToolScriptBrokenSourceError', 'AnalyzeToolScriptInvalidSourceError', 'AnalyzeToolScriptNonExistingToolboxError', 'AnalyzeToolInvalidError', 'AnalyzeToolSDEBasedToolsError', 'AnalyzeToolSDEBasedToolsWarning', 'AnalyzeToolNonExistingProjectDataError', 'AnalyzeToolUnsupportedNonDataStoreProjectDataError', 'AnalyzeToolPathLengthProjectDataError', 'AnalyzeToolNonDataStoreProjectDataWarning', 'AnalyzeToolNonSupportedDataStoreProjectDataError', 'AnalyzeToolPythonScriptToolboxImportingCustomScriptError', 'AnalyzeToolTaskOutputNeedsMapServiceError', 'AnalyzeToolCannotPublishListVariablesError', 'AnalyzeToolTaskOutputCannotUserMapServiceError', 'AnalyzeToolVBExpressionToolsError', 'AnalyzeToolVBExpressionToolsWarning', 'AnalyzeToolUnlicensedRuntimeToolsError', 'AnalyzeToolUnlicensedServerToolsError', 'AnalyzeToolNotValidForServerError', 'AnalyzeToolDLLToolsError', 'AnalyzeTaskMissingDescriptionError', 'AnalyzeTaskMissingTagsError', 'AnalyzeToolMissingMetadataSummaryError', 'AnalyzeToolMissingMetadataParameterDescriptionError', 'GPPythonScriptTool', 'GPCustomTool', 'GPToolExtensionFactoryWrapper', 'GPToolExtensionWrapper', 'GPToolboxImplEventsHelper', 'GPInternalEnvironment', 'ModelToPythonConverter', 'ModelToVbscriptConverter', 'ModelToJscriptConverter', 'ModelScriptConverterEngine', 'ModelToPythonConverterEngineCallback', 'ModelToVbscriptConverterEngineCallback', 'ModelToJscriptConverterEngineCallback', 'GPCalculatorCallback', 'GPDataTypeFactory', 'GPESRIDataTypeFactory', 'GPESRIFunctionFactory', 'GPESRIConversionFunctionFactory', 'GPESRIAnalysisFunctionFactory', 'GPESRIDataManagementFunctionFactory', 'GPESRIEditingFunctionFactory', 'GPESRILinearReferencingFunctionFactory', 'GPAdjust', 'GPAppend', 'GPAreaquery', 'GPBuffer', 'GPClip', 'GPDissolve', 'GPEliminate', 'GPErase', 'GPIdentity', 'GPIntersect', 'GPReselect', 'GPSplit', 'GPTransform', 'GPUnion', 'GPUpdate', 'GPSymDiff', 'GPBuildCover', 'GPTabulate', 'GPPolygonNeighbor', 'GPImportE00', 'GPDeleteRows', 'GPDeleteFeatures', 'GPCopyRows', 'GPCopyFeatures', 'GPAddField', 'GPDropField', 'GPCalculate', 'GPDelete', 'GPRename', 'GPCreateLayer', 'GPAddJoin', 'GPDropJoin', 'GPJoinItem', 'GPMigrateStorage', 'GPRemoveWorkspaceCache', 'GPNear', 'GPNearTable', 'GPPointDistance', 'GPCreateCentroids', 'GPCreatePersonalGDB', 'GPCreateFileGDB', 'GPCreateArcInfoWorkspace', 'GPCreateFolder', 'GPCreateFeatureDataset', 'GPCreateTable', 'GPCreateFeatureClass', 'GPCreateUnRegisteredTable', 'GPCreateUnRegisteredFeatureClass', 'GPAddRasterField', 'GPAddXMLField', 'GPAssignFieldAsSubtypeField', 'GPAddSubtype', 'GPRemoveSubtype', 'GPCreateRelationshipClass', 'GPCreateRelationshipClassFromTable', 'GPAnalyze', 'GPAnalyzeDatasets', 'GPRebuildIndexes', 'GPChangePrivileges', 'GPCreateVersionedView', 'GPDisableEditorTracking', 'GPEnableEditorTracking', 'GPCreateVersion', 'GPDeleteVersion', 'GPReconcileVersion', 'GPReconcileVersions', 'GPRegisterAsVersioned', 'GPUnregisterAsVersioned', 'GPAlterVersion', 'GPCreateCADXData', 'GPExportCAD', 'GPImportCAD', 'GPCadToGeodatabase', 'GPAssignCADAlias', 'GPAddCADFields', 'GPCreateIndex', 'GPDeleteIndex', 'GPRebuildAttributeIndexes', 'GPCreateSpatialIndex', 'GPDropSpatialIndex', 'GPSelect', 'GPTableSelect', 'GPCreateEnvelopes', 'GPCreatePoints', 'GPCreateLines', 'GPCreateAreas', 'GPExtendLine', 'GPPolyLine', 'GPSplitLines', 'GPPivotTable', 'GPCreateTableView', 'GPSetSubtypeField', 'GPSetDefaultSubtype', 'GPLineSimplify', 'GPCreateDomain', 'GPDeleteDomain', 'GPAddCodedValue', 'GPDeleteCodedValue', 'GPSetValueForRangeDomain', 'GPAssignDomainToField', 'GPRemoveDomainFromField', 'GPDomainFromTable', 'GPTableFromDomain', 'GPSortCodedValueDomain', 'GPTruncateTable', 'GPExplode', 'GPVegematic', 'GPFindDupFeatures', 'GPDeleteDupFeatures', 'GPTrimLine', 'GPWeedFeatures', 'GPDensifyFeatures', 'GPSnapFeatures', 'GPEraseClipFeatures', 'GPFlipFeatures', 'GPUnsplitLineFeatures', 'GPSortFeatures', 'GPSplitLineAtPointFeatures', 'GPSelectData', 'GPCompress', 'GPCompact', 'GPCheckOut', 'GPCheckIn', 'GPCreateArcSDEConnectionFile', 'GPCreateDatabaseConnection', 'GPCreateDatabaseView', 'GPZScoreRendering', 'GPCountRendering', 'GPPackageLayer', 'GPPackageMap', 'GPPackageToolbox', 'GPPackageMapTile', 'GPPublishPackage', 'GPStageService', 'GPExtractPackage', 'GPUploadServiceDefinition', 'GPSignInToPortal', 'GPSignOutFromPortal', 'GPPublishServiceDefinition', 'GPValidateServerDataStore', 'GPGetDatabaseConnectionString', 'GPGetCacheInfo', 'GPDownloadPortalItemData', 'GPAnalyzeFeaturesForPortal', 'GPGenerateFeaturesForPortal', 'GPStageFeatureServiceFromFile', 'GPPublishPortalService', 'GPConsolidateLayer', 'GPConsolidateMap', 'GPConsolidateToolbox', 'GPConsolidateResult', 'GPPackageResult', 'GPConsolidateLocator', 'GPPackageLocator', 'GPCreateEnterpriseGeodatabase', 'GPEnableEnterpriseGeodatabase', 'GPCreateSpatialType', 'GPCreateDatabaseUser', 'GPAddIncrementingIDField', 'GPCreateRole', 'GPRecoverFileGDB', 'GPUpgradeSpatialReference', 'GPUpgradeDataset', 'GPUpgradeGDB', 'GPEnableAttachments', 'GPDisableAttachments', 'GPAddAttachments', 'GPRemoveAttachments', 'GPGenerateAttachmentMatchTable', 'GPEnableArchiving', 'GPDisableArchiving', 'GPCreateGeometricNetwork', 'GPAddEdgeJunctionConnectivityRuleToGeometricNetwork', 'GPAddEdgeEdgeConnectivityRuleToGeometricNetwork', 'GPRemoveConnectivityRuleFromGeometricNetwork', 'GPRemoveEmptyFeatureClassFromGeometricNetwork', 'GPTraceGeometricNetwork', 'GPSetFlowDirection', 'GPExportTopologyErrors', 'GPTransposeFields', 'GPCalculateEndTime', 'GPConvertTimeField', 'GPConvertTimeZone', 'GPCreateReplicaFromServer', 'GPCreateReplica', 'GPSynchronize', 'GPExportDataChangeMessage', 'GPExportAcknowledgementMessage', 'GPImportMessage', 'GPExportReplicaSchema', 'GPReExportUnacknowledgedMessages', 'GPCompareReplicaSchema', 'GPImportReplicaSchema', 'GPCreateReplicaLayer', 'GPAdd_Global_IDs', 'GPWFSExtract', 'GPLineSmooth', 'GPSaveLayer', 'GPAddXY', 'GPCopy', 'GPFrequency', 'GPStatistics', 'GPProjectDefine', 'GPProject', 'GPSelectLayerAttribute', 'GPSelectLayerLocation', 'GPMakeQueryLayer', 'GPCalculateDefaultGridIndex', 'GPCalculateDefaultClusterTolerance', 'GPCreateTopology', 'GPAddFeatureClassToTopology', 'GPRemoveFeatureClassFromTopology', 'GPAddRuleToTopology', 'GPRemoveRuleFromTopology', 'GPValidateTopology', 'GPSetClusterTolerance', 'GPGetCount', 'GPExportDeltaDatabase', 'GPCheckInDeltaDatabase', 'GPIntegrate', 'GPCheckGeometries', 'GPRepairGeometries', 'GPCalculateValue', 'GPMergeBranch', 'GPMakeXYEventLayer', 'GPMakeRouteEventLayer', 'GPDissolveEvents', 'GPOverlayEvents', 'GPTransformRouteMeasureEvents', 'GPLocateFeaturesAlongRoutes', 'GPCreateRoutes', 'GPCalibrateRoutes', 'GPMakeQueryTable', 'GPFeatureGeocompare', 'GPRasterGeocompare', 'GPTableGeocompare', 'GPFileGeocompare', 'GPTinGeocompare', 'GPAggregatePolygons', 'GPCollapseDualLines', 'GPSimplifyBuilding', 'GPSimplifyPolygon', 'GPSmoothPolygon', 'GPAggregatePoints', 'GPUpdateAnno', 'GPAppendAnno', 'GPImportCovAnno', 'GPImportCadAnno', 'GPCreateRasterDataset', 'GPCopyRaster', 'GPContourRasterBarrier', 'GPTiledLabelsToAnnotation', 'GPMapServerCacheTilingSchemeToPolygons', 'GPContourAnnotation', 'GPMosaic', 'GPCreateRandomPoints', 'GPConvexHull', 'GPEliminatePolygonPart', 'GPRepairRasterCatalogPaths', 'GPExportRasterCatalogPaths', 'GPCreateRandomRaster', 'GPPolygon2Raster', 'GPPolyline2Raster', 'GPPoint2Raster', 'GPCreateRasterCatalog', 'GPCreateMosaicDataset', 'GPExportMosaicDatasetPaths', 'GPRepairMosaicDatasetPaths', 'GPMergeMosaicDatasetItems', 'GPSplitMosaicDatasetItems', 'GPAlterMosaicDatasetSchema', 'GPCreateReferencedMosaicDataset', 'GPCalculateCellSizeRanges', 'GPSynchronizeMosaicDataset', 'GPAnalyzeMosaicDataset', 'GPRemoveMosaicCatalogItems', 'GPBuildFootprints', 'GPBuildBoundary', 'GPComputeDirtyArea', 'GPBuildSeamlines', 'GPDeleteMosaicDataset', 'GPDefineOverviews', 'GPDefineNoData', 'GPBuildItemCache', 'GPBuildOverviews', 'GPImportMosaicGeometry', 'GPCopyRasterCatalogFeatures', 'GPDeleteRasterCatalogFeatures', 'GPCalculateSpatialReference', 'GPCreateRasterCatalogLayer', 'GPAltercolormap', 'GPDeletecolormap', 'GPAddAttributeTable', 'GPDropAttributeTable', 'GPLoadWsToRasterDs', 'GPLoadWs2RasterCatalog', 'GPAddRasters', 'GPCreateOrthoCorrectedRasterDs', 'GPCreatePansharpenedRasterDs', 'GPComputePansharpenWeights', 'GPClipRaster', 'GPResampleRaster', 'GPCompositeBands', 'GPBuildPyramids', 'GPBatchStatsPyramids', 'GPCalculateStatistics', 'GPRasterCatalogToRasterDataset', 'GPExtractSubdataset', 'GPCreateWorldFile', 'GPGetCellValue', 'GPMakeImageServerLayer', 'GPMakeWCSLayer', 'GPPostVersion', 'GPAssignDefaultToField', 'GPFC2FC', 'GPTable2Table', 'GPMerge', 'GPAdjust3DZ', 'GPCreateFishnet', 'GPFindRelationships', 'GPCreateThiessenPolygons', 'GPCreateCustomGeoTransformation', 'GPSpatialJoin', 'GPApplySymbologyFromLayer', 'GPMosaicToNewRaster', 'GPSplitRaster', 'GPCreateVideoFromImages', 'GPMakeLasDatasetLayer', 'GPColorBalancing', 'GPGenerateExcludeArea', 'GPConvertCoordinateNotation', 'GPBearingDistanceToLine', 'GPTableToEllipse', 'GPXYToLine', 'GPRasterToDTED', 'GPMakeMosaicLayer', 'GPDownloadRasters', 'GPWarpFromFile', 'GPAddRasterFunction', 'GPSetMosaicDatasetProperties', 'GPSetRasterProperties', 'GPComputeTiePoints', 'GPComputeAdjustments', 'GPApplyAdjustments', 'GPRegisterRaster', 'GPLocalCacheImportTileCache', 'GPLocalCacheExportTileCache', 'GPLocalCacheManageTileCache', 'GPGenerateCacheTilingScheme', 'GPFeaturesToJSON', 'GPJSONToFeatures', 'GeoProcessorOPs', 'GeoProcessorEventsHelper', 'GeoProcessorEventsHelper2', 'GeoProcessorEventsHelper3', 'GpPythonInterpreter', 'GpPythonExpression', 'GPArcFunctionFactory', 'GPArcUnion', 'GPArcClip', 'GPArcErase', 'GPArcIdentity', 'GPArcIntersect', 'GPArcUpdate', 'GPArcBuffer', 'GPArcThiessen', 'GPArcNear', 'GPArcPointDistance', 'GPArcBuild', 'GPArcClean', 'GPArcCreateLabels', 'GPArcIDEdit', 'GPArcAddXY', 'GPArcRenode', 'GPArcPointNode', 'GPArcDefineProjection', 'GPArcJoinItem', 'GPArcSplit', 'GPArcPolyRegion', 'GPArcRegionPoly', 'GPArcArcDLG', 'GPArcArcRoute', 'GPArcDLGArc', 'GPArcUngenerate', 'GPArcRegionClass', 'GPArcAddItem', 'GPArcIndexItem', 'GPArcDropIndex', 'GPArcDropItem', 'GPArcCenterline', 'GPArcFindConflicts', 'GPArcBuildingSimplify', 'GPArcLineSimplify', 'GPArcAreaAggregate', 'GPArcTolerance', 'GPArcDissolve', 'GPArcCreateCoverage', 'GPArcTransform', 'GPArcGenerate', 'GPArcImport', 'GPArcExport', 'GPArcS57Arc', 'GPArcArcS57', 'GPArcVPFImport', 'GPArcVPFExport', 'GPArcVPFTile', 'GPArcSDTSExport', 'GPArcSDTSImport', 'GPArcTigerArc', 'GPArcProject', 'GPArcAppend', 'GPArcTigerTool', 'GPArcReselect', 'GPArcEliminate', 'GPArcSelectChild', 'GPCartographyFuncFactory', 'GPFeaturesOutlinesToMasks', 'GPMasksForNonConnectedLines', 'GPLayersIntersectToMasks', 'AddRepresentation', 'DropRepresentation', 'RemoveOverride', 'UpdateOverride', 'AssignRule', 'SelectOverride', 'MakeRepresentationLayer', 'AddControlPoints', 'AddControlPointsAtIntersects', 'CalculatePolygonMainAngle', 'CalculateGeodesicAngle', 'CreateOverpass', 'CreateUnderpass', 'CalculateLineCaps', 'AlignMarker', 'DispersePoints', 'DetectOverlap', 'CalculateUTMZone', 'CalculateCentralMeridianAndParallels', 'CalculateGridConvergenceAngle', 'CalculateAdjacentFields', 'GridIndexFeatures', 'StripMapIndexFeatures', 'GPThinRoadNetwork', 'GPMergeDividedRoads', 'GPResolveRoadConflicts', 'GPPropagateDisplacement', 'GPResolveBuildingConflicts', 'GPCreatePartitions', 'GPCollapseRoadDetail', 'GPCreateBuiltUpAreas', 'MakeGridsAndGraticulesLayer', 'DeleteGridsAndGraticules', 'GPGeocodeAddresses', 'GPRebuildGeocodingIndexes', 'GPCreateAddressLocator', 'GPReverseGeocode', 'GPCreateCompositeAddressLocator', 'GPStandardizeAddresses', 'GPDeleteAddressLocator', 'GPAutomateGeocodingIndexes', 'GPDeautomateGeocodingIndexes', 'GPRematchAddresses', 'GPGeocodingFunctionFactory', 'GPBlockByAttribute', 'GPBlockByClass', 'GPBlockByProximity', 'GPCalculateCompressionParameters', 'GPCustomizeCompressionParameters', 'GPCompressDataset', 'GPCompressFileGeodatabaseData', 'GPUncompressDataset', 'GPFileGDBFunctionFactory', 'GPMakeNetCDFRasterLayer', 'GPRasterToNetCDF', 'GPSelectByDimension', 'GPMakeNetCDFTableView', 'GPTableToNetCDF', 'GPMakeNetCDFFeatureLayer', 'GPFeatureToNetCDF', 'GpNcFunctionFactory', 'GPSAGeoDataTypeName', 'GPRasterDataTypeFactory', 'GPRasterUtil', 'GPRasterFunctionFactory', 'GPSAASCIIToRaster', 'GPSADEMToRaster', 'GPSAFloatToRaster', 'GPSARasterToPoint', 'GPSARasterToPolygon', 'GPSARasterToPolyline', 'GPSAFeatureToRaster', 'GPSAMultipatchToRaster', 'GPSARasterToASCII', 'GPSARasterToFloat', 'GPSAMakeRasterLayer', 'GPGetRasterProperties', 'GPSARotate', 'GPSARescale', 'GPSAFlip', 'GPSAMirror', 'GPSAShift', 'GPSAWarp', 'GPSAProjectRaster', 'MdModelName', 'MdUtilities', 'MdDiagramProperties', 'MdDisplayNode', 'MdDisplayEdge', 'GPCompositeDataTypeName', 'GPValueTableTypeName', 'GPValueTableTypeNameProperty', 'GPUtilitiesUI', 'GeoprocessingAppHelper', 'GeoProcessorWorker', 'GPModelFunctionFactory', 'GPFieldValueIterator', 'GPFeatureClassIterator', 'GPTableIterator', 'GPRasterIterator', 'GPDatasetIterator', 'GPWorkspaceIterator', 'GPFileIterator', 'GPMultivalueIterator', 'GPFeatureSelectionIterator', 'GPRowSelectionIterator', 'GPCountIterator', 'GPConditionalIterator', 'GPStop', 'GPCollectValues', 'GPGetFieldValue', 'GPParsePath', 'GPConnectPoints', 'GPInMemoryToolboxName', 'GPInMemoryToolbox', 'GPPythonToolboxName', 'GPPythonToolbox', 'GPGraphDataTableTypeName', 'GPGraphDataTableType', 'GPGraphDataTable', 'GPGraphType', 'GPGraph', 'GPMakeGraph', 'GPSaveGraph', 'GPChangeVersion', 'GPRegisterWithGeodatabase', 'GPBackgroundObject', 'GPPythonScriptParseRecord', 'GPJobServerLP', 'GPJobServerIP', 'GPJobServerObjectDescription', 'GPJobRequest', 'GPJobResult', 'GPImportXMLWorkspaceDocument', 'GPExportXMLWorkspaceDocument', 'NAClassFieldMappingsHelper', 'NASolverPropertiesHelper', 'GPInternetTiledLayerType', 'GPInternetTiledLayer', 'GPMapServerLayerType', 'GPMapServerLayer', 'GPServerFunctionFactory', 'GPUpdateMapServerCache', 'GPManageMapServerCacheTiles', 'GPValidateMapServerCacheTiles', 'GPExportMapServerCache', 'GPImportMapServerCache', 'GPConvertMapServerCacheStorageFormat', 'GPDeleteMapServerCache', 'GPGenerateMapServerCache', 'GPCreateMapServerCache', 'GPGenerateMapServerCacheTilingScheme', 'GPUpdateMapServerCacheScales', 'ExportWebMap', 'GPESRIAvailableFonts', 'GPServerProxyHelper', 'GPServerCachingFunctionFactory', 'GPSuggestDefaultScales', 'GPManageMapCacheScales', 'GPServerCachingManageMapCacheTiles', 'GPServerCachingValidateMapCacheTiles', 'GPServerCachingManageMapCacheTilesWorker', 'GPServerCachingValidateMapCacheTilesWorker', 'GPServerCachingDeleteMapCache', 'GPServerCachingCreateMapCache', 'GPReportCacheStatus', 'GPConvertCacheStorageFormat', 'GPConvertCacheStorageFormatWorker', 'GPExportCacheWorker', 'GPExportCache', 'GPImportCacheWorker', 'GPImportCache', 'GPESRICreateFeatureServiceReplica', 'GPESRISyncFeatureServiceReplica', 'GPSAGeoDataDomain', 'GPSAGeoDataType', 'GPRasterFormulatedType', 'GPRasterFormulated', 'GPRAFieldDomain', 'GPRasterGDBEnvCompressionType', 'GPRasterGDBEnvCompression', 'GPRasterGDBEnvPyramidType', 'GPRasterGDBEnvPyramid', 'GPRasterGDBEnvStatisticsType', 'GPRasterGDBEnvStatistics', 'GPRasterGDBEnvTileSizeType', 'GPRasterGDBEnvTileSize', 'GPAnalysisCellSizeType', 'GPAnalysisCellSize', 'MapCacheTileManager', 'MapCacheTileManagerJobResultHandler', 'MapCacheTileManagerJob', 'GPRepresentationLayerDomain', 'GeocompareEngine', 'GeocompareResult', 'GeocompareReport', 'GPServerLP', 'GPServerIP', 'GPServerObjectDescription', 'GPToolInfo', 'GPToolInfos', 'GPParameterInfo', 'GPParameterInfos', 'GPValues', 'GPResult', 'GPResultOptions', 'GPServer', 'GPServerConfigurationFactory', 'GPServerSync', 'GPServerTrackCancel', 'GPJobServer', 'WPSServer', 'DBGridReporter', 'DBGrid', 'DBGridNeatline', 'DBGridMask', 'DBGridSegment', 'DBGridTick', 'DBGridLine', 'DBGridPoint', 'DBGridEndPoint', 'DBGridAnno', 'DBGridAnnoGroup', 'DBGridUtilities', 'CoordinateSystemRecordSet', 'SpatialReferenceCalculator', 'DBGridPattern', 'IID_IProtectNameGeoprocessing', 'IID_IGPProtectNames', 'IID_IGPEnvironment', 'IID_IGPEnvironmentManager', 'IID_IGPVariableManager', 'IID_IMdVariable', 'IID_IEnumMdVariable', 'IID_IGPToolboxName', 'IID_IGPToolName', 'IID_IEnumGPToolName', 'IID_IGPParameter', 'IID_IMdParameter', 'IID_IGPParameter2', 'IID_IBStringArray', 'IID_IGPFieldMap', 'IID_IGPFieldMapping', 'IID_IGPFieldInfo', 'IID_IGPFieldInfo2', 'IID_IGPFieldInfo3', 'IID_IGPFieldInfoProperty', 'IID_IGPFieldInfoProperty2', 'IID_IGPFieldInfoProperty3', 'IID_IGPValueTable', 'IID_IGPValueTableType', 'IID_IGPMultiValue', 'IID_IGPMultiValueType', 'IID_IGPMultiValueDataTypeName', 'IID_IGPVariant', 'IID_IGPBoolean', 'IID_IGPString', 'IID_IGPDate', 'IID_IGPDouble', 'IID_IGPLong', 'IID_IGPEnvelope', 'IID_IGPExtent', 'IID_IGPSpatialReference', 'IID_IGPCoordinateSystem', 'IID_IGPXYDomain', 'IID_IGPZDomain', 'IID_IGPMDomain', 'IID_IGPPoint', 'IID_IGPPoint2', 'IID_IGPPolygon', 'IID_IGPPolygon2', 'IID_IGPLine', 'IID_IGPLine2', 'IID_IGPFeatureLayer', 'IID_IGPRouteMeasureEventProperties', 'IID_IGPTableView', 'IID_IGPCodedValueDomainProperty', 'IID_IDataElementDomain', 'IID_IGPFieldInfoDomain', 'IID_IGPWorkspaceDomain', 'IID_IGPFileDomain', 'IID_IGPDatasetDomain', 'IID_IGPFeatureClassDomain', 'IID_IGPCoverageFeatureClassDomain', 'IID_IGPCoverageDomain', 'IID_IGPFieldDomain', 'IID_IGPFieldDomain2', 'IID_IGPArcInfoItemDomain', 'IID_IGPFeatureSchema', 'IID_IGPTableSchema', 'IID_IGPRasterSchema', 'IID_IGPContainerSchema', 'IID_IGPParameterEdit', 'IID_IGPParameterEdit2', 'IID_IGPEnvironmentImpl', 'IID_IEnumGPEnvironment', 'IID_IGPSchemaCheckImpl', 'IID_IGPDefaultNameList', 'IID_IGeoProcessorSettings', 'IID_IGeoProcessorSettings2', 'IID_IGPFunction', 'IID_IGPFunction2', 'IID_IGPFunctionName', 'IID_IGPFunctionFactory', 'IID_IGPFunctionFactory2', 'IID_IGPParseString', 'IID_IGPParseString2', 'IID_IGPUtilities', 'IID_IGPUtilities2', 'IID_IGPUtilities3', 'IID_IGPUtilities4', 'IID_IGPCompositeDataType', 'IID_IGPCompositeDomain', 'IID_IGPFileSupport', 'IID_IGPLinearUnit', 'IID_IGPArealUnit', 'IID_IGPLinearUnit2', 'IID_IGPRandomNumberGenerator', 'IID_IGPRasterLayer', 'IID_IGPNumericDomain', 'IID_IGPCompositeLayer', 'IID_IGPStandaloneTableCollection', 'IID_IDEUtilities', 'IID_IGPLayerSupport', 'IID_IGPValueExpression', 'IID_IGPCreateTiles', 'IID_IGPRecordSet', 'IID_IGPFeatureRecordSet', 'IID_IGPRasterData', 'IID_IGPLayerDescription', 'IID_IGPDataFile', 'IID_IGPRasterBuilder', 'IID_IGPCellSizeXY', 'IID_IGPTest', 'IID_IMdDisplayNode', 'IID_IMdDisplayEdge', 'IID_IMdDiagramProperties', 'IID_IMdVariable2', 'IID_IMdVariable3', 'IID_IMdList', 'IID_IMdModelIteration', 'IID_IMBProgressor', 'IID_IEnumGPToolboxName', 'IID_IGPParameterInfo', 'IID_IGPParameterInfos', 'IID_IGPToolInfo', 'IID_IGPToolboxEvents2', 'IID_IGPFunctionTool', 'IID_IGPScriptTool', 'IID_IGPScriptTool2', 'IID_IDEToolbox', 'IID_IDEToolbox2', 'IID_IGpEnumList', 'IID_IGpEnumObject', 'IID_IGpDescribeData', 'IID_IGpSpRefObject', 'IID_IGpValueTableObject', 'IID_IGpValueTableObject2', 'IID_IGPEnvironmentManagerImpl', 'IID_IGeoProcessorResult', 'IID_IGeoProcessorEvents3', 'IID_IGpObjectArray', 'IID_IGpDescribeGeometry', 'IID_IGpPointObject', 'IID_IGpPointObject2', 'IID_IGpRandomNumberGeneratorObject', 'IID_IGpCursorRow', 'IID_IGpCursorRow2', 'IID_IGpFieldMappingsObject', 'IID_IGpFieldMapObject', 'IID_IGpDescribeField', 'IID_IGpDescribeIndex', 'IID_IGpFieldInfoObject', 'IID_IGPNetCDFWorkspace', 'IID_IGPToolBackground', 'IID_IGPComHelper', 'IID_IGpDispatch', 'IID_IGPArc', 'IID_IGPLayersAndTablesDomain', 'IID_IGPTablesDomain', 'IID_IGPTablesDomain2', 'IID_IMdElementDialogSupport', 'IID_IEnumGPVariable', 'IID_IEnumGPDataType', 'IID_IEnumFieldType', 'IID_IEnumGeometryType', 'IID_IGPSAGeoDataDomain', 'IID_IGPGraphUtilitiesUI', 'IID_INAClassFieldMapItemHelperImpl', 'IID_INAClassFieldMappingsHelperImpl', 'IID_INASolverPropertiesHelperImpl', 'IID_IGPToolCommandHelperImpl', 'IID_IGPTableViewImpl', 'IID_IMdElementDebug', 'IID_IMdDiagramPropertiesImpl', 'IID_IToolboxWorkspaceImpl', 'IID_IGPServerTool', 'IID_IGPServerToolbox', 'IID_IGPFileSystemToolbox', 'IID_IGDBToolbox', 'IID_IGPToolboxNameImpl', 'IID_IGPToolImpl', 'IID_IGPTaskImpl', 'IID_IGPToolLicenseImpl', 'IID_IGPToolBackgroundImpl', 'IID_IGPToolLocalizeImpl', 'IID_IGPToolID', 'IID_IGPRecordSetImpl', 'IID_IMdDiagramState', 'IID_IThreadedTrackCancel', 'IID_IGeoProcessorWorker', 'IID_IGPScriptToolImpl', 'IID_IGPDefaultNameListImpl', 'IID_IGPWrapper', 'IID_IMdVariableImpl', 'IID_IMdElementImpl', 'IID_IGPEnvironmentImpl2', 'IID_IGPModelToolImpl', 'IID_IGPServerToolName', 'IID_IGPServerToolboxName', 'IID_IGPFunctionFactoryImpl', 'IID_IBuildCoverageFeatureClassName', 'IID_IBuildCoverageFeatureClassName2', 'IID_IGPPythonScriptTool', 'IID_IGPFunctionImpl', 'IID_ITransactionsObject', 'IID_IGeoprocessingAppHelper', 'IID_IGPUtilitiesImpl', 'IID_IGPSAGeoDataTypeName', 'IID_IGPRasterUtil', 'IID_IGPCompositeDataTypeName', 'IID_IGPValueTableTypeName', 'IID_IGPValueTableTypeNameProperty', 'IID_IGPGxFilter', 'IID_IDEUtilitiesImpl', 'IID_IGPEncryptedString', 'IID_IGPFieldInfo4', 'IID_IGpDispatchImpl', 'IID_IGpDispatchObjectImpl', 'IID_IGPFieldMapImpl', 'IID_IGPRandomNumberGeneratorImpl', 'IID_IGPFieldMappingImpl', 'IID_IGeoProcessorSettingsImpl', 'IID_IGPIterator', 'IID_IGPLayerEditTemplateManagerImpl', 'IID_IGPInMemoryToolbox', 'IID_IGPPythonToolbox', 'IID_IGPPythonToolboxName', 'IID_IGPDataTable', 'IID_IGPGraphDataTable', 'IID_IGPGraph', 'IID_IGPGraphUtilities', 'IID_IGPMosaicDatasetUtilities', 'IID_ILocalFunctionRasterEnv', 'IID_IJobResult', 'IID_IGPParseStringImpl', 'IID_IGPPythonScriptParseRecord', 'IID_IGPExportWebMapExtensionImpl', 'IID_IGPSAGeoDataType', 'IID_IGPRasterFormulated', 'IID_IGPRAFieldDomain', 'IID_IGPAnalysisCellSizeType', 'IID_IMapCacheTileManager', 'IID_IMapCacheTileManagerJobResultHandler', 'IID_IMapCacheTileManagerJob', 'IID_IGPRasterGDBEnvCompression', 'IID_IGPRasterGDBEnvPyramid', 'IID_IGPRasterGDBEnvPyramid2', 'IID_IGPRasterGDBEnvPyramid3', 'IID_IGPRasterGDBEnvStatistics', 'IID_IGPRasterGDBEnvTileSize', 'IID_IGPRasterEnvStorageDefAdvanced', 'IID_IGPFunctionPS', 'IID_IGPRasterFormulatedPS', 'IID_IGPAnalysisCellSizePS', 'IID_IGPSAGeoDataBase', 'IID_IGPSAValueTablePS', 'IID_IGPSAGeoValueTablePS', 'IID_IGPRasterValueTablePS', 'IID_IGPRepresentationLayerDomain', 'IID_IGeocompare', 'IID_IGeocompareResult', 'IID_IGeocompareReport', 'IID_IFeatureClassGeocompare', 'IID_ITableGeocompare', 'IID_IFieldGeocompare', 'IID_IRelationshipClassGeocompare', 'IID_ISubtypesGeocompare', 'IID_ISpatialReferenceGeocompare', 'IID_IGeometryGeocompare', 'IID_IRasterDatasetGeocompare', 'IID_IRasterGeocompare', 'IID_IRasterCatalogGeocompare', 'IID_IMosaicDatasetGeocompare', 'IID_ISDERasterDatasetGeocompare', 'IID_IFileGeocompare', 'IID_ITinGeocompare', 'IID_IGPValues', 'IID_IGPToolInfo2', 'IID_IGPToolInfos', 'IID_IGPResult', 'IID_IGPResultOptions', 'IID_IGPResultOptions2', 'IID_IGPServer', 'IID_IGPServer2', 'IID_IGPJobServerExe', 'IID_IGPServerSync', 'IID_IGPServerTrackCancel', 'IID_IGPServerTrackCancel2', 'IID_IGPServerExecute', 'IID_IGPServerDir', 'IID_ILogUsage', 'IID_IWPSServer', 'IID_IDBGridMask', 'IID_ICoordinateSystemRecordSet', 'IID_ICoordinateSystemZones', 'IID_ISpatialReferenceCalculator', 'IID_IDBGridPattern', 'IID_IDBGridAnnoGroup', 'IID_IDBGridAnno', 'IID_IDBGridEndPoint', 'IID_IDBGridTick', 'IID_IDBGridLine', 'IID_IDBGridPoint', 'IID_IDBGridSegment', 'IID_IDBGridNeatline', 'IID_IDBGrid', 'IID_IDBGridMessages', 'IID_IDBGridUtilities', 'IID_IMdModel', 'IID_IGPModelTool', 'IID_IMBImport', 'IID_IGPVariableManagerImpl', 'IID_IModelScriptConverter', 'IID_IMdElement', 'IID_IEnumMdElement', 'IID_IMdModelIteration2', 'IID_IMdModelName', 'IID_IEnumMdProcess', 'IID_IMdProcess', 'IID_IProcessLayer', 'IID_IMdModelEvents', 'IID_IGPTask', 'IID_IGeoProcessorResult2', 'IID_IGeoProcessorEvents2', 'IID_IMdModelImpl', 'IID_IModelScriptConverterEngineCallback', 'IID_IModelScriptConverterEngine', 'IID_IGPJobRequest', 'IID_IGPJobResult', 'IID_IGPJobServer', 'IID_IGPTool', 'IID_IEnumGPTool', 'IID_IGPToolboxEvents', 'IID_IGPToolEdit', 'IID_IGeoProcessorEvents', 'IID_IGeoProcessor', 'IID_IGeoProcessor2', 'IID_IGPToolCommandHelper', 'IID_IGPToolCommandHelper2', 'IID_IGPToolCache', 'IID_IGeoProcessorResultImpl', 'IID_IMdProcessImpl', 'IID_IAnalyzeTask', 'IID_IGPRuntimeSupport', 'IID_IGeoProcessorSupport', 'IID_IGpPythonInterpreter', 'IID_IGpPythonExpression', 'IID_IMdUtilities', 'IID_IMdUtilities2', 'IID_IMdUtilities3', 'IID_IGPToolbox', 'IID_IEnumGPToolbox', 'IID_IToolboxWorkspace', 'IID_IGPToolboxFactory', 'IID_IGPToolset', 'IID_IEnumGPToolset', 'IID_IGPToolboxCache', 'IID_IGPToolboxImpl', 'IID_IGPToolboxImplEvents', 'IID_IGxGPToolsetImpl', 'IID_IGeoProcessorImpl', 'IID_IArcToolboxExtensionImpl', 'IID_IGPInternalEnvironment', 'IID_ITaskAnalyzer', 'IID_IAnalyzeTaskToolbox', 'IID_IGPHolder', 'IID_IGPUtilitiesUI', 'IID_IGPToolExtension', 'IID_IGPToolExtensionFactory', 'IID_IGPCustomTool', 'IID_IGPCustomToolHelper', 'IID_IGPToolbox2', 'IID_IGPToolbox3', 'IID_IGPParameter3', 'IID_IGPSchema', 'IID_IGPParameterEdit3', 'IID_IGPToolExtensionGen', 'IID_IGPToolExtensionFactoryGen', 'IID_IGPCustomToolGen', 'IID_ISDMapper', 'IID_ISDMapping', 'IID_ISDConfigurationMapping', 'IID_ISDResourceMappingImpl', 'IID_ISDConfigurationMappingImpl', 'IID_IEnumSDDatabaseMapping', 'IID_ISDDatabaseMapping', 'IID_ISDDatasetMapping', 'IID_IEnumSDDatasetMapping', 'IID_ISDResourceMapping', 'IID_ISDMappingImpl', 'IID_ISDDatabaseMappingImpl', 'IID_ISDDatasetMappingImpl', 'IID_IEnumDBGridComponent', 'IID_IDBGridComponent', 'IID_IDBGridEnvironment', 'CLSID_GPBooleanType', 'CLSID_GPEncryptedStringType', 'CLSID_GPStringType', 'CLSID_GPDateType', 'CLSID_GPDoubleType', 'CLSID_GPLongType', 'CLSID_GPVariantType', 'CLSID_GPEnvelopeType', 'CLSID_GPSpatialReferenceType', 'CLSID_GPCoordinateSystemType', 'CLSID_GPXYDomainType', 'CLSID_GPZDomainType', 'CLSID_GPMDomainType', 'CLSID_GPPointType', 'CLSID_GPPolygonType', 'CLSID_GPLineType', 'CLSID_GPValueTableType', 'CLSID_GPValueTable', 'CLSID_GPFieldInfoType', 'CLSID_GPFieldInfo', 'CLSID_GPFieldInfoProperty', 'CLSID_GPFieldMappingType', 'CLSID_GPFieldMapping', 'CLSID_GPFieldMap', 'CLSID_GPMultiValueType', 'CLSID_GPMultiValueTypeName', 'CLSID_GPMultiValue', 'CLSID_GPVariant', 'CLSID_GPBoolean', 'CLSID_GPString', 'CLSID_GPEncryptedString', 'CLSID_GPDate', 'CLSID_GPDouble', 'CLSID_GPLong', 'CLSID_GPEnvelope', 'CLSID_GPSpatialReference', 'CLSID_GPCoordinateSystem', 'CLSID_GPXYDomain', 'CLSID_GPZDomain', 'CLSID_GPMDomain', 'CLSID_GPPoint', 'CLSID_GPPolygon', 'CLSID_GPLine', 'CLSID_GPLayerType', 'CLSID_GPFeatureLayerType', 'CLSID_GPFeatureLayer', 'CLSID_GPLayer', 'CLSID_GPRasterCatalogLayerType', 'CLSID_GPRasterCatalogLayer', 'CLSID_GPMosaicLayerType', 'CLSID_GPMosaicLayer', 'CLSID_GPTopologyLayerType', 'CLSID_GPTopologyLayer', 'CLSID_GPNetworkDatasetLayerType', 'CLSID_GPNetworkDatasetLayer', 'CLSID_GPRouteMeasureEventPropertiesType', 'CLSID_GPRouteMeasureEventProperties', 'CLSID_GPTinLayerType', 'CLSID_GPTinLayer', 'CLSID_GPTerrainLayerType', 'CLSID_GPTerrainLayer', 'CLSID_GPLasDatasetLayerType', 'CLSID_GPLasDatasetLayer', 'CLSID_GPCadastralFabricLayerType', 'CLSID_GPCadastralFabricLayer', 'CLSID_GPTableViewType', 'CLSID_GPTableView', 'CLSID_GPCodedValueDomain', 'CLSID_GPCodedValueDomainProperty', 'CLSID_GPRangeDomain', 'CLSID_GPWorkspaceDomain', 'CLSID_GPDatasetDomain', 'CLSID_GPFeatureClassDomain', 'CLSID_GPGdbAnnoDomain', 'CLSID_GPCovAnnoDomain', 'CLSID_GPCadAnnoDomain', 'CLSID_GPCoverageFeatureClassDomain', 'CLSID_GPCoverageDomain', 'CLSID_GPFieldDomain', 'CLSID_GPArcInfoItemDomain', 'CLSID_DataElementDomain', 'CLSID_GPFieldInfoDomain', 'CLSID_GPFileDomain', 'CLSID_GPParameter', 'CLSID_GPFeatureSchema', 'CLSID_GPTableSchema', 'CLSID_GPRasterSchema', 'CLSID_GPContainerSchema', 'CLSID_GPFunctionName', 'CLSID_GPVariable', 'CLSID_GPEnvironment', 'CLSID_GPParseString', 'CLSID_GPUtilities', 'CLSID_GPCompositeDataType', 'CLSID_GPCompositeDomain', 'CLSID_EnumBSTR', 'CLSID_EnumGPName', 'CLSID_EnumGPEnvironment', 'CLSID_GPLinearUnitType', 'CLSID_GPLinearUnit', 'CLSID_GPArealUnitType', 'CLSID_GPArealUnit', 'CLSID_GPRandomNumberGeneratorType', 'CLSID_GPRandomNumberGenerator', 'CLSID_GPSQLExpressionType', 'CLSID_GPSQLExpression', 'CLSID_GPINFOExpressionType', 'CLSID_GPINFOExpression', 'CLSID_GPType', 'CLSID_DEType', 'CLSID_DEDatasetType', 'CLSID_DEGeoDatasetType', 'CLSID_GPExtentType', 'CLSID_GPExtent', 'CLSID_GPNumericDomain', 'CLSID_GPRasterLayerType', 'CLSID_GPRasterLayer', 'CLSID_GPRouteDomain', 'CLSID_GPRouteMeasureEventDomain', 'CLSID_GPQueryTableFieldsDomain', 'CLSID_GPQueryTableIDsDomain', 'CLSID_GPVirtualTableDomain', 'CLSID_GPRouteIDFieldsDomain', 'CLSID_GPMeasureFieldsDomain', 'CLSID_GPFieldChoiceList', 'CLSID_GPArcInfoItemChoiceList', 'CLSID_GPGroupLayerType', 'CLSID_GPGroupLayer', 'CLSID_GPCompositeLayerType', 'CLSID_GPCompositeLayer', 'CLSID_GPCreateTiles', 'CLSID_GPTest', 'CLSID_DEUtilities', 'CLSID_GpVirtualPathParser', 'CLSID_StandaloneCatalogPathParser', 'CLSID_AGSCatalogPathParser', 'CLSID_AGOCatalogPathParser', 'CLSID_TaskServicesCatalogPathParser', 'CLSID_GDSCatalogPathParser', 'CLSID_ProcessLayerFactory', 'CLSID_ProcessLayer', 'CLSID_GPRecordSetType', 'CLSID_GPRecordSet', 'CLSID_GPRasterDataType', 'CLSID_GPRasterData', 'CLSID_GPFeatureRecordSetLayerType', 'CLSID_GPFeatureRecordSetLayer', 'CLSID_GPRasterDataLayerType', 'CLSID_GPRasterDataLayer', 'CLSID_GPDataFileType', 'CLSID_GPDataFile', 'CLSID_GPRasterBuilderType', 'CLSID_GPRasterBuilder', 'CLSID_WCSCatalogPathParser', 'CLSID_GPCellSizeXYType', 'CLSID_GPCellSizeXY', 'CLSID_GPCalculatorExpressionType', 'CLSID_GPCalculatorExpression', 'CLSID_MdVariable', 'CLSID_MdParameter', 'CLSID_MdProcess', 'CLSID_MdModel', 'CLSID_MdModelEventsHelper', 'CLSID_ToolboxWorkspaceFactory', 'CLSID_ToolboxWorkspaceExtension', 'CLSID_GPToolboxName', 'CLSID_GPToolName', 'CLSID_GPToolboxEventsHelper', 'CLSID_GPToolboxEvents2Helper', 'CLSID_DEToolbox', 'CLSID_DEToolboxType', 'CLSID_DETool', 'CLSID_DEToolType', 'CLSID_GeoProcessor', 'CLSID_GeoProcessorResult', 'CLSID_GPEnvironmentManager', 'CLSID_GpSpRefObject', 'CLSID_GpObjectArray', 'CLSID_GpPointObject', 'CLSID_GpRandomNumberGeneratorObject', 'CLSID_GpFieldMappingsObject', 'CLSID_GpFieldMapObject', 'CLSID_GpDescribeField', 'CLSID_GpValueTableObject', 'CLSID_GpFieldInfoObject', 'CLSID_GPNetCDFWorkspace', 'CLSID_GPHolder', 'CLSID_GpDispatch', 'CLSID_GPArc', 'CLSID_GPLayersAndTablesDomain', 'CLSID_GPTablesDomain', 'CLSID_SDMapper', 'CLSID_SDMapping', 'CLSID_SDDatabaseMapping', 'CLSID_SDDatasetMapping', 'CLSID_SDResourceMapping', 'CLSID_SDConfigurationMapping', 'CLSID_GPServerToolName', 'CLSID_GPServerToolboxName', 'CLSID_GPBuildCoverageFeatureClassName', 'CLSID_GPToolboxWorkspace', 'CLSID_GPToolbox', 'CLSID_GdbToolboxWorkspace', 'CLSID_GdbToolbox', 'CLSID_GPServerToolbox', 'CLSID_GPFunctionTool', 'CLSID_GPServerTool', 'CLSID_GPModelTool', 'CLSID_GPTask', 'CLSID_GPScriptTool', 'CLSID_TaskAnalyzer', 'CLSID_TaskSolutionBuilder', 'CLSID_AnalyzeToolScriptSyntaxError', 'CLSID_AnalyzeToolScriptBrokenSourceError', 'CLSID_AnalyzeToolScriptInvalidSourceError', 'CLSID_AnalyzeToolScriptNonExistingToolboxError', 'CLSID_AnalyzeToolInvalidError', 'CLSID_AnalyzeToolSDEBasedToolsError', 'CLSID_AnalyzeToolSDEBasedToolsWarning', 'CLSID_AnalyzeToolNonExistingProjectDataError', 'CLSID_AnalyzeToolUnsupportedNonDataStoreProjectDataError', 'CLSID_AnalyzeToolPathLengthProjectDataError', 'CLSID_AnalyzeToolNonDataStoreProjectDataWarning', 'CLSID_AnalyzeToolNonSupportedDataStoreProjectDataError', 'CLSID_AnalyzeToolPythonScriptToolboxImportingCustomScriptError', 'CLSID_AnalyzeToolTaskOutputNeedsMapServiceError', 'CLSID_AnalyzeToolCannotPublishListVariablesError', 'CLSID_AnalyzeToolTaskOutputCannotUserMapServiceError', 'CLSID_AnalyzeToolVBExpressionToolsError', 'CLSID_AnalyzeToolVBExpressionToolsWarning', 'CLSID_AnalyzeToolUnlicensedRuntimeToolsError', 'CLSID_AnalyzeToolUnlicensedServerToolsError', 'CLSID_AnalyzeToolNotValidForServerError', 'CLSID_AnalyzeToolDLLToolsError', 'CLSID_AnalyzeTaskMissingDescriptionError', 'CLSID_AnalyzeTaskMissingTagsError', 'CLSID_AnalyzeToolMissingMetadataSummaryError', 'CLSID_AnalyzeToolMissingMetadataParameterDescriptionError', 'CLSID_GPPythonScriptTool', 'CLSID_GPCustomTool', 'CLSID_GPToolExtensionFactoryWrapper', 'CLSID_GPToolExtensionWrapper', 'CLSID_GPToolboxImplEventsHelper', 'CLSID_GPInternalEnvironment', 'CLSID_ModelToPythonConverter', 'CLSID_ModelToVbscriptConverter', 'CLSID_ModelToJscriptConverter', 'CLSID_ModelScriptConverterEngine', 'CLSID_ModelToPythonConverterEngineCallback', 'CLSID_ModelToVbscriptConverterEngineCallback', 'CLSID_ModelToJscriptConverterEngineCallback', 'CLSID_GPCalculatorCallback', 'CLSID_GPDataTypeFactory', 'CLSID_GPESRIDataTypeFactory', 'CLSID_GPESRIFunctionFactory', 'CLSID_GPESRIConversionFunctionFactory', 'CLSID_GPESRIAnalysisFunctionFactory', 'CLSID_GPESRIDataManagementFunctionFactory', 'CLSID_GPESRIEditingFunctionFactory', 'CLSID_GPESRILinearReferencingFunctionFactory', 'CLSID_GPAdjust', 'CLSID_GPAppend', 'CLSID_GPAreaquery', 'CLSID_GPBuffer', 'CLSID_GPClip', 'CLSID_GPDissolve', 'CLSID_GPEliminate', 'CLSID_GPErase', 'CLSID_GPIdentity', 'CLSID_GPIntersect', 'CLSID_GPReselect', 'CLSID_GPSplit', 'CLSID_GPTransform', 'CLSID_GPUnion', 'CLSID_GPUpdate', 'CLSID_GPSymDiff', 'CLSID_GPBuildCover', 'CLSID_GPTabulate', 'CLSID_GPPolygonNeighbor', 'CLSID_GPImportE00', 'CLSID_GPDeleteRows', 'CLSID_GPDeleteFeatures', 'CLSID_GPCopyRows', 'CLSID_GPCopyFeatures', 'CLSID_GPAddField', 'CLSID_GPDropField', 'CLSID_GPCalculate', 'CLSID_GPDelete', 'CLSID_GPRename', 'CLSID_GPCreateLayer', 'CLSID_GPAddJoin', 'CLSID_GPDropJoin', 'CLSID_GPJoinItem', 'CLSID_GPMigrateStorage', 'CLSID_GPRemoveWorkspaceCache', 'CLSID_GPNear', 'CLSID_GPNearTable', 'CLSID_GPPointDistance', 'CLSID_GPCreateCentroids', 'CLSID_GPCreatePersonalGDB', 'CLSID_GPCreateFileGDB', 'CLSID_GPCreateArcInfoWorkspace', 'CLSID_GPCreateFolder', 'CLSID_GPCreateFeatureDataset', 'CLSID_GPCreateTable', 'CLSID_GPCreateFeatureClass', 'CLSID_GPCreateUnRegisteredTable', 'CLSID_GPCreateUnRegisteredFeatureClass', 'CLSID_GPAddRasterField', 'CLSID_GPAddXMLField', 'CLSID_GPAssignFieldAsSubtypeField', 'CLSID_GPAddSubtype', 'CLSID_GPRemoveSubtype', 'CLSID_GPCreateRelationshipClass', 'CLSID_GPCreateRelationshipClassFromTable', 'CLSID_GPAnalyze', 'CLSID_GPAnalyzeDatasets', 'CLSID_GPRebuildIndexes', 'CLSID_GPChangePrivileges', 'CLSID_GPCreateVersionedView', 'CLSID_GPDisableEditorTracking', 'CLSID_GPEnableEditorTracking', 'CLSID_GPCreateVersion', 'CLSID_GPDeleteVersion', 'CLSID_GPReconcileVersion', 'CLSID_GPReconcileVersions', 'CLSID_GPRegisterAsVersioned', 'CLSID_GPUnregisterAsVersioned', 'CLSID_GPAlterVersion', 'CLSID_GPCreateCADXData', 'CLSID_GPExportCAD', 'CLSID_GPImportCAD', 'CLSID_GPCadToGeodatabase', 'CLSID_GPAssignCADAlias', 'CLSID_GPAddCADFields', 'CLSID_GPCreateIndex', 'CLSID_GPDeleteIndex', 'CLSID_GPRebuildAttributeIndexes', 'CLSID_GPCreateSpatialIndex', 'CLSID_GPDropSpatialIndex', 'CLSID_GPSelect', 'CLSID_GPTableSelect', 'CLSID_GPCreateEnvelopes', 'CLSID_GPCreatePoints', 'CLSID_GPCreateLines', 'CLSID_GPCreateAreas', 'CLSID_GPExtendLine', 'CLSID_GPPolyLine', 'CLSID_GPSplitLines', 'CLSID_GPPivotTable', 'CLSID_GPCreateTableView', 'CLSID_GPSetSubtypeField', 'CLSID_GPSetDefaultSubtype', 'CLSID_GPLineSimplify', 'CLSID_GPCreateDomain', 'CLSID_GPDeleteDomain', 'CLSID_GPAddCodedValue', 'CLSID_GPDeleteCodedValue', 'CLSID_GPSetValueForRangeDomain', 'CLSID_GPAssignDomainToField', 'CLSID_GPRemoveDomainFromField', 'CLSID_GPDomainFromTable', 'CLSID_GPTableFromDomain', 'CLSID_GPSortCodedValueDomain', 'CLSID_GPTruncateTable', 'CLSID_GPExplode', 'CLSID_GPVegematic', 'CLSID_GPFindDupFeatures', 'CLSID_GPDeleteDupFeatures', 'CLSID_GPTrimLine', 'CLSID_GPWeedFeatures', 'CLSID_GPDensifyFeatures', 'CLSID_GPSnapFeatures', 'CLSID_GPEraseClipFeatures', 'CLSID_GPFlipFeatures', 'CLSID_GPUnsplitLineFeatures', 'CLSID_GPSortFeatures', 'CLSID_GPSplitLineAtPointFeatures', 'CLSID_GPSelectData', 'CLSID_GPCompress', 'CLSID_GPCompact', 'CLSID_GPCheckOut', 'CLSID_GPCheckIn', 'CLSID_GPCreateArcSDEConnectionFile', 'CLSID_GPCreateDatabaseConnection', 'CLSID_GPCreateDatabaseView', 'CLSID_GPZScoreRendering', 'CLSID_GPCountRendering', 'CLSID_GPPackageLayer', 'CLSID_GPPackageMap', 'CLSID_GPPackageToolbox', 'CLSID_GPPackageMapTile', 'CLSID_GPPublishPackage', 'CLSID_GPStageService', 'CLSID_GPExtractPackage', 'CLSID_GPUploadServiceDefinition', 'CLSID_GPSignInToPortal', 'CLSID_GPSignOutFromPortal', 'CLSID_GPPublishServiceDefinition', 'CLSID_GPValidateServerDataStore', 'CLSID_GPGetDatabaseConnectionString', 'CLSID_GPGetCacheInfo', 'CLSID_GPDownloadPortalItemData', 'CLSID_GPAnalyzeFeaturesForPortal', 'CLSID_GPGenerateFeaturesForPortal', 'CLSID_GPStageFeatureServiceFromFile', 'CLSID_GPPublishPortalService', 'CLSID_GPConsolidateLayer', 'CLSID_GPConsolidateMap', 'CLSID_GPConsolidateToolbox', 'CLSID_GPConsolidateResult', 'CLSID_GPPackageResult', 'CLSID_GPConsolidateLocator', 'CLSID_GPPackageLocator', 'CLSID_GPCreateEnterpriseGeodatabase', 'CLSID_GPEnableEnterpriseGeodatabase', 'CLSID_GPCreateSpatialType', 'CLSID_GPCreateDatabaseUser', 'CLSID_GPAddIncrementingIDField', 'CLSID_GPCreateRole', 'CLSID_GPRecoverFileGDB', 'CLSID_GPUpgradeSpatialReference', 'CLSID_GPUpgradeDataset', 'CLSID_GPUpgradeGDB', 'CLSID_GPEnableAttachments', 'CLSID_GPDisableAttachments', 'CLSID_GPAddAttachments', 'CLSID_GPRemoveAttachments', 'CLSID_GPGenerateAttachmentMatchTable', 'CLSID_GPEnableArchiving', 'CLSID_GPDisableArchiving', 'CLSID_GPCreateGeometricNetwork', 'CLSID_GPAddEdgeJunctionConnectivityRuleToGeometricNetwork', 'CLSID_GPAddEdgeEdgeConnectivityRuleToGeometricNetwork', 'CLSID_GPRemoveConnectivityRuleFromGeometricNetwork', 'CLSID_GPRemoveEmptyFeatureClassFromGeometricNetwork', 'CLSID_GPTraceGeometricNetwork', 'CLSID_GPSetFlowDirection', 'CLSID_GPExportTopologyErrors', 'CLSID_GPTransposeFields', 'CLSID_GPCalculateEndTime', 'CLSID_GPConvertTimeField', 'CLSID_GPConvertTimeZone', 'CLSID_GPCreateReplicaFromServer', 'CLSID_GPCreateReplica', 'CLSID_GPSynchronize', 'CLSID_GPExportDataChangeMessage', 'CLSID_GPExportAcknowledgementMessage', 'CLSID_GPImportMessage', 'CLSID_GPExportReplicaSchema', 'CLSID_GPReExportUnacknowledgedMessages', 'CLSID_GPCompareReplicaSchema', 'CLSID_GPImportReplicaSchema', 'CLSID_GPCreateReplicaLayer', 'CLSID_GPAdd_Global_IDs', 'CLSID_GPWFSExtract', 'CLSID_GPLineSmooth', 'CLSID_GPSaveLayer', 'CLSID_GPAddXY', 'CLSID_GPCopy', 'CLSID_GPFrequency', 'CLSID_GPStatistics', 'CLSID_GPProjectDefine', 'CLSID_GPProject', 'CLSID_GPSelectLayerAttribute', 'CLSID_GPSelectLayerLocation', 'CLSID_GPMakeQueryLayer', 'CLSID_GPCalculateDefaultGridIndex', 'CLSID_GPCalculateDefaultClusterTolerance', 'CLSID_GPCreateTopology', 'CLSID_GPAddFeatureClassToTopology', 'CLSID_GPRemoveFeatureClassFromTopology', 'CLSID_GPAddRuleToTopology', 'CLSID_GPRemoveRuleFromTopology', 'CLSID_GPValidateTopology', 'CLSID_GPSetClusterTolerance', 'CLSID_GPGetCount', 'CLSID_GPExportDeltaDatabase', 'CLSID_GPCheckInDeltaDatabase', 'CLSID_GPIntegrate', 'CLSID_GPCheckGeometries', 'CLSID_GPRepairGeometries', 'CLSID_GPCalculateValue', 'CLSID_GPMergeBranch', 'CLSID_GPMakeXYEventLayer', 'CLSID_GPMakeRouteEventLayer', 'CLSID_GPDissolveEvents', 'CLSID_GPOverlayEvents', 'CLSID_GPTransformRouteMeasureEvents', 'CLSID_GPLocateFeaturesAlongRoutes', 'CLSID_GPCreateRoutes', 'CLSID_GPCalibrateRoutes', 'CLSID_GPMakeQueryTable', 'CLSID_GPFeatureGeocompare', 'CLSID_GPRasterGeocompare', 'CLSID_GPTableGeocompare', 'CLSID_GPFileGeocompare', 'CLSID_GPTinGeocompare', 'CLSID_GPAggregatePolygons', 'CLSID_GPCollapseDualLines', 'CLSID_GPSimplifyBuilding', 'CLSID_GPSimplifyPolygon', 'CLSID_GPSmoothPolygon', 'CLSID_GPAggregatePoints', 'CLSID_GPUpdateAnno', 'CLSID_GPAppendAnno', 'CLSID_GPImportCovAnno', 'CLSID_GPImportCadAnno', 'CLSID_GPCreateRasterDataset', 'CLSID_GPCopyRaster', 'CLSID_GPContourRasterBarrier', 'CLSID_GPTiledLabelsToAnnotation', 'CLSID_GPMapServerCacheTilingSchemeToPolygons', 'CLSID_GPContourAnnotation', 'CLSID_GPMosaic', 'CLSID_GPCreateRandomPoints', 'CLSID_GPConvexHull', 'CLSID_GPEliminatePolygonPart', 'CLSID_GPRepairRasterCatalogPaths', 'CLSID_GPExportRasterCatalogPaths', 'CLSID_GPCreateRandomRaster', 'CLSID_GPPolygon2Raster', 'CLSID_GPPolyline2Raster', 'CLSID_GPPoint2Raster', 'CLSID_GPCreateRasterCatalog', 'CLSID_GPCreateMosaicDataset', 'CLSID_GPExportMosaicDatasetPaths', 'CLSID_GPRepairMosaicDatasetPaths', 'CLSID_GPMergeMosaicDatasetItems', 'CLSID_GPSplitMosaicDatasetItems', 'CLSID_GPAlterMosaicDatasetSchema', 'CLSID_GPCreateReferencedMosaicDataset', 'CLSID_GPCalculateCellSizeRanges', 'CLSID_GPSynchronizeMosaicDataset', 'CLSID_GPAnalyzeMosaicDataset', 'CLSID_GPRemoveMosaicCatalogItems', 'CLSID_GPBuildFootprints', 'CLSID_GPBuildBoundary', 'CLSID_GPComputeDirtyArea', 'CLSID_GPBuildSeamlines', 'CLSID_GPDeleteMosaicDataset', 'CLSID_GPDefineOverviews', 'CLSID_GPDefineNoData', 'CLSID_GPBuildItemCache', 'CLSID_GPBuildOverviews', 'CLSID_GPImportMosaicGeometry', 'CLSID_GPCopyRasterCatalogFeatures', 'CLSID_GPDeleteRasterCatalogFeatures', 'CLSID_GPCalculateSpatialReference', 'CLSID_GPCreateRasterCatalogLayer', 'CLSID_GPAltercolormap', 'CLSID_GPDeletecolormap', 'CLSID_GPAddAttributeTable', 'CLSID_GPDropAttributeTable', 'CLSID_GPLoadWsToRasterDs', 'CLSID_GPLoadWs2RasterCatalog', 'CLSID_GPAddRasters', 'CLSID_GPCreateOrthoCorrectedRasterDs', 'CLSID_GPCreatePansharpenedRasterDs', 'CLSID_GPComputePansharpenWeights', 'CLSID_GPClipRaster', 'CLSID_GPResampleRaster', 'CLSID_GPCompositeBands', 'CLSID_GPBuildPyramids', 'CLSID_GPBatchStatsPyramids', 'CLSID_GPCalculateStatistics', 'CLSID_GPRasterCatalogToRasterDataset', 'CLSID_GPExtractSubdataset', 'CLSID_GPCreateWorldFile', 'CLSID_GPGetCellValue', 'CLSID_GPMakeImageServerLayer', 'CLSID_GPMakeWCSLayer', 'CLSID_GPPostVersion', 'CLSID_GPAssignDefaultToField', 'CLSID_GPFC2FC', 'CLSID_GPTable2Table', 'CLSID_GPMerge', 'CLSID_GPAdjust3DZ', 'CLSID_GPCreateFishnet', 'CLSID_GPFindRelationships', 'CLSID_GPCreateThiessenPolygons', 'CLSID_GPCreateCustomGeoTransformation', 'CLSID_GPSpatialJoin', 'CLSID_GPApplySymbologyFromLayer', 'CLSID_GPMosaicToNewRaster', 'CLSID_GPSplitRaster', 'CLSID_GPCreateVideoFromImages', 'CLSID_GPMakeLasDatasetLayer', 'CLSID_GPColorBalancing', 'CLSID_GPGenerateExcludeArea', 'CLSID_GPConvertCoordinateNotation', 'CLSID_GPBearingDistanceToLine', 'CLSID_GPTableToEllipse', 'CLSID_GPXYToLine', 'CLSID_GPRasterToDTED', 'CLSID_GPMakeMosaicLayer', 'CLSID_GPDownloadRasters', 'CLSID_GPWarpFromFile', 'CLSID_GPAddRasterFunction', 'CLSID_GPSetMosaicDatasetProperties', 'CLSID_GPSetRasterProperties', 'CLSID_GPComputeTiePoints', 'CLSID_GPComputeAdjustments', 'CLSID_GPApplyAdjustments', 'CLSID_GPRegisterRaster', 'CLSID_GPLocalCacheImportTileCache', 'CLSID_GPLocalCacheExportTileCache', 'CLSID_GPLocalCacheManageTileCache', 'CLSID_GPGenerateCacheTilingScheme', 'CLSID_GPFeaturesToJSON', 'CLSID_GPJSONToFeatures', 'CLSID_GeoProcessorOPs', 'CLSID_GeoProcessorEventsHelper', 'CLSID_GeoProcessorEventsHelper2', 'CLSID_GeoProcessorEventsHelper3', 'CLSID_GpPythonInterpreter', 'CLSID_GpPythonExpression', 'CLSID_GPArcFunctionFactory', 'CLSID_GPArcUnion', 'CLSID_GPArcClip', 'CLSID_GPArcErase', 'CLSID_GPArcIdentity', 'CLSID_GPArcIntersect', 'CLSID_GPArcUpdate', 'CLSID_GPArcBuffer', 'CLSID_GPArcThiessen', 'CLSID_GPArcNear', 'CLSID_GPArcPointDistance', 'CLSID_GPArcBuild', 'CLSID_GPArcClean', 'CLSID_GPArcCreateLabels', 'CLSID_GPArcIDEdit', 'CLSID_GPArcAddXY', 'CLSID_GPArcRenode', 'CLSID_GPArcPointNode', 'CLSID_GPArcDefineProjection', 'CLSID_GPArcJoinItem', 'CLSID_GPArcSplit', 'CLSID_GPArcPolyRegion', 'CLSID_GPArcRegionPoly', 'CLSID_GPArcArcDLG', 'CLSID_GPArcArcRoute', 'CLSID_GPArcDLGArc', 'CLSID_GPArcUngenerate', 'CLSID_GPArcRegionClass', 'CLSID_GPArcAddItem', 'CLSID_GPArcIndexItem', 'CLSID_GPArcDropIndex', 'CLSID_GPArcDropItem', 'CLSID_GPArcCenterline', 'CLSID_GPArcFindConflicts', 'CLSID_GPArcBuildingSimplify', 'CLSID_GPArcLineSimplify', 'CLSID_GPArcAreaAggregate', 'CLSID_GPArcTolerance', 'CLSID_GPArcDissolve', 'CLSID_GPArcCreateCoverage', 'CLSID_GPArcTransform', 'CLSID_GPArcGenerate', 'CLSID_GPArcImport', 'CLSID_GPArcExport', 'CLSID_GPArcS57Arc', 'CLSID_GPArcArcS57', 'CLSID_GPArcVPFImport', 'CLSID_GPArcVPFExport', 'CLSID_GPArcVPFTile', 'CLSID_GPArcSDTSExport', 'CLSID_GPArcSDTSImport', 'CLSID_GPArcTigerArc', 'CLSID_GPArcProject', 'CLSID_GPArcAppend', 'CLSID_GPArcTigerTool', 'CLSID_GPArcReselect', 'CLSID_GPArcEliminate', 'CLSID_GPArcSelectChild', 'CLSID_GPCartographyFuncFactory', 'CLSID_GPFeaturesOutlinesToMasks', 'CLSID_GPMasksForNonConnectedLines', 'CLSID_GPLayersIntersectToMasks', 'CLSID_AddRepresentation', 'CLSID_DropRepresentation', 'CLSID_RemoveOverride', 'CLSID_UpdateOverride', 'CLSID_AssignRule', 'CLSID_SelectOverride', 'CLSID_MakeRepresentationLayer', 'CLSID_AddControlPoints', 'CLSID_AddControlPointsAtIntersects', 'CLSID_CalculatePolygonMainAngle', 'CLSID_CalculateGeodesicAngle', 'CLSID_CreateOverpass', 'CLSID_CreateUnderpass', 'CLSID_CalculateLineCaps', 'CLSID_AlignMarker', 'CLSID_DispersePoints', 'CLSID_DetectOverlap', 'CLSID_CalculateUTMZone', 'CLSID_CalculateCentralMeridianAndParallels', 'CLSID_CalculateGridConvergenceAngle', 'CLSID_CalculateAdjacentFields', 'CLSID_GridIndexFeatures', 'CLSID_StripMapIndexFeatures', 'CLSID_GPThinRoadNetwork', 'CLSID_GPMergeDividedRoads', 'CLSID_GPResolveRoadConflicts', 'CLSID_GPPropagateDisplacement', 'CLSID_GPResolveBuildingConflicts', 'CLSID_GPCreatePartitions', 'CLSID_GPCollapseRoadDetail', 'CLSID_GPCreateBuiltUpAreas', 'CLSID_MakeGridsAndGraticulesLayer', 'CLSID_DeleteGridsAndGraticules', 'CLSID_GPGeocodeAddresses', 'CLSID_GPRebuildGeocodingIndexes', 'CLSID_GPCreateAddressLocator', 'CLSID_GPReverseGeocode', 'CLSID_GPCreateCompositeAddressLocator', 'CLSID_GPStandardizeAddresses', 'CLSID_GPDeleteAddressLocator', 'CLSID_GPAutomateGeocodingIndexes', 'CLSID_GPDeautomateGeocodingIndexes', 'CLSID_GPRematchAddresses', 'CLSID_GPGeocodingFunctionFactory', 'CLSID_GPBlockByAttribute', 'CLSID_GPBlockByClass', 'CLSID_GPBlockByProximity', 'CLSID_GPCalculateCompressionParameters', 'CLSID_GPCustomizeCompressionParameters', 'CLSID_GPCompressDataset', 'CLSID_GPCompressFileGeodatabaseData', 'CLSID_GPUncompressDataset', 'CLSID_GPFileGDBFunctionFactory', 'CLSID_GPMakeNetCDFRasterLayer', 'CLSID_GPRasterToNetCDF', 'CLSID_GPSelectByDimension', 'CLSID_GPMakeNetCDFTableView', 'CLSID_GPTableToNetCDF', 'CLSID_GPMakeNetCDFFeatureLayer', 'CLSID_GPFeatureToNetCDF', 'CLSID_GpNcFunctionFactory', 'CLSID_GPSAGeoDataTypeName', 'CLSID_GPRasterDataTypeFactory', 'CLSID_GPRasterUtil', 'CLSID_GPRasterFunctionFactory', 'CLSID_GPSAASCIIToRaster', 'CLSID_GPSADEMToRaster', 'CLSID_GPSAFloatToRaster', 'CLSID_GPSARasterToPoint', 'CLSID_GPSARasterToPolygon', 'CLSID_GPSARasterToPolyline', 'CLSID_GPSAFeatureToRaster', 'CLSID_GPSAMultipatchToRaster', 'CLSID_GPSARasterToASCII', 'CLSID_GPSARasterToFloat', 'CLSID_GPSAMakeRasterLayer', 'CLSID_GPGetRasterProperties', 'CLSID_GPSARotate', 'CLSID_GPSARescale', 'CLSID_GPSAFlip', 'CLSID_GPSAMirror', 'CLSID_GPSAShift', 'CLSID_GPSAWarp', 'CLSID_GPSAProjectRaster', 'CLSID_MdModelName', 'CLSID_MdUtilities', 'CLSID_MdDiagramProperties', 'CLSID_MdDisplayNode', 'CLSID_MdDisplayEdge', 'CLSID_GPCompositeDataTypeName', 'CLSID_GPValueTableTypeName', 'CLSID_GPValueTableTypeNameProperty', 'CLSID_GPUtilitiesUI', 'CLSID_GeoprocessingAppHelper', 'CLSID_GeoProcessorWorker', 'CLSID_GPModelFunctionFactory', 'CLSID_GPFieldValueIterator', 'CLSID_GPFeatureClassIterator', 'CLSID_GPTableIterator', 'CLSID_GPRasterIterator', 'CLSID_GPDatasetIterator', 'CLSID_GPWorkspaceIterator', 'CLSID_GPFileIterator', 'CLSID_GPMultivalueIterator', 'CLSID_GPFeatureSelectionIterator', 'CLSID_GPRowSelectionIterator', 'CLSID_GPCountIterator', 'CLSID_GPConditionalIterator', 'CLSID_GPStop', 'CLSID_GPCollectValues', 'CLSID_GPGetFieldValue', 'CLSID_GPParsePath', 'CLSID_GPConnectPoints', 'CLSID_GPInMemoryToolboxName', 'CLSID_GPInMemoryToolbox', 'CLSID_GPPythonToolboxName', 'CLSID_GPPythonToolbox', 'CLSID_GPGraphDataTableTypeName', 'CLSID_GPGraphDataTableType', 'CLSID_GPGraphDataTable', 'CLSID_GPGraphType', 'CLSID_GPGraph', 'CLSID_GPMakeGraph', 'CLSID_GPSaveGraph', 'CLSID_GPChangeVersion', 'CLSID_GPRegisterWithGeodatabase', 'CLSID_GPBackgroundObject', 'CLSID_GPPythonScriptParseRecord', 'CLSID_GPJobServerLP', 'CLSID_GPJobServerIP', 'CLSID_GPJobServerObjectDescription', 'CLSID_GPJobRequest', 'CLSID_GPJobResult', 'CLSID_GPImportXMLWorkspaceDocument', 'CLSID_GPExportXMLWorkspaceDocument', 'CLSID_NAClassFieldMappingsHelper', 'CLSID_NASolverPropertiesHelper', 'CLSID_GPInternetTiledLayerType', 'CLSID_GPInternetTiledLayer', 'CLSID_GPMapServerLayerType', 'CLSID_GPMapServerLayer', 'CLSID_GPServerFunctionFactory', 'CLSID_GPUpdateMapServerCache', 'CLSID_GPManageMapServerCacheTiles', 'CLSID_GPValidateMapServerCacheTiles', 'CLSID_GPExportMapServerCache', 'CLSID_GPImportMapServerCache', 'CLSID_GPConvertMapServerCacheStorageFormat', 'CLSID_GPDeleteMapServerCache', 'CLSID_GPGenerateMapServerCache', 'CLSID_GPCreateMapServerCache', 'CLSID_GPGenerateMapServerCacheTilingScheme', 'CLSID_GPUpdateMapServerCacheScales', 'CLSID_ExportWebMap', 'CLSID_GPESRIAvailableFonts', 'CLSID_GPServerProxyHelper', 'CLSID_GPServerCachingFunctionFactory', 'CLSID_GPSuggestDefaultScales', 'CLSID_GPManageMapCacheScales', 'CLSID_GPServerCachingManageMapCacheTiles', 'CLSID_GPServerCachingValidateMapCacheTiles', 'CLSID_GPServerCachingManageMapCacheTilesWorker', 'CLSID_GPServerCachingValidateMapCacheTilesWorker', 'CLSID_GPServerCachingDeleteMapCache', 'CLSID_GPServerCachingCreateMapCache', 'CLSID_GPReportCacheStatus', 'CLSID_GPConvertCacheStorageFormat', 'CLSID_GPConvertCacheStorageFormatWorker', 'CLSID_GPExportCacheWorker', 'CLSID_GPExportCache', 'CLSID_GPImportCacheWorker', 'CLSID_GPImportCache', 'CLSID_GPESRICreateFeatureServiceReplica', 'CLSID_GPESRISyncFeatureServiceReplica', 'CLSID_GPSAGeoDataDomain', 'CLSID_GPSAGeoDataType', 'CLSID_GPRasterFormulatedType', 'CLSID_GPRasterFormulated', 'CLSID_GPRAFieldDomain', 'CLSID_GPRasterGDBEnvCompressionType', 'CLSID_GPRasterGDBEnvCompression', 'CLSID_GPRasterGDBEnvPyramidType', 'CLSID_GPRasterGDBEnvPyramid', 'CLSID_GPRasterGDBEnvStatisticsType', 'CLSID_GPRasterGDBEnvStatistics', 'CLSID_GPRasterGDBEnvTileSizeType', 'CLSID_GPRasterGDBEnvTileSize', 'CLSID_GPAnalysisCellSizeType', 'CLSID_GPAnalysisCellSize', 'CLSID_MapCacheTileManager', 'CLSID_MapCacheTileManagerJobResultHandler', 'CLSID_MapCacheTileManagerJob', 'CLSID_GPRepresentationLayerDomain', 'CLSID_GeocompareEngine', 'CLSID_GeocompareResult', 'CLSID_GeocompareReport', 'CLSID_GPServerLP', 'CLSID_GPServerIP', 'CLSID_GPServerObjectDescription', 'CLSID_GPToolInfo', 'CLSID_GPToolInfos', 'CLSID_GPParameterInfo', 'CLSID_GPParameterInfos', 'CLSID_GPValues', 'CLSID_GPResult', 'CLSID_GPResultOptions', 'CLSID_GPServer', 'CLSID_GPServerConfigurationFactory', 'CLSID_GPServerSync', 'CLSID_GPServerTrackCancel', 'CLSID_GPJobServer', 'CLSID_WPSServer', 'CLSID_DBGridReporter', 'CLSID_DBGrid', 'CLSID_DBGridNeatline', 'CLSID_DBGridMask', 'CLSID_DBGridSegment', 'CLSID_DBGridTick', 'CLSID_DBGridLine', 'CLSID_DBGridPoint', 'CLSID_DBGridEndPoint', 'CLSID_DBGridAnno', 'CLSID_DBGridAnnoGroup', 'CLSID_DBGridUtilities', 'CLSID_CoordinateSystemRecordSet', 'CLSID_SpatialReferenceCalculator', 'CLSID_DBGridPattern', 'esriMdElementState', 'esriMdDirection', 'esriMdConnectionType', 'esriGPToolType', 'esriGPParameterDirection', 'esriGPParameterType', 'esriGPFieldMapMergeRule', 'esriGPFieldInfoMergeRule', 'esriGPFieldInfoSplitRule', 'esriGPExtentEnum', 'esriRandomNumberGeneratorType', 'esriRandomDistributionType', 'esriGPSchemaFieldsType', 'esriGPSchemaGeometryType', 'esriGPSchemaFeatureType', 'esriGPSchemaExtentType', 'esriGPSchemaCellSizeType', 'esriGPSchemaRasterType', 'esriGPSchemaRasterFormatType', 'esriGPTimeIntervalType', 'esriModelDiagramNodeType', 'esriModelDiagramNodeShape', 'esriModelDiagramEdgeStyle', 'esriModelDiagramLayoutQuality', 'esriModelDiagramLevelOrientation', 'esriModelDiagramLevelConstraint', 'esriModelDiagramLevelAlignment', 'esriModelDiagramGridType', 'esriMdListType', 'esriMdIterationType', 'esriGPInternalEnvironmentType', 'esriBuildCoverageFeatureClassType', 'esriRasterDistributionEnum', 'esriMultiBandOutputEnum', 'esriExecutionType', 'esriGPServerMessageCodeEnum', 'esriWPSHttpVerb', 'esriWPSServerMessageCodeEnum', 'esriGMFeatureClassType', 'esriGMDistanceType', 'esriGMNeatlineType', 'esriGMNeatlineSetting', 'esriGMMaskType', 'esriGMCoordinateSystemType', 'esriGMCoordinateSystemMethod', 'esriGMOrientation', 'esriGMIntervalType', 'esriGMRepetitionType', 'esriGMStartType', 'esriGMSegmentType', 'esriGMSectionOrigin', 'esriGMAngleType', 'esriGMTickType', 'esriGMTickCornerType', 'esriGMTickDirection', 'esriGMAnnotateXY', 'esriGMAnnoFormat', 'esriGMAnnoFormatType', 'esriGMEndPointPosition', 'esriGMEndPointSelection', 'esriGMNeatlineDensificationType', 'esriGMPerpendicularity', 'esriGMZoneSelectionRule', 'esriGMSpatialReferenceType', 'esriGMReferenceScaleType', 'esriGMRotationType', 'esriGMMessageSeverity']
from pytexportutils import _esriGeoprocessing
from pytexportutils._esriGeoprocessing import GPBooleanType, GPEncryptedStringType, GPStringType, GPDateType, GPDoubleType, GPLongType, GPVariantType, GPEnvelopeType, GPSpatialReferenceType, GPCoordinateSystemType, GPXYDomainType, GPZDomainType, GPMDomainType, GPPointType, GPPolygonType, GPLineType, GPValueTableType, GPValueTable, GPFieldInfoType, GPFieldInfo, GPFieldInfoProperty, GPFieldMappingType, GPFieldMapping, GPFieldMap, GPMultiValueType, GPMultiValueTypeName, GPMultiValue, GPVariant, GPBoolean, GPString, GPEncryptedString, GPDate, GPDouble, GPLong, GPEnvelope, GPSpatialReference, GPCoordinateSystem, GPXYDomain, GPZDomain, GPMDomain, GPPoint, GPPolygon, GPLine, GPLayerType, GPFeatureLayerType, GPFeatureLayer, GPLayer, GPRasterCatalogLayerType, GPRasterCatalogLayer, GPMosaicLayerType, GPMosaicLayer, GPTopologyLayerType, GPTopologyLayer, GPNetworkDatasetLayerType, GPNetworkDatasetLayer, GPRouteMeasureEventPropertiesType, GPRouteMeasureEventProperties, GPTinLayerType, GPTinLayer, GPTerrainLayerType, GPTerrainLayer, GPLasDatasetLayerType, GPLasDatasetLayer, GPCadastralFabricLayerType, GPCadastralFabricLayer, GPTableViewType, GPTableView, GPCodedValueDomain, GPCodedValueDomainProperty, GPRangeDomain, GPWorkspaceDomain, GPDatasetDomain, GPFeatureClassDomain, GPGdbAnnoDomain, GPCovAnnoDomain, GPCadAnnoDomain, GPCoverageFeatureClassDomain, GPCoverageDomain, GPFieldDomain, GPArcInfoItemDomain, DataElementDomain, GPFieldInfoDomain, GPFileDomain, GPParameter, GPFeatureSchema, GPTableSchema, GPRasterSchema, GPContainerSchema, GPFunctionName, GPVariable, GPEnvironment, GPParseString, GPUtilities, GPCompositeDataType, GPCompositeDomain, EnumBSTR, EnumGPName, EnumGPEnvironment, GPLinearUnitType, GPLinearUnit, GPArealUnitType, GPArealUnit, GPRandomNumberGeneratorType, GPRandomNumberGenerator, GPSQLExpressionType, GPSQLExpression, GPINFOExpressionType, GPINFOExpression, GPType, DEType, DEDatasetType, DEGeoDatasetType, GPExtentType, GPExtent, GPNumericDomain, GPRasterLayerType, GPRasterLayer, GPRouteDomain, GPRouteMeasureEventDomain, GPQueryTableFieldsDomain, GPQueryTableIDsDomain, GPVirtualTableDomain, GPRouteIDFieldsDomain, GPMeasureFieldsDomain, GPFieldChoiceList, GPArcInfoItemChoiceList, GPGroupLayerType, GPGroupLayer, GPCompositeLayerType, GPCompositeLayer, GPCreateTiles, GPTest, DEUtilities, GpVirtualPathParser, StandaloneCatalogPathParser, AGSCatalogPathParser, AGOCatalogPathParser, TaskServicesCatalogPathParser, GDSCatalogPathParser, ProcessLayerFactory, ProcessLayer, GPRecordSetType, GPRecordSet, GPRasterDataType, GPRasterData, GPFeatureRecordSetLayerType, GPFeatureRecordSetLayer, GPRasterDataLayerType, GPRasterDataLayer, GPDataFileType, GPDataFile, GPRasterBuilderType, GPRasterBuilder, WCSCatalogPathParser, GPCellSizeXYType, GPCellSizeXY, GPCalculatorExpressionType, GPCalculatorExpression, MdVariable, MdParameter, MdProcess, MdModel, MdModelEventsHelper, ToolboxWorkspaceFactory, ToolboxWorkspaceExtension, GPToolboxName, GPToolName, GPToolboxEventsHelper, GPToolboxEvents2Helper, DEToolbox, DEToolboxType, DETool, DEToolType, GeoProcessor, GeoProcessorResult, GPEnvironmentManager, GpSpRefObject, GpObjectArray, GpPointObject, GpRandomNumberGeneratorObject, GpFieldMappingsObject, GpFieldMapObject, GpDescribeField, GpValueTableObject, GpFieldInfoObject, GPNetCDFWorkspace, GPHolder, GpDispatch, GPArc, GPLayersAndTablesDomain, GPTablesDomain, SDMapper, SDMapping, SDDatabaseMapping, SDDatasetMapping, SDResourceMapping, SDConfigurationMapping, GPServerToolName, GPServerToolboxName, GPBuildCoverageFeatureClassName, GPToolboxWorkspace, GPToolbox, GdbToolboxWorkspace, GdbToolbox, GPServerToolbox, GPFunctionTool, GPServerTool, GPModelTool, GPTask, GPScriptTool, TaskAnalyzer, TaskSolutionBuilder, AnalyzeToolScriptSyntaxError, AnalyzeToolScriptBrokenSourceError, AnalyzeToolScriptInvalidSourceError, AnalyzeToolScriptNonExistingToolboxError, AnalyzeToolInvalidError, AnalyzeToolSDEBasedToolsError, AnalyzeToolSDEBasedToolsWarning, AnalyzeToolNonExistingProjectDataError, AnalyzeToolUnsupportedNonDataStoreProjectDataError, AnalyzeToolPathLengthProjectDataError, AnalyzeToolNonDataStoreProjectDataWarning, AnalyzeToolNonSupportedDataStoreProjectDataError, AnalyzeToolPythonScriptToolboxImportingCustomScriptError, AnalyzeToolTaskOutputNeedsMapServiceError, AnalyzeToolCannotPublishListVariablesError, AnalyzeToolTaskOutputCannotUserMapServiceError, AnalyzeToolVBExpressionToolsError, AnalyzeToolVBExpressionToolsWarning, AnalyzeToolUnlicensedRuntimeToolsError, AnalyzeToolUnlicensedServerToolsError, AnalyzeToolNotValidForServerError, AnalyzeToolDLLToolsError, AnalyzeTaskMissingDescriptionError, AnalyzeTaskMissingTagsError, AnalyzeToolMissingMetadataSummaryError, AnalyzeToolMissingMetadataParameterDescriptionError, GPPythonScriptTool, GPCustomTool, GPToolExtensionFactoryWrapper, GPToolExtensionWrapper, GPToolboxImplEventsHelper, GPInternalEnvironment, ModelToPythonConverter, ModelToVbscriptConverter, ModelToJscriptConverter, ModelScriptConverterEngine, ModelToPythonConverterEngineCallback, ModelToVbscriptConverterEngineCallback, ModelToJscriptConverterEngineCallback, GPCalculatorCallback, GPDataTypeFactory, GPESRIDataTypeFactory, GPESRIFunctionFactory, GPESRIConversionFunctionFactory, GPESRIAnalysisFunctionFactory, GPESRIDataManagementFunctionFactory, GPESRIEditingFunctionFactory, GPESRILinearReferencingFunctionFactory, GPAdjust, GPAppend, GPAreaquery, GPBuffer, GPClip, GPDissolve, GPEliminate, GPErase, GPIdentity, GPIntersect, GPReselect, GPSplit, GPTransform, GPUnion, GPUpdate, GPSymDiff, GPBuildCover, GPTabulate, GPPolygonNeighbor, GPImportE00, GPDeleteRows, GPDeleteFeatures, GPCopyRows, GPCopyFeatures, GPAddField, GPDropField, GPCalculate, GPDelete, GPRename, GPCreateLayer, GPAddJoin, GPDropJoin, GPJoinItem, GPMigrateStorage, GPRemoveWorkspaceCache, GPNear, GPNearTable, GPPointDistance, GPCreateCentroids, GPCreatePersonalGDB, GPCreateFileGDB, GPCreateArcInfoWorkspace, GPCreateFolder, GPCreateFeatureDataset, GPCreateTable, GPCreateFeatureClass, GPCreateUnRegisteredTable, GPCreateUnRegisteredFeatureClass, GPAddRasterField, GPAddXMLField, GPAssignFieldAsSubtypeField, GPAddSubtype, GPRemoveSubtype, GPCreateRelationshipClass, GPCreateRelationshipClassFromTable, GPAnalyze, GPAnalyzeDatasets, GPRebuildIndexes, GPChangePrivileges, GPCreateVersionedView, GPDisableEditorTracking, GPEnableEditorTracking, GPCreateVersion, GPDeleteVersion, GPReconcileVersion, GPReconcileVersions, GPRegisterAsVersioned, GPUnregisterAsVersioned, GPAlterVersion, GPCreateCADXData, GPExportCAD, GPImportCAD, GPCadToGeodatabase, GPAssignCADAlias, GPAddCADFields, GPCreateIndex, GPDeleteIndex, GPRebuildAttributeIndexes, GPCreateSpatialIndex, GPDropSpatialIndex, GPSelect, GPTableSelect, GPCreateEnvelopes, GPCreatePoints, GPCreateLines, GPCreateAreas, GPExtendLine, GPPolyLine, GPSplitLines, GPPivotTable, GPCreateTableView, GPSetSubtypeField, GPSetDefaultSubtype, GPLineSimplify, GPCreateDomain, GPDeleteDomain, GPAddCodedValue, GPDeleteCodedValue, GPSetValueForRangeDomain, GPAssignDomainToField, GPRemoveDomainFromField, GPDomainFromTable, GPTableFromDomain, GPSortCodedValueDomain, GPTruncateTable, GPExplode, GPVegematic, GPFindDupFeatures, GPDeleteDupFeatures, GPTrimLine, GPWeedFeatures, GPDensifyFeatures, GPSnapFeatures, GPEraseClipFeatures, GPFlipFeatures, GPUnsplitLineFeatures, GPSortFeatures, GPSplitLineAtPointFeatures, GPSelectData, GPCompress, GPCompact, GPCheckOut, GPCheckIn, GPCreateArcSDEConnectionFile, GPCreateDatabaseConnection, GPCreateDatabaseView, GPZScoreRendering, GPCountRendering, GPPackageLayer, GPPackageMap, GPPackageToolbox, GPPackageMapTile, GPPublishPackage, GPStageService, GPExtractPackage, GPUploadServiceDefinition, GPSignInToPortal, GPSignOutFromPortal, GPPublishServiceDefinition, GPValidateServerDataStore, GPGetDatabaseConnectionString, GPGetCacheInfo, GPDownloadPortalItemData, GPAnalyzeFeaturesForPortal, GPGenerateFeaturesForPortal, GPStageFeatureServiceFromFile, GPPublishPortalService, GPConsolidateLayer, GPConsolidateMap, GPConsolidateToolbox, GPConsolidateResult, GPPackageResult, GPConsolidateLocator, GPPackageLocator, GPCreateEnterpriseGeodatabase, GPEnableEnterpriseGeodatabase, GPCreateSpatialType, GPCreateDatabaseUser, GPAddIncrementingIDField, GPCreateRole, GPRecoverFileGDB, GPUpgradeSpatialReference, GPUpgradeDataset, GPUpgradeGDB, GPEnableAttachments, GPDisableAttachments, GPAddAttachments, GPRemoveAttachments, GPGenerateAttachmentMatchTable, GPEnableArchiving, GPDisableArchiving, GPCreateGeometricNetwork, GPAddEdgeJunctionConnectivityRuleToGeometricNetwork, GPAddEdgeEdgeConnectivityRuleToGeometricNetwork, GPRemoveConnectivityRuleFromGeometricNetwork, GPRemoveEmptyFeatureClassFromGeometricNetwork, GPTraceGeometricNetwork, GPSetFlowDirection, GPExportTopologyErrors, GPTransposeFields, GPCalculateEndTime, GPConvertTimeField, GPConvertTimeZone, GPCreateReplicaFromServer, GPCreateReplica, GPSynchronize, GPExportDataChangeMessage, GPExportAcknowledgementMessage, GPImportMessage, GPExportReplicaSchema, GPReExportUnacknowledgedMessages, GPCompareReplicaSchema, GPImportReplicaSchema, GPCreateReplicaLayer, GPAdd_Global_IDs, GPWFSExtract, GPLineSmooth, GPSaveLayer, GPAddXY, GPCopy, GPFrequency, GPStatistics, GPProjectDefine, GPProject, GPSelectLayerAttribute, GPSelectLayerLocation, GPMakeQueryLayer, GPCalculateDefaultGridIndex, GPCalculateDefaultClusterTolerance, GPCreateTopology, GPAddFeatureClassToTopology, GPRemoveFeatureClassFromTopology, GPAddRuleToTopology, GPRemoveRuleFromTopology, GPValidateTopology, GPSetClusterTolerance, GPGetCount, GPExportDeltaDatabase, GPCheckInDeltaDatabase, GPIntegrate, GPCheckGeometries, GPRepairGeometries, GPCalculateValue, GPMergeBranch, GPMakeXYEventLayer, GPMakeRouteEventLayer, GPDissolveEvents, GPOverlayEvents, GPTransformRouteMeasureEvents, GPLocateFeaturesAlongRoutes, GPCreateRoutes, GPCalibrateRoutes, GPMakeQueryTable, GPFeatureGeocompare, GPRasterGeocompare, GPTableGeocompare, GPFileGeocompare, GPTinGeocompare, GPAggregatePolygons, GPCollapseDualLines, GPSimplifyBuilding, GPSimplifyPolygon, GPSmoothPolygon, GPAggregatePoints, GPUpdateAnno, GPAppendAnno, GPImportCovAnno, GPImportCadAnno, GPCreateRasterDataset, GPCopyRaster, GPContourRasterBarrier, GPTiledLabelsToAnnotation, GPMapServerCacheTilingSchemeToPolygons, GPContourAnnotation, GPMosaic, GPCreateRandomPoints, GPConvexHull, GPEliminatePolygonPart, GPRepairRasterCatalogPaths, GPExportRasterCatalogPaths, GPCreateRandomRaster, GPPolygon2Raster, GPPolyline2Raster, GPPoint2Raster, GPCreateRasterCatalog, GPCreateMosaicDataset, GPExportMosaicDatasetPaths, GPRepairMosaicDatasetPaths, GPMergeMosaicDatasetItems, GPSplitMosaicDatasetItems, GPAlterMosaicDatasetSchema, GPCreateReferencedMosaicDataset, GPCalculateCellSizeRanges, GPSynchronizeMosaicDataset, GPAnalyzeMosaicDataset, GPRemoveMosaicCatalogItems, GPBuildFootprints, GPBuildBoundary, GPComputeDirtyArea, GPBuildSeamlines, GPDeleteMosaicDataset, GPDefineOverviews, GPDefineNoData, GPBuildItemCache, GPBuildOverviews, GPImportMosaicGeometry, GPCopyRasterCatalogFeatures, GPDeleteRasterCatalogFeatures, GPCalculateSpatialReference, GPCreateRasterCatalogLayer, GPAltercolormap, GPDeletecolormap, GPAddAttributeTable, GPDropAttributeTable, GPLoadWsToRasterDs, GPLoadWs2RasterCatalog, GPAddRasters, GPCreateOrthoCorrectedRasterDs, GPCreatePansharpenedRasterDs, GPComputePansharpenWeights, GPClipRaster, GPResampleRaster, GPCompositeBands, GPBuildPyramids, GPBatchStatsPyramids, GPCalculateStatistics, GPRasterCatalogToRasterDataset, GPExtractSubdataset, GPCreateWorldFile, GPGetCellValue, GPMakeImageServerLayer, GPMakeWCSLayer, GPPostVersion, GPAssignDefaultToField, GPFC2FC, GPTable2Table, GPMerge, GPAdjust3DZ, GPCreateFishnet, GPFindRelationships, GPCreateThiessenPolygons, GPCreateCustomGeoTransformation, GPSpatialJoin, GPApplySymbologyFromLayer, GPMosaicToNewRaster, GPSplitRaster, GPCreateVideoFromImages, GPMakeLasDatasetLayer, GPColorBalancing, GPGenerateExcludeArea, GPConvertCoordinateNotation, GPBearingDistanceToLine, GPTableToEllipse, GPXYToLine, GPRasterToDTED, GPMakeMosaicLayer, GPDownloadRasters, GPWarpFromFile, GPAddRasterFunction, GPSetMosaicDatasetProperties, GPSetRasterProperties, GPComputeTiePoints, GPComputeAdjustments, GPApplyAdjustments, GPRegisterRaster, GPLocalCacheImportTileCache, GPLocalCacheExportTileCache, GPLocalCacheManageTileCache, GPGenerateCacheTilingScheme, GPFeaturesToJSON, GPJSONToFeatures, GeoProcessorOPs, GeoProcessorEventsHelper, GeoProcessorEventsHelper2, GeoProcessorEventsHelper3, GpPythonInterpreter, GpPythonExpression, GPArcFunctionFactory, GPArcUnion, GPArcClip, GPArcErase, GPArcIdentity, GPArcIntersect, GPArcUpdate, GPArcBuffer, GPArcThiessen, GPArcNear, GPArcPointDistance, GPArcBuild, GPArcClean, GPArcCreateLabels, GPArcIDEdit, GPArcAddXY, GPArcRenode, GPArcPointNode, GPArcDefineProjection, GPArcJoinItem, GPArcSplit, GPArcPolyRegion, GPArcRegionPoly, GPArcArcDLG, GPArcArcRoute, GPArcDLGArc, GPArcUngenerate, GPArcRegionClass, GPArcAddItem, GPArcIndexItem, GPArcDropIndex, GPArcDropItem, GPArcCenterline, GPArcFindConflicts, GPArcBuildingSimplify, GPArcLineSimplify, GPArcAreaAggregate, GPArcTolerance, GPArcDissolve, GPArcCreateCoverage, GPArcTransform, GPArcGenerate, GPArcImport, GPArcExport, GPArcS57Arc, GPArcArcS57, GPArcVPFImport, GPArcVPFExport, GPArcVPFTile, GPArcSDTSExport, GPArcSDTSImport, GPArcTigerArc, GPArcProject, GPArcAppend, GPArcTigerTool, GPArcReselect, GPArcEliminate, GPArcSelectChild, GPCartographyFuncFactory, GPFeaturesOutlinesToMasks, GPMasksForNonConnectedLines, GPLayersIntersectToMasks, AddRepresentation, DropRepresentation, RemoveOverride, UpdateOverride, AssignRule, SelectOverride, MakeRepresentationLayer, AddControlPoints, AddControlPointsAtIntersects, CalculatePolygonMainAngle, CalculateGeodesicAngle, CreateOverpass, CreateUnderpass, CalculateLineCaps, AlignMarker, DispersePoints, DetectOverlap, CalculateUTMZone, CalculateCentralMeridianAndParallels, CalculateGridConvergenceAngle, CalculateAdjacentFields, GridIndexFeatures, StripMapIndexFeatures, GPThinRoadNetwork, GPMergeDividedRoads, GPResolveRoadConflicts, GPPropagateDisplacement, GPResolveBuildingConflicts, GPCreatePartitions, GPCollapseRoadDetail, GPCreateBuiltUpAreas, MakeGridsAndGraticulesLayer, DeleteGridsAndGraticules, GPGeocodeAddresses, GPRebuildGeocodingIndexes, GPCreateAddressLocator, GPReverseGeocode, GPCreateCompositeAddressLocator, GPStandardizeAddresses, GPDeleteAddressLocator, GPAutomateGeocodingIndexes, GPDeautomateGeocodingIndexes, GPRematchAddresses, GPGeocodingFunctionFactory, GPBlockByAttribute, GPBlockByClass, GPBlockByProximity, GPCalculateCompressionParameters, GPCustomizeCompressionParameters, GPCompressDataset, GPCompressFileGeodatabaseData, GPUncompressDataset, GPFileGDBFunctionFactory, GPMakeNetCDFRasterLayer, GPRasterToNetCDF, GPSelectByDimension, GPMakeNetCDFTableView, GPTableToNetCDF, GPMakeNetCDFFeatureLayer, GPFeatureToNetCDF, GpNcFunctionFactory, GPSAGeoDataTypeName, GPRasterDataTypeFactory, GPRasterUtil, GPRasterFunctionFactory, GPSAASCIIToRaster, GPSADEMToRaster, GPSAFloatToRaster, GPSARasterToPoint, GPSARasterToPolygon, GPSARasterToPolyline, GPSAFeatureToRaster, GPSAMultipatchToRaster, GPSARasterToASCII, GPSARasterToFloat, GPSAMakeRasterLayer, GPGetRasterProperties, GPSARotate, GPSARescale, GPSAFlip, GPSAMirror, GPSAShift, GPSAWarp, GPSAProjectRaster, MdModelName, MdUtilities, MdDiagramProperties, MdDisplayNode, MdDisplayEdge, GPCompositeDataTypeName, GPValueTableTypeName, GPValueTableTypeNameProperty, GPUtilitiesUI, GeoprocessingAppHelper, GeoProcessorWorker, GPModelFunctionFactory, GPFieldValueIterator, GPFeatureClassIterator, GPTableIterator, GPRasterIterator, GPDatasetIterator, GPWorkspaceIterator, GPFileIterator, GPMultivalueIterator, GPFeatureSelectionIterator, GPRowSelectionIterator, GPCountIterator, GPConditionalIterator, GPStop, GPCollectValues, GPGetFieldValue, GPParsePath, GPConnectPoints, GPInMemoryToolboxName, GPInMemoryToolbox, GPPythonToolboxName, GPPythonToolbox, GPGraphDataTableTypeName, GPGraphDataTableType, GPGraphDataTable, GPGraphType, GPGraph, GPMakeGraph, GPSaveGraph, GPChangeVersion, GPRegisterWithGeodatabase, GPBackgroundObject, GPPythonScriptParseRecord, GPJobServerLP, GPJobServerIP, GPJobServerObjectDescription, GPJobRequest, GPJobResult, GPImportXMLWorkspaceDocument, GPExportXMLWorkspaceDocument, NAClassFieldMappingsHelper, NASolverPropertiesHelper, GPInternetTiledLayerType, GPInternetTiledLayer, GPMapServerLayerType, GPMapServerLayer, GPServerFunctionFactory, GPUpdateMapServerCache, GPManageMapServerCacheTiles, GPValidateMapServerCacheTiles, GPExportMapServerCache, GPImportMapServerCache, GPConvertMapServerCacheStorageFormat, GPDeleteMapServerCache, GPGenerateMapServerCache, GPCreateMapServerCache, GPGenerateMapServerCacheTilingScheme, GPUpdateMapServerCacheScales, ExportWebMap, GPESRIAvailableFonts, GPServerProxyHelper, GPServerCachingFunctionFactory, GPSuggestDefaultScales, GPManageMapCacheScales, GPServerCachingManageMapCacheTiles, GPServerCachingValidateMapCacheTiles, GPServerCachingManageMapCacheTilesWorker, GPServerCachingValidateMapCacheTilesWorker, GPServerCachingDeleteMapCache, GPServerCachingCreateMapCache, GPReportCacheStatus, GPConvertCacheStorageFormat, GPConvertCacheStorageFormatWorker, GPExportCacheWorker, GPExportCache, GPImportCacheWorker, GPImportCache, GPESRICreateFeatureServiceReplica, GPESRISyncFeatureServiceReplica, GPSAGeoDataDomain, GPSAGeoDataType, GPRasterFormulatedType, GPRasterFormulated, GPRAFieldDomain, GPRasterGDBEnvCompressionType, GPRasterGDBEnvCompression, GPRasterGDBEnvPyramidType, GPRasterGDBEnvPyramid, GPRasterGDBEnvStatisticsType, GPRasterGDBEnvStatistics, GPRasterGDBEnvTileSizeType, GPRasterGDBEnvTileSize, GPAnalysisCellSizeType, GPAnalysisCellSize, MapCacheTileManager, MapCacheTileManagerJobResultHandler, MapCacheTileManagerJob, GPRepresentationLayerDomain, GeocompareEngine, GeocompareResult, GeocompareReport, GPServerLP, GPServerIP, GPServerObjectDescription, GPToolInfo, GPToolInfos, GPParameterInfo, GPParameterInfos, GPValues, GPResult, GPResultOptions, GPServer, GPServerConfigurationFactory, GPServerSync, GPServerTrackCancel, GPJobServer, WPSServer, DBGridReporter, DBGrid, DBGridNeatline, DBGridMask, DBGridSegment, DBGridTick, DBGridLine, DBGridPoint, DBGridEndPoint, DBGridAnno, DBGridAnnoGroup, DBGridUtilities, CoordinateSystemRecordSet, SpatialReferenceCalculator, DBGridPattern
from pytexportutils import Enumeration, IndexProperty, _IIDMap, _CLSIDMap, _RecordMap
import uuid


# Interfaces
class IProtectNameGeoprocessing(_esriGeoprocessing.IProtectNameGeoprocessing):
    _IID = uuid.UUID('4f37be4d-3cc6-421d-bde9-f73d48ff5cb9')
    def ProtectOLE_HANDLE(self, aHandle):
        '''Method IProtectNameGeoprocessing.ProtectOLE_HANDLE

           INPUT
            aHandle             : OLE_HANDLE'''
        return super(IProtectNameGeoprocessing, self).ProtectOLE_HANDLE(aHandle)
    def ProtectOLE_COLOR(self, aColor):
        '''Method IProtectNameGeoprocessing.ProtectOLE_COLOR

           INPUT
            aColor              : OLE_COLOR'''
        return super(IProtectNameGeoprocessing, self).ProtectOLE_COLOR(aColor)

class IGPProtectNames(_esriGeoprocessing.IGPProtectNames):
    _IID = uuid.UUID('f3348db1-2fe4-429f-943b-0bef6695de1b')
    def IsNull(self):
        '''Method IGPProtectNames.IsNull'''
        return super(IGPProtectNames, self).IsNull()

class IGPEnvironment(_esriGeoprocessing.IGPEnvironment):
    _IID = uuid.UUID('5547046f-7777-4ab6-b52d-a7e76c824c6f')

    def __init__(self, *args, **kw):
        super(IGPEnvironment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPEnvironment.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPEnvironment, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPEnvironment.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPEnvironment, self).put_Name(Name)
    def get_DisplayName(self):
        '''Method IGPEnvironment.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPEnvironment, self).get_DisplayName()
    def put_DisplayName(self, Name):
        '''Method IGPEnvironment.put_DisplayName

           INPUT
            Name                : BSTR'''
        return super(IGPEnvironment, self).put_DisplayName(Name)
    def get_Category(self):
        '''Method IGPEnvironment.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IGPEnvironment, self).get_Category()
    def put_Category(self, Category):
        '''Method IGPEnvironment.put_Category

           INPUT
            Category            : BSTR'''
        return super(IGPEnvironment, self).put_Category(Category)
    def get_Value(self):
        '''Method IGPEnvironment.get_Value

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPEnvironment, self).get_Value()
    def putref_Value(self, Value):
        '''Method IGPEnvironment.putref_Value

           INPUT
            Value               : IGPValue*'''
        return super(IGPEnvironment, self).putref_Value(Value)
    def get_Domain(self):
        '''Method IGPEnvironment.get_Domain

           OUTPUT
            Domain              : IGPDomain**'''
        return super(IGPEnvironment, self).get_Domain()
    def putref_Domain(self, Domain):
        '''Method IGPEnvironment.putref_Domain

           INPUT
            Domain              : IGPDomain*'''
        return super(IGPEnvironment, self).putref_Domain(Domain)
    def get_DataType(self):
        '''Method IGPEnvironment.get_DataType

           OUTPUT
            DataType            : IGPDataType**'''
        return super(IGPEnvironment, self).get_DataType()
    def putref_DataType(self, DataType):
        '''Method IGPEnvironment.putref_DataType

           INPUT
            DataType            : IGPDataType*'''
        return super(IGPEnvironment, self).putref_DataType(DataType)
    def get_DisplayOrder(self):
        '''Method IGPEnvironment.get_DisplayOrder

           OUTPUT
            DisplayOrder        : long*'''
        return super(IGPEnvironment, self).get_DisplayOrder()
    def put_DisplayOrder(self, DisplayOrder):
        '''Method IGPEnvironment.put_DisplayOrder

           INPUT
            DisplayOrder        : long'''
        return super(IGPEnvironment, self).put_DisplayOrder(DisplayOrder)
    def get_ControlCLSID(self):
        '''Method IGPEnvironment.get_ControlCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPEnvironment, self).get_ControlCLSID()
    def put_ControlCLSID(self, CLSID):
        '''Method IGPEnvironment.put_ControlCLSID

           INPUT
            CLSID               : IUID*'''
        return super(IGPEnvironment, self).put_ControlCLSID(CLSID)
    def get_Dependencies(self):
        '''Method IGPEnvironment.get_Dependencies

           OUTPUT
            Dependencies        : IEnumBSTR**'''
        return super(IGPEnvironment, self).get_Dependencies()
    def put_Dependencies(self, Dependencies):
        '''Method IGPEnvironment.put_Dependencies

           INPUT
            Dependencies        : IEnumBSTR*'''
        return super(IGPEnvironment, self).put_Dependencies(Dependencies)
    def AddDependency(self, Name):
        '''Method IGPEnvironment.AddDependency

           INPUT
            Name                : BSTR'''
        return super(IGPEnvironment, self).AddDependency(Name)
    def get_MetadataFile(self):
        '''Method IGPEnvironment.get_MetadataFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPEnvironment, self).get_MetadataFile()
    def put_MetadataFile(self, File):
        '''Method IGPEnvironment.put_MetadataFile

           INPUT
            File                : BSTR'''
        return super(IGPEnvironment, self).put_MetadataFile(File)
    Category = property(get_Category, put_Category, None)
    ControlCLSID = property(get_ControlCLSID, put_ControlCLSID, None)
    DataType = property(get_DataType, putref_DataType, None)
    Dependencies = property(get_Dependencies, put_Dependencies, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    DisplayOrder = property(get_DisplayOrder, put_DisplayOrder, None)
    Domain = property(get_Domain, putref_Domain, None)
    MetadataFile = property(get_MetadataFile, put_MetadataFile, None)
    Name = property(get_Name, put_Name, None)
    Value = property(get_Value, putref_Value, None)

class IGPEnvironmentManager(_esriGeoprocessing.IGPEnvironmentManager):
    _IID = uuid.UUID('91c2edf4-6e2c-43f5-b526-e1a94f6615aa')

    def __init__(self, *args, **kw):
        super(IGPEnvironmentManager, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Parent(self):
        '''Method IGPEnvironmentManager.get_Parent

           OUTPUT
            Parent              : IGPEnvironmentManager**'''
        return super(IGPEnvironmentManager, self).get_Parent()
    def putref_Parent(self, Parent):
        '''Method IGPEnvironmentManager.putref_Parent

           INPUT
            Parent              : IGPEnvironmentManager*'''
        return super(IGPEnvironmentManager, self).putref_Parent(Parent)
    def AddEnvironment(self, env):
        '''Method IGPEnvironmentManager.AddEnvironment

           INPUT
            env                 : IGPEnvironment*'''
        return super(IGPEnvironmentManager, self).AddEnvironment(env)
    def RemoveEnvironment(self, env):
        '''Method IGPEnvironmentManager.RemoveEnvironment

           INPUT
            env                 : IGPEnvironment*'''
        return super(IGPEnvironmentManager, self).RemoveEnvironment(env)
    def SubstituteEnvironments(self, pParams):
        '''Method IGPEnvironmentManager.SubstituteEnvironments

           INPUT
            pParams             : IArray*'''
        return super(IGPEnvironmentManager, self).SubstituteEnvironments(pParams)
    def RemoveEnvironments(self):
        '''Method IGPEnvironmentManager.RemoveEnvironments'''
        return super(IGPEnvironmentManager, self).RemoveEnvironments()
    def GetEnvironments(self):
        '''Method IGPEnvironmentManager.GetEnvironments

           OUTPUT
            envs                : IArray**'''
        return super(IGPEnvironmentManager, self).GetEnvironments()
    def GetLocalEnvironments(self):
        '''Method IGPEnvironmentManager.GetLocalEnvironments

           OUTPUT
            envs                : IArray**'''
        return super(IGPEnvironmentManager, self).GetLocalEnvironments()
    def FindEnvironment(self, Name):
        '''Method IGPEnvironmentManager.FindEnvironment

           INPUT
            Name                : BSTR

           OUTPUT
            env                 : IGPEnvironment**'''
        return super(IGPEnvironmentManager, self).FindEnvironment(Name)
    def PutEnvVariant(self, env, Value):
        '''Method IGPEnvironmentManager.PutEnvVariant

           INPUTS
            env                 : IGPEnvironment*
            Value               : VARIANT'''
        return super(IGPEnvironmentManager, self).PutEnvVariant(env, Value)
    def GetEnvVariant(self, env):
        '''Method IGPEnvironmentManager.GetEnvVariant

           INPUT
            env                 : IGPEnvironment*

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPEnvironmentManager, self).GetEnvVariant(env)
    def put_PersistAll(self, _arg1):
        '''Method IGPEnvironmentManager.put_PersistAll

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPEnvironmentManager, self).put_PersistAll(_arg1)
    Parent = property(get_Parent, putref_Parent, None)
    PersistAll = property(None, put_PersistAll, None)

class IGPVariableManager(_esriGeoprocessing.IGPVariableManager):
    _IID = uuid.UUID('fa365292-db48-438a-860c-3cc58bf5b43a')
    def Add(self, pVariable):
        '''Method IGPVariableManager.Add

           INPUT
            pVariable           : IGPVariable*'''
        return super(IGPVariableManager, self).Add(pVariable)
    def Remove(self, Name):
        '''Method IGPVariableManager.Remove

           INPUT
            Name                : BSTR'''
        return super(IGPVariableManager, self).Remove(Name)
    def RemoveAll(self):
        '''Method IGPVariableManager.RemoveAll'''
        return super(IGPVariableManager, self).RemoveAll()
    def Find(self, Name):
        '''Method IGPVariableManager.Find

           INPUT
            Name                : BSTR

           OUTPUT
            ppVariable          : IGPVariable**'''
        return super(IGPVariableManager, self).Find(Name)
    def get_Variables(self):
        '''Method IGPVariableManager.get_Variables

           OUTPUT
            ppVariables         : IArray**'''
        return super(IGPVariableManager, self).get_Variables()
    Variables = property(get_Variables, None, None)

class IMdVariable(_esriGeoprocessing.IMdVariable):
    _IID = uuid.UUID('18b03157-5ea4-46ae-b0b1-f7769c7dab32')

    def __init__(self, *args, **kw):
        super(IMdVariable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AddToDisplay(self):
        '''Method IMdVariable.get_AddToDisplay

           OUTPUT
            AddToDisplay        : VARIANT_BOOL*'''
        return super(IMdVariable, self).get_AddToDisplay()
    def put_AddToDisplay(self, AddToDisplay):
        '''Method IMdVariable.put_AddToDisplay

           INPUT
            AddToDisplay        : VARIANT_BOOL'''
        return super(IMdVariable, self).put_AddToDisplay(AddToDisplay)
    def get_Intermediate(self):
        '''Method IMdVariable.get_Intermediate

           OUTPUT
            Intermediate        : VARIANT_BOOL*'''
        return super(IMdVariable, self).get_Intermediate()
    def put_Intermediate(self, Intermediate):
        '''Method IMdVariable.put_Intermediate

           INPUT
            Intermediate        : VARIANT_BOOL'''
        return super(IMdVariable, self).put_Intermediate(Intermediate)
    AddToDisplay = property(get_AddToDisplay, put_AddToDisplay, None)
    Intermediate = property(get_Intermediate, put_Intermediate, None)

class IEnumMdVariable(_esriGeoprocessing.IEnumMdVariable):
    _IID = uuid.UUID('7569f892-ea75-4f8d-8478-d23596534b8d')
    def Next(self):
        '''Method IEnumMdVariable.Next

           OUTPUT
            variable            : IMdVariable**'''
        return super(IEnumMdVariable, self).Next()
    def __iter__(self):
        try:
            super(IEnumMdVariable, self).Reset()
            val = super(IEnumMdVariable, self).Next()
            while val:
                yield val
                val = super(IEnumMdVariable, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumMdVariable.Reset'''
        return super(IEnumMdVariable, self).Reset()

class IGPToolboxName(_esriGeoprocessing.IGPToolboxName):
    _IID = uuid.UUID('83a52de6-383a-4f93-8d9d-4354d948ebb1')
    def get_PathName(self):
        '''Method IGPToolboxName.get_PathName

           OUTPUT
            Path                : BSTR*'''
        return super(IGPToolboxName, self).get_PathName()
    PathName = property(get_PathName, None, None)

class IGPToolName(_esriGeoprocessing.IGPToolName):
    _IID = uuid.UUID('3cabeaaf-91a8-4c02-aa2f-95c9e01d1682')

    def __init__(self, *args, **kw):
        super(IGPToolName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DisplayName(self):
        '''Method IGPToolName.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPToolName, self).get_DisplayName()
    def put_DisplayName(self, Name):
        '''Method IGPToolName.put_DisplayName

           INPUT
            Name                : BSTR'''
        return super(IGPToolName, self).put_DisplayName(Name)
    def get_Description(self):
        '''Method IGPToolName.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IGPToolName, self).get_Description()
    def put_Description(self, Description):
        '''Method IGPToolName.put_Description

           INPUT
            Description         : BSTR'''
        return super(IGPToolName, self).put_Description(Description)
    def get_ToolCategory(self):
        '''Method IGPToolName.get_ToolCategory

           OUTPUT
            Path                : BSTR*'''
        return super(IGPToolName, self).get_ToolCategory()
    def put_ToolCategory(self, Path):
        '''Method IGPToolName.put_ToolCategory

           INPUT
            Path                : BSTR'''
        return super(IGPToolName, self).put_ToolCategory(Path)
    def get_ToolType(self):
        '''Method IGPToolName.get_ToolType

           OUTPUT
            Type                : esriGPToolType*'''
        return super(IGPToolName, self).get_ToolType()
    def put_ToolType(self, Type):
        '''Method IGPToolName.put_ToolType

           INPUT
            Type                : esriGPToolType'''
        return super(IGPToolName, self).put_ToolType(Type)
    def get_ToolboxName(self):
        '''Method IGPToolName.get_ToolboxName

           OUTPUT
            ToolboxName         : IGPToolboxName**'''
        return super(IGPToolName, self).get_ToolboxName()
    def putref_ToolboxName(self, ToolboxName):
        '''Method IGPToolName.putref_ToolboxName

           INPUT
            ToolboxName         : IGPToolboxName*'''
        return super(IGPToolName, self).putref_ToolboxName(ToolboxName)
    def get_DialogCLSID(self):
        '''Method IGPToolName.get_DialogCLSID

           OUTPUT
            ppClsid             : IUID**'''
        return super(IGPToolName, self).get_DialogCLSID()
    def putref_DialogCLSID(self, ppClsid):
        '''Method IGPToolName.putref_DialogCLSID

           INPUT
            ppClsid             : IUID*'''
        return super(IGPToolName, self).putref_DialogCLSID(ppClsid)
    Description = property(get_Description, put_Description, None)
    DialogCLSID = property(get_DialogCLSID, putref_DialogCLSID, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    ToolCategory = property(get_ToolCategory, put_ToolCategory, None)
    ToolType = property(get_ToolType, put_ToolType, None)
    ToolboxName = property(get_ToolboxName, putref_ToolboxName, None)

class IEnumGPToolName(_esriGeoprocessing.IEnumGPToolName):
    _IID = uuid.UUID('25f73c0a-10cd-4ebf-a922-07215e81c864')
    def Next(self):
        '''Method IEnumGPToolName.Next

           OUTPUT
            Name                : IGPToolName**'''
        return super(IEnumGPToolName, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPToolName, self).Reset()
            val = super(IEnumGPToolName, self).Next()
            while val:
                yield val
                val = super(IEnumGPToolName, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPToolName.Reset'''
        return super(IEnumGPToolName, self).Reset()

class IGPParameter(_esriGeoprocessing.IGPParameter):
    _IID = uuid.UUID('40ef6d06-4e62-4b3d-98e6-85f7a0607730')
    def get_Name(self):
        '''Method IGPParameter.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter, self).get_Name()
    def get_DisplayName(self):
        '''Method IGPParameter.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter, self).get_DisplayName()
    def get_Direction(self):
        '''Method IGPParameter.get_Direction

           OUTPUT
            Direction           : esriGPParameterDirection*'''
        return super(IGPParameter, self).get_Direction()
    def get_DataType(self):
        '''Method IGPParameter.get_DataType

           OUTPUT
            DataType            : IGPDataType**'''
        return super(IGPParameter, self).get_DataType()
    def get_ParameterType(self):
        '''Method IGPParameter.get_ParameterType

           OUTPUT
            paramtype           : esriGPParameterType*'''
        return super(IGPParameter, self).get_ParameterType()
    def get_ParameterDependencies(self):
        '''Method IGPParameter.get_ParameterDependencies

           OUTPUT
            Dependencies        : IEnumBSTR**'''
        return super(IGPParameter, self).get_ParameterDependencies()
    def get_Domain(self):
        '''Method IGPParameter.get_Domain

           OUTPUT
            Domain              : IGPDomain**'''
        return super(IGPParameter, self).get_Domain()
    def get_Enabled(self):
        '''Method IGPParameter.get_Enabled

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(IGPParameter, self).get_Enabled()
    def get_Value(self):
        '''Method IGPParameter.get_Value

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPParameter, self).get_Value()
    def get_ControlCLSID(self):
        '''Method IGPParameter.get_ControlCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPParameter, self).get_ControlCLSID()
    def get_DefaultEnvironmentName(self):
        '''Method IGPParameter.get_DefaultEnvironmentName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter, self).get_DefaultEnvironmentName()
    def get_DisplayOrder(self):
        '''Method IGPParameter.get_DisplayOrder

           OUTPUT
            DisplayOrder        : long*'''
        return super(IGPParameter, self).get_DisplayOrder()
    def get_Altered(self):
        '''Method IGPParameter.get_Altered

           OUTPUT
            Altered             : VARIANT_BOOL*'''
        return super(IGPParameter, self).get_Altered()
    def get_HasBeenValidated(self):
        '''Method IGPParameter.get_HasBeenValidated

           OUTPUT
            validated           : VARIANT_BOOL*'''
        return super(IGPParameter, self).get_HasBeenValidated()
    def get_Category(self):
        '''Method IGPParameter.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IGPParameter, self).get_Category()
    def get_ChoiceList(self):
        '''Method IGPParameter.get_ChoiceList

           OUTPUT
            ChoiceList          : IGPChoiceList**'''
        return super(IGPParameter, self).get_ChoiceList()
    Altered = property(get_Altered, None, None)
    Category = property(get_Category, None, None)
    ChoiceList = property(get_ChoiceList, None, None)
    ControlCLSID = property(get_ControlCLSID, None, None)
    DataType = property(get_DataType, None, None)
    DefaultEnvironmentName = property(get_DefaultEnvironmentName, None, None)
    Direction = property(get_Direction, None, None)
    DisplayName = property(get_DisplayName, None, None)
    DisplayOrder = property(get_DisplayOrder, None, None)
    Domain = property(get_Domain, None, None)
    Enabled = property(get_Enabled, None, None)
    HasBeenValidated = property(get_HasBeenValidated, None, None)
    Name = property(get_Name, None, None)
    ParameterDependencies = property(get_ParameterDependencies, None, None)
    ParameterType = property(get_ParameterType, None, None)
    Value = property(get_Value, None, None)

class IMdParameter(_esriGeoprocessing.IMdParameter):
    _IID = uuid.UUID('9411cd59-50b7-4852-8dff-a0c33f622216')

    def __init__(self, *args, **kw):
        super(IMdParameter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Value(self, _arg1):
        '''Method IMdParameter.putref_Value

           INPUT
            _arg1               : IGPValue*'''
        return super(IMdParameter, self).putref_Value(_arg1)
    def get_Marked(self):
        '''Method IMdParameter.get_Marked

           OUTPUT
            Marked              : VARIANT_BOOL*'''
        return super(IMdParameter, self).get_Marked()
    def put_Marked(self, Marked):
        '''Method IMdParameter.put_Marked

           INPUT
            Marked              : VARIANT_BOOL'''
        return super(IMdParameter, self).put_Marked(Marked)
    def get_Valid(self):
        '''Method IMdParameter.get_Valid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IMdParameter, self).get_Valid()
    def put_Valid(self, Valid):
        '''Method IMdParameter.put_Valid

           INPUT
            Valid               : VARIANT_BOOL'''
        return super(IMdParameter, self).put_Valid(Valid)
    def get_Current(self):
        '''Method IMdParameter.get_Current

           OUTPUT
            Current             : VARIANT_BOOL*'''
        return super(IMdParameter, self).get_Current()
    def put_Current(self, Current):
        '''Method IMdParameter.put_Current

           INPUT
            Current             : VARIANT_BOOL'''
        return super(IMdParameter, self).put_Current(Current)
    def get_Derived(self):
        '''Method IMdParameter.get_Derived

           OUTPUT
            Derived             : VARIANT_BOOL*'''
        return super(IMdParameter, self).get_Derived()
    def put_Derived(self, Derived):
        '''Method IMdParameter.put_Derived

           INPUT
            Derived             : VARIANT_BOOL'''
        return super(IMdParameter, self).put_Derived(Derived)
    def Init(self, definition):
        '''Method IMdParameter.Init

           INPUT
            definition          : IGPParameter*'''
        return super(IMdParameter, self).Init(definition)
    def Validate(self):
        '''Method IMdParameter.Validate

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdParameter, self).Validate()
    Current = property(get_Current, put_Current, None)
    Derived = property(get_Derived, put_Derived, None)
    Marked = property(get_Marked, put_Marked, None)
    Valid = property(get_Valid, put_Valid, None)
    Value = property(None, putref_Value, None)

class IGPParameter2(_esriGeoprocessing.IGPParameter2):
    _IID = uuid.UUID('3a5bcff9-9178-4cfe-9cd9-20b7593cb17f')
    def get_Managed(self):
        '''Method IGPParameter2.get_Managed

           OUTPUT
            Managed             : VARIANT_BOOL*'''
        return super(IGPParameter2, self).get_Managed()
    def get_Name(self):
        '''Method IGPParameter.get_Name (from IGPParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter2, self).get_Name()
    def get_DisplayName(self):
        '''Method IGPParameter.get_DisplayName (from IGPParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter2, self).get_DisplayName()
    def get_Direction(self):
        '''Method IGPParameter.get_Direction (from IGPParameter)

           OUTPUT
            Direction           : esriGPParameterDirection*'''
        return super(IGPParameter2, self).get_Direction()
    def get_DataType(self):
        '''Method IGPParameter.get_DataType (from IGPParameter)

           OUTPUT
            DataType            : IGPDataType**'''
        return super(IGPParameter2, self).get_DataType()
    def get_ParameterType(self):
        '''Method IGPParameter.get_ParameterType (from IGPParameter)

           OUTPUT
            paramtype           : esriGPParameterType*'''
        return super(IGPParameter2, self).get_ParameterType()
    def get_ParameterDependencies(self):
        '''Method IGPParameter.get_ParameterDependencies (from IGPParameter)

           OUTPUT
            Dependencies        : IEnumBSTR**'''
        return super(IGPParameter2, self).get_ParameterDependencies()
    def get_Domain(self):
        '''Method IGPParameter.get_Domain (from IGPParameter)

           OUTPUT
            Domain              : IGPDomain**'''
        return super(IGPParameter2, self).get_Domain()
    def get_Enabled(self):
        '''Method IGPParameter.get_Enabled (from IGPParameter)

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(IGPParameter2, self).get_Enabled()
    def get_Value(self):
        '''Method IGPParameter.get_Value (from IGPParameter)

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPParameter2, self).get_Value()
    def get_ControlCLSID(self):
        '''Method IGPParameter.get_ControlCLSID (from IGPParameter)

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPParameter2, self).get_ControlCLSID()
    def get_DefaultEnvironmentName(self):
        '''Method IGPParameter.get_DefaultEnvironmentName (from IGPParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter2, self).get_DefaultEnvironmentName()
    def get_DisplayOrder(self):
        '''Method IGPParameter.get_DisplayOrder (from IGPParameter)

           OUTPUT
            DisplayOrder        : long*'''
        return super(IGPParameter2, self).get_DisplayOrder()
    def get_Altered(self):
        '''Method IGPParameter.get_Altered (from IGPParameter)

           OUTPUT
            Altered             : VARIANT_BOOL*'''
        return super(IGPParameter2, self).get_Altered()
    def get_HasBeenValidated(self):
        '''Method IGPParameter.get_HasBeenValidated (from IGPParameter)

           OUTPUT
            validated           : VARIANT_BOOL*'''
        return super(IGPParameter2, self).get_HasBeenValidated()
    def get_Category(self):
        '''Method IGPParameter.get_Category (from IGPParameter)

           OUTPUT
            Category            : BSTR*'''
        return super(IGPParameter2, self).get_Category()
    def get_ChoiceList(self):
        '''Method IGPParameter.get_ChoiceList (from IGPParameter)

           OUTPUT
            ChoiceList          : IGPChoiceList**'''
        return super(IGPParameter2, self).get_ChoiceList()
    Altered = property(get_Altered, None, None)
    Category = property(get_Category, None, None)
    ChoiceList = property(get_ChoiceList, None, None)
    ControlCLSID = property(get_ControlCLSID, None, None)
    DataType = property(get_DataType, None, None)
    DefaultEnvironmentName = property(get_DefaultEnvironmentName, None, None)
    Direction = property(get_Direction, None, None)
    DisplayName = property(get_DisplayName, None, None)
    DisplayOrder = property(get_DisplayOrder, None, None)
    Domain = property(get_Domain, None, None)
    Enabled = property(get_Enabled, None, None)
    HasBeenValidated = property(get_HasBeenValidated, None, None)
    Managed = property(get_Managed, None, None)
    Name = property(get_Name, None, None)
    ParameterDependencies = property(get_ParameterDependencies, None, None)
    ParameterType = property(get_ParameterType, None, None)
    Value = property(get_Value, None, None)

class IBStringArray(_esriGeoprocessing.IBStringArray):
    _IID = uuid.UUID('0c39cb39-fd27-49da-89d2-fc3f017064f9')
    def get_Count(self):
        '''Method IBStringArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IBStringArray, self).get_Count()
    def get_String(self, Index):
        '''Method IBStringArray.get_String

           INPUT
            Index               : long

           OUTPUT
            str                 : BSTR*'''
        return super(IBStringArray, self).get_String(Index)
    def AddString(self, str):
        '''Method IBStringArray.AddString

           INPUT
            str                 : BSTR'''
        return super(IBStringArray, self).AddString(str)
    def InsertString(self, Index, str):
        '''Method IBStringArray.InsertString

           INPUTS
            Index               : long
            str                 : BSTR'''
        return super(IBStringArray, self).InsertString(Index, str)
    def RemoveString(self, Index):
        '''Method IBStringArray.RemoveString

           INPUT
            Index               : long'''
        return super(IBStringArray, self).RemoveString(Index)
    def RemoveAll(self):
        '''Method IBStringArray.RemoveAll'''
        return super(IBStringArray, self).RemoveAll()
    def ReplaceString(self, Index, str):
        '''Method IBStringArray.ReplaceString

           INPUTS
            Index               : long
            str                 : BSTR'''
        return super(IBStringArray, self).ReplaceString(Index, str)
    Count = property(get_Count, None, None)
    String = IndexProperty(get_String, None)

class IGPFieldMap(_esriGeoprocessing.IGPFieldMap):
    _IID = uuid.UUID('64dc7625-bb93-4cad-bbca-c4bf5e9f6807')

    def __init__(self, *args, **kw):
        super(IGPFieldMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def RemoveAll(self):
        '''Method IGPFieldMap.RemoveAll'''
        return super(IGPFieldMap, self).RemoveAll()
    def get_Count(self):
        '''Method IGPFieldMap.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPFieldMap, self).get_Count()
    def get_Fields(self):
        '''Method IGPFieldMap.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IGPFieldMap, self).get_Fields()
    def get_OutputField(self):
        '''Method IGPFieldMap.get_OutputField

           OUTPUT
            Field               : IField**'''
        return super(IGPFieldMap, self).get_OutputField()
    def putref_OutputField(self, Field):
        '''Method IGPFieldMap.putref_OutputField

           INPUT
            Field               : IField*'''
        return super(IGPFieldMap, self).putref_OutputField(Field)
    def get_MergeRule(self):
        '''Method IGPFieldMap.get_MergeRule

           OUTPUT
            rule                : esriGPFieldMapMergeRule*'''
        return super(IGPFieldMap, self).get_MergeRule()
    def put_MergeRule(self, rule):
        '''Method IGPFieldMap.put_MergeRule

           INPUT
            rule                : esriGPFieldMapMergeRule'''
        return super(IGPFieldMap, self).put_MergeRule(rule)
    def get_JoinDelimiter(self):
        '''Method IGPFieldMap.get_JoinDelimiter

           OUTPUT
            Delimiter           : BSTR*'''
        return super(IGPFieldMap, self).get_JoinDelimiter()
    def put_JoinDelimiter(self, Delimiter):
        '''Method IGPFieldMap.put_JoinDelimiter

           INPUT
            Delimiter           : BSTR'''
        return super(IGPFieldMap, self).put_JoinDelimiter(Delimiter)
    def AddInputField(self, Table, Field, startPos, endPos):
        '''Method IGPFieldMap.AddInputField

           INPUTS
            Table               : IDETable*
            Field               : IField*
            startPos            : long
            endPos              : long'''
        return super(IGPFieldMap, self).AddInputField(Table, Field, startPos, endPos)
    def FindInputField(self, Table, FieldName):
        '''Method IGPFieldMap.FindInputField

           INPUTS
            Table               : IDETable*
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGPFieldMap, self).FindInputField(Table, FieldName)
    def RemoveField(self, Index):
        '''Method IGPFieldMap.RemoveField

           INPUT
            Index               : long'''
        return super(IGPFieldMap, self).RemoveField(Index)
    def GetField(self, Index):
        '''Method IGPFieldMap.GetField

           INPUT
            Index               : long

           OUTPUT
            Field               : IField**'''
        return super(IGPFieldMap, self).GetField(Index)
    def GetTable(self, Index):
        '''Method IGPFieldMap.GetTable

           INPUT
            Index               : long

           OUTPUT
            Table               : IDETable**'''
        return super(IGPFieldMap, self).GetTable(Index)
    def GetTextPos(self, Index):
        '''Method IGPFieldMap.GetTextPos

           INPUT
            Index               : long

           OUTPUTS
            Start               : long*
            end                 : long*'''
        return super(IGPFieldMap, self).GetTextPos(Index)
    def SetTextPos(self, Index, Start, end):
        '''Method IGPFieldMap.SetTextPos

           INPUTS
            Index               : long
            Start               : long
            end                 : long'''
        return super(IGPFieldMap, self).SetTextPos(Index, Start, end)
    Count = property(get_Count, None, None)
    Fields = property(get_Fields, None, None)
    JoinDelimiter = property(get_JoinDelimiter, put_JoinDelimiter, None)
    MergeRule = property(get_MergeRule, put_MergeRule, None)
    OutputField = property(get_OutputField, putref_OutputField, None)

class IGPFieldMapping(_esriGeoprocessing.IGPFieldMapping):
    _IID = uuid.UUID('7ee8d0e1-d24a-4fc5-9053-678aed37ea8d')
    def Initialize(self, DETables, Workspace):
        '''Method IGPFieldMapping.Initialize

           INPUTS
            DETables            : IArray*
            Workspace           : IWorkspace*'''
        return super(IGPFieldMapping, self).Initialize(DETables, Workspace)
    def get_Fields(self):
        '''Method IGPFieldMapping.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IGPFieldMapping, self).get_Fields()
    def RemoveAll(self):
        '''Method IGPFieldMapping.RemoveAll'''
        return super(IGPFieldMapping, self).RemoveAll()
    def get_Count(self):
        '''Method IGPFieldMapping.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPFieldMapping, self).get_Count()
    def GetFieldMap(self, Index):
        '''Method IGPFieldMapping.GetFieldMap

           INPUT
            Index               : long

           OUTPUT
            FieldMap            : IGPFieldMap**'''
        return super(IGPFieldMapping, self).GetFieldMap(Index)
    def ReplaceFieldMap(self, Index, FieldMap):
        '''Method IGPFieldMapping.ReplaceFieldMap

           INPUTS
            Index               : long
            FieldMap            : IGPFieldMap*'''
        return super(IGPFieldMapping, self).ReplaceFieldMap(Index, FieldMap)
    def AddFieldMap(self, FieldMap):
        '''Method IGPFieldMapping.AddFieldMap

           INPUT
            FieldMap            : IGPFieldMap*'''
        return super(IGPFieldMapping, self).AddFieldMap(FieldMap)
    def FindFieldMap(self, FieldName):
        '''Method IGPFieldMapping.FindFieldMap

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGPFieldMapping, self).FindFieldMap(FieldName)
    def RemoveFieldMap(self, Index):
        '''Method IGPFieldMapping.RemoveFieldMap

           INPUT
            Index               : long'''
        return super(IGPFieldMapping, self).RemoveFieldMap(Index)
    Count = property(get_Count, None, None)
    Fields = property(get_Fields, None, None)

class IGPFieldInfo(_esriGeoprocessing.IGPFieldInfo):
    _IID = uuid.UUID('b4893c59-ece5-4b2d-ab4a-540abc813789')
    def Initialize(self, Table, Workspace):
        '''Method IGPFieldInfo.Initialize

           INPUTS
            Table               : IDETable*
            Workspace           : IDEWorkspace*'''
        return super(IGPFieldInfo, self).Initialize(Table, Workspace)
    def Merge(self, Table):
        '''Method IGPFieldInfo.Merge

           INPUT
            Table               : IDETable*'''
        return super(IGPFieldInfo, self).Merge(Table)
    def RemoveAll(self):
        '''Method IGPFieldInfo.RemoveAll'''
        return super(IGPFieldInfo, self).RemoveAll()
    def AddField(self, fieldIndex, FieldName, newFieldName, Visible, split):
        '''Method IGPFieldInfo.AddField

           INPUTS
            fieldIndex          : long
            FieldName           : BSTR
            newFieldName        : BSTR
            Visible             : VARIANT_BOOL
            split               : esriGPFieldInfoSplitRule'''
        return super(IGPFieldInfo, self).AddField(fieldIndex, FieldName, newFieldName, Visible, split)
    def get_Count(self):
        '''Method IGPFieldInfo.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPFieldInfo, self).get_Count()
    def GetFieldName(self, Index):
        '''Method IGPFieldInfo.GetFieldName

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFieldInfo, self).GetFieldName(Index)
    def GetFieldIndex(self, Index):
        '''Method IGPFieldInfo.GetFieldIndex

           INPUT
            Index               : long

           OUTPUT
            fieldIndex          : long*'''
        return super(IGPFieldInfo, self).GetFieldIndex(Index)
    def GetNamingError(self, Index):
        '''Method IGPFieldInfo.GetNamingError

           INPUT
            Index               : long

           OUTPUT
            error               : VARIANT_BOOL*'''
        return super(IGPFieldInfo, self).GetNamingError(Index)
    def GetNewName(self, Index):
        '''Method IGPFieldInfo.GetNewName

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFieldInfo, self).GetNewName(Index)
    def GetSplitRule(self, Index):
        '''Method IGPFieldInfo.GetSplitRule

           INPUT
            Index               : long

           OUTPUT
            split               : esriGPFieldInfoSplitRule*'''
        return super(IGPFieldInfo, self).GetSplitRule(Index)
    def GetVisible(self, Index):
        '''Method IGPFieldInfo.GetVisible

           INPUT
            Index               : long

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IGPFieldInfo, self).GetVisible(Index)
    def SetFieldName(self, Index, Name):
        '''Method IGPFieldInfo.SetFieldName

           INPUTS
            Index               : long
            Name                : BSTR'''
        return super(IGPFieldInfo, self).SetFieldName(Index, Name)
    def SetFieldIndex(self, Index, fieldIndex):
        '''Method IGPFieldInfo.SetFieldIndex

           INPUTS
            Index               : long
            fieldIndex          : long'''
        return super(IGPFieldInfo, self).SetFieldIndex(Index, fieldIndex)
    def SetNamingError(self, Index, error):
        '''Method IGPFieldInfo.SetNamingError

           INPUTS
            Index               : long
            error               : VARIANT_BOOL'''
        return super(IGPFieldInfo, self).SetNamingError(Index, error)
    def SetNewName(self, Index, Name):
        '''Method IGPFieldInfo.SetNewName

           INPUTS
            Index               : long
            Name                : BSTR'''
        return super(IGPFieldInfo, self).SetNewName(Index, Name)
    def SetSplitRule(self, Index, split):
        '''Method IGPFieldInfo.SetSplitRule

           INPUTS
            Index               : long
            split               : esriGPFieldInfoSplitRule'''
        return super(IGPFieldInfo, self).SetSplitRule(Index, split)
    def SetVisible(self, Index, Visible):
        '''Method IGPFieldInfo.SetVisible

           INPUTS
            Index               : long
            Visible             : VARIANT_BOOL'''
        return super(IGPFieldInfo, self).SetVisible(Index, Visible)
    def RemoveField(self, Index):
        '''Method IGPFieldInfo.RemoveField

           INPUT
            Index               : long'''
        return super(IGPFieldInfo, self).RemoveField(Index)
    def FindFieldByName(self, FieldName):
        '''Method IGPFieldInfo.FindFieldByName

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGPFieldInfo, self).FindFieldByName(FieldName)
    def FindFieldByNewName(self, FieldName):
        '''Method IGPFieldInfo.FindFieldByNewName

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGPFieldInfo, self).FindFieldByNewName(FieldName)
    def FindFieldByIndex(self, fieldIndex):
        '''Method IGPFieldInfo.FindFieldByIndex

           INPUT
            fieldIndex          : long

           OUTPUT
            Index               : long*'''
        return super(IGPFieldInfo, self).FindFieldByIndex(fieldIndex)
    Count = property(get_Count, None, None)

class IGPFieldInfo2(_esriGeoprocessing.IGPFieldInfo2):
    _IID = uuid.UUID('8c5ea59e-b50b-4898-8624-5eb777dbec66')
    def GetMergeRule(self, Index):
        '''Method IGPFieldInfo2.GetMergeRule

           INPUT
            Index               : long

           OUTPUT
            Merge               : esriGPFieldMapMergeRule*'''
        return super(IGPFieldInfo2, self).GetMergeRule(Index)
    def SetMergeRule(self, Index, Merge):
        '''Method IGPFieldInfo2.SetMergeRule

           INPUTS
            Index               : long
            Merge               : esriGPFieldMapMergeRule'''
        return super(IGPFieldInfo2, self).SetMergeRule(Index, Merge)
    def GetJoinDelimiter(self, Index):
        '''Method IGPFieldInfo2.GetJoinDelimiter

           INPUT
            Index               : long

           OUTPUT
            Delimiter           : BSTR*'''
        return super(IGPFieldInfo2, self).GetJoinDelimiter(Index)
    def SetJoinDelimiter(self, Index, Delimiter):
        '''Method IGPFieldInfo2.SetJoinDelimiter

           INPUTS
            Index               : long
            Delimiter           : BSTR'''
        return super(IGPFieldInfo2, self).SetJoinDelimiter(Index, Delimiter)
    def GetTextPos(self, Index):
        '''Method IGPFieldInfo2.GetTextPos

           INPUT
            Index               : long

           OUTPUTS
            Start               : long*
            end                 : long*'''
        return super(IGPFieldInfo2, self).GetTextPos(Index)
    def SetTextPos(self, Index, Start, end):
        '''Method IGPFieldInfo2.SetTextPos

           INPUTS
            Index               : long
            Start               : long
            end                 : long'''
        return super(IGPFieldInfo2, self).SetTextPos(Index, Start, end)

class IGPFieldInfo3(_esriGeoprocessing.IGPFieldInfo3):
    _IID = uuid.UUID('ece4a21b-087a-4586-a554-13fad0b6ccb3')
    def GetAliasName(self, Index):
        '''Method IGPFieldInfo3.GetAliasName

           INPUT
            Index               : long

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPFieldInfo3, self).GetAliasName(Index)
    def SetAliasName(self, Index, Alias):
        '''Method IGPFieldInfo3.SetAliasName

           INPUTS
            Index               : long
            Alias               : BSTR'''
        return super(IGPFieldInfo3, self).SetAliasName(Index, Alias)

class IGPFieldInfoProperty(_esriGeoprocessing.IGPFieldInfoProperty):
    _IID = uuid.UUID('e623fed0-5721-4a2e-a8a9-804e724912f5')

    def __init__(self, *args, **kw):
        super(IGPFieldInfoProperty, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Index(self):
        '''Method IGPFieldInfoProperty.get_Index

           OUTPUT
            Index               : long*'''
        return super(IGPFieldInfoProperty, self).get_Index()
    def put_Index(self, Index):
        '''Method IGPFieldInfoProperty.put_Index

           INPUT
            Index               : long'''
        return super(IGPFieldInfoProperty, self).put_Index(Index)
    def get_Name(self):
        '''Method IGPFieldInfoProperty.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFieldInfoProperty, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPFieldInfoProperty.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPFieldInfoProperty, self).put_Name(Name)
    def get_Alias(self):
        '''Method IGPFieldInfoProperty.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPFieldInfoProperty, self).get_Alias()
    def put_Alias(self, Alias):
        '''Method IGPFieldInfoProperty.put_Alias

           INPUT
            Alias               : BSTR'''
        return super(IGPFieldInfoProperty, self).put_Alias(Alias)
    def get_SplitRule(self):
        '''Method IGPFieldInfoProperty.get_SplitRule

           OUTPUT
            rule                : esriGPFieldInfoSplitRule*'''
        return super(IGPFieldInfoProperty, self).get_SplitRule()
    def put_SplitRule(self, rule):
        '''Method IGPFieldInfoProperty.put_SplitRule

           INPUT
            rule                : esriGPFieldInfoSplitRule'''
        return super(IGPFieldInfoProperty, self).put_SplitRule(rule)
    def get_Visible(self):
        '''Method IGPFieldInfoProperty.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IGPFieldInfoProperty, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IGPFieldInfoProperty.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IGPFieldInfoProperty, self).put_Visible(Visible)
    def get_HasError(self):
        '''Method IGPFieldInfoProperty.get_HasError

           OUTPUT
            error               : VARIANT_BOOL*'''
        return super(IGPFieldInfoProperty, self).get_HasError()
    def put_HasError(self, error):
        '''Method IGPFieldInfoProperty.put_HasError

           INPUT
            error               : VARIANT_BOOL'''
        return super(IGPFieldInfoProperty, self).put_HasError(error)
    Alias = property(get_Alias, put_Alias, None)
    HasError = property(get_HasError, put_HasError, None)
    Index = property(get_Index, put_Index, None)
    Name = property(get_Name, put_Name, None)
    SplitRule = property(get_SplitRule, put_SplitRule, None)
    Visible = property(get_Visible, put_Visible, None)

class IGPFieldInfoProperty2(_esriGeoprocessing.IGPFieldInfoProperty2):
    _IID = uuid.UUID('8fb38849-b524-4e75-819c-80e6152b2b9f')

    def __init__(self, *args, **kw):
        super(IGPFieldInfoProperty2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MergeRule(self):
        '''Method IGPFieldInfoProperty2.get_MergeRule

           OUTPUT
            rule                : esriGPFieldMapMergeRule*'''
        return super(IGPFieldInfoProperty2, self).get_MergeRule()
    def put_MergeRule(self, rule):
        '''Method IGPFieldInfoProperty2.put_MergeRule

           INPUT
            rule                : esriGPFieldMapMergeRule'''
        return super(IGPFieldInfoProperty2, self).put_MergeRule(rule)
    def get_JoinDelimiter(self):
        '''Method IGPFieldInfoProperty2.get_JoinDelimiter

           OUTPUT
            Delimiter           : BSTR*'''
        return super(IGPFieldInfoProperty2, self).get_JoinDelimiter()
    def put_JoinDelimiter(self, Delimiter):
        '''Method IGPFieldInfoProperty2.put_JoinDelimiter

           INPUT
            Delimiter           : BSTR'''
        return super(IGPFieldInfoProperty2, self).put_JoinDelimiter(Delimiter)
    def GetTextPos(self):
        '''Method IGPFieldInfoProperty2.GetTextPos

           OUTPUTS
            Start               : long*
            end                 : long*'''
        return super(IGPFieldInfoProperty2, self).GetTextPos()
    def SetTextPos(self, Start, end):
        '''Method IGPFieldInfoProperty2.SetTextPos

           INPUTS
            Start               : long
            end                 : long'''
        return super(IGPFieldInfoProperty2, self).SetTextPos(Start, end)
    JoinDelimiter = property(get_JoinDelimiter, put_JoinDelimiter, None)
    MergeRule = property(get_MergeRule, put_MergeRule, None)

class IGPFieldInfoProperty3(_esriGeoprocessing.IGPFieldInfoProperty3):
    _IID = uuid.UUID('e68c2d9f-3eb5-4855-a36f-ae254c2b377d')

    def __init__(self, *args, **kw):
        super(IGPFieldInfoProperty3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RealAlias(self):
        '''Method IGPFieldInfoProperty3.get_RealAlias

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPFieldInfoProperty3, self).get_RealAlias()
    def put_RealAlias(self, Alias):
        '''Method IGPFieldInfoProperty3.put_RealAlias

           INPUT
            Alias               : BSTR'''
        return super(IGPFieldInfoProperty3, self).put_RealAlias(Alias)
    RealAlias = property(get_RealAlias, put_RealAlias, None)

class IGPValueTable(_esriGeoprocessing.IGPValueTable):
    _IID = uuid.UUID('270e32ad-b10d-4de0-8664-688062ba1846')
    def get_DataTypeCount(self):
        '''Method IGPValueTable.get_DataTypeCount

           OUTPUT
            Count               : long*'''
        return super(IGPValueTable, self).get_DataTypeCount()
    def get_DataType(self, Index):
        '''Method IGPValueTable.get_DataType

           INPUT
            Index               : long

           OUTPUT
            ppDataType          : IGPDataType**'''
        return super(IGPValueTable, self).get_DataType(Index)
    def AddDataType(self, pDataType):
        '''Method IGPValueTable.AddDataType

           INPUT
            pDataType           : IGPDataType*'''
        return super(IGPValueTable, self).AddDataType(pDataType)
    def RemoveDataType(self, Index):
        '''Method IGPValueTable.RemoveDataType

           INPUT
            Index               : long'''
        return super(IGPValueTable, self).RemoveDataType(Index)
    def get_RecordCount(self):
        '''Method IGPValueTable.get_RecordCount

           OUTPUT
            Count               : long*'''
        return super(IGPValueTable, self).get_RecordCount()
    def GetValue(self, row, col):
        '''Method IGPValueTable.GetValue

           INPUTS
            row                 : long
            col                 : long

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPValueTable, self).GetValue(row, col)
    def SetValue(self, row, col, ppValue):
        '''Method IGPValueTable.SetValue

           INPUTS
            row                 : long
            col                 : long
            ppValue             : IGPValue*'''
        return super(IGPValueTable, self).SetValue(row, col, ppValue)
    def AddRecord(self, pValues):
        '''Method IGPValueTable.AddRecord

           INPUT
            pValues             : IArray*'''
        return super(IGPValueTable, self).AddRecord(pValues)
    def InsertRecord(self, Index, pValues):
        '''Method IGPValueTable.InsertRecord

           INPUTS
            Index               : long
            pValues             : IArray*'''
        return super(IGPValueTable, self).InsertRecord(Index, pValues)
    def ReplaceRecord(self, Index, pValues):
        '''Method IGPValueTable.ReplaceRecord

           INPUTS
            Index               : long
            pValues             : IArray*'''
        return super(IGPValueTable, self).ReplaceRecord(Index, pValues)
    def RemoveRecord(self, Index):
        '''Method IGPValueTable.RemoveRecord

           INPUT
            Index               : long'''
        return super(IGPValueTable, self).RemoveRecord(Index)
    def GetRecord(self, Index):
        '''Method IGPValueTable.GetRecord

           INPUT
            Index               : long

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPValueTable, self).GetRecord(Index)
    def RemoveValue(self, pValue):
        '''Method IGPValueTable.RemoveValue

           INPUT
            pValue              : IGPValue*'''
        return super(IGPValueTable, self).RemoveValue(pValue)
    DataTypeCount = property(get_DataTypeCount, None, None)
    RecordCount = property(get_RecordCount, None, None)
    DataType = IndexProperty(get_DataType, None)

class IGPValueTableType(_esriGeoprocessing.IGPValueTableType):
    _IID = uuid.UUID('2fa954ba-3399-4c5f-9202-9ee91c54b764')
    def get_Count(self):
        '''Method IGPValueTableType.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPValueTableType, self).get_Count()
    def get_DataType(self, Index):
        '''Method IGPValueTableType.get_DataType

           INPUT
            Index               : long

           OUTPUT
            ppDataType          : IGPDataType**'''
        return super(IGPValueTableType, self).get_DataType(Index)
    def get_Width(self, Index):
        '''Method IGPValueTableType.get_Width

           INPUT
            Index               : long

           OUTPUT
            pWidth              : long*'''
        return super(IGPValueTableType, self).get_Width(Index)
    def get_DisplayName(self, Index):
        '''Method IGPValueTableType.get_DisplayName

           INPUT
            Index               : long

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(IGPValueTableType, self).get_DisplayName(Index)
    def AddDataType(self, pDataType, DisplayName, Width, CLSID):
        '''Method IGPValueTableType.AddDataType

           INPUTS
            pDataType           : IGPDataType*
            DisplayName         : BSTR
            Width               : long
            CLSID               : IUID*'''
        return super(IGPValueTableType, self).AddDataType(pDataType, DisplayName, Width, CLSID)
    def RemoveDataType(self, Index):
        '''Method IGPValueTableType.RemoveDataType

           INPUT
            Index               : long'''
        return super(IGPValueTableType, self).RemoveDataType(Index)
    def get_ControlCLSID(self, Index):
        '''Method IGPValueTableType.get_ControlCLSID

           INPUT
            Index               : long

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPValueTableType, self).get_ControlCLSID(Index)
    Count = property(get_Count, None, None)
    ControlCLSID = IndexProperty(get_ControlCLSID, None)
    DataType = IndexProperty(get_DataType, None)
    DisplayName = IndexProperty(get_DisplayName, None)
    Width = IndexProperty(get_Width, None)

class IGPMultiValue(_esriGeoprocessing.IGPMultiValue):
    _IID = uuid.UUID('f38c53bd-e600-463c-8440-00eb607f526f')

    def __init__(self, *args, **kw):
        super(IGPMultiValue, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self, Index):
        '''Method IGPMultiValue.get_Value

           INPUT
            Index               : long

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPMultiValue, self).get_Value(Index)
    def get_Values(self):
        '''Method IGPMultiValue.get_Values

           OUTPUT
            Values              : IEnumGPValue**'''
        return super(IGPMultiValue, self).get_Values()
    def putref_MemberDataType(self, Type):
        '''Method IGPMultiValue.putref_MemberDataType

           INPUT
            Type                : IGPDataType*'''
        return super(IGPMultiValue, self).putref_MemberDataType(Type)
    def get_MemberDataType(self):
        '''Method IGPMultiValue.get_MemberDataType

           OUTPUT
            Type                : IGPDataType**'''
        return super(IGPMultiValue, self).get_MemberDataType()
    def get_Count(self):
        '''Method IGPMultiValue.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPMultiValue, self).get_Count()
    def AddValue(self, Value):
        '''Method IGPMultiValue.AddValue

           INPUT
            Value               : IGPValue*'''
        return super(IGPMultiValue, self).AddValue(Value)
    def Insert(self, Index, Value):
        '''Method IGPMultiValue.Insert

           INPUTS
            Index               : long
            Value               : IGPValue*'''
        return super(IGPMultiValue, self).Insert(Index, Value)
    def RemoveValue(self, Value):
        '''Method IGPMultiValue.RemoveValue

           INPUT
            Value               : IGPValue*'''
        return super(IGPMultiValue, self).RemoveValue(Value)
    def Remove(self, Index):
        '''Method IGPMultiValue.Remove

           INPUT
            Index               : long'''
        return super(IGPMultiValue, self).Remove(Index)
    def Replace(self, Index, Value):
        '''Method IGPMultiValue.Replace

           INPUTS
            Index               : long
            Value               : IGPValue*'''
        return super(IGPMultiValue, self).Replace(Index, Value)
    Count = property(get_Count, None, None)
    MemberDataType = property(get_MemberDataType, putref_MemberDataType, None)
    Values = property(get_Values, None, None)
    Value = IndexProperty(get_Value, None)

class IGPMultiValueType(_esriGeoprocessing.IGPMultiValueType):
    _IID = uuid.UUID('a8506f48-20d0-4c06-8e77-628a522c9239')

    def __init__(self, *args, **kw):
        super(IGPMultiValueType, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_MemberDataType(self, Type):
        '''Method IGPMultiValueType.putref_MemberDataType

           INPUT
            Type                : IGPDataType*'''
        return super(IGPMultiValueType, self).putref_MemberDataType(Type)
    def get_MemberDataType(self):
        '''Method IGPMultiValueType.get_MemberDataType

           OUTPUT
            Type                : IGPDataType**'''
        return super(IGPMultiValueType, self).get_MemberDataType()
    MemberDataType = property(get_MemberDataType, putref_MemberDataType, None)

class IGPMultiValueDataTypeName(_esriGeoprocessing.IGPMultiValueDataTypeName):
    _IID = uuid.UUID('831a514c-6083-404a-8c74-37c9d047eca8')

    def __init__(self, *args, **kw):
        super(IGPMultiValueDataTypeName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MemberDataTypeName(self):
        '''Method IGPMultiValueDataTypeName.get_MemberDataTypeName

           OUTPUT
            Name                : IGPDataTypeName**'''
        return super(IGPMultiValueDataTypeName, self).get_MemberDataTypeName()
    def putref_MemberDataTypeName(self, Name):
        '''Method IGPMultiValueDataTypeName.putref_MemberDataTypeName

           INPUT
            Name                : IGPDataTypeName*'''
        return super(IGPMultiValueDataTypeName, self).putref_MemberDataTypeName(Name)
    MemberDataTypeName = property(get_MemberDataTypeName, putref_MemberDataTypeName, None)

class IGPVariant(_esriGeoprocessing.IGPVariant):
    _IID = uuid.UUID('c872280b-fd3d-497f-931a-bf13acaed8fd')

    def __init__(self, *args, **kw):
        super(IGPVariant, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Variant(self):
        '''Method IGPVariant.get_Variant

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPVariant, self).get_Variant()
    def put_Variant(self, Value):
        '''Method IGPVariant.put_Variant

           INPUT
            Value               : VARIANT'''
        return super(IGPVariant, self).put_Variant(Value)
    Variant = property(get_Variant, put_Variant, None)

class IGPBoolean(_esriGeoprocessing.IGPBoolean):
    _IID = uuid.UUID('e13e9563-f187-483b-af21-c3cc03735fa3')

    def __init__(self, *args, **kw):
        super(IGPBoolean, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPBoolean.get_Value

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPBoolean, self).get_Value()
    def put_Value(self, Value):
        '''Method IGPBoolean.put_Value

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPBoolean, self).put_Value(Value)
    Value = property(get_Value, put_Value, None)

class IGPString(_esriGeoprocessing.IGPString):
    _IID = uuid.UUID('fb2cd654-2bf9-45c4-8bf5-f03c3214ab84')

    def __init__(self, *args, **kw):
        super(IGPString, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPString.get_Value

           OUTPUT
            Value               : BSTR*'''
        return super(IGPString, self).get_Value()
    def put_Value(self, Value):
        '''Method IGPString.put_Value

           INPUT
            Value               : BSTR'''
        return super(IGPString, self).put_Value(Value)
    Value = property(get_Value, put_Value, None)

class IGPDate(_esriGeoprocessing.IGPDate):
    _IID = uuid.UUID('4f9669d7-7c2b-46c5-80cf-fb6e275a149b')

    def __init__(self, *args, **kw):
        super(IGPDate, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPDate.get_Value

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPDate, self).get_Value()
    def put_Value(self, Value):
        '''Method IGPDate.put_Value

           INPUT
            Value               : VARIANT'''
        return super(IGPDate, self).put_Value(Value)
    Value = property(get_Value, put_Value, None)

class IGPDouble(_esriGeoprocessing.IGPDouble):
    _IID = uuid.UUID('0c354808-969d-43d0-89b6-72fa7f1ce56d')

    def __init__(self, *args, **kw):
        super(IGPDouble, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPDouble.get_Value

           OUTPUT
            Value               : double*'''
        return super(IGPDouble, self).get_Value()
    def put_Value(self, Value):
        '''Method IGPDouble.put_Value

           INPUT
            Value               : double'''
        return super(IGPDouble, self).put_Value(Value)
    Value = property(get_Value, put_Value, None)

class IGPLong(_esriGeoprocessing.IGPLong):
    _IID = uuid.UUID('083665c0-3d3d-42b6-b9bd-7d98b03583e7')

    def __init__(self, *args, **kw):
        super(IGPLong, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPLong.get_Value

           OUTPUT
            Value               : long*'''
        return super(IGPLong, self).get_Value()
    def put_Value(self, Value):
        '''Method IGPLong.put_Value

           INPUT
            Value               : long'''
        return super(IGPLong, self).put_Value(Value)
    Value = property(get_Value, put_Value, None)

class IGPEnvelope(_esriGeoprocessing.IGPEnvelope):
    _IID = uuid.UUID('3a1f9b59-74e8-41c2-bae6-58cfb635f061')

    def __init__(self, *args, **kw):
        super(IGPEnvelope, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_XMin(self):
        '''Method IGPEnvelope.get_XMin

           OUTPUT
            XMin                : double*'''
        return super(IGPEnvelope, self).get_XMin()
    def put_XMin(self, XMin):
        '''Method IGPEnvelope.put_XMin

           INPUT
            XMin                : double'''
        return super(IGPEnvelope, self).put_XMin(XMin)
    def get_YMin(self):
        '''Method IGPEnvelope.get_YMin

           OUTPUT
            YMin                : double*'''
        return super(IGPEnvelope, self).get_YMin()
    def put_YMin(self, YMin):
        '''Method IGPEnvelope.put_YMin

           INPUT
            YMin                : double'''
        return super(IGPEnvelope, self).put_YMin(YMin)
    def get_XMax(self):
        '''Method IGPEnvelope.get_XMax

           OUTPUT
            XMax                : double*'''
        return super(IGPEnvelope, self).get_XMax()
    def put_XMax(self, XMax):
        '''Method IGPEnvelope.put_XMax

           INPUT
            XMax                : double'''
        return super(IGPEnvelope, self).put_XMax(XMax)
    def get_YMax(self):
        '''Method IGPEnvelope.get_YMax

           OUTPUT
            YMax                : double*'''
        return super(IGPEnvelope, self).get_YMax()
    def put_YMax(self, YMax):
        '''Method IGPEnvelope.put_YMax

           INPUT
            YMax                : double'''
        return super(IGPEnvelope, self).put_YMax(YMax)
    def get_Extent(self):
        '''Method IGPEnvelope.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGPEnvelope, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IGPEnvelope.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IGPEnvelope, self).putref_Extent(ppExtent)
    def SetCoords(self, XMin, YMin, XMax, YMax):
        '''Method IGPEnvelope.SetCoords

           INPUTS
            XMin                : double
            YMin                : double
            XMax                : double
            YMax                : double'''
        return super(IGPEnvelope, self).SetCoords(XMin, YMin, XMax, YMax)
    Extent = property(get_Extent, putref_Extent, None)
    XMax = property(get_XMax, put_XMax, None)
    XMin = property(get_XMin, put_XMin, None)
    YMax = property(get_YMax, put_YMax, None)
    YMin = property(get_YMin, put_YMin, None)

class IGPExtent(_esriGeoprocessing.IGPExtent):
    _IID = uuid.UUID('ac621f7a-3033-4321-b1e3-c86a8e3e026f')
    def SetExtent(self, envType, extentProvider, snapRasterData):
        '''Method IGPExtent.SetExtent

           INPUTS
            envType             : esriGPExtentEnum
            extentProvider      : VARIANT*
            snapRasterData      : VARIANT*'''
        return super(IGPExtent, self).SetExtent(envType, extentProvider, snapRasterData)
    def GetExtent(self):
        '''Method IGPExtent.GetExtent

           OUTPUTS
            envType             : esriGPExtentEnum*
            Extent              : IEnvelope**'''
        return super(IGPExtent, self).GetExtent()

class IGPSpatialReference(_esriGeoprocessing.IGPSpatialReference):
    _IID = uuid.UUID('dc09967a-6a3f-4952-9869-8c6a14537ac8')

    def __init__(self, *args, **kw):
        super(IGPSpatialReference, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method IGPSpatialReference.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGPSpatialReference, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method IGPSpatialReference.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IGPSpatialReference, self).putref_SpatialReference(ppSpatialReference)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGPCoordinateSystem(_esriGeoprocessing.IGPCoordinateSystem):
    _IID = uuid.UUID('3df8ce99-d13b-4ef0-84eb-cd21ccc45c66')

    def __init__(self, *args, **kw):
        super(IGPCoordinateSystem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method IGPCoordinateSystem.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGPCoordinateSystem, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method IGPCoordinateSystem.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IGPCoordinateSystem, self).putref_SpatialReference(ppSpatialReference)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGPXYDomain(_esriGeoprocessing.IGPXYDomain):
    _IID = uuid.UUID('da17857c-b50a-47ef-bd28-0fd2b88ba7c8')
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method IGPXYDomain.SetDomain

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IGPXYDomain, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetDomain(self):
        '''Method IGPXYDomain.GetDomain

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IGPXYDomain, self).GetDomain()
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method IGPXYDomain.SetFalseOriginAndUnits

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IGPXYDomain, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def GetFalseOriginAndUnits(self):
        '''Method IGPXYDomain.GetFalseOriginAndUnits

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IGPXYDomain, self).GetFalseOriginAndUnits()
    def SetDomainFromSpatialReference(self, pSpRef):
        '''Method IGPXYDomain.SetDomainFromSpatialReference

           INPUT
            pSpRef              : ISpatialReference*'''
        return super(IGPXYDomain, self).SetDomainFromSpatialReference(pSpRef)
    def SetDomainFromExtent(self, pExtent):
        '''Method IGPXYDomain.SetDomainFromExtent

           INPUT
            pExtent             : IEnvelope*'''
        return super(IGPXYDomain, self).SetDomainFromExtent(pExtent)
    def GetExtent(self):
        '''Method IGPXYDomain.GetExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGPXYDomain, self).GetExtent()
    def GetSpatialReference(self):
        '''Method IGPXYDomain.GetSpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGPXYDomain, self).GetSpatialReference()

class IGPZDomain(_esriGeoprocessing.IGPZDomain):
    _IID = uuid.UUID('61f57f76-ab2e-4efc-9d2d-beb6d13e1c54')
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method IGPZDomain.SetZFalseOriginAndUnits

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IGPZDomain, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def GetZFalseOriginAndUnits(self):
        '''Method IGPZDomain.GetZFalseOriginAndUnits

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IGPZDomain, self).GetZFalseOriginAndUnits()
    def GetZDomain(self):
        '''Method IGPZDomain.GetZDomain

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IGPZDomain, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method IGPZDomain.SetZDomain

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IGPZDomain, self).SetZDomain(inZMin, inZMax)
    def SetZDomainFromSpatialReference(self, pSpRef):
        '''Method IGPZDomain.SetZDomainFromSpatialReference

           INPUT
            pSpRef              : ISpatialReference*'''
        return super(IGPZDomain, self).SetZDomainFromSpatialReference(pSpRef)
    def GetSpatialReference(self):
        '''Method IGPZDomain.GetSpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGPZDomain, self).GetSpatialReference()

class IGPMDomain(_esriGeoprocessing.IGPMDomain):
    _IID = uuid.UUID('3bd599e0-7aa7-411d-ba16-270709460f93')
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method IGPMDomain.SetMFalseOriginAndUnits

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IGPMDomain, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetMFalseOriginAndUnits(self):
        '''Method IGPMDomain.GetMFalseOriginAndUnits

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IGPMDomain, self).GetMFalseOriginAndUnits()
    def GetMDomain(self):
        '''Method IGPMDomain.GetMDomain

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IGPMDomain, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method IGPMDomain.SetMDomain

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IGPMDomain, self).SetMDomain(inMMin, inMMax)
    def SetMDomainFromSpatialReference(self, pSpRef):
        '''Method IGPMDomain.SetMDomainFromSpatialReference

           INPUT
            pSpRef              : ISpatialReference*'''
        return super(IGPMDomain, self).SetMDomainFromSpatialReference(pSpRef)
    def GetSpatialReference(self):
        '''Method IGPMDomain.GetSpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGPMDomain, self).GetSpatialReference()

class IGPPoint(_esriGeoprocessing.IGPPoint):
    _IID = uuid.UUID('a3cd267b-86a1-4ed6-a8dd-5ae09b84f00e')

    def __init__(self, *args, **kw):
        super(IGPPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_X(self):
        '''Method IGPPoint.get_X

           OUTPUT
            X                   : double*'''
        return super(IGPPoint, self).get_X()
    def put_X(self, X):
        '''Method IGPPoint.put_X

           INPUT
            X                   : double'''
        return super(IGPPoint, self).put_X(X)
    def get_Y(self):
        '''Method IGPPoint.get_Y

           OUTPUT
            Y                   : double*'''
        return super(IGPPoint, self).get_Y()
    def put_Y(self, Y):
        '''Method IGPPoint.put_Y

           INPUT
            Y                   : double'''
        return super(IGPPoint, self).put_Y(Y)
    def SetCoords(self, X, Y):
        '''Method IGPPoint.SetCoords

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IGPPoint, self).SetCoords(X, Y)
    X = property(get_X, put_X, None)
    Y = property(get_Y, put_Y, None)

class IGPPoint2(_esriGeoprocessing.IGPPoint2):
    _IID = uuid.UUID('99e58d3f-30db-4866-80cd-d60c4cb86fec')

    def __init__(self, *args, **kw):
        super(IGPPoint2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Point(self):
        '''Method IGPPoint2.get_Point

           OUTPUT
            Point               : IPoint**'''
        return super(IGPPoint2, self).get_Point()
    def putref_Point(self, Point):
        '''Method IGPPoint2.putref_Point

           INPUT
            Point               : IPoint*'''
        return super(IGPPoint2, self).putref_Point(Point)
    Point = property(get_Point, putref_Point, None)

class IGPPolygon(_esriGeoprocessing.IGPPolygon):
    _IID = uuid.UUID('3f78d6d8-0b9a-4677-ae55-84ff0519549d')
    def get_Count(self):
        '''Method IGPPolygon.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPPolygon, self).get_Count()
    def GetPoint(self, Index):
        '''Method IGPPolygon.GetPoint

           INPUT
            Index               : long

           OUTPUT
            Point               : IGPPoint**'''
        return super(IGPPolygon, self).GetPoint(Index)
    def AddPoint(self, Point):
        '''Method IGPPolygon.AddPoint

           INPUT
            Point               : IGPPoint*'''
        return super(IGPPolygon, self).AddPoint(Point)
    def GetCoords(self, Index):
        '''Method IGPPolygon.GetCoords

           INPUT
            Index               : long

           OUTPUTS
            X                   : double*
            Y                   : double*'''
        return super(IGPPolygon, self).GetCoords(Index)
    def AddCoords(self, X, Y):
        '''Method IGPPolygon.AddCoords

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IGPPolygon, self).AddCoords(X, Y)
    Count = property(get_Count, None, None)

class IGPPolygon2(_esriGeoprocessing.IGPPolygon2):
    _IID = uuid.UUID('30c7a043-eef4-4fe1-bfae-983de49586ca')

    def __init__(self, *args, **kw):
        super(IGPPolygon2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Polygon(self):
        '''Method IGPPolygon2.get_Polygon

           OUTPUT
            Polygon             : IPolygon**'''
        return super(IGPPolygon2, self).get_Polygon()
    def putref_Polygon(self, Polygon):
        '''Method IGPPolygon2.putref_Polygon

           INPUT
            Polygon             : IPolygon*'''
        return super(IGPPolygon2, self).putref_Polygon(Polygon)
    Polygon = property(get_Polygon, putref_Polygon, None)

class IGPLine(_esriGeoprocessing.IGPLine):
    _IID = uuid.UUID('16880be0-ec1e-46bd-9f87-82d1fcbd6009')
    def get_Count(self):
        '''Method IGPLine.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPLine, self).get_Count()
    def GetPoint(self, Index):
        '''Method IGPLine.GetPoint

           INPUT
            Index               : long

           OUTPUT
            Point               : IGPPoint**'''
        return super(IGPLine, self).GetPoint(Index)
    def AddPoint(self, Point):
        '''Method IGPLine.AddPoint

           INPUT
            Point               : IGPPoint*'''
        return super(IGPLine, self).AddPoint(Point)
    def GetCoords(self, Index):
        '''Method IGPLine.GetCoords

           INPUT
            Index               : long

           OUTPUTS
            X                   : double*
            Y                   : double*'''
        return super(IGPLine, self).GetCoords(Index)
    def AddCoords(self, X, Y):
        '''Method IGPLine.AddCoords

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IGPLine, self).AddCoords(X, Y)
    Count = property(get_Count, None, None)

class IGPLine2(_esriGeoprocessing.IGPLine2):
    _IID = uuid.UUID('1248339d-7b76-4a43-8fe0-752b1bf9d39a')

    def __init__(self, *args, **kw):
        super(IGPLine2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Polyline(self):
        '''Method IGPLine2.get_Polyline

           OUTPUT
            Polyline            : IPolyline**'''
        return super(IGPLine2, self).get_Polyline()
    def putref_Polyline(self, Polyline):
        '''Method IGPLine2.putref_Polyline

           INPUT
            Polyline            : IPolyline*'''
        return super(IGPLine2, self).putref_Polyline(Polyline)
    Polyline = property(get_Polyline, putref_Polyline, None)

class IGPFeatureLayer(_esriGeoprocessing.IGPFeatureLayer):
    _IID = uuid.UUID('067b4f1a-9064-4c95-aaea-61598683c1df')

    def __init__(self, *args, **kw):
        super(IGPFeatureLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DEFeatureClass(self):
        '''Method IGPFeatureLayer.get_DEFeatureClass

           OUTPUT
            ppDEFeatureClass    : IDEFeatureClass**'''
        return super(IGPFeatureLayer, self).get_DEFeatureClass()
    def putref_DEFeatureClass(self, ppDEFeatureClass):
        '''Method IGPFeatureLayer.putref_DEFeatureClass

           INPUT
            ppDEFeatureClass    : IDEFeatureClass*'''
        return super(IGPFeatureLayer, self).putref_DEFeatureClass(ppDEFeatureClass)
    def get_FieldInfo(self):
        '''Method IGPFeatureLayer.get_FieldInfo

           OUTPUT
            FieldMap            : IGPFieldInfo**'''
        return super(IGPFeatureLayer, self).get_FieldInfo()
    def putref_FieldInfo(self, FieldMap):
        '''Method IGPFeatureLayer.putref_FieldInfo

           INPUT
            FieldMap            : IGPFieldInfo*'''
        return super(IGPFeatureLayer, self).putref_FieldInfo(FieldMap)
    def get_FIDSet(self):
        '''Method IGPFeatureLayer.get_FIDSet

           OUTPUT
            ppFIDSet            : IFIDSet**'''
        return super(IGPFeatureLayer, self).get_FIDSet()
    def putref_FIDSet(self, ppFIDSet):
        '''Method IGPFeatureLayer.putref_FIDSet

           INPUT
            ppFIDSet            : IFIDSet*'''
        return super(IGPFeatureLayer, self).putref_FIDSet(ppFIDSet)
    def get_WhereClause(self):
        '''Method IGPFeatureLayer.get_WhereClause

           OUTPUT
            pWhereClause        : BSTR*'''
        return super(IGPFeatureLayer, self).get_WhereClause()
    def put_WhereClause(self, pWhereClause):
        '''Method IGPFeatureLayer.put_WhereClause

           INPUT
            pWhereClause        : BSTR'''
        return super(IGPFeatureLayer, self).put_WhereClause(pWhereClause)
    def AddToFIDSet(self, oid):
        '''Method IGPFeatureLayer.AddToFIDSet

           INPUT
            oid                 : long'''
        return super(IGPFeatureLayer, self).AddToFIDSet(oid)
    DEFeatureClass = property(get_DEFeatureClass, putref_DEFeatureClass, None)
    FIDSet = property(get_FIDSet, putref_FIDSet, None)
    FieldInfo = property(get_FieldInfo, putref_FieldInfo, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IGPRouteMeasureEventProperties(_esriGeoprocessing.IGPRouteMeasureEventProperties):
    _IID = uuid.UUID('c9381003-455c-424e-a806-2ed4f293d25c')

    def __init__(self, *args, **kw):
        super(IGPRouteMeasureEventProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RouteIDFieldName(self):
        '''Method IGPRouteMeasureEventProperties.get_RouteIDFieldName

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IGPRouteMeasureEventProperties, self).get_RouteIDFieldName()
    def put_RouteIDFieldName(self, pFieldName):
        '''Method IGPRouteMeasureEventProperties.put_RouteIDFieldName

           INPUT
            pFieldName          : BSTR'''
        return super(IGPRouteMeasureEventProperties, self).put_RouteIDFieldName(pFieldName)
    def get_Type(self):
        '''Method IGPRouteMeasureEventProperties.get_Type

           OUTPUT
            pType               : BSTR*'''
        return super(IGPRouteMeasureEventProperties, self).get_Type()
    def put_Type(self, pType):
        '''Method IGPRouteMeasureEventProperties.put_Type

           INPUT
            pType               : BSTR'''
        return super(IGPRouteMeasureEventProperties, self).put_Type(pType)
    def get_FromMeasureFieldName(self):
        '''Method IGPRouteMeasureEventProperties.get_FromMeasureFieldName

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IGPRouteMeasureEventProperties, self).get_FromMeasureFieldName()
    def put_FromMeasureFieldName(self, pFieldName):
        '''Method IGPRouteMeasureEventProperties.put_FromMeasureFieldName

           INPUT
            pFieldName          : BSTR'''
        return super(IGPRouteMeasureEventProperties, self).put_FromMeasureFieldName(pFieldName)
    def get_ToMeasureFieldName(self):
        '''Method IGPRouteMeasureEventProperties.get_ToMeasureFieldName

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IGPRouteMeasureEventProperties, self).get_ToMeasureFieldName()
    def put_ToMeasureFieldName(self, pFieldName):
        '''Method IGPRouteMeasureEventProperties.put_ToMeasureFieldName

           INPUT
            pFieldName          : BSTR'''
        return super(IGPRouteMeasureEventProperties, self).put_ToMeasureFieldName(pFieldName)
    FromMeasureFieldName = property(get_FromMeasureFieldName, put_FromMeasureFieldName, None)
    RouteIDFieldName = property(get_RouteIDFieldName, put_RouteIDFieldName, None)
    ToMeasureFieldName = property(get_ToMeasureFieldName, put_ToMeasureFieldName, None)
    Type = property(get_Type, put_Type, None)

class IGPTableView(_esriGeoprocessing.IGPTableView):
    _IID = uuid.UUID('54b87a95-1bd1-42b6-addf-6dab68ba8f56')

    def __init__(self, *args, **kw):
        super(IGPTableView, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NameString(self):
        '''Method IGPTableView.get_NameString

           OUTPUT
            pNamestring         : BSTR*'''
        return super(IGPTableView, self).get_NameString()
    def put_NameString(self, pNamestring):
        '''Method IGPTableView.put_NameString

           INPUT
            pNamestring         : BSTR'''
        return super(IGPTableView, self).put_NameString(pNamestring)
    def get_DETable(self):
        '''Method IGPTableView.get_DETable

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGPTableView, self).get_DETable()
    def putref_DETable(self, ppDETable):
        '''Method IGPTableView.putref_DETable

           INPUT
            ppDETable           : IDETable*'''
        return super(IGPTableView, self).putref_DETable(ppDETable)
    def get_FieldInfo(self):
        '''Method IGPTableView.get_FieldInfo

           OUTPUT
            FieldMap            : IGPFieldInfo**'''
        return super(IGPTableView, self).get_FieldInfo()
    def putref_FieldInfo(self, FieldMap):
        '''Method IGPTableView.putref_FieldInfo

           INPUT
            FieldMap            : IGPFieldInfo*'''
        return super(IGPTableView, self).putref_FieldInfo(FieldMap)
    def get_WhereClause(self):
        '''Method IGPTableView.get_WhereClause

           OUTPUT
            pWhereClause        : BSTR*'''
        return super(IGPTableView, self).get_WhereClause()
    def put_WhereClause(self, pWhereClause):
        '''Method IGPTableView.put_WhereClause

           INPUT
            pWhereClause        : BSTR'''
        return super(IGPTableView, self).put_WhereClause(pWhereClause)
    def get_FIDSet(self):
        '''Method IGPTableView.get_FIDSet

           OUTPUT
            ppFIDSet            : IFIDSet**'''
        return super(IGPTableView, self).get_FIDSet()
    def putref_FIDSet(self, ppFIDSet):
        '''Method IGPTableView.putref_FIDSet

           INPUT
            ppFIDSet            : IFIDSet*'''
        return super(IGPTableView, self).putref_FIDSet(ppFIDSet)
    def AddToFIDSet(self, oid):
        '''Method IGPTableView.AddToFIDSet

           INPUT
            oid                 : long'''
        return super(IGPTableView, self).AddToFIDSet(oid)
    DETable = property(get_DETable, putref_DETable, None)
    FIDSet = property(get_FIDSet, putref_FIDSet, None)
    FieldInfo = property(get_FieldInfo, putref_FieldInfo, None)
    NameString = property(get_NameString, put_NameString, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IGPCodedValueDomainProperty(_esriGeoprocessing.IGPCodedValueDomainProperty):
    _IID = uuid.UUID('fbc0991d-8905-4b86-9010-9afc8ccee75b')

    def __init__(self, *args, **kw):
        super(IGPCodedValueDomainProperty, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPCodedValueDomainProperty.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPCodedValueDomainProperty, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPCodedValueDomainProperty.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPCodedValueDomainProperty, self).put_Name(Name)
    def get_Value(self):
        '''Method IGPCodedValueDomainProperty.get_Value

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPCodedValueDomainProperty, self).get_Value()
    def putref_Value(self, Value):
        '''Method IGPCodedValueDomainProperty.putref_Value

           INPUT
            Value               : IGPValue*'''
        return super(IGPCodedValueDomainProperty, self).putref_Value(Value)
    Name = property(get_Name, put_Name, None)
    Value = property(get_Value, putref_Value, None)

class IDataElementDomain(_esriGeoprocessing.IDataElementDomain):
    _IID = uuid.UUID('5082c43e-0803-44ab-b978-68b79f6ce509')
    def get_Count(self):
        '''Method IDataElementDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IDataElementDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IDataElementDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : BSTR*'''
        return super(IDataElementDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IDataElementDomain.AddType

           INPUT
            Type                : BSTR'''
        return super(IDataElementDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IDataElementDomain.DeleteType

           INPUT
            Type                : BSTR'''
        return super(IDataElementDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IDataElementDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IDataElementDomain, self).MakeList(pValue)
    Count = property(get_Count, None, None)
    Type = IndexProperty(get_Type, None)

class IGPFieldInfoDomain(_esriGeoprocessing.IGPFieldInfoDomain):
    _IID = uuid.UUID('692c5207-76e2-494e-b1a2-13a79c6e1f73')

    def __init__(self, *args, **kw):
        super(IGPFieldInfoDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CodedValueDomain(self):
        '''Method IGPFieldInfoDomain.get_CodedValueDomain

           OUTPUT
            ppDomain            : IGPCodedValueDomain**'''
        return super(IGPFieldInfoDomain, self).get_CodedValueDomain()
    def putref_CodedValueDomain(self, ppDomain):
        '''Method IGPFieldInfoDomain.putref_CodedValueDomain

           INPUT
            ppDomain            : IGPCodedValueDomain*'''
        return super(IGPFieldInfoDomain, self).putref_CodedValueDomain(ppDomain)
    CodedValueDomain = property(get_CodedValueDomain, putref_CodedValueDomain, None)

class IGPWorkspaceDomain(_esriGeoprocessing.IGPWorkspaceDomain):
    _IID = uuid.UUID('7feebbdf-af2e-4fe1-b28a-db6bf5b9c869')
    def get_Count(self):
        '''Method IGPWorkspaceDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPWorkspaceDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPWorkspaceDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriWorkspaceType*'''
        return super(IGPWorkspaceDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPWorkspaceDomain.AddType

           INPUT
            Type                : esriWorkspaceType'''
        return super(IGPWorkspaceDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPWorkspaceDomain.DeleteType

           INPUT
            Type                : esriWorkspaceType'''
        return super(IGPWorkspaceDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPWorkspaceDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPWorkspaceDomain, self).MakeList(pValue)
    Count = property(get_Count, None, None)
    Type = IndexProperty(get_Type, None)

class IGPFileDomain(_esriGeoprocessing.IGPFileDomain):
    _IID = uuid.UUID('137cbd70-2b0b-4549-aa65-b0490d774ea0')
    def get_Count(self):
        '''Method IGPFileDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPFileDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPFileDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : BSTR*'''
        return super(IGPFileDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPFileDomain.AddType

           INPUT
            Type                : BSTR'''
        return super(IGPFileDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPFileDomain.DeleteType

           INPUT
            Type                : BSTR'''
        return super(IGPFileDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPFileDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPFileDomain, self).MakeList(pValue)
    Count = property(get_Count, None, None)
    Type = IndexProperty(get_Type, None)

class IGPDatasetDomain(_esriGeoprocessing.IGPDatasetDomain):
    _IID = uuid.UUID('98fd17fd-0943-4513-b097-5af3d06b6b39')
    def get_Count(self):
        '''Method IGPDatasetDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPDatasetDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPDatasetDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriDatasetType*'''
        return super(IGPDatasetDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPDatasetDomain.AddType

           INPUT
            Type                : esriDatasetType'''
        return super(IGPDatasetDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPDatasetDomain.DeleteType

           INPUT
            Type                : esriDatasetType'''
        return super(IGPDatasetDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPDatasetDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPDatasetDomain, self).MakeList(pValue)
    def SetVersionedFilter(self, filter, Type):
        '''Method IGPDatasetDomain.SetVersionedFilter

           INPUTS
            filter              : VARIANT_BOOL
            Type                : VARIANT_BOOL'''
        return super(IGPDatasetDomain, self).SetVersionedFilter(filter, Type)
    def get_FilterVersioned(self):
        '''Method IGPDatasetDomain.get_FilterVersioned

           OUTPUT
            pFilter             : VARIANT_BOOL*'''
        return super(IGPDatasetDomain, self).get_FilterVersioned()
    def get_FilterVersionedType(self):
        '''Method IGPDatasetDomain.get_FilterVersionedType

           OUTPUT
            pType               : VARIANT_BOOL*'''
        return super(IGPDatasetDomain, self).get_FilterVersionedType()
    def SetCanVersionFilter(self, filter, Type):
        '''Method IGPDatasetDomain.SetCanVersionFilter

           INPUTS
            filter              : VARIANT_BOOL
            Type                : VARIANT_BOOL'''
        return super(IGPDatasetDomain, self).SetCanVersionFilter(filter, Type)
    def get_FilterCanVersion(self):
        '''Method IGPDatasetDomain.get_FilterCanVersion

           OUTPUT
            pFilter             : VARIANT_BOOL*'''
        return super(IGPDatasetDomain, self).get_FilterCanVersion()
    def get_FilterCanVersionType(self):
        '''Method IGPDatasetDomain.get_FilterCanVersionType

           OUTPUT
            pType               : VARIANT_BOOL*'''
        return super(IGPDatasetDomain, self).get_FilterCanVersionType()
    Count = property(get_Count, None, None)
    FilterCanVersion = property(get_FilterCanVersion, None, None)
    FilterCanVersionType = property(get_FilterCanVersionType, None, None)
    FilterVersioned = property(get_FilterVersioned, None, None)
    FilterVersionedType = property(get_FilterVersionedType, None, None)
    Type = IndexProperty(get_Type, None)

class IGPFeatureClassDomain(_esriGeoprocessing.IGPFeatureClassDomain):
    _IID = uuid.UUID('aba2a43c-aea0-4c46-af5d-cd47bea03277')
    def get_Count(self):
        '''Method IGPFeatureClassDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPFeatureClassDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPFeatureClassDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriGeometryType*'''
        return super(IGPFeatureClassDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPFeatureClassDomain.AddType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPFeatureClassDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPFeatureClassDomain.DeleteType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPFeatureClassDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPFeatureClassDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPFeatureClassDomain, self).MakeList(pValue)
    def SetIndexFilter(self, filter, Type):
        '''Method IGPFeatureClassDomain.SetIndexFilter

           INPUTS
            filter              : VARIANT_BOOL
            Type                : VARIANT_BOOL'''
        return super(IGPFeatureClassDomain, self).SetIndexFilter(filter, Type)
    def get_FilterIndex(self):
        '''Method IGPFeatureClassDomain.get_FilterIndex

           OUTPUT
            pFilter             : VARIANT_BOOL*'''
        return super(IGPFeatureClassDomain, self).get_FilterIndex()
    def get_FilterIndexType(self):
        '''Method IGPFeatureClassDomain.get_FilterIndexType

           OUTPUT
            pType               : VARIANT_BOOL*'''
        return super(IGPFeatureClassDomain, self).get_FilterIndexType()
    def SetHasMsFilter(self, filter, IncludeHasMs):
        '''Method IGPFeatureClassDomain.SetHasMsFilter

           INPUTS
            filter              : VARIANT_BOOL
            IncludeHasMs        : VARIANT_BOOL'''
        return super(IGPFeatureClassDomain, self).SetHasMsFilter(filter, IncludeHasMs)
    def get_FilterHasMs(self):
        '''Method IGPFeatureClassDomain.get_FilterHasMs

           OUTPUT
            pFilterHasMs        : VARIANT_BOOL*'''
        return super(IGPFeatureClassDomain, self).get_FilterHasMs()
    def get_IncludeHasMs(self):
        '''Method IGPFeatureClassDomain.get_IncludeHasMs

           OUTPUT
            pIncludeHasMs       : VARIANT_BOOL*'''
        return super(IGPFeatureClassDomain, self).get_IncludeHasMs()
    def SetHasZsFilter(self, filter, IncludeHasZs):
        '''Method IGPFeatureClassDomain.SetHasZsFilter

           INPUTS
            filter              : VARIANT_BOOL
            IncludeHasZs        : VARIANT_BOOL'''
        return super(IGPFeatureClassDomain, self).SetHasZsFilter(filter, IncludeHasZs)
    def get_FilterHasZs(self):
        '''Method IGPFeatureClassDomain.get_FilterHasZs

           OUTPUT
            pFilterHasZs        : VARIANT_BOOL*'''
        return super(IGPFeatureClassDomain, self).get_FilterHasZs()
    def get_IncludeHasZs(self):
        '''Method IGPFeatureClassDomain.get_IncludeHasZs

           OUTPUT
            pIncludeHasZs       : VARIANT_BOOL*'''
        return super(IGPFeatureClassDomain, self).get_IncludeHasZs()
    def get_FeatureTypeCount(self):
        '''Method IGPFeatureClassDomain.get_FeatureTypeCount

           OUTPUT
            pCount              : long*'''
        return super(IGPFeatureClassDomain, self).get_FeatureTypeCount()
    def get_FeatureType(self, Index):
        '''Method IGPFeatureClassDomain.get_FeatureType

           INPUT
            Index               : long

           OUTPUT
            pType               : esriFeatureType*'''
        return super(IGPFeatureClassDomain, self).get_FeatureType(Index)
    def AddFeatureType(self, Type):
        '''Method IGPFeatureClassDomain.AddFeatureType

           INPUT
            Type                : esriFeatureType'''
        return super(IGPFeatureClassDomain, self).AddFeatureType(Type)
    def DeleteFeatureType(self, Type):
        '''Method IGPFeatureClassDomain.DeleteFeatureType

           INPUT
            Type                : esriFeatureType'''
        return super(IGPFeatureClassDomain, self).DeleteFeatureType(Type)
    Count = property(get_Count, None, None)
    FeatureTypeCount = property(get_FeatureTypeCount, None, None)
    FilterHasMs = property(get_FilterHasMs, None, None)
    FilterHasZs = property(get_FilterHasZs, None, None)
    FilterIndex = property(get_FilterIndex, None, None)
    FilterIndexType = property(get_FilterIndexType, None, None)
    IncludeHasMs = property(get_IncludeHasMs, None, None)
    IncludeHasZs = property(get_IncludeHasZs, None, None)
    FeatureType = IndexProperty(get_FeatureType, None)
    Type = IndexProperty(get_Type, None)

class IGPCoverageFeatureClassDomain(_esriGeoprocessing.IGPCoverageFeatureClassDomain):
    _IID = uuid.UUID('197512a0-cd81-11d5-9339-0080c71a3226')
    def get_Count(self):
        '''Method IGPCoverageFeatureClassDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPCoverageFeatureClassDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPCoverageFeatureClassDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriCoverageFeatureClassType*'''
        return super(IGPCoverageFeatureClassDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPCoverageFeatureClassDomain.AddType

           INPUT
            Type                : esriCoverageFeatureClassType'''
        return super(IGPCoverageFeatureClassDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPCoverageFeatureClassDomain.DeleteType

           INPUT
            Type                : esriCoverageFeatureClassType'''
        return super(IGPCoverageFeatureClassDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPCoverageFeatureClassDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPCoverageFeatureClassDomain, self).MakeList(pValue)
    def SetTopologyFilter(self, filter, Type):
        '''Method IGPCoverageFeatureClassDomain.SetTopologyFilter

           INPUTS
            filter              : VARIANT_BOOL
            Type                : esriFeatureClassTopology'''
        return super(IGPCoverageFeatureClassDomain, self).SetTopologyFilter(filter, Type)
    def get_FilterTopology(self):
        '''Method IGPCoverageFeatureClassDomain.get_FilterTopology

           OUTPUT
            pFilter             : VARIANT_BOOL*'''
        return super(IGPCoverageFeatureClassDomain, self).get_FilterTopology()
    def get_FilterTopologyType(self):
        '''Method IGPCoverageFeatureClassDomain.get_FilterTopologyType

           OUTPUT
            pType               : esriFeatureClassTopology*'''
        return super(IGPCoverageFeatureClassDomain, self).get_FilterTopologyType()
    Count = property(get_Count, None, None)
    FilterTopology = property(get_FilterTopology, None, None)
    FilterTopologyType = property(get_FilterTopologyType, None, None)
    Type = IndexProperty(get_Type, None)

class IGPCoverageDomain(_esriGeoprocessing.IGPCoverageDomain):
    _IID = uuid.UUID('d11e7450-d497-11d5-9341-0080c71a3226')

    def __init__(self, *args, **kw):
        super(IGPCoverageDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CoverageFeatureClassDomain(self):
        '''Method IGPCoverageDomain.get_CoverageFeatureClassDomain

           OUTPUT
            ppDomain            : IGPCoverageFeatureClassDomain**'''
        return super(IGPCoverageDomain, self).get_CoverageFeatureClassDomain()
    def putref_CoverageFeatureClassDomain(self, ppDomain):
        '''Method IGPCoverageDomain.putref_CoverageFeatureClassDomain

           INPUT
            ppDomain            : IGPCoverageFeatureClassDomain*'''
        return super(IGPCoverageDomain, self).putref_CoverageFeatureClassDomain(ppDomain)
    CoverageFeatureClassDomain = property(get_CoverageFeatureClassDomain, putref_CoverageFeatureClassDomain, None)

class IGPFieldDomain(_esriGeoprocessing.IGPFieldDomain):
    _IID = uuid.UUID('638026f2-f9c4-4a39-a6c6-6932a0d51fe3')
    def get_Count(self):
        '''Method IGPFieldDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPFieldDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPFieldDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriFieldType*'''
        return super(IGPFieldDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPFieldDomain.AddType

           INPUT
            Type                : esriFieldType'''
        return super(IGPFieldDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPFieldDomain.DeleteType

           INPUT
            Type                : esriFieldType'''
        return super(IGPFieldDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPFieldDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPFieldDomain, self).MakeList(pValue)
    def SetIndexFilter(self, filter, Type):
        '''Method IGPFieldDomain.SetIndexFilter

           INPUTS
            filter              : VARIANT_BOOL
            Type                : VARIANT_BOOL'''
        return super(IGPFieldDomain, self).SetIndexFilter(filter, Type)
    def get_FilterIndex(self):
        '''Method IGPFieldDomain.get_FilterIndex

           OUTPUT
            pFilter             : VARIANT_BOOL*'''
        return super(IGPFieldDomain, self).get_FilterIndex()
    def get_FilterIndexType(self):
        '''Method IGPFieldDomain.get_FilterIndexType

           OUTPUT
            pType               : VARIANT_BOOL*'''
        return super(IGPFieldDomain, self).get_FilterIndexType()
    def get_KeyFieldCount(self):
        '''Method IGPFieldDomain.get_KeyFieldCount

           OUTPUT
            pCount              : long*'''
        return super(IGPFieldDomain, self).get_KeyFieldCount()
    def get_KeyField(self, Index):
        '''Method IGPFieldDomain.get_KeyField

           INPUT
            Index               : long

           OUTPUT
            pName               : BSTR*'''
        return super(IGPFieldDomain, self).get_KeyField(Index)
    def AddKeyField(self, Name):
        '''Method IGPFieldDomain.AddKeyField

           INPUT
            Name                : BSTR'''
        return super(IGPFieldDomain, self).AddKeyField(Name)
    def RemoveKeyField(self, Index):
        '''Method IGPFieldDomain.RemoveKeyField

           INPUT
            Index               : long'''
        return super(IGPFieldDomain, self).RemoveKeyField(Index)
    def get_ExcludeFieldCount(self):
        '''Method IGPFieldDomain.get_ExcludeFieldCount

           OUTPUT
            pCount              : long*'''
        return super(IGPFieldDomain, self).get_ExcludeFieldCount()
    def get_ExcludeField(self, Index):
        '''Method IGPFieldDomain.get_ExcludeField

           INPUT
            Index               : long

           OUTPUT
            pName               : BSTR*'''
        return super(IGPFieldDomain, self).get_ExcludeField(Index)
    def AddExcludeField(self, Name):
        '''Method IGPFieldDomain.AddExcludeField

           INPUT
            Name                : BSTR'''
        return super(IGPFieldDomain, self).AddExcludeField(Name)
    def RemoveExcludeField(self, Index):
        '''Method IGPFieldDomain.RemoveExcludeField

           INPUT
            Index               : long'''
        return super(IGPFieldDomain, self).RemoveExcludeField(Index)
    Count = property(get_Count, None, None)
    ExcludeFieldCount = property(get_ExcludeFieldCount, None, None)
    FilterIndex = property(get_FilterIndex, None, None)
    FilterIndexType = property(get_FilterIndexType, None, None)
    KeyFieldCount = property(get_KeyFieldCount, None, None)
    ExcludeField = IndexProperty(get_ExcludeField, None)
    KeyField = IndexProperty(get_KeyField, None)
    Type = IndexProperty(get_Type, None)

class IGPFieldDomain2(_esriGeoprocessing.IGPFieldDomain2):
    _IID = uuid.UUID('b94013bd-8e40-4dcf-ac8b-29807f15d3bf')

    def __init__(self, *args, **kw):
        super(IGPFieldDomain2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseRasterFields(self):
        '''Method IGPFieldDomain2.get_UseRasterFields

           OUTPUT
            bVAT                : VARIANT_BOOL*'''
        return super(IGPFieldDomain2, self).get_UseRasterFields()
    def put_UseRasterFields(self, bVAT):
        '''Method IGPFieldDomain2.put_UseRasterFields

           INPUT
            bVAT                : VARIANT_BOOL'''
        return super(IGPFieldDomain2, self).put_UseRasterFields(bVAT)
    UseRasterFields = property(get_UseRasterFields, put_UseRasterFields, None)

class IGPArcInfoItemDomain(_esriGeoprocessing.IGPArcInfoItemDomain):
    _IID = uuid.UUID('b271ff3e-9c62-42d1-b640-acacf61d67c3')

    def __init__(self, *args, **kw):
        super(IGPArcInfoItemDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IGPArcInfoItemDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPArcInfoItemDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPArcInfoItemDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriArcInfoItemType*'''
        return super(IGPArcInfoItemDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPArcInfoItemDomain.AddType

           INPUT
            Type                : esriArcInfoItemType'''
        return super(IGPArcInfoItemDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPArcInfoItemDomain.DeleteType

           INPUT
            Type                : esriArcInfoItemType'''
        return super(IGPArcInfoItemDomain, self).DeleteType(Type)
    def MakeList(self, pValue):
        '''Method IGPArcInfoItemDomain.MakeList

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPArcInfoItemDomain, self).MakeList(pValue)
    def get_CoverageFeatureClassType(self):
        '''Method IGPArcInfoItemDomain.get_CoverageFeatureClassType

           OUTPUT
            pType               : esriCoverageFeatureClassType*'''
        return super(IGPArcInfoItemDomain, self).get_CoverageFeatureClassType()
    def put_CoverageFeatureClassType(self, pType):
        '''Method IGPArcInfoItemDomain.put_CoverageFeatureClassType

           INPUT
            pType               : esriCoverageFeatureClassType'''
        return super(IGPArcInfoItemDomain, self).put_CoverageFeatureClassType(pType)
    def SetIndexFilter(self, filter, Type):
        '''Method IGPArcInfoItemDomain.SetIndexFilter

           INPUTS
            filter              : VARIANT_BOOL
            Type                : VARIANT_BOOL'''
        return super(IGPArcInfoItemDomain, self).SetIndexFilter(filter, Type)
    def get_FilterIndex(self):
        '''Method IGPArcInfoItemDomain.get_FilterIndex

           OUTPUT
            pFilter             : VARIANT_BOOL*'''
        return super(IGPArcInfoItemDomain, self).get_FilterIndex()
    def get_FilterIndexType(self):
        '''Method IGPArcInfoItemDomain.get_FilterIndexType

           OUTPUT
            pType               : VARIANT_BOOL*'''
        return super(IGPArcInfoItemDomain, self).get_FilterIndexType()
    def get_ShowRedefined(self):
        '''Method IGPArcInfoItemDomain.get_ShowRedefined

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGPArcInfoItemDomain, self).get_ShowRedefined()
    def put_ShowRedefined(self, Show):
        '''Method IGPArcInfoItemDomain.put_ShowRedefined

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGPArcInfoItemDomain, self).put_ShowRedefined(Show)
    def get_ShowPseudo(self):
        '''Method IGPArcInfoItemDomain.get_ShowPseudo

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGPArcInfoItemDomain, self).get_ShowPseudo()
    def put_ShowPseudo(self, Show):
        '''Method IGPArcInfoItemDomain.put_ShowPseudo

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGPArcInfoItemDomain, self).put_ShowPseudo(Show)
    Count = property(get_Count, None, None)
    CoverageFeatureClassType = property(get_CoverageFeatureClassType, put_CoverageFeatureClassType, None)
    FilterIndex = property(get_FilterIndex, None, None)
    FilterIndexType = property(get_FilterIndexType, None, None)
    ShowPseudo = property(get_ShowPseudo, put_ShowPseudo, None)
    ShowRedefined = property(get_ShowRedefined, put_ShowRedefined, None)
    Type = IndexProperty(get_Type, None)

class IGPFeatureSchema(_esriGeoprocessing.IGPFeatureSchema):
    _IID = uuid.UUID('c05030d4-b950-4c2e-b30e-e25fb4b9ac12')

    def __init__(self, *args, **kw):
        super(IGPFeatureSchema, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureTypeRule(self):
        '''Method IGPFeatureSchema.get_FeatureTypeRule

           OUTPUT
            Type                : esriGPSchemaFeatureType*'''
        return super(IGPFeatureSchema, self).get_FeatureTypeRule()
    def put_FeatureTypeRule(self, Type):
        '''Method IGPFeatureSchema.put_FeatureTypeRule

           INPUT
            Type                : esriGPSchemaFeatureType'''
        return super(IGPFeatureSchema, self).put_FeatureTypeRule(Type)
    def get_FeatureType(self):
        '''Method IGPFeatureSchema.get_FeatureType

           OUTPUT
            Type                : esriFeatureType*'''
        return super(IGPFeatureSchema, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IGPFeatureSchema.put_FeatureType

           INPUT
            Type                : esriFeatureType'''
        return super(IGPFeatureSchema, self).put_FeatureType(Type)
    def get_GeometryTypeRule(self):
        '''Method IGPFeatureSchema.get_GeometryTypeRule

           OUTPUT
            Type                : esriGPSchemaGeometryType*'''
        return super(IGPFeatureSchema, self).get_GeometryTypeRule()
    def put_GeometryTypeRule(self, Type):
        '''Method IGPFeatureSchema.put_GeometryTypeRule

           INPUT
            Type                : esriGPSchemaGeometryType'''
        return super(IGPFeatureSchema, self).put_GeometryTypeRule(Type)
    def get_GeometryType(self):
        '''Method IGPFeatureSchema.get_GeometryType

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IGPFeatureSchema, self).get_GeometryType()
    def put_GeometryType(self, Type):
        '''Method IGPFeatureSchema.put_GeometryType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPFeatureSchema, self).put_GeometryType(Type)
    def get_FieldsRule(self):
        '''Method IGPFeatureSchema.get_FieldsRule

           OUTPUT
            Type                : esriGPSchemaFieldsType*'''
        return super(IGPFeatureSchema, self).get_FieldsRule()
    def put_FieldsRule(self, Type):
        '''Method IGPFeatureSchema.put_FieldsRule

           INPUT
            Type                : esriGPSchemaFieldsType'''
        return super(IGPFeatureSchema, self).put_FieldsRule(Type)
    def get_AdditionalFields(self):
        '''Method IGPFeatureSchema.get_AdditionalFields

           OUTPUT
            Fields              : IFields**'''
        return super(IGPFeatureSchema, self).get_AdditionalFields()
    def putref_AdditionalFields(self, Fields):
        '''Method IGPFeatureSchema.putref_AdditionalFields

           INPUT
            Fields              : IFields*'''
        return super(IGPFeatureSchema, self).putref_AdditionalFields(Fields)
    def get_ExtentRule(self):
        '''Method IGPFeatureSchema.get_ExtentRule

           OUTPUT
            Type                : esriGPSchemaExtentType*'''
        return super(IGPFeatureSchema, self).get_ExtentRule()
    def put_ExtentRule(self, Type):
        '''Method IGPFeatureSchema.put_ExtentRule

           INPUT
            Type                : esriGPSchemaExtentType'''
        return super(IGPFeatureSchema, self).put_ExtentRule(Type)
    def get_Extent(self):
        '''Method IGPFeatureSchema.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGPFeatureSchema, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IGPFeatureSchema.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IGPFeatureSchema, self).putref_Extent(Extent)
    AdditionalFields = property(get_AdditionalFields, putref_AdditionalFields, None)
    Extent = property(get_Extent, putref_Extent, None)
    ExtentRule = property(get_ExtentRule, put_ExtentRule, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    FeatureTypeRule = property(get_FeatureTypeRule, put_FeatureTypeRule, None)
    FieldsRule = property(get_FieldsRule, put_FieldsRule, None)
    GeometryType = property(get_GeometryType, put_GeometryType, None)
    GeometryTypeRule = property(get_GeometryTypeRule, put_GeometryTypeRule, None)

class IGPTableSchema(_esriGeoprocessing.IGPTableSchema):
    _IID = uuid.UUID('c0ae4229-e15a-4a16-be64-35072da00279')

    def __init__(self, *args, **kw):
        super(IGPTableSchema, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FieldsRule(self):
        '''Method IGPTableSchema.get_FieldsRule

           OUTPUT
            Type                : esriGPSchemaFieldsType*'''
        return super(IGPTableSchema, self).get_FieldsRule()
    def put_FieldsRule(self, Type):
        '''Method IGPTableSchema.put_FieldsRule

           INPUT
            Type                : esriGPSchemaFieldsType'''
        return super(IGPTableSchema, self).put_FieldsRule(Type)
    def get_AdditionalFields(self):
        '''Method IGPTableSchema.get_AdditionalFields

           OUTPUT
            Fields              : IFields**'''
        return super(IGPTableSchema, self).get_AdditionalFields()
    def putref_AdditionalFields(self, Fields):
        '''Method IGPTableSchema.putref_AdditionalFields

           INPUT
            Fields              : IFields*'''
        return super(IGPTableSchema, self).putref_AdditionalFields(Fields)
    AdditionalFields = property(get_AdditionalFields, putref_AdditionalFields, None)
    FieldsRule = property(get_FieldsRule, put_FieldsRule, None)

class IGPRasterSchema(_esriGeoprocessing.IGPRasterSchema):
    _IID = uuid.UUID('d16b27a6-7b7d-446f-873b-b92d4040f499')

    def __init__(self, *args, **kw):
        super(IGPRasterSchema, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExtentRule(self):
        '''Method IGPRasterSchema.get_ExtentRule

           OUTPUT
            Type                : esriGPSchemaExtentType*'''
        return super(IGPRasterSchema, self).get_ExtentRule()
    def put_ExtentRule(self, Type):
        '''Method IGPRasterSchema.put_ExtentRule

           INPUT
            Type                : esriGPSchemaExtentType'''
        return super(IGPRasterSchema, self).put_ExtentRule(Type)
    def get_Extent(self):
        '''Method IGPRasterSchema.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGPRasterSchema, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IGPRasterSchema.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IGPRasterSchema, self).putref_Extent(Extent)
    def get_CellSizeRule(self):
        '''Method IGPRasterSchema.get_CellSizeRule

           OUTPUT
            Type                : esriGPSchemaCellSizeType*'''
        return super(IGPRasterSchema, self).get_CellSizeRule()
    def put_CellSizeRule(self, Type):
        '''Method IGPRasterSchema.put_CellSizeRule

           INPUT
            Type                : esriGPSchemaCellSizeType'''
        return super(IGPRasterSchema, self).put_CellSizeRule(Type)
    def get_CellSize(self):
        '''Method IGPRasterSchema.get_CellSize

           OUTPUT
            CellSize            : double*'''
        return super(IGPRasterSchema, self).get_CellSize()
    def put_CellSize(self, CellSize):
        '''Method IGPRasterSchema.put_CellSize

           INPUT
            CellSize            : double'''
        return super(IGPRasterSchema, self).put_CellSize(CellSize)
    def get_RasterRule(self):
        '''Method IGPRasterSchema.get_RasterRule

           OUTPUT
            Type                : esriGPSchemaRasterType*'''
        return super(IGPRasterSchema, self).get_RasterRule()
    def put_RasterRule(self, Type):
        '''Method IGPRasterSchema.put_RasterRule

           INPUT
            Type                : esriGPSchemaRasterType'''
        return super(IGPRasterSchema, self).put_RasterRule(Type)
    def get_RasterFormatRule(self):
        '''Method IGPRasterSchema.get_RasterFormatRule

           OUTPUT
            Type                : esriGPSchemaRasterFormatType*'''
        return super(IGPRasterSchema, self).get_RasterFormatRule()
    def put_RasterFormatRule(self, Type):
        '''Method IGPRasterSchema.put_RasterFormatRule

           INPUT
            Type                : esriGPSchemaRasterFormatType'''
        return super(IGPRasterSchema, self).put_RasterFormatRule(Type)
    CellSize = property(get_CellSize, put_CellSize, None)
    CellSizeRule = property(get_CellSizeRule, put_CellSizeRule, None)
    Extent = property(get_Extent, putref_Extent, None)
    ExtentRule = property(get_ExtentRule, put_ExtentRule, None)
    RasterFormatRule = property(get_RasterFormatRule, put_RasterFormatRule, None)
    RasterRule = property(get_RasterRule, put_RasterRule, None)

class IGPContainerSchema(_esriGeoprocessing.IGPContainerSchema):
    _IID = uuid.UUID('20e9e803-8fb6-426c-b5a9-798897ad3d06')

    def __init__(self, *args, **kw):
        super(IGPContainerSchema, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AdditionalChildren(self):
        '''Method IGPContainerSchema.get_AdditionalChildren

           OUTPUT
            Children            : IArray**'''
        return super(IGPContainerSchema, self).get_AdditionalChildren()
    def putref_AdditionalChildren(self, Children):
        '''Method IGPContainerSchema.putref_AdditionalChildren

           INPUT
            Children            : IArray*'''
        return super(IGPContainerSchema, self).putref_AdditionalChildren(Children)
    AdditionalChildren = property(get_AdditionalChildren, putref_AdditionalChildren, None)

class IGPParameterEdit(_esriGeoprocessing.IGPParameterEdit):
    _IID = uuid.UUID('41ea73ee-8c7f-4ec8-bf00-1c5b11ef781d')

    def __init__(self, *args, **kw):
        super(IGPParameterEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IGPParameterEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit, self).put_Name(_arg1)
    def put_DisplayName(self, _arg1):
        '''Method IGPParameterEdit.put_DisplayName

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit, self).put_DisplayName(_arg1)
    def put_Direction(self, _arg1):
        '''Method IGPParameterEdit.put_Direction

           INPUT
            _arg1               : esriGPParameterDirection'''
        return super(IGPParameterEdit, self).put_Direction(_arg1)
    def putref_DataType(self, _arg1):
        '''Method IGPParameterEdit.putref_DataType

           INPUT
            _arg1               : IGPDataType*'''
        return super(IGPParameterEdit, self).putref_DataType(_arg1)
    def put_ParameterType(self, _arg1):
        '''Method IGPParameterEdit.put_ParameterType

           INPUT
            _arg1               : esriGPParameterType'''
        return super(IGPParameterEdit, self).put_ParameterType(_arg1)
    def put_ParameterDependencies(self, _arg1):
        '''Method IGPParameterEdit.put_ParameterDependencies

           INPUT
            _arg1               : IEnumBSTR*'''
        return super(IGPParameterEdit, self).put_ParameterDependencies(_arg1)
    def putref_Domain(self, _arg1):
        '''Method IGPParameterEdit.putref_Domain

           INPUT
            _arg1               : IGPDomain*'''
        return super(IGPParameterEdit, self).putref_Domain(_arg1)
    def put_Enabled(self, _arg1):
        '''Method IGPParameterEdit.put_Enabled

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit, self).put_Enabled(_arg1)
    def putref_Value(self, _arg1):
        '''Method IGPParameterEdit.putref_Value

           INPUT
            _arg1               : IGPValue*'''
        return super(IGPParameterEdit, self).putref_Value(_arg1)
    def put_ControlCLSID(self, _arg1):
        '''Method IGPParameterEdit.put_ControlCLSID

           INPUT
            _arg1               : IUID*'''
        return super(IGPParameterEdit, self).put_ControlCLSID(_arg1)
    def put_DefaultEnvironmentName(self, _arg1):
        '''Method IGPParameterEdit.put_DefaultEnvironmentName

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit, self).put_DefaultEnvironmentName(_arg1)
    def put_DisplayOrder(self, _arg1):
        '''Method IGPParameterEdit.put_DisplayOrder

           INPUT
            _arg1               : long'''
        return super(IGPParameterEdit, self).put_DisplayOrder(_arg1)
    def put_Altered(self, _arg1):
        '''Method IGPParameterEdit.put_Altered

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit, self).put_Altered(_arg1)
    def put_HasBeenValidated(self, _arg1):
        '''Method IGPParameterEdit.put_HasBeenValidated

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit, self).put_HasBeenValidated(_arg1)
    def AddDependency(self, Name):
        '''Method IGPParameterEdit.AddDependency

           INPUT
            Name                : BSTR'''
        return super(IGPParameterEdit, self).AddDependency(Name)
    def put_Category(self, _arg1):
        '''Method IGPParameterEdit.put_Category

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit, self).put_Category(_arg1)
    def putref_ChoiceList(self, _arg1):
        '''Method IGPParameterEdit.putref_ChoiceList

           INPUT
            _arg1               : IGPChoiceList*'''
        return super(IGPParameterEdit, self).putref_ChoiceList(_arg1)
    Altered = property(None, put_Altered, None)
    Category = property(None, put_Category, None)
    ChoiceList = property(None, putref_ChoiceList, None)
    ControlCLSID = property(None, put_ControlCLSID, None)
    DataType = property(None, putref_DataType, None)
    DefaultEnvironmentName = property(None, put_DefaultEnvironmentName, None)
    Direction = property(None, put_Direction, None)
    DisplayName = property(None, put_DisplayName, None)
    DisplayOrder = property(None, put_DisplayOrder, None)
    Domain = property(None, putref_Domain, None)
    Enabled = property(None, put_Enabled, None)
    HasBeenValidated = property(None, put_HasBeenValidated, None)
    Name = property(None, put_Name, None)
    ParameterDependencies = property(None, put_ParameterDependencies, None)
    ParameterType = property(None, put_ParameterType, None)
    Value = property(None, putref_Value, None)

class IGPParameterEdit2(_esriGeoprocessing.IGPParameterEdit2):
    _IID = uuid.UUID('1ba34152-5e03-4df1-a402-22c7e2a9f869')

    def __init__(self, *args, **kw):
        super(IGPParameterEdit2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Managed(self, _arg1):
        '''Method IGPParameterEdit2.put_Managed

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit2, self).put_Managed(_arg1)
    def put_Name(self, _arg1):
        '''Method IGPParameterEdit.put_Name (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit2, self).put_Name(_arg1)
    def put_DisplayName(self, _arg1):
        '''Method IGPParameterEdit.put_DisplayName (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit2, self).put_DisplayName(_arg1)
    def put_Direction(self, _arg1):
        '''Method IGPParameterEdit.put_Direction (from IGPParameterEdit)

           INPUT
            _arg1               : esriGPParameterDirection'''
        return super(IGPParameterEdit2, self).put_Direction(_arg1)
    def putref_DataType(self, _arg1):
        '''Method IGPParameterEdit.putref_DataType (from IGPParameterEdit)

           INPUT
            _arg1               : IGPDataType*'''
        return super(IGPParameterEdit2, self).putref_DataType(_arg1)
    def put_ParameterType(self, _arg1):
        '''Method IGPParameterEdit.put_ParameterType (from IGPParameterEdit)

           INPUT
            _arg1               : esriGPParameterType'''
        return super(IGPParameterEdit2, self).put_ParameterType(_arg1)
    def put_ParameterDependencies(self, _arg1):
        '''Method IGPParameterEdit.put_ParameterDependencies (from IGPParameterEdit)

           INPUT
            _arg1               : IEnumBSTR*'''
        return super(IGPParameterEdit2, self).put_ParameterDependencies(_arg1)
    def putref_Domain(self, _arg1):
        '''Method IGPParameterEdit.putref_Domain (from IGPParameterEdit)

           INPUT
            _arg1               : IGPDomain*'''
        return super(IGPParameterEdit2, self).putref_Domain(_arg1)
    def put_Enabled(self, _arg1):
        '''Method IGPParameterEdit.put_Enabled (from IGPParameterEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit2, self).put_Enabled(_arg1)
    def putref_Value(self, _arg1):
        '''Method IGPParameterEdit.putref_Value (from IGPParameterEdit)

           INPUT
            _arg1               : IGPValue*'''
        return super(IGPParameterEdit2, self).putref_Value(_arg1)
    def put_ControlCLSID(self, _arg1):
        '''Method IGPParameterEdit.put_ControlCLSID (from IGPParameterEdit)

           INPUT
            _arg1               : IUID*'''
        return super(IGPParameterEdit2, self).put_ControlCLSID(_arg1)
    def put_DefaultEnvironmentName(self, _arg1):
        '''Method IGPParameterEdit.put_DefaultEnvironmentName (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit2, self).put_DefaultEnvironmentName(_arg1)
    def put_DisplayOrder(self, _arg1):
        '''Method IGPParameterEdit.put_DisplayOrder (from IGPParameterEdit)

           INPUT
            _arg1               : long'''
        return super(IGPParameterEdit2, self).put_DisplayOrder(_arg1)
    def put_Altered(self, _arg1):
        '''Method IGPParameterEdit.put_Altered (from IGPParameterEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit2, self).put_Altered(_arg1)
    def put_HasBeenValidated(self, _arg1):
        '''Method IGPParameterEdit.put_HasBeenValidated (from IGPParameterEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit2, self).put_HasBeenValidated(_arg1)
    def AddDependency(self, Name):
        '''Method IGPParameterEdit.AddDependency (from IGPParameterEdit)

           INPUT
            Name                : BSTR'''
        return super(IGPParameterEdit2, self).AddDependency(Name)
    def put_Category(self, _arg1):
        '''Method IGPParameterEdit.put_Category (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit2, self).put_Category(_arg1)
    def putref_ChoiceList(self, _arg1):
        '''Method IGPParameterEdit.putref_ChoiceList (from IGPParameterEdit)

           INPUT
            _arg1               : IGPChoiceList*'''
        return super(IGPParameterEdit2, self).putref_ChoiceList(_arg1)
    Altered = property(None, put_Altered, None)
    Category = property(None, put_Category, None)
    ChoiceList = property(None, putref_ChoiceList, None)
    ControlCLSID = property(None, put_ControlCLSID, None)
    DataType = property(None, putref_DataType, None)
    DefaultEnvironmentName = property(None, put_DefaultEnvironmentName, None)
    Direction = property(None, put_Direction, None)
    DisplayName = property(None, put_DisplayName, None)
    DisplayOrder = property(None, put_DisplayOrder, None)
    Domain = property(None, putref_Domain, None)
    Enabled = property(None, put_Enabled, None)
    HasBeenValidated = property(None, put_HasBeenValidated, None)
    Managed = property(None, put_Managed, None)
    Name = property(None, put_Name, None)
    ParameterDependencies = property(None, put_ParameterDependencies, None)
    ParameterType = property(None, put_ParameterType, None)
    Value = property(None, putref_Value, None)

class IGPEnvironmentImpl(_esriGeoprocessing.IGPEnvironmentImpl):
    _IID = uuid.UUID('88f22df4-df9c-4ead-8a22-7878aea615fe')

    def __init__(self, *args, **kw):
        super(IGPEnvironmentImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Parent(self):
        '''Method IGPEnvironmentImpl.get_Parent

           OUTPUT
            env                 : IGPEnvironment**'''
        return super(IGPEnvironmentImpl, self).get_Parent()
    def putref_Parent(self, env):
        '''Method IGPEnvironmentImpl.putref_Parent

           INPUT
            env                 : IGPEnvironment*'''
        return super(IGPEnvironmentImpl, self).putref_Parent(env)
    def GetValue(self):
        '''Method IGPEnvironmentImpl.GetValue

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPEnvironmentImpl, self).GetValue()
    Parent = property(get_Parent, putref_Parent, None)

class IEnumGPEnvironment(_esriGeoprocessing.IEnumGPEnvironment):
    _IID = uuid.UUID('11ab998a-b838-434a-ae5f-bb865236c76d')
    def Next(self):
        '''Method IEnumGPEnvironment.Next

           OUTPUT
            Name                : IGPEnvironment**'''
        return super(IEnumGPEnvironment, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPEnvironment, self).Reset()
            val = super(IEnumGPEnvironment, self).Next()
            while val:
                yield val
                val = super(IEnumGPEnvironment, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPEnvironment.Reset'''
        return super(IEnumGPEnvironment, self).Reset()

class IGPSchemaCheckImpl(_esriGeoprocessing.IGPSchemaCheckImpl):
    _IID = uuid.UUID('5e4bd402-b643-4358-bfe4-4b4b1e7f84b3')

    def __init__(self, *args, **kw):
        super(IGPSchemaCheckImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CheckSchema(self):
        '''Method IGPSchemaCheckImpl.get_CheckSchema

           OUTPUT
            CheckSchema         : VARIANT_BOOL*'''
        return super(IGPSchemaCheckImpl, self).get_CheckSchema()
    def put_CheckSchema(self, CheckSchema):
        '''Method IGPSchemaCheckImpl.put_CheckSchema

           INPUT
            CheckSchema         : VARIANT_BOOL'''
        return super(IGPSchemaCheckImpl, self).put_CheckSchema(CheckSchema)
    CheckSchema = property(get_CheckSchema, put_CheckSchema, None)

class IGPDefaultNameList(_esriGeoprocessing.IGPDefaultNameList):
    _IID = uuid.UUID('6d214b1d-d469-4ee1-8837-6427c2ffeb14')
    def RemoveAllOutputNames(self):
        '''Method IGPDefaultNameList.RemoveAllOutputNames'''
        return super(IGPDefaultNameList, self).RemoveAllOutputNames()
    def AddOutputName(self, Name):
        '''Method IGPDefaultNameList.AddOutputName

           INPUT
            Name                : BSTR'''
        return super(IGPDefaultNameList, self).AddOutputName(Name)
    def RemoveOutputName(self, Name):
        '''Method IGPDefaultNameList.RemoveOutputName

           INPUT
            Name                : BSTR'''
        return super(IGPDefaultNameList, self).RemoveOutputName(Name)
    def CheckOutputName(self, Name):
        '''Method IGPDefaultNameList.CheckOutputName

           INPUT
            Name                : BSTR

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPDefaultNameList, self).CheckOutputName(Name)

class IGeoProcessorSettings(_esriGeoprocessing.IGeoProcessorSettings):
    _IID = uuid.UUID('e6a5b1c0-c8be-4f8a-93f7-ea90324b5b33')

    def __init__(self, *args, **kw):
        super(IGeoProcessorSettings, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AddOutputsToMap(self, AddToMap):
        '''Method IGeoProcessorSettings.put_AddOutputsToMap

           INPUT
            AddToMap            : VARIANT_BOOL'''
        return super(IGeoProcessorSettings, self).put_AddOutputsToMap(AddToMap)
    def get_AddOutputsToMap(self):
        '''Method IGeoProcessorSettings.get_AddOutputsToMap

           OUTPUT
            AddToMap            : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings, self).get_AddOutputsToMap()
    def put_OverwriteOutput(self, OverwriteOutput):
        '''Method IGeoProcessorSettings.put_OverwriteOutput

           INPUT
            OverwriteOutput     : VARIANT_BOOL'''
        return super(IGeoProcessorSettings, self).put_OverwriteOutput(OverwriteOutput)
    def get_OverwriteOutput(self):
        '''Method IGeoProcessorSettings.get_OverwriteOutput

           OUTPUT
            OverwriteOutput     : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings, self).get_OverwriteOutput()
    def put_TemporaryMapLayers(self, TemporaryMapLayers):
        '''Method IGeoProcessorSettings.put_TemporaryMapLayers

           INPUT
            TemporaryMapLayers  : VARIANT_BOOL'''
        return super(IGeoProcessorSettings, self).put_TemporaryMapLayers(TemporaryMapLayers)
    def get_TemporaryMapLayers(self):
        '''Method IGeoProcessorSettings.get_TemporaryMapLayers

           OUTPUT
            TemporaryMapLayers  : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings, self).get_TemporaryMapLayers()
    def put_ShowModelBuilderPrompts(self, showPrompts):
        '''Method IGeoProcessorSettings.put_ShowModelBuilderPrompts

           INPUT
            showPrompts         : VARIANT_BOOL'''
        return super(IGeoProcessorSettings, self).put_ShowModelBuilderPrompts(showPrompts)
    def get_ShowModelBuilderPrompts(self):
        '''Method IGeoProcessorSettings.get_ShowModelBuilderPrompts

           OUTPUT
            showPrompts         : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings, self).get_ShowModelBuilderPrompts()
    def put_LogHistory(self, LogHistory):
        '''Method IGeoProcessorSettings.put_LogHistory

           INPUT
            LogHistory          : VARIANT_BOOL'''
        return super(IGeoProcessorSettings, self).put_LogHistory(LogHistory)
    def get_LogHistory(self):
        '''Method IGeoProcessorSettings.get_LogHistory

           OUTPUT
            LogHistory          : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings, self).get_LogHistory()
    AddOutputsToMap = property(get_AddOutputsToMap, put_AddOutputsToMap, None)
    LogHistory = property(get_LogHistory, put_LogHistory, None)
    OverwriteOutput = property(get_OverwriteOutput, put_OverwriteOutput, None)
    ShowModelBuilderPrompts = property(get_ShowModelBuilderPrompts, put_ShowModelBuilderPrompts, None)
    TemporaryMapLayers = property(get_TemporaryMapLayers, put_TemporaryMapLayers, None)

class IGeoProcessorSettings2(_esriGeoprocessing.IGeoProcessorSettings2):
    _IID = uuid.UUID('3aafd5ad-f717-4dac-84cd-05c822328fa2')

    def __init__(self, *args, **kw):
        super(IGeoProcessorSettings2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_HowLongToKeepResults(self, timeInterval):
        '''Method IGeoProcessorSettings2.put_HowLongToKeepResults

           INPUT
            timeInterval        : esriGPTimeIntervalType'''
        return super(IGeoProcessorSettings2, self).put_HowLongToKeepResults(timeInterval)
    def get_HowLongToKeepResults(self):
        '''Method IGeoProcessorSettings2.get_HowLongToKeepResults

           OUTPUT
            timeInterval        : esriGPTimeIntervalType*'''
        return super(IGeoProcessorSettings2, self).get_HowLongToKeepResults()
    def put_AddOutputsToMap(self, AddToMap):
        '''Method IGeoProcessorSettings.put_AddOutputsToMap (from IGeoProcessorSettings)

           INPUT
            AddToMap            : VARIANT_BOOL'''
        return super(IGeoProcessorSettings2, self).put_AddOutputsToMap(AddToMap)
    def get_AddOutputsToMap(self):
        '''Method IGeoProcessorSettings.get_AddOutputsToMap (from IGeoProcessorSettings)

           OUTPUT
            AddToMap            : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings2, self).get_AddOutputsToMap()
    def put_OverwriteOutput(self, OverwriteOutput):
        '''Method IGeoProcessorSettings.put_OverwriteOutput (from IGeoProcessorSettings)

           INPUT
            OverwriteOutput     : VARIANT_BOOL'''
        return super(IGeoProcessorSettings2, self).put_OverwriteOutput(OverwriteOutput)
    def get_OverwriteOutput(self):
        '''Method IGeoProcessorSettings.get_OverwriteOutput (from IGeoProcessorSettings)

           OUTPUT
            OverwriteOutput     : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings2, self).get_OverwriteOutput()
    def put_TemporaryMapLayers(self, TemporaryMapLayers):
        '''Method IGeoProcessorSettings.put_TemporaryMapLayers (from IGeoProcessorSettings)

           INPUT
            TemporaryMapLayers  : VARIANT_BOOL'''
        return super(IGeoProcessorSettings2, self).put_TemporaryMapLayers(TemporaryMapLayers)
    def get_TemporaryMapLayers(self):
        '''Method IGeoProcessorSettings.get_TemporaryMapLayers (from IGeoProcessorSettings)

           OUTPUT
            TemporaryMapLayers  : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings2, self).get_TemporaryMapLayers()
    def put_ShowModelBuilderPrompts(self, showPrompts):
        '''Method IGeoProcessorSettings.put_ShowModelBuilderPrompts (from IGeoProcessorSettings)

           INPUT
            showPrompts         : VARIANT_BOOL'''
        return super(IGeoProcessorSettings2, self).put_ShowModelBuilderPrompts(showPrompts)
    def get_ShowModelBuilderPrompts(self):
        '''Method IGeoProcessorSettings.get_ShowModelBuilderPrompts (from IGeoProcessorSettings)

           OUTPUT
            showPrompts         : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings2, self).get_ShowModelBuilderPrompts()
    def put_LogHistory(self, LogHistory):
        '''Method IGeoProcessorSettings.put_LogHistory (from IGeoProcessorSettings)

           INPUT
            LogHistory          : VARIANT_BOOL'''
        return super(IGeoProcessorSettings2, self).put_LogHistory(LogHistory)
    def get_LogHistory(self):
        '''Method IGeoProcessorSettings.get_LogHistory (from IGeoProcessorSettings)

           OUTPUT
            LogHistory          : VARIANT_BOOL*'''
        return super(IGeoProcessorSettings2, self).get_LogHistory()
    AddOutputsToMap = property(get_AddOutputsToMap, put_AddOutputsToMap, None)
    HowLongToKeepResults = property(get_HowLongToKeepResults, put_HowLongToKeepResults, None)
    LogHistory = property(get_LogHistory, put_LogHistory, None)
    OverwriteOutput = property(get_OverwriteOutput, put_OverwriteOutput, None)
    ShowModelBuilderPrompts = property(get_ShowModelBuilderPrompts, put_ShowModelBuilderPrompts, None)
    TemporaryMapLayers = property(get_TemporaryMapLayers, put_TemporaryMapLayers, None)

class IGPFunction(_esriGeoprocessing.IGPFunction):
    _IID = uuid.UUID('371dd95a-3b31-4bcb-8429-51c0b7d404ee')
    def get_Name(self):
        '''Method IGPFunction.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFunction, self).get_Name()
    def get_DisplayName(self):
        '''Method IGPFunction.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFunction, self).get_DisplayName()
    def get_ParameterInfo(self):
        '''Method IGPFunction.get_ParameterInfo

           OUTPUT
            params              : IArray**'''
        return super(IGPFunction, self).get_ParameterInfo()
    def get_DialogCLSID(self):
        '''Method IGPFunction.get_DialogCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPFunction, self).get_DialogCLSID()
    def get_FullName(self):
        '''Method IGPFunction.get_FullName

           OUTPUT
            Name                : IName**'''
        return super(IGPFunction, self).get_FullName()
    def get_HelpFile(self):
        '''Method IGPFunction.get_HelpFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPFunction, self).get_HelpFile()
    def get_HelpContext(self):
        '''Method IGPFunction.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IGPFunction, self).get_HelpContext()
    def get_MetadataFile(self):
        '''Method IGPFunction.get_MetadataFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPFunction, self).get_MetadataFile()
    def IsLicensed(self):
        '''Method IGPFunction.IsLicensed

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPFunction, self).IsLicensed()
    def GetRenderer(self, pParam):
        '''Method IGPFunction.GetRenderer

           INPUT
            pParam              : IGPParameter*

           OUTPUT
            pRenderer           : VARIANT*'''
        return super(IGPFunction, self).GetRenderer(pParam)
    def Validate(self, paramvalues, updateValues, envMgr):
        '''Method IGPFunction.Validate

           INPUTS
            paramvalues         : IArray*
            updateValues        : VARIANT_BOOL
            envMgr              : IGPEnvironmentManager*

           OUTPUT
            message             : IGPMessages**'''
        return super(IGPFunction, self).Validate(paramvalues, updateValues, envMgr)
    def Execute(self, paramvalues, TrackCancel, envMgr, message):
        '''Method IGPFunction.Execute

           INPUTS
            paramvalues         : IArray*
            TrackCancel         : ITrackCancel*
            envMgr              : IGPEnvironmentManager*
            message             : IGPMessages*'''
        return super(IGPFunction, self).Execute(paramvalues, TrackCancel, envMgr, message)
    DialogCLSID = property(get_DialogCLSID, None, None)
    DisplayName = property(get_DisplayName, None, None)
    FullName = property(get_FullName, None, None)
    HelpContext = property(get_HelpContext, None, None)
    HelpFile = property(get_HelpFile, None, None)
    MetadataFile = property(get_MetadataFile, None, None)
    Name = property(get_Name, None, None)
    ParameterInfo = property(get_ParameterInfo, None, None)

class IGPFunction2(_esriGeoprocessing.IGPFunction2):
    _IID = uuid.UUID('2cb3b43d-0077-449e-bb2d-eaf5c054b330')
    def UpdateParameters(self, paramvalues, pEnvMgr):
        '''Method IGPFunction2.UpdateParameters

           INPUTS
            paramvalues         : IArray*
            pEnvMgr             : IGPEnvironmentManager*'''
        return super(IGPFunction2, self).UpdateParameters(paramvalues, pEnvMgr)
    def UpdateMessages(self, paramvalues, pEnvMgr, Messages):
        '''Method IGPFunction2.UpdateMessages

           INPUTS
            paramvalues         : IArray*
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*'''
        return super(IGPFunction2, self).UpdateMessages(paramvalues, pEnvMgr, Messages)
    def get_Name(self):
        '''Method IGPFunction.get_Name (from IGPFunction)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFunction2, self).get_Name()
    def get_DisplayName(self):
        '''Method IGPFunction.get_DisplayName (from IGPFunction)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFunction2, self).get_DisplayName()
    def get_ParameterInfo(self):
        '''Method IGPFunction.get_ParameterInfo (from IGPFunction)

           OUTPUT
            params              : IArray**'''
        return super(IGPFunction2, self).get_ParameterInfo()
    def get_DialogCLSID(self):
        '''Method IGPFunction.get_DialogCLSID (from IGPFunction)

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPFunction2, self).get_DialogCLSID()
    def get_FullName(self):
        '''Method IGPFunction.get_FullName (from IGPFunction)

           OUTPUT
            Name                : IName**'''
        return super(IGPFunction2, self).get_FullName()
    def get_HelpFile(self):
        '''Method IGPFunction.get_HelpFile (from IGPFunction)

           OUTPUT
            File                : BSTR*'''
        return super(IGPFunction2, self).get_HelpFile()
    def get_HelpContext(self):
        '''Method IGPFunction.get_HelpContext (from IGPFunction)

           OUTPUT
            context             : long*'''
        return super(IGPFunction2, self).get_HelpContext()
    def get_MetadataFile(self):
        '''Method IGPFunction.get_MetadataFile (from IGPFunction)

           OUTPUT
            File                : BSTR*'''
        return super(IGPFunction2, self).get_MetadataFile()
    def IsLicensed(self):
        '''Method IGPFunction.IsLicensed (from IGPFunction)

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPFunction2, self).IsLicensed()
    def GetRenderer(self, pParam):
        '''Method IGPFunction.GetRenderer (from IGPFunction)

           INPUT
            pParam              : IGPParameter*

           OUTPUT
            pRenderer           : VARIANT*'''
        return super(IGPFunction2, self).GetRenderer(pParam)
    def Validate(self, paramvalues, updateValues, envMgr):
        '''Method IGPFunction.Validate (from IGPFunction)

           INPUTS
            paramvalues         : IArray*
            updateValues        : VARIANT_BOOL
            envMgr              : IGPEnvironmentManager*

           OUTPUT
            message             : IGPMessages**'''
        return super(IGPFunction2, self).Validate(paramvalues, updateValues, envMgr)
    def Execute(self, paramvalues, TrackCancel, envMgr, message):
        '''Method IGPFunction.Execute (from IGPFunction)

           INPUTS
            paramvalues         : IArray*
            TrackCancel         : ITrackCancel*
            envMgr              : IGPEnvironmentManager*
            message             : IGPMessages*'''
        return super(IGPFunction2, self).Execute(paramvalues, TrackCancel, envMgr, message)
    DialogCLSID = property(get_DialogCLSID, None, None)
    DisplayName = property(get_DisplayName, None, None)
    FullName = property(get_FullName, None, None)
    HelpContext = property(get_HelpContext, None, None)
    HelpFile = property(get_HelpFile, None, None)
    MetadataFile = property(get_MetadataFile, None, None)
    Name = property(get_Name, None, None)
    ParameterInfo = property(get_ParameterInfo, None, None)

class IGPFunctionName(_esriGeoprocessing.IGPFunctionName):
    _IID = uuid.UUID('4cdfd9f9-ae02-460e-aa27-8bd69e06956e')

    def __init__(self, *args, **kw):
        super(IGPFunctionName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinimumProduct(self):
        '''Method IGPFunctionName.get_MinimumProduct

           OUTPUT
            product             : esriProductCode*'''
        return super(IGPFunctionName, self).get_MinimumProduct()
    def put_MinimumProduct(self, product):
        '''Method IGPFunctionName.put_MinimumProduct

           INPUT
            product             : esriProductCode'''
        return super(IGPFunctionName, self).put_MinimumProduct(product)
    def get_RequiredExtension(self):
        '''Method IGPFunctionName.get_RequiredExtension

           OUTPUT
            extension           : esriLicenseExtensionCode*'''
        return super(IGPFunctionName, self).get_RequiredExtension()
    def put_RequiredExtension(self, extension):
        '''Method IGPFunctionName.put_RequiredExtension

           INPUT
            extension           : esriLicenseExtensionCode'''
        return super(IGPFunctionName, self).put_RequiredExtension(extension)
    def get_HelpFile(self):
        '''Method IGPFunctionName.get_HelpFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPFunctionName, self).get_HelpFile()
    def put_HelpFile(self, File):
        '''Method IGPFunctionName.put_HelpFile

           INPUT
            File                : BSTR'''
        return super(IGPFunctionName, self).put_HelpFile(File)
    def get_HelpContext(self):
        '''Method IGPFunctionName.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IGPFunctionName, self).get_HelpContext()
    def put_HelpContext(self, context):
        '''Method IGPFunctionName.put_HelpContext

           INPUT
            context             : long'''
        return super(IGPFunctionName, self).put_HelpContext(context)
    HelpContext = property(get_HelpContext, put_HelpContext, None)
    HelpFile = property(get_HelpFile, put_HelpFile, None)
    MinimumProduct = property(get_MinimumProduct, put_MinimumProduct, None)
    RequiredExtension = property(get_RequiredExtension, put_RequiredExtension, None)

class IGPFunctionFactory(_esriGeoprocessing.IGPFunctionFactory):
    _IID = uuid.UUID('669e0215-b827-4130-9014-df1a53c68805')
    def get_CLSID(self):
        '''Method IGPFunctionFactory.get_CLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPFunctionFactory, self).get_CLSID()
    def get_Name(self):
        '''Method IGPFunctionFactory.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFunctionFactory, self).get_Name()
    def get_Alias(self):
        '''Method IGPFunctionFactory.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPFunctionFactory, self).get_Alias()
    def GetFunction(self, Name):
        '''Method IGPFunctionFactory.GetFunction

           INPUT
            Name                : BSTR

           OUTPUT
            Function            : IGPFunction**'''
        return super(IGPFunctionFactory, self).GetFunction(Name)
    def GetFunctionName(self, Name):
        '''Method IGPFunctionFactory.GetFunctionName

           INPUT
            Name                : BSTR

           OUTPUT
            functionname        : IGPName**'''
        return super(IGPFunctionFactory, self).GetFunctionName(Name)
    def GetFunctionNames(self):
        '''Method IGPFunctionFactory.GetFunctionNames

           OUTPUT
            functionnames       : IEnumGPName**'''
        return super(IGPFunctionFactory, self).GetFunctionNames()
    def GetFunctionEnvironments(self):
        '''Method IGPFunctionFactory.GetFunctionEnvironments

           OUTPUT
            Environments        : IEnumGPEnvironment**'''
        return super(IGPFunctionFactory, self).GetFunctionEnvironments()
    Alias = property(get_Alias, None, None)
    CLSID = property(get_CLSID, None, None)
    Name = property(get_Name, None, None)

class IGPFunctionFactory2(_esriGeoprocessing.IGPFunctionFactory2):
    _IID = uuid.UUID('4276d696-3298-4bb2-8c2d-8e54be477644')
    def ReleaseInternals(self):
        '''Method IGPFunctionFactory2.ReleaseInternals'''
        return super(IGPFunctionFactory2, self).ReleaseInternals()

class IGPParseString(_esriGeoprocessing.IGPParseString):
    _IID = uuid.UUID('05bebf04-93db-4b17-97bd-b158792c6625')
    def Initialize(self, String, separator):
        '''Method IGPParseString.Initialize

           INPUTS
            String              : BSTR
            separator           : BSTR'''
        return super(IGPParseString, self).Initialize(String, separator)
    def NextToken(self):
        '''Method IGPParseString.NextToken

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseString, self).NextToken()
    def NextSimpleToken(self):
        '''Method IGPParseString.NextSimpleToken

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseString, self).NextSimpleToken()
    def IsNextTokenQuoted(self):
        '''Method IGPParseString.IsNextTokenQuoted

           OUTPUT
            quoted              : VARIANT_BOOL*'''
        return super(IGPParseString, self).IsNextTokenQuoted()
    def CheckToken(self, inChar):
        '''Method IGPParseString.CheckToken

           INPUT
            inChar              : BSTR

           OUTPUTS
            pInQuote            : VARIANT_BOOL*
            pTokenDone          : VARIANT_BOOL*
            pToken              : BSTR*'''
        return super(IGPParseString, self).CheckToken(inChar)

class IGPParseString2(_esriGeoprocessing.IGPParseString2):
    _IID = uuid.UUID('1a39705f-345b-4c6d-b5d5-aad3f5b4b218')
    def Initialize(self, String, separator):
        '''Method IGPParseString2.Initialize

           INPUTS
            String              : BSTR
            separator           : BSTR'''
        return super(IGPParseString2, self).Initialize(String, separator)
    def NextToken(self):
        '''Method IGPParseString2.NextToken

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseString2, self).NextToken()
    def NextSimpleToken(self):
        '''Method IGPParseString2.NextSimpleToken

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseString2, self).NextSimpleToken()
    def IsNextTokenQuoted(self):
        '''Method IGPParseString2.IsNextTokenQuoted

           OUTPUT
            quoted              : VARIANT_BOOL*'''
        return super(IGPParseString2, self).IsNextTokenQuoted()
    def CheckToken(self, inChar):
        '''Method IGPParseString2.CheckToken

           INPUT
            inChar              : BSTR

           OUTPUTS
            pInQuote            : VARIANT_BOOL*
            pTokenDone          : VARIANT_BOOL*
            pToken              : BSTR*'''
        return super(IGPParseString2, self).CheckToken(inChar)
    def RemainingText(self):
        '''Method IGPParseString2.RemainingText

           OUTPUT
            text                : BSTR*'''
        return super(IGPParseString2, self).RemainingText()
    def NextDouble(self):
        '''Method IGPParseString2.NextDouble

           OUTPUT
            token               : double*'''
        return super(IGPParseString2, self).NextDouble()
    def NextLong(self):
        '''Method IGPParseString2.NextLong

           OUTPUT
            token               : long*'''
        return super(IGPParseString2, self).NextLong()
    def NextBoolean(self):
        '''Method IGPParseString2.NextBoolean

           OUTPUT
            token               : VARIANT_BOOL*'''
        return super(IGPParseString2, self).NextBoolean()
    def NeedsQuote(self, text):
        '''Method IGPParseString2.NeedsQuote

           INPUT
            text                : BSTR

           OUTPUT
            token               : VARIANT_BOOL*'''
        return super(IGPParseString2, self).NeedsQuote(text)
    def QuoteString(self, text):
        '''Method IGPParseString2.QuoteString

           INPUT
            text                : BSTR

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseString2, self).QuoteString(text)
    def StringToDouble(self, text):
        '''Method IGPParseString2.StringToDouble

           INPUT
            text                : BSTR

           OUTPUT
            token               : double*'''
        return super(IGPParseString2, self).StringToDouble(text)
    def DoubleToString(self, Value):
        '''Method IGPParseString2.DoubleToString

           INPUT
            Value               : double

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseString2, self).DoubleToString(Value)

class IGPUtilities(_esriGeoprocessing.IGPUtilities):
    _IID = uuid.UUID('32f06b8f-a395-4f4e-b24f-52bbef06a036')

    def __init__(self, *args, **kw):
        super(IGPUtilities, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def InternalValidate(self, pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr):
        '''Method IGPUtilities.InternalValidate

           INPUTS
            pParameters         : IArray*
            pParamValues        : IArray*
            updateValues        : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGPUtilities, self).InternalValidate(pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr)
    def InternalValidateValue(self, pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage):
        '''Method IGPUtilities.InternalValidateValue

           INPUTS
            pParameter          : IGPParameter*
            pValue              : IUnknown*
            updateValue         : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*
            pMessage            : IGPMessage*'''
        return super(IGPUtilities, self).InternalValidateValue(pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage)
    def IsBadMessage(self, pMessages, Index):
        '''Method IGPUtilities.IsBadMessage

           INPUTS
            pMessages           : IGPMessages*
            Index               : long

           OUTPUT
            pBadMsg             : VARIANT_BOOL*'''
        return super(IGPUtilities, self).IsBadMessage(pMessages, Index)
    def GenerateDefaultOutputValue(self, pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit):
        '''Method IGPUtilities.GenerateDefaultOutputValue

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            functionname        : BSTR
            pOutputParam        : IGPParameter*
            pInputValue         : IGPValue*
            extension           : BSTR
            outputFileBaseLimit : long

           OUTPUT
            ppOutputValue       : IGPValue**'''
        return super(IGPUtilities, self).GenerateDefaultOutputValue(pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit)
    def QualifyOutputDataElement(self, pValue):
        '''Method IGPUtilities.QualifyOutputDataElement

           INPUT
            pValue              : IGPValue*'''
        return super(IGPUtilities, self).QualifyOutputDataElement(pValue)
    def QualifyOutputCatalogPath(self, catalogPath):
        '''Method IGPUtilities.QualifyOutputCatalogPath

           INPUT
            catalogPath         : BSTR

           OUTPUT
            pQualifiedCatalogPath: BSTR*'''
        return super(IGPUtilities, self).QualifyOutputCatalogPath(catalogPath)
    def GetUnQualifiedCatalogPath(self, pValue):
        '''Method IGPUtilities.GetUnQualifiedCatalogPath

           INPUT
            pValue              : IGPValue*

           OUTPUT
            Path                : BSTR*'''
        return super(IGPUtilities, self).GetUnQualifiedCatalogPath(pValue)
    def put_Workspace(self, workPath):
        '''Method IGPUtilities.put_Workspace

           INPUT
            workPath            : BSTR'''
        return super(IGPUtilities, self).put_Workspace(workPath)
    def get_Workspace(self):
        '''Method IGPUtilities.get_Workspace

           OUTPUT
            workPath            : BSTR*'''
        return super(IGPUtilities, self).get_Workspace()
    def get_Catalog(self):
        '''Method IGPUtilities.get_Catalog

           OUTPUT
            Catalog             : IUnknown**'''
        return super(IGPUtilities, self).get_Catalog()
    def get_RefreshCatalogParent(self):
        '''Method IGPUtilities.get_RefreshCatalogParent

           OUTPUT
            pRefresh            : VARIANT_BOOL*'''
        return super(IGPUtilities, self).get_RefreshCatalogParent()
    def put_RefreshCatalogParent(self, pRefresh):
        '''Method IGPUtilities.put_RefreshCatalogParent

           INPUT
            pRefresh            : VARIANT_BOOL'''
        return super(IGPUtilities, self).put_RefreshCatalogParent(pRefresh)
    def MakeDataElement(self, catalogPath, pDataType, pExpandOptions):
        '''Method IGPUtilities.MakeDataElement

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            pExpandOptions      : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities, self).MakeDataElement(catalogPath, pDataType, pExpandOptions)
    def MakeDataElementFromNameObject(self, Name):
        '''Method IGPUtilities.MakeDataElementFromNameObject

           INPUT
            Name                : IName*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities, self).MakeDataElementFromNameObject(Name)
    def ExpandDataElement(self, pInDE, pExpandOptions):
        '''Method IGPUtilities.ExpandDataElement

           INPUTS
            pInDE               : IDataElement*
            pExpandOptions      : IDEBrowseOptions*'''
        return super(IGPUtilities, self).ExpandDataElement(pInDE, pExpandOptions)
    def CreateDataElement(self, catalogPath, pDataType, optionalWorkspace):
        '''Method IGPUtilities.CreateDataElement

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            optionalWorkspace   : BSTR

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities, self).CreateDataElement(catalogPath, pDataType, optionalWorkspace)
    def CreateFeatureLayer(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureLayer

           INPUT
            catalogPath         : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPUtilities, self).CreateFeatureLayer(catalogPath)
    def OpenRasterDatasetFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterDatasetFromString

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities, self).OpenRasterDatasetFromString(catalogPath)
    def OpenFeatureClassFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureClassFromString

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFC                : IFeatureClass**'''
        return super(IGPUtilities, self).OpenFeatureClassFromString(catalogPath)
    def OpenTableFromString(self, catalogPath):
        '''Method IGPUtilities.OpenTableFromString

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities, self).OpenTableFromString(catalogPath)
    def OpenRasterLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterLayerFromString

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRL                : IRasterLayer**'''
        return super(IGPUtilities, self).OpenRasterLayerFromString(catalogPath)
    def OpenFeatureLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureLayerFromString

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFL                : IFeatureLayer**'''
        return super(IGPUtilities, self).OpenFeatureLayerFromString(catalogPath)
    def CreateFeatureClassName(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureClassName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).CreateFeatureClassName(catalogPath)
    def CreateRasterDatasetName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterDatasetName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).CreateRasterDatasetName(catalogPath)
    def CreateRasterCatalogName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterCatalogName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).CreateRasterCatalogName(catalogPath)
    def CreateTableName(self, catalogPath):
        '''Method IGPUtilities.CreateTableName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).CreateTableName(catalogPath)
    def OpenDataset(self, pValue):
        '''Method IGPUtilities.OpenDataset

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities, self).OpenDataset(pValue)
    def OpenDatasetFromLocation(self, catalogPath):
        '''Method IGPUtilities.OpenDatasetFromLocation

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities, self).OpenDatasetFromLocation(catalogPath)
    def AddToMap(self, pGPValue, Name, temporary, pUnkRenderer):
        '''Method IGPUtilities.AddToMap

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*'''
        return super(IGPUtilities, self).AddToMap(pGPValue, Name, temporary, pUnkRenderer)
    def RefreshCatalog(self, pSourceDataElement):
        '''Method IGPUtilities.RefreshCatalog

           INPUT
            pSourceDataElement  : IDataElement*'''
        return super(IGPUtilities, self).RefreshCatalog(pSourceDataElement)
    def ExportFeatureClass(self, pSourceDataElement, pTargetDataElement):
        '''Method IGPUtilities.ExportFeatureClass

           INPUTS
            pSourceDataElement  : IDataElement*
            pTargetDataElement  : IDataElement*'''
        return super(IGPUtilities, self).ExportFeatureClass(pSourceDataElement, pTargetDataElement)
    def Delete(self, pGPValue):
        '''Method IGPUtilities.Delete

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities, self).Delete(pGPValue)
    def Rename(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Rename

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities, self).Rename(pSourceGPValue, pTargetGPValue)
    def Copy(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Copy

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities, self).Copy(pSourceGPValue, pTargetGPValue)
    def Exists(self, pGPValue):
        '''Method IGPUtilities.Exists

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities, self).Exists(pGPValue)
    def CompareWildCard(self, wildCard, Data):
        '''Method IGPUtilities.CompareWildCard

           INPUTS
            wildCard            : BSTR
            Data                : BSTR

           OUTPUT
            matched             : VARIANT_BOOL*'''
        return super(IGPUtilities, self).CompareWildCard(wildCard, Data)
    def GetNameObject(self, pDataElement):
        '''Method IGPUtilities.GetNameObject

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).GetNameObject(pDataElement)
    def GetNameObjectFromLocation(self, locationMoniker):
        '''Method IGPUtilities.GetNameObjectFromLocation

           INPUT
            locationMoniker     : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).GetNameObjectFromLocation(locationMoniker)
    def GetGxObjectFromLocation(self, catalogPath):
        '''Method IGPUtilities.GetGxObjectFromLocation

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities, self).GetGxObjectFromLocation(catalogPath)
    def FieldExists(self, pGPValue, pField):
        '''Method IGPUtilities.FieldExists

           INPUTS
            pGPValue            : IGPValue*
            pField              : IField*

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(IGPUtilities, self).FieldExists(pGPValue, pField)
    def FindField(self, pGPValue, Name):
        '''Method IGPUtilities.FindField

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR

           OUTPUT
            ppField             : IField**'''
        return super(IGPUtilities, self).FindField(pGPValue, Name)
    def GetMapLayers(self):
        '''Method IGPUtilities.GetMapLayers

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IGPUtilities, self).GetMapLayers()
    def FindMapLayer(self, Name):
        '''Method IGPUtilities.FindMapLayer

           INPUT
            Name                : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities, self).FindMapLayer(Name)
    def FindMapLayer2(self, Name):
        '''Method IGPUtilities.FindMapLayer2

           INPUT
            Name                : BSTR

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities, self).FindMapLayer2(Name)
    def GetGPLayers(self):
        '''Method IGPUtilities.GetGPLayers

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities, self).GetGPLayers()
    def MakeGPLayer(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPLayer

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities, self).MakeGPLayer(catalogPath, pDataType)
    def GetEnvironment(self, pEnvironments, Name):
        '''Method IGPUtilities.GetEnvironment

           INPUTS
            pEnvironments       : IArray*
            Name                : BSTR

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IGPUtilities, self).GetEnvironment(pEnvironments, Name)
    def AddInternalLayer(self, pLayer):
        '''Method IGPUtilities.AddInternalLayer

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities, self).AddInternalLayer(pLayer)
    def AddInternalLayer2(self, pLayer, pGPLayer):
        '''Method IGPUtilities.AddInternalLayer2

           INPUTS
            pLayer              : ILayer*
            pGPLayer            : IGPLayer*'''
        return super(IGPUtilities, self).AddInternalLayer2(pLayer, pGPLayer)
    def MakeGPLayerFromLayer(self, pLayer):
        '''Method IGPUtilities.MakeGPLayerFromLayer

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities, self).MakeGPLayerFromLayer(pLayer)
    def CreateParentFromCatalogPath(self, catalogPath):
        '''Method IGPUtilities.CreateParentFromCatalogPath

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities, self).CreateParentFromCatalogPath(catalogPath)
    def UnpackGPValue(self, pInput):
        '''Method IGPUtilities.UnpackGPValue

           INPUT
            pInput              : IUnknown*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities, self).UnpackGPValue(pInput)
    def DecodeRasterLayer(self, pValue):
        '''Method IGPUtilities.DecodeRasterLayer

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities, self).DecodeRasterLayer(pValue)
    def DecodeFeatureLayer(self, pValue):
        '''Method IGPUtilities.DecodeFeatureLayer

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppFC                : IFeatureClass**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities, self).DecodeFeatureLayer(pValue)
    def DecodeTableView(self, pValue):
        '''Method IGPUtilities.DecodeTableView

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppTable             : ITable**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities, self).DecodeTableView(pValue)
    def DecodeLayer(self, pValue):
        '''Method IGPUtilities.DecodeLayer

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities, self).DecodeLayer(pValue)
    def DecodeStandaloneTable(self, pValue):
        '''Method IGPUtilities.DecodeStandaloneTable

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppStandaloneTable   : IStandaloneTable**'''
        return super(IGPUtilities, self).DecodeStandaloneTable(pValue)
    def DecodeDETable(self, pValue):
        '''Method IGPUtilities.DecodeDETable

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGPUtilities, self).DecodeDETable(pValue)
    def ReleaseInternals(self):
        '''Method IGPUtilities.ReleaseInternals'''
        return super(IGPUtilities, self).ReleaseInternals()
    def GetMapTables(self):
        '''Method IGPUtilities.GetMapTables

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IGPUtilities, self).GetMapTables()
    def FindMapTable(self, Name):
        '''Method IGPUtilities.FindMapTable

           INPUT
            Name                : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities, self).FindMapTable(Name)
    def FindMapTable2(self, Name):
        '''Method IGPUtilities.FindMapTable2

           INPUT
            Name                : BSTR

           OUTPUTS
            ppTable             : ITable**
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities, self).FindMapTable2(Name)
    def GetGPTableViews(self):
        '''Method IGPUtilities.GetGPTableViews

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities, self).GetGPTableViews()
    def IsGPTableView(self, pValue):
        '''Method IGPUtilities.IsGPTableView

           INPUT
            pValue              : IGPValue*

           OUTPUT
            pResult             : VARIANT_BOOL*'''
        return super(IGPUtilities, self).IsGPTableView(pValue)
    def MakeGPTableView(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPTableView

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities, self).MakeGPTableView(catalogPath, pDataType)
    def AddInternalTable(self, pTable):
        '''Method IGPUtilities.AddInternalTable

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities, self).AddInternalTable(pTable)
    def AddInternalTable2(self, pTable, pGPTableView):
        '''Method IGPUtilities.AddInternalTable2

           INPUTS
            pTable              : ITable*
            pGPTableView        : IGPTableView*'''
        return super(IGPUtilities, self).AddInternalTable2(pTable, pGPTableView)
    def MakeGPTableViewFromTable(self, pTable):
        '''Method IGPUtilities.MakeGPTableViewFromTable

           INPUT
            pTable              : ITable*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities, self).MakeGPTableViewFromTable(pTable)
    def GetFields(self, pValue):
        '''Method IGPUtilities.GetFields

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppFields            : IFields**'''
        return super(IGPUtilities, self).GetFields(pValue)
    def CanAddToMap(self):
        '''Method IGPUtilities.CanAddToMap

           OUTPUT
            pCanAddToMap        : VARIANT_BOOL*'''
        return super(IGPUtilities, self).CanAddToMap()
    def GenerateSpRef(self, pInputTables, pOverlayTable, growExtentBy):
        '''Method IGPUtilities.GenerateSpRef

           INPUTS
            pInputTables        : IArray*
            pOverlayTable       : ITable*
            growExtentBy        : double

           OUTPUTS
            ppSpRef             : ISpatialReference**
            ppExtent            : IEnvelope**
            pHasMs              : VARIANT_BOOL*
            pMMin               : double*
            pMMax               : double*
            pHasZs              : VARIANT_BOOL*
            pZMin               : double*
            pZMax               : double*'''
        return super(IGPUtilities, self).GenerateSpRef(pInputTables, pOverlayTable, growExtentBy)
    def SetGridIndex(self, pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef):
        '''Method IGPUtilities.SetGridIndex

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pInputTables        : IArray*
            spatialIndex1       : double
            spatialIndex2       : double
            spatialIndex3       : double
            pUnk                : IUnknown*
            pGeometryDef        : IGeometryDef*'''
        return super(IGPUtilities, self).SetGridIndex(pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef)
    def IsDatasetType(self, pUnknown):
        '''Method IGPUtilities.IsDatasetType

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IGPUtilities, self).IsDatasetType(pUnknown)
    def RemoveFromMap(self, pGPValue, Name):
        '''Method IGPUtilities.RemoveFromMap

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR'''
        return super(IGPUtilities, self).RemoveFromMap(pGPValue, Name)
    def IsDerived(self, pInput):
        '''Method IGPUtilities.IsDerived

           INPUT
            pInput              : IUnknown*

           OUTPUT
            pDerived            : VARIANT_BOOL*'''
        return super(IGPUtilities, self).IsDerived(pInput)
    def RefreshView(self):
        '''Method IGPUtilities.RefreshView'''
        return super(IGPUtilities, self).RefreshView()
    def PackGPValue(self, pValue, pInput):
        '''Method IGPUtilities.PackGPValue

           INPUTS
            pValue              : IGPValue*
            pInput              : IUnknown*'''
        return super(IGPUtilities, self).PackGPValue(pValue, pInput)
    def CreateParameterValue(self, text, pDataType, Direction):
        '''Method IGPUtilities.CreateParameterValue

           INPUTS
            text                : BSTR
            pDataType           : IGPDataType*
            Direction           : esriGPParameterDirection

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities, self).CreateParameterValue(text, pDataType, Direction)
    def ValidateExists(self, pGPValue, checkDerived):
        '''Method IGPUtilities.ValidateExists

           INPUTS
            pGPValue            : IGPValue*
            checkDerived        : VARIANT_BOOL

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities, self).ValidateExists(pGPValue, checkDerived)
    def GetGxObject(self, pDataElement):
        '''Method IGPUtilities.GetGxObject

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities, self).GetGxObject(pDataElement)
    def GetGxObjects(self, catalogPath):
        '''Method IGPUtilities.GetGxObjects

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities, self).GetGxObjects(catalogPath)
    def MakeDataElements(self, catalogPath, pBrowseOptions):
        '''Method IGPUtilities.MakeDataElements

           INPUTS
            catalogPath         : BSTR
            pBrowseOptions      : IDEBrowseOptions*

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities, self).MakeDataElements(catalogPath, pBrowseOptions)
    def GetGPMapData(self):
        '''Method IGPUtilities.GetGPMapData

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities, self).GetGPMapData()
    def MakeGPValueFromObject(self, pUnk):
        '''Method IGPUtilities.MakeGPValueFromObject

           INPUT
            pUnk                : IUnknown*

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IGPUtilities, self).MakeGPValueFromObject(pUnk)
    def RemoveInternalValues(self):
        '''Method IGPUtilities.RemoveInternalValues'''
        return super(IGPUtilities, self).RemoveInternalValues()
    def RemoveInternalLayer(self, Name):
        '''Method IGPUtilities.RemoveInternalLayer

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities, self).RemoveInternalLayer(Name)
    def RemoveInternalTable(self, Name):
        '''Method IGPUtilities.RemoveInternalTable

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities, self).RemoveInternalTable(Name)
    def DecodeRaster(self, pValue):
        '''Method IGPUtilities.DecodeRaster

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IGPUtilities, self).DecodeRaster(pValue)
    def GetGPSpRefEnv(self, pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities.GetGPSpRefEnv

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities, self).GetGPSpRefEnv(pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def RemoveInternalLayerEx(self, pLayer):
        '''Method IGPUtilities.RemoveInternalLayerEx

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities, self).RemoveInternalLayerEx(pLayer)
    def RemoveInternalTableEx(self, pTable):
        '''Method IGPUtilities.RemoveInternalTableEx

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities, self).RemoveInternalTableEx(pTable)
    Catalog = property(get_Catalog, None, None)
    RefreshCatalogParent = property(get_RefreshCatalogParent, put_RefreshCatalogParent, None)
    Workspace = property(get_Workspace, put_Workspace, None)

class IGPUtilities2(_esriGeoprocessing.IGPUtilities2):
    _IID = uuid.UUID('d57e3b9b-5481-4f28-9f31-f0b8756b53b9')

    def __init__(self, *args, **kw):
        super(IGPUtilities2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Open(self, pValue):
        '''Method IGPUtilities2.Open

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IUnknown**'''
        return super(IGPUtilities2, self).Open(pValue)
    def SaveLayer(self, catalogPath, pLayer):
        '''Method IGPUtilities2.SaveLayer

           INPUTS
            catalogPath         : BSTR
            pLayer              : ILayer*'''
        return super(IGPUtilities2, self).SaveLayer(catalogPath, pLayer)
    def GetActiveView(self):
        '''Method IGPUtilities2.GetActiveView

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IGPUtilities2, self).GetActiveView()
    def GetMap(self):
        '''Method IGPUtilities2.GetMap

           OUTPUT
            ppMap               : IMap**'''
        return super(IGPUtilities2, self).GetMap()
    def GetBasicMap(self):
        '''Method IGPUtilities2.GetBasicMap

           OUTPUT
            ppMap               : IBasicMap**'''
        return super(IGPUtilities2, self).GetBasicMap()
    def InApplication(self):
        '''Method IGPUtilities2.InApplication

           OUTPUT
            pInApplication      : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).InApplication()
    def MakeLayer(self, pValue, Name, pUnkRenderer):
        '''Method IGPUtilities2.MakeLayer

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR
            pUnkRenderer        : IUnknown*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities2, self).MakeLayer(pValue, Name, pUnkRenderer)
    def GetStatusBar(self):
        '''Method IGPUtilities2.GetStatusBar

           OUTPUT
            ppStatusBar         : IStatusBar**'''
        return super(IGPUtilities2, self).GetStatusBar()
    def StartEditOperation(self, pWorkspace, bHasPrivateEditSession):
        '''Method IGPUtilities2.StartEditOperation

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            bHasPrivateEditSession: VARIANT_BOOL'''
        return super(IGPUtilities2, self).StartEditOperation(pWorkspace, bHasPrivateEditSession)
    def AbortEditOperation(self, pWorkspace):
        '''Method IGPUtilities2.AbortEditOperation

           INPUT
            pWorkspace          : IWorkspaceEdit*'''
        return super(IGPUtilities2, self).AbortEditOperation(pWorkspace)
    def StopEditOperation(self, pWorkspace, operationLabel):
        '''Method IGPUtilities2.StopEditOperation

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            operationLabel      : BSTR'''
        return super(IGPUtilities2, self).StopEditOperation(pWorkspace, operationLabel)
    def putref_VariableManager(self, ppVariableManager):
        '''Method IGPUtilities2.putref_VariableManager

           INPUT
            ppVariableManager   : IGPVariableManager*'''
        return super(IGPUtilities2, self).putref_VariableManager(ppVariableManager)
    def get_VariableManager(self):
        '''Method IGPUtilities2.get_VariableManager

           OUTPUT
            ppVariableManager   : IGPVariableManager**'''
        return super(IGPUtilities2, self).get_VariableManager()
    def GenerateGeographicTransformDomain(self, iUnk, pGTDomain, pInSR, pOutSR, pMessages):
        '''Method IGPUtilities2.GenerateGeographicTransformDomain

           INPUTS
            iUnk                : IUnknown*
            pGTDomain           : IGPCodedValueDomain*
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            pMessages           : IGPMessages*'''
        return super(IGPUtilities2, self).GenerateGeographicTransformDomain(iUnk, pGTDomain, pInSR, pOutSR, pMessages)
    def GetGTOperationSet(self, pGTs, pInSR, pOutSR, ppGTs):
        '''Method IGPUtilities2.GetGTOperationSet

           INPUTS
            pGTs                : IGPValue*
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            ppGTs               : ICompositeGeoTransformation**'''
        return super(IGPUtilities2, self).GetGTOperationSet(pGTs, pInSR, pOutSR, ppGTs)
    def GetExtent(self, pValue):
        '''Method IGPUtilities2.GetExtent

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            envType             : esriGPExtentEnum*
            Extent              : IEnvelope**'''
        return super(IGPUtilities2, self).GetExtent(pValue)
    def GetGPSpRefEnvEx(self, pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities2.GetGPSpRefEnvEx

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pTgtSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities2, self).GetGPSpRefEnvEx(pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def CreateToolboxFromFactory(self, Alias, location, ToolboxName):
        '''Method IGPUtilities2.CreateToolboxFromFactory

           INPUTS
            Alias               : BSTR
            location            : BSTR
            ToolboxName         : BSTR'''
        return super(IGPUtilities2, self).CreateToolboxFromFactory(Alias, location, ToolboxName)
    def SetInternalMap(self, pMap):
        '''Method IGPUtilities2.SetInternalMap

           INPUT
            pMap                : IMap*'''
        return super(IGPUtilities2, self).SetInternalMap(pMap)
    def GetLayerName(self, pValue, Name):
        '''Method IGPUtilities2.GetLayerName

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR

           OUTPUT
            pName               : BSTR*'''
        return super(IGPUtilities2, self).GetLayerName(pValue, Name)
    def RemoveInternalData(self):
        '''Method IGPUtilities2.RemoveInternalData'''
        return super(IGPUtilities2, self).RemoveInternalData()
    def GetInMemoryWorkspace(self):
        '''Method IGPUtilities2.GetInMemoryWorkspace

           OUTPUT
            ppWorkspace         : IWorkspace**'''
        return super(IGPUtilities2, self).GetInMemoryWorkspace()
    def ClearInMemoryWorkspace(self):
        '''Method IGPUtilities2.ClearInMemoryWorkspace'''
        return super(IGPUtilities2, self).ClearInMemoryWorkspace()
    def OpenFromString(self, NameString):
        '''Method IGPUtilities2.OpenFromString

           INPUT
            NameString          : BSTR

           OUTPUT
            ppDataset           : IUnknown**'''
        return super(IGPUtilities2, self).OpenFromString(NameString)
    def SetupEditSession(self, pTable):
        '''Method IGPUtilities2.SetupEditSession

           INPUT
            pTable              : IClass*'''
        return super(IGPUtilities2, self).SetupEditSession(pTable)
    def CleanupEditSession(self, abort):
        '''Method IGPUtilities2.CleanupEditSession

           INPUT
            abort               : VARIANT_BOOL'''
        return super(IGPUtilities2, self).CleanupEditSession(abort)
    def RemoveFromMapEx(self, pGPValue):
        '''Method IGPUtilities2.RemoveFromMapEx

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities2, self).RemoveFromMapEx(pGPValue)
    def AddToMapEx(self, pGPValue, Name, temporary, pUnkRenderer, Visible):
        '''Method IGPUtilities2.AddToMapEx

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*
            Visible             : VARIANT_BOOL'''
        return super(IGPUtilities2, self).AddToMapEx(pGPValue, Name, temporary, pUnkRenderer, Visible)
    def InternalValidate(self, pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr):
        '''Method IGPUtilities.InternalValidate (from IGPUtilities)

           INPUTS
            pParameters         : IArray*
            pParamValues        : IArray*
            updateValues        : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGPUtilities2, self).InternalValidate(pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr)
    def InternalValidateValue(self, pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage):
        '''Method IGPUtilities.InternalValidateValue (from IGPUtilities)

           INPUTS
            pParameter          : IGPParameter*
            pValue              : IUnknown*
            updateValue         : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*
            pMessage            : IGPMessage*'''
        return super(IGPUtilities2, self).InternalValidateValue(pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage)
    def IsBadMessage(self, pMessages, Index):
        '''Method IGPUtilities.IsBadMessage (from IGPUtilities)

           INPUTS
            pMessages           : IGPMessages*
            Index               : long

           OUTPUT
            pBadMsg             : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).IsBadMessage(pMessages, Index)
    def GenerateDefaultOutputValue(self, pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit):
        '''Method IGPUtilities.GenerateDefaultOutputValue (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            functionname        : BSTR
            pOutputParam        : IGPParameter*
            pInputValue         : IGPValue*
            extension           : BSTR
            outputFileBaseLimit : long

           OUTPUT
            ppOutputValue       : IGPValue**'''
        return super(IGPUtilities2, self).GenerateDefaultOutputValue(pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit)
    def QualifyOutputDataElement(self, pValue):
        '''Method IGPUtilities.QualifyOutputDataElement (from IGPUtilities)

           INPUT
            pValue              : IGPValue*'''
        return super(IGPUtilities2, self).QualifyOutputDataElement(pValue)
    def QualifyOutputCatalogPath(self, catalogPath):
        '''Method IGPUtilities.QualifyOutputCatalogPath (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            pQualifiedCatalogPath: BSTR*'''
        return super(IGPUtilities2, self).QualifyOutputCatalogPath(catalogPath)
    def GetUnQualifiedCatalogPath(self, pValue):
        '''Method IGPUtilities.GetUnQualifiedCatalogPath (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            Path                : BSTR*'''
        return super(IGPUtilities2, self).GetUnQualifiedCatalogPath(pValue)
    def put_Workspace(self, workPath):
        '''Method IGPUtilities.put_Workspace (from IGPUtilities)

           INPUT
            workPath            : BSTR'''
        return super(IGPUtilities2, self).put_Workspace(workPath)
    def get_Workspace(self):
        '''Method IGPUtilities.get_Workspace (from IGPUtilities)

           OUTPUT
            workPath            : BSTR*'''
        return super(IGPUtilities2, self).get_Workspace()
    def get_Catalog(self):
        '''Method IGPUtilities.get_Catalog (from IGPUtilities)

           OUTPUT
            Catalog             : IUnknown**'''
        return super(IGPUtilities2, self).get_Catalog()
    def get_RefreshCatalogParent(self):
        '''Method IGPUtilities.get_RefreshCatalogParent (from IGPUtilities)

           OUTPUT
            pRefresh            : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).get_RefreshCatalogParent()
    def put_RefreshCatalogParent(self, pRefresh):
        '''Method IGPUtilities.put_RefreshCatalogParent (from IGPUtilities)

           INPUT
            pRefresh            : VARIANT_BOOL'''
        return super(IGPUtilities2, self).put_RefreshCatalogParent(pRefresh)
    def MakeDataElement(self, catalogPath, pDataType, pExpandOptions):
        '''Method IGPUtilities.MakeDataElement (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            pExpandOptions      : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities2, self).MakeDataElement(catalogPath, pDataType, pExpandOptions)
    def MakeDataElementFromNameObject(self, Name):
        '''Method IGPUtilities.MakeDataElementFromNameObject (from IGPUtilities)

           INPUT
            Name                : IName*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities2, self).MakeDataElementFromNameObject(Name)
    def ExpandDataElement(self, pInDE, pExpandOptions):
        '''Method IGPUtilities.ExpandDataElement (from IGPUtilities)

           INPUTS
            pInDE               : IDataElement*
            pExpandOptions      : IDEBrowseOptions*'''
        return super(IGPUtilities2, self).ExpandDataElement(pInDE, pExpandOptions)
    def CreateDataElement(self, catalogPath, pDataType, optionalWorkspace):
        '''Method IGPUtilities.CreateDataElement (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            optionalWorkspace   : BSTR

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities2, self).CreateDataElement(catalogPath, pDataType, optionalWorkspace)
    def CreateFeatureLayer(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureLayer (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPUtilities2, self).CreateFeatureLayer(catalogPath)
    def OpenRasterDatasetFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterDatasetFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities2, self).OpenRasterDatasetFromString(catalogPath)
    def OpenFeatureClassFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureClassFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFC                : IFeatureClass**'''
        return super(IGPUtilities2, self).OpenFeatureClassFromString(catalogPath)
    def OpenTableFromString(self, catalogPath):
        '''Method IGPUtilities.OpenTableFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities2, self).OpenTableFromString(catalogPath)
    def OpenRasterLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterLayerFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRL                : IRasterLayer**'''
        return super(IGPUtilities2, self).OpenRasterLayerFromString(catalogPath)
    def OpenFeatureLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureLayerFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFL                : IFeatureLayer**'''
        return super(IGPUtilities2, self).OpenFeatureLayerFromString(catalogPath)
    def CreateFeatureClassName(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureClassName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).CreateFeatureClassName(catalogPath)
    def CreateRasterDatasetName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterDatasetName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).CreateRasterDatasetName(catalogPath)
    def CreateRasterCatalogName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterCatalogName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).CreateRasterCatalogName(catalogPath)
    def CreateTableName(self, catalogPath):
        '''Method IGPUtilities.CreateTableName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).CreateTableName(catalogPath)
    def OpenDataset(self, pValue):
        '''Method IGPUtilities.OpenDataset (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities2, self).OpenDataset(pValue)
    def OpenDatasetFromLocation(self, catalogPath):
        '''Method IGPUtilities.OpenDatasetFromLocation (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities2, self).OpenDatasetFromLocation(catalogPath)
    def AddToMap(self, pGPValue, Name, temporary, pUnkRenderer):
        '''Method IGPUtilities.AddToMap (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*'''
        return super(IGPUtilities2, self).AddToMap(pGPValue, Name, temporary, pUnkRenderer)
    def RefreshCatalog(self, pSourceDataElement):
        '''Method IGPUtilities.RefreshCatalog (from IGPUtilities)

           INPUT
            pSourceDataElement  : IDataElement*'''
        return super(IGPUtilities2, self).RefreshCatalog(pSourceDataElement)
    def ExportFeatureClass(self, pSourceDataElement, pTargetDataElement):
        '''Method IGPUtilities.ExportFeatureClass (from IGPUtilities)

           INPUTS
            pSourceDataElement  : IDataElement*
            pTargetDataElement  : IDataElement*'''
        return super(IGPUtilities2, self).ExportFeatureClass(pSourceDataElement, pTargetDataElement)
    def Delete(self, pGPValue):
        '''Method IGPUtilities.Delete (from IGPUtilities)

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities2, self).Delete(pGPValue)
    def Rename(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Rename (from IGPUtilities)

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities2, self).Rename(pSourceGPValue, pTargetGPValue)
    def Copy(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Copy (from IGPUtilities)

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities2, self).Copy(pSourceGPValue, pTargetGPValue)
    def Exists(self, pGPValue):
        '''Method IGPUtilities.Exists (from IGPUtilities)

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).Exists(pGPValue)
    def CompareWildCard(self, wildCard, Data):
        '''Method IGPUtilities.CompareWildCard (from IGPUtilities)

           INPUTS
            wildCard            : BSTR
            Data                : BSTR

           OUTPUT
            matched             : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).CompareWildCard(wildCard, Data)
    def GetNameObject(self, pDataElement):
        '''Method IGPUtilities.GetNameObject (from IGPUtilities)

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).GetNameObject(pDataElement)
    def GetNameObjectFromLocation(self, locationMoniker):
        '''Method IGPUtilities.GetNameObjectFromLocation (from IGPUtilities)

           INPUT
            locationMoniker     : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).GetNameObjectFromLocation(locationMoniker)
    def GetGxObjectFromLocation(self, catalogPath):
        '''Method IGPUtilities.GetGxObjectFromLocation (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities2, self).GetGxObjectFromLocation(catalogPath)
    def FieldExists(self, pGPValue, pField):
        '''Method IGPUtilities.FieldExists (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            pField              : IField*

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).FieldExists(pGPValue, pField)
    def FindField(self, pGPValue, Name):
        '''Method IGPUtilities.FindField (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR

           OUTPUT
            ppField             : IField**'''
        return super(IGPUtilities2, self).FindField(pGPValue, Name)
    def GetMapLayers(self):
        '''Method IGPUtilities.GetMapLayers (from IGPUtilities)

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IGPUtilities2, self).GetMapLayers()
    def FindMapLayer(self, Name):
        '''Method IGPUtilities.FindMapLayer (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities2, self).FindMapLayer(Name)
    def FindMapLayer2(self, Name):
        '''Method IGPUtilities.FindMapLayer2 (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities2, self).FindMapLayer2(Name)
    def GetGPLayers(self):
        '''Method IGPUtilities.GetGPLayers (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities2, self).GetGPLayers()
    def MakeGPLayer(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPLayer (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities2, self).MakeGPLayer(catalogPath, pDataType)
    def GetEnvironment(self, pEnvironments, Name):
        '''Method IGPUtilities.GetEnvironment (from IGPUtilities)

           INPUTS
            pEnvironments       : IArray*
            Name                : BSTR

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IGPUtilities2, self).GetEnvironment(pEnvironments, Name)
    def AddInternalLayer(self, pLayer):
        '''Method IGPUtilities.AddInternalLayer (from IGPUtilities)

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities2, self).AddInternalLayer(pLayer)
    def AddInternalLayer2(self, pLayer, pGPLayer):
        '''Method IGPUtilities.AddInternalLayer2 (from IGPUtilities)

           INPUTS
            pLayer              : ILayer*
            pGPLayer            : IGPLayer*'''
        return super(IGPUtilities2, self).AddInternalLayer2(pLayer, pGPLayer)
    def MakeGPLayerFromLayer(self, pLayer):
        '''Method IGPUtilities.MakeGPLayerFromLayer (from IGPUtilities)

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities2, self).MakeGPLayerFromLayer(pLayer)
    def CreateParentFromCatalogPath(self, catalogPath):
        '''Method IGPUtilities.CreateParentFromCatalogPath (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities2, self).CreateParentFromCatalogPath(catalogPath)
    def UnpackGPValue(self, pInput):
        '''Method IGPUtilities.UnpackGPValue (from IGPUtilities)

           INPUT
            pInput              : IUnknown*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities2, self).UnpackGPValue(pInput)
    def DecodeRasterLayer(self, pValue):
        '''Method IGPUtilities.DecodeRasterLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities2, self).DecodeRasterLayer(pValue)
    def DecodeFeatureLayer(self, pValue):
        '''Method IGPUtilities.DecodeFeatureLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppFC                : IFeatureClass**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities2, self).DecodeFeatureLayer(pValue)
    def DecodeTableView(self, pValue):
        '''Method IGPUtilities.DecodeTableView (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppTable             : ITable**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities2, self).DecodeTableView(pValue)
    def DecodeLayer(self, pValue):
        '''Method IGPUtilities.DecodeLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities2, self).DecodeLayer(pValue)
    def DecodeStandaloneTable(self, pValue):
        '''Method IGPUtilities.DecodeStandaloneTable (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppStandaloneTable   : IStandaloneTable**'''
        return super(IGPUtilities2, self).DecodeStandaloneTable(pValue)
    def DecodeDETable(self, pValue):
        '''Method IGPUtilities.DecodeDETable (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGPUtilities2, self).DecodeDETable(pValue)
    def ReleaseInternals(self):
        '''Method IGPUtilities.ReleaseInternals (from IGPUtilities)'''
        return super(IGPUtilities2, self).ReleaseInternals()
    def GetMapTables(self):
        '''Method IGPUtilities.GetMapTables (from IGPUtilities)

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IGPUtilities2, self).GetMapTables()
    def FindMapTable(self, Name):
        '''Method IGPUtilities.FindMapTable (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities2, self).FindMapTable(Name)
    def FindMapTable2(self, Name):
        '''Method IGPUtilities.FindMapTable2 (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUTS
            ppTable             : ITable**
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities2, self).FindMapTable2(Name)
    def GetGPTableViews(self):
        '''Method IGPUtilities.GetGPTableViews (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities2, self).GetGPTableViews()
    def IsGPTableView(self, pValue):
        '''Method IGPUtilities.IsGPTableView (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            pResult             : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).IsGPTableView(pValue)
    def MakeGPTableView(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPTableView (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities2, self).MakeGPTableView(catalogPath, pDataType)
    def AddInternalTable(self, pTable):
        '''Method IGPUtilities.AddInternalTable (from IGPUtilities)

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities2, self).AddInternalTable(pTable)
    def AddInternalTable2(self, pTable, pGPTableView):
        '''Method IGPUtilities.AddInternalTable2 (from IGPUtilities)

           INPUTS
            pTable              : ITable*
            pGPTableView        : IGPTableView*'''
        return super(IGPUtilities2, self).AddInternalTable2(pTable, pGPTableView)
    def MakeGPTableViewFromTable(self, pTable):
        '''Method IGPUtilities.MakeGPTableViewFromTable (from IGPUtilities)

           INPUT
            pTable              : ITable*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities2, self).MakeGPTableViewFromTable(pTable)
    def GetFields(self, pValue):
        '''Method IGPUtilities.GetFields (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppFields            : IFields**'''
        return super(IGPUtilities2, self).GetFields(pValue)
    def CanAddToMap(self):
        '''Method IGPUtilities.CanAddToMap (from IGPUtilities)

           OUTPUT
            pCanAddToMap        : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).CanAddToMap()
    def GenerateSpRef(self, pInputTables, pOverlayTable, growExtentBy):
        '''Method IGPUtilities.GenerateSpRef (from IGPUtilities)

           INPUTS
            pInputTables        : IArray*
            pOverlayTable       : ITable*
            growExtentBy        : double

           OUTPUTS
            ppSpRef             : ISpatialReference**
            ppExtent            : IEnvelope**
            pHasMs              : VARIANT_BOOL*
            pMMin               : double*
            pMMax               : double*
            pHasZs              : VARIANT_BOOL*
            pZMin               : double*
            pZMax               : double*'''
        return super(IGPUtilities2, self).GenerateSpRef(pInputTables, pOverlayTable, growExtentBy)
    def SetGridIndex(self, pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef):
        '''Method IGPUtilities.SetGridIndex (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pInputTables        : IArray*
            spatialIndex1       : double
            spatialIndex2       : double
            spatialIndex3       : double
            pUnk                : IUnknown*
            pGeometryDef        : IGeometryDef*'''
        return super(IGPUtilities2, self).SetGridIndex(pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef)
    def IsDatasetType(self, pUnknown):
        '''Method IGPUtilities.IsDatasetType (from IGPUtilities)

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).IsDatasetType(pUnknown)
    def RemoveFromMap(self, pGPValue, Name):
        '''Method IGPUtilities.RemoveFromMap (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR'''
        return super(IGPUtilities2, self).RemoveFromMap(pGPValue, Name)
    def IsDerived(self, pInput):
        '''Method IGPUtilities.IsDerived (from IGPUtilities)

           INPUT
            pInput              : IUnknown*

           OUTPUT
            pDerived            : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).IsDerived(pInput)
    def RefreshView(self):
        '''Method IGPUtilities.RefreshView (from IGPUtilities)'''
        return super(IGPUtilities2, self).RefreshView()
    def PackGPValue(self, pValue, pInput):
        '''Method IGPUtilities.PackGPValue (from IGPUtilities)

           INPUTS
            pValue              : IGPValue*
            pInput              : IUnknown*'''
        return super(IGPUtilities2, self).PackGPValue(pValue, pInput)
    def CreateParameterValue(self, text, pDataType, Direction):
        '''Method IGPUtilities.CreateParameterValue (from IGPUtilities)

           INPUTS
            text                : BSTR
            pDataType           : IGPDataType*
            Direction           : esriGPParameterDirection

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities2, self).CreateParameterValue(text, pDataType, Direction)
    def ValidateExists(self, pGPValue, checkDerived):
        '''Method IGPUtilities.ValidateExists (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            checkDerived        : VARIANT_BOOL

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities2, self).ValidateExists(pGPValue, checkDerived)
    def GetGxObject(self, pDataElement):
        '''Method IGPUtilities.GetGxObject (from IGPUtilities)

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities2, self).GetGxObject(pDataElement)
    def GetGxObjects(self, catalogPath):
        '''Method IGPUtilities.GetGxObjects (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities2, self).GetGxObjects(catalogPath)
    def MakeDataElements(self, catalogPath, pBrowseOptions):
        '''Method IGPUtilities.MakeDataElements (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pBrowseOptions      : IDEBrowseOptions*

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities2, self).MakeDataElements(catalogPath, pBrowseOptions)
    def GetGPMapData(self):
        '''Method IGPUtilities.GetGPMapData (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities2, self).GetGPMapData()
    def MakeGPValueFromObject(self, pUnk):
        '''Method IGPUtilities.MakeGPValueFromObject (from IGPUtilities)

           INPUT
            pUnk                : IUnknown*

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IGPUtilities2, self).MakeGPValueFromObject(pUnk)
    def RemoveInternalValues(self):
        '''Method IGPUtilities.RemoveInternalValues (from IGPUtilities)'''
        return super(IGPUtilities2, self).RemoveInternalValues()
    def RemoveInternalLayer(self, Name):
        '''Method IGPUtilities.RemoveInternalLayer (from IGPUtilities)

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities2, self).RemoveInternalLayer(Name)
    def RemoveInternalTable(self, Name):
        '''Method IGPUtilities.RemoveInternalTable (from IGPUtilities)

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities2, self).RemoveInternalTable(Name)
    def DecodeRaster(self, pValue):
        '''Method IGPUtilities.DecodeRaster (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IGPUtilities2, self).DecodeRaster(pValue)
    def GetGPSpRefEnv(self, pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities.GetGPSpRefEnv (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities2, self).GetGPSpRefEnv(pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def RemoveInternalLayerEx(self, pLayer):
        '''Method IGPUtilities.RemoveInternalLayerEx (from IGPUtilities)

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities2, self).RemoveInternalLayerEx(pLayer)
    def RemoveInternalTableEx(self, pTable):
        '''Method IGPUtilities.RemoveInternalTableEx (from IGPUtilities)

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities2, self).RemoveInternalTableEx(pTable)
    Catalog = property(get_Catalog, None, None)
    RefreshCatalogParent = property(get_RefreshCatalogParent, put_RefreshCatalogParent, None)
    VariableManager = property(get_VariableManager, putref_VariableManager, None)
    Workspace = property(get_Workspace, put_Workspace, None)

class IGPUtilities3(_esriGeoprocessing.IGPUtilities3):
    _IID = uuid.UUID('eafc0938-c62e-43d5-b9ca-cb0045155860')

    def __init__(self, *args, **kw):
        super(IGPUtilities3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def OpenLayerFromLocation(self, catalogPath):
        '''Method IGPUtilities3.OpenLayerFromLocation

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities3, self).OpenLayerFromLocation(catalogPath)
    def Open(self, pValue):
        '''Method IGPUtilities2.Open (from IGPUtilities2)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IUnknown**'''
        return super(IGPUtilities3, self).Open(pValue)
    def SaveLayer(self, catalogPath, pLayer):
        '''Method IGPUtilities2.SaveLayer (from IGPUtilities2)

           INPUTS
            catalogPath         : BSTR
            pLayer              : ILayer*'''
        return super(IGPUtilities3, self).SaveLayer(catalogPath, pLayer)
    def GetActiveView(self):
        '''Method IGPUtilities2.GetActiveView (from IGPUtilities2)

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IGPUtilities3, self).GetActiveView()
    def GetMap(self):
        '''Method IGPUtilities2.GetMap (from IGPUtilities2)

           OUTPUT
            ppMap               : IMap**'''
        return super(IGPUtilities3, self).GetMap()
    def GetBasicMap(self):
        '''Method IGPUtilities2.GetBasicMap (from IGPUtilities2)

           OUTPUT
            ppMap               : IBasicMap**'''
        return super(IGPUtilities3, self).GetBasicMap()
    def InApplication(self):
        '''Method IGPUtilities2.InApplication (from IGPUtilities2)

           OUTPUT
            pInApplication      : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).InApplication()
    def MakeLayer(self, pValue, Name, pUnkRenderer):
        '''Method IGPUtilities2.MakeLayer (from IGPUtilities2)

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR
            pUnkRenderer        : IUnknown*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities3, self).MakeLayer(pValue, Name, pUnkRenderer)
    def GetStatusBar(self):
        '''Method IGPUtilities2.GetStatusBar (from IGPUtilities2)

           OUTPUT
            ppStatusBar         : IStatusBar**'''
        return super(IGPUtilities3, self).GetStatusBar()
    def StartEditOperation(self, pWorkspace, bHasPrivateEditSession):
        '''Method IGPUtilities2.StartEditOperation (from IGPUtilities2)

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            bHasPrivateEditSession: VARIANT_BOOL'''
        return super(IGPUtilities3, self).StartEditOperation(pWorkspace, bHasPrivateEditSession)
    def AbortEditOperation(self, pWorkspace):
        '''Method IGPUtilities2.AbortEditOperation (from IGPUtilities2)

           INPUT
            pWorkspace          : IWorkspaceEdit*'''
        return super(IGPUtilities3, self).AbortEditOperation(pWorkspace)
    def StopEditOperation(self, pWorkspace, operationLabel):
        '''Method IGPUtilities2.StopEditOperation (from IGPUtilities2)

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            operationLabel      : BSTR'''
        return super(IGPUtilities3, self).StopEditOperation(pWorkspace, operationLabel)
    def putref_VariableManager(self, ppVariableManager):
        '''Method IGPUtilities2.putref_VariableManager (from IGPUtilities2)

           INPUT
            ppVariableManager   : IGPVariableManager*'''
        return super(IGPUtilities3, self).putref_VariableManager(ppVariableManager)
    def get_VariableManager(self):
        '''Method IGPUtilities2.get_VariableManager (from IGPUtilities2)

           OUTPUT
            ppVariableManager   : IGPVariableManager**'''
        return super(IGPUtilities3, self).get_VariableManager()
    def GenerateGeographicTransformDomain(self, iUnk, pGTDomain, pInSR, pOutSR, pMessages):
        '''Method IGPUtilities2.GenerateGeographicTransformDomain (from IGPUtilities2)

           INPUTS
            iUnk                : IUnknown*
            pGTDomain           : IGPCodedValueDomain*
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            pMessages           : IGPMessages*'''
        return super(IGPUtilities3, self).GenerateGeographicTransformDomain(iUnk, pGTDomain, pInSR, pOutSR, pMessages)
    def GetGTOperationSet(self, pGTs, pInSR, pOutSR, ppGTs):
        '''Method IGPUtilities2.GetGTOperationSet (from IGPUtilities2)

           INPUTS
            pGTs                : IGPValue*
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            ppGTs               : ICompositeGeoTransformation**'''
        return super(IGPUtilities3, self).GetGTOperationSet(pGTs, pInSR, pOutSR, ppGTs)
    def GetExtent(self, pValue):
        '''Method IGPUtilities2.GetExtent (from IGPUtilities2)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            envType             : esriGPExtentEnum*
            Extent              : IEnvelope**'''
        return super(IGPUtilities3, self).GetExtent(pValue)
    def GetGPSpRefEnvEx(self, pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities2.GetGPSpRefEnvEx (from IGPUtilities2)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pTgtSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities3, self).GetGPSpRefEnvEx(pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def CreateToolboxFromFactory(self, Alias, location, ToolboxName):
        '''Method IGPUtilities2.CreateToolboxFromFactory (from IGPUtilities2)

           INPUTS
            Alias               : BSTR
            location            : BSTR
            ToolboxName         : BSTR'''
        return super(IGPUtilities3, self).CreateToolboxFromFactory(Alias, location, ToolboxName)
    def SetInternalMap(self, pMap):
        '''Method IGPUtilities2.SetInternalMap (from IGPUtilities2)

           INPUT
            pMap                : IMap*'''
        return super(IGPUtilities3, self).SetInternalMap(pMap)
    def GetLayerName(self, pValue, Name):
        '''Method IGPUtilities2.GetLayerName (from IGPUtilities2)

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR

           OUTPUT
            pName               : BSTR*'''
        return super(IGPUtilities3, self).GetLayerName(pValue, Name)
    def RemoveInternalData(self):
        '''Method IGPUtilities2.RemoveInternalData (from IGPUtilities2)'''
        return super(IGPUtilities3, self).RemoveInternalData()
    def GetInMemoryWorkspace(self):
        '''Method IGPUtilities2.GetInMemoryWorkspace (from IGPUtilities2)

           OUTPUT
            ppWorkspace         : IWorkspace**'''
        return super(IGPUtilities3, self).GetInMemoryWorkspace()
    def ClearInMemoryWorkspace(self):
        '''Method IGPUtilities2.ClearInMemoryWorkspace (from IGPUtilities2)'''
        return super(IGPUtilities3, self).ClearInMemoryWorkspace()
    def OpenFromString(self, NameString):
        '''Method IGPUtilities2.OpenFromString (from IGPUtilities2)

           INPUT
            NameString          : BSTR

           OUTPUT
            ppDataset           : IUnknown**'''
        return super(IGPUtilities3, self).OpenFromString(NameString)
    def SetupEditSession(self, pTable):
        '''Method IGPUtilities2.SetupEditSession (from IGPUtilities2)

           INPUT
            pTable              : IClass*'''
        return super(IGPUtilities3, self).SetupEditSession(pTable)
    def CleanupEditSession(self, abort):
        '''Method IGPUtilities2.CleanupEditSession (from IGPUtilities2)

           INPUT
            abort               : VARIANT_BOOL'''
        return super(IGPUtilities3, self).CleanupEditSession(abort)
    def RemoveFromMapEx(self, pGPValue):
        '''Method IGPUtilities2.RemoveFromMapEx (from IGPUtilities2)

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities3, self).RemoveFromMapEx(pGPValue)
    def AddToMapEx(self, pGPValue, Name, temporary, pUnkRenderer, Visible):
        '''Method IGPUtilities2.AddToMapEx (from IGPUtilities2)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*
            Visible             : VARIANT_BOOL'''
        return super(IGPUtilities3, self).AddToMapEx(pGPValue, Name, temporary, pUnkRenderer, Visible)
    def InternalValidate(self, pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr):
        '''Method IGPUtilities.InternalValidate (from IGPUtilities)

           INPUTS
            pParameters         : IArray*
            pParamValues        : IArray*
            updateValues        : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGPUtilities3, self).InternalValidate(pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr)
    def InternalValidateValue(self, pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage):
        '''Method IGPUtilities.InternalValidateValue (from IGPUtilities)

           INPUTS
            pParameter          : IGPParameter*
            pValue              : IUnknown*
            updateValue         : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*
            pMessage            : IGPMessage*'''
        return super(IGPUtilities3, self).InternalValidateValue(pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage)
    def IsBadMessage(self, pMessages, Index):
        '''Method IGPUtilities.IsBadMessage (from IGPUtilities)

           INPUTS
            pMessages           : IGPMessages*
            Index               : long

           OUTPUT
            pBadMsg             : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).IsBadMessage(pMessages, Index)
    def GenerateDefaultOutputValue(self, pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit):
        '''Method IGPUtilities.GenerateDefaultOutputValue (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            functionname        : BSTR
            pOutputParam        : IGPParameter*
            pInputValue         : IGPValue*
            extension           : BSTR
            outputFileBaseLimit : long

           OUTPUT
            ppOutputValue       : IGPValue**'''
        return super(IGPUtilities3, self).GenerateDefaultOutputValue(pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit)
    def QualifyOutputDataElement(self, pValue):
        '''Method IGPUtilities.QualifyOutputDataElement (from IGPUtilities)

           INPUT
            pValue              : IGPValue*'''
        return super(IGPUtilities3, self).QualifyOutputDataElement(pValue)
    def QualifyOutputCatalogPath(self, catalogPath):
        '''Method IGPUtilities.QualifyOutputCatalogPath (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            pQualifiedCatalogPath: BSTR*'''
        return super(IGPUtilities3, self).QualifyOutputCatalogPath(catalogPath)
    def GetUnQualifiedCatalogPath(self, pValue):
        '''Method IGPUtilities.GetUnQualifiedCatalogPath (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            Path                : BSTR*'''
        return super(IGPUtilities3, self).GetUnQualifiedCatalogPath(pValue)
    def put_Workspace(self, workPath):
        '''Method IGPUtilities.put_Workspace (from IGPUtilities)

           INPUT
            workPath            : BSTR'''
        return super(IGPUtilities3, self).put_Workspace(workPath)
    def get_Workspace(self):
        '''Method IGPUtilities.get_Workspace (from IGPUtilities)

           OUTPUT
            workPath            : BSTR*'''
        return super(IGPUtilities3, self).get_Workspace()
    def get_Catalog(self):
        '''Method IGPUtilities.get_Catalog (from IGPUtilities)

           OUTPUT
            Catalog             : IUnknown**'''
        return super(IGPUtilities3, self).get_Catalog()
    def get_RefreshCatalogParent(self):
        '''Method IGPUtilities.get_RefreshCatalogParent (from IGPUtilities)

           OUTPUT
            pRefresh            : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).get_RefreshCatalogParent()
    def put_RefreshCatalogParent(self, pRefresh):
        '''Method IGPUtilities.put_RefreshCatalogParent (from IGPUtilities)

           INPUT
            pRefresh            : VARIANT_BOOL'''
        return super(IGPUtilities3, self).put_RefreshCatalogParent(pRefresh)
    def MakeDataElement(self, catalogPath, pDataType, pExpandOptions):
        '''Method IGPUtilities.MakeDataElement (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            pExpandOptions      : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities3, self).MakeDataElement(catalogPath, pDataType, pExpandOptions)
    def MakeDataElementFromNameObject(self, Name):
        '''Method IGPUtilities.MakeDataElementFromNameObject (from IGPUtilities)

           INPUT
            Name                : IName*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities3, self).MakeDataElementFromNameObject(Name)
    def ExpandDataElement(self, pInDE, pExpandOptions):
        '''Method IGPUtilities.ExpandDataElement (from IGPUtilities)

           INPUTS
            pInDE               : IDataElement*
            pExpandOptions      : IDEBrowseOptions*'''
        return super(IGPUtilities3, self).ExpandDataElement(pInDE, pExpandOptions)
    def CreateDataElement(self, catalogPath, pDataType, optionalWorkspace):
        '''Method IGPUtilities.CreateDataElement (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            optionalWorkspace   : BSTR

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities3, self).CreateDataElement(catalogPath, pDataType, optionalWorkspace)
    def CreateFeatureLayer(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureLayer (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPUtilities3, self).CreateFeatureLayer(catalogPath)
    def OpenRasterDatasetFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterDatasetFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities3, self).OpenRasterDatasetFromString(catalogPath)
    def OpenFeatureClassFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureClassFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFC                : IFeatureClass**'''
        return super(IGPUtilities3, self).OpenFeatureClassFromString(catalogPath)
    def OpenTableFromString(self, catalogPath):
        '''Method IGPUtilities.OpenTableFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities3, self).OpenTableFromString(catalogPath)
    def OpenRasterLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterLayerFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRL                : IRasterLayer**'''
        return super(IGPUtilities3, self).OpenRasterLayerFromString(catalogPath)
    def OpenFeatureLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureLayerFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFL                : IFeatureLayer**'''
        return super(IGPUtilities3, self).OpenFeatureLayerFromString(catalogPath)
    def CreateFeatureClassName(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureClassName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).CreateFeatureClassName(catalogPath)
    def CreateRasterDatasetName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterDatasetName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).CreateRasterDatasetName(catalogPath)
    def CreateRasterCatalogName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterCatalogName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).CreateRasterCatalogName(catalogPath)
    def CreateTableName(self, catalogPath):
        '''Method IGPUtilities.CreateTableName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).CreateTableName(catalogPath)
    def OpenDataset(self, pValue):
        '''Method IGPUtilities.OpenDataset (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities3, self).OpenDataset(pValue)
    def OpenDatasetFromLocation(self, catalogPath):
        '''Method IGPUtilities.OpenDatasetFromLocation (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities3, self).OpenDatasetFromLocation(catalogPath)
    def AddToMap(self, pGPValue, Name, temporary, pUnkRenderer):
        '''Method IGPUtilities.AddToMap (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*'''
        return super(IGPUtilities3, self).AddToMap(pGPValue, Name, temporary, pUnkRenderer)
    def RefreshCatalog(self, pSourceDataElement):
        '''Method IGPUtilities.RefreshCatalog (from IGPUtilities)

           INPUT
            pSourceDataElement  : IDataElement*'''
        return super(IGPUtilities3, self).RefreshCatalog(pSourceDataElement)
    def ExportFeatureClass(self, pSourceDataElement, pTargetDataElement):
        '''Method IGPUtilities.ExportFeatureClass (from IGPUtilities)

           INPUTS
            pSourceDataElement  : IDataElement*
            pTargetDataElement  : IDataElement*'''
        return super(IGPUtilities3, self).ExportFeatureClass(pSourceDataElement, pTargetDataElement)
    def Delete(self, pGPValue):
        '''Method IGPUtilities.Delete (from IGPUtilities)

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities3, self).Delete(pGPValue)
    def Rename(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Rename (from IGPUtilities)

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities3, self).Rename(pSourceGPValue, pTargetGPValue)
    def Copy(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Copy (from IGPUtilities)

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities3, self).Copy(pSourceGPValue, pTargetGPValue)
    def Exists(self, pGPValue):
        '''Method IGPUtilities.Exists (from IGPUtilities)

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).Exists(pGPValue)
    def CompareWildCard(self, wildCard, Data):
        '''Method IGPUtilities.CompareWildCard (from IGPUtilities)

           INPUTS
            wildCard            : BSTR
            Data                : BSTR

           OUTPUT
            matched             : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).CompareWildCard(wildCard, Data)
    def GetNameObject(self, pDataElement):
        '''Method IGPUtilities.GetNameObject (from IGPUtilities)

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).GetNameObject(pDataElement)
    def GetNameObjectFromLocation(self, locationMoniker):
        '''Method IGPUtilities.GetNameObjectFromLocation (from IGPUtilities)

           INPUT
            locationMoniker     : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).GetNameObjectFromLocation(locationMoniker)
    def GetGxObjectFromLocation(self, catalogPath):
        '''Method IGPUtilities.GetGxObjectFromLocation (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities3, self).GetGxObjectFromLocation(catalogPath)
    def FieldExists(self, pGPValue, pField):
        '''Method IGPUtilities.FieldExists (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            pField              : IField*

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).FieldExists(pGPValue, pField)
    def FindField(self, pGPValue, Name):
        '''Method IGPUtilities.FindField (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR

           OUTPUT
            ppField             : IField**'''
        return super(IGPUtilities3, self).FindField(pGPValue, Name)
    def GetMapLayers(self):
        '''Method IGPUtilities.GetMapLayers (from IGPUtilities)

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IGPUtilities3, self).GetMapLayers()
    def FindMapLayer(self, Name):
        '''Method IGPUtilities.FindMapLayer (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities3, self).FindMapLayer(Name)
    def FindMapLayer2(self, Name):
        '''Method IGPUtilities.FindMapLayer2 (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities3, self).FindMapLayer2(Name)
    def GetGPLayers(self):
        '''Method IGPUtilities.GetGPLayers (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities3, self).GetGPLayers()
    def MakeGPLayer(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPLayer (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities3, self).MakeGPLayer(catalogPath, pDataType)
    def GetEnvironment(self, pEnvironments, Name):
        '''Method IGPUtilities.GetEnvironment (from IGPUtilities)

           INPUTS
            pEnvironments       : IArray*
            Name                : BSTR

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IGPUtilities3, self).GetEnvironment(pEnvironments, Name)
    def AddInternalLayer(self, pLayer):
        '''Method IGPUtilities.AddInternalLayer (from IGPUtilities)

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities3, self).AddInternalLayer(pLayer)
    def AddInternalLayer2(self, pLayer, pGPLayer):
        '''Method IGPUtilities.AddInternalLayer2 (from IGPUtilities)

           INPUTS
            pLayer              : ILayer*
            pGPLayer            : IGPLayer*'''
        return super(IGPUtilities3, self).AddInternalLayer2(pLayer, pGPLayer)
    def MakeGPLayerFromLayer(self, pLayer):
        '''Method IGPUtilities.MakeGPLayerFromLayer (from IGPUtilities)

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities3, self).MakeGPLayerFromLayer(pLayer)
    def CreateParentFromCatalogPath(self, catalogPath):
        '''Method IGPUtilities.CreateParentFromCatalogPath (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities3, self).CreateParentFromCatalogPath(catalogPath)
    def UnpackGPValue(self, pInput):
        '''Method IGPUtilities.UnpackGPValue (from IGPUtilities)

           INPUT
            pInput              : IUnknown*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities3, self).UnpackGPValue(pInput)
    def DecodeRasterLayer(self, pValue):
        '''Method IGPUtilities.DecodeRasterLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities3, self).DecodeRasterLayer(pValue)
    def DecodeFeatureLayer(self, pValue):
        '''Method IGPUtilities.DecodeFeatureLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppFC                : IFeatureClass**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities3, self).DecodeFeatureLayer(pValue)
    def DecodeTableView(self, pValue):
        '''Method IGPUtilities.DecodeTableView (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppTable             : ITable**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities3, self).DecodeTableView(pValue)
    def DecodeLayer(self, pValue):
        '''Method IGPUtilities.DecodeLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities3, self).DecodeLayer(pValue)
    def DecodeStandaloneTable(self, pValue):
        '''Method IGPUtilities.DecodeStandaloneTable (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppStandaloneTable   : IStandaloneTable**'''
        return super(IGPUtilities3, self).DecodeStandaloneTable(pValue)
    def DecodeDETable(self, pValue):
        '''Method IGPUtilities.DecodeDETable (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGPUtilities3, self).DecodeDETable(pValue)
    def ReleaseInternals(self):
        '''Method IGPUtilities.ReleaseInternals (from IGPUtilities)'''
        return super(IGPUtilities3, self).ReleaseInternals()
    def GetMapTables(self):
        '''Method IGPUtilities.GetMapTables (from IGPUtilities)

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IGPUtilities3, self).GetMapTables()
    def FindMapTable(self, Name):
        '''Method IGPUtilities.FindMapTable (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities3, self).FindMapTable(Name)
    def FindMapTable2(self, Name):
        '''Method IGPUtilities.FindMapTable2 (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUTS
            ppTable             : ITable**
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities3, self).FindMapTable2(Name)
    def GetGPTableViews(self):
        '''Method IGPUtilities.GetGPTableViews (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities3, self).GetGPTableViews()
    def IsGPTableView(self, pValue):
        '''Method IGPUtilities.IsGPTableView (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            pResult             : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).IsGPTableView(pValue)
    def MakeGPTableView(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPTableView (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities3, self).MakeGPTableView(catalogPath, pDataType)
    def AddInternalTable(self, pTable):
        '''Method IGPUtilities.AddInternalTable (from IGPUtilities)

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities3, self).AddInternalTable(pTable)
    def AddInternalTable2(self, pTable, pGPTableView):
        '''Method IGPUtilities.AddInternalTable2 (from IGPUtilities)

           INPUTS
            pTable              : ITable*
            pGPTableView        : IGPTableView*'''
        return super(IGPUtilities3, self).AddInternalTable2(pTable, pGPTableView)
    def MakeGPTableViewFromTable(self, pTable):
        '''Method IGPUtilities.MakeGPTableViewFromTable (from IGPUtilities)

           INPUT
            pTable              : ITable*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities3, self).MakeGPTableViewFromTable(pTable)
    def GetFields(self, pValue):
        '''Method IGPUtilities.GetFields (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppFields            : IFields**'''
        return super(IGPUtilities3, self).GetFields(pValue)
    def CanAddToMap(self):
        '''Method IGPUtilities.CanAddToMap (from IGPUtilities)

           OUTPUT
            pCanAddToMap        : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).CanAddToMap()
    def GenerateSpRef(self, pInputTables, pOverlayTable, growExtentBy):
        '''Method IGPUtilities.GenerateSpRef (from IGPUtilities)

           INPUTS
            pInputTables        : IArray*
            pOverlayTable       : ITable*
            growExtentBy        : double

           OUTPUTS
            ppSpRef             : ISpatialReference**
            ppExtent            : IEnvelope**
            pHasMs              : VARIANT_BOOL*
            pMMin               : double*
            pMMax               : double*
            pHasZs              : VARIANT_BOOL*
            pZMin               : double*
            pZMax               : double*'''
        return super(IGPUtilities3, self).GenerateSpRef(pInputTables, pOverlayTable, growExtentBy)
    def SetGridIndex(self, pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef):
        '''Method IGPUtilities.SetGridIndex (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pInputTables        : IArray*
            spatialIndex1       : double
            spatialIndex2       : double
            spatialIndex3       : double
            pUnk                : IUnknown*
            pGeometryDef        : IGeometryDef*'''
        return super(IGPUtilities3, self).SetGridIndex(pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef)
    def IsDatasetType(self, pUnknown):
        '''Method IGPUtilities.IsDatasetType (from IGPUtilities)

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).IsDatasetType(pUnknown)
    def RemoveFromMap(self, pGPValue, Name):
        '''Method IGPUtilities.RemoveFromMap (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR'''
        return super(IGPUtilities3, self).RemoveFromMap(pGPValue, Name)
    def IsDerived(self, pInput):
        '''Method IGPUtilities.IsDerived (from IGPUtilities)

           INPUT
            pInput              : IUnknown*

           OUTPUT
            pDerived            : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).IsDerived(pInput)
    def RefreshView(self):
        '''Method IGPUtilities.RefreshView (from IGPUtilities)'''
        return super(IGPUtilities3, self).RefreshView()
    def PackGPValue(self, pValue, pInput):
        '''Method IGPUtilities.PackGPValue (from IGPUtilities)

           INPUTS
            pValue              : IGPValue*
            pInput              : IUnknown*'''
        return super(IGPUtilities3, self).PackGPValue(pValue, pInput)
    def CreateParameterValue(self, text, pDataType, Direction):
        '''Method IGPUtilities.CreateParameterValue (from IGPUtilities)

           INPUTS
            text                : BSTR
            pDataType           : IGPDataType*
            Direction           : esriGPParameterDirection

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities3, self).CreateParameterValue(text, pDataType, Direction)
    def ValidateExists(self, pGPValue, checkDerived):
        '''Method IGPUtilities.ValidateExists (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            checkDerived        : VARIANT_BOOL

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities3, self).ValidateExists(pGPValue, checkDerived)
    def GetGxObject(self, pDataElement):
        '''Method IGPUtilities.GetGxObject (from IGPUtilities)

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities3, self).GetGxObject(pDataElement)
    def GetGxObjects(self, catalogPath):
        '''Method IGPUtilities.GetGxObjects (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities3, self).GetGxObjects(catalogPath)
    def MakeDataElements(self, catalogPath, pBrowseOptions):
        '''Method IGPUtilities.MakeDataElements (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pBrowseOptions      : IDEBrowseOptions*

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities3, self).MakeDataElements(catalogPath, pBrowseOptions)
    def GetGPMapData(self):
        '''Method IGPUtilities.GetGPMapData (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities3, self).GetGPMapData()
    def MakeGPValueFromObject(self, pUnk):
        '''Method IGPUtilities.MakeGPValueFromObject (from IGPUtilities)

           INPUT
            pUnk                : IUnknown*

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IGPUtilities3, self).MakeGPValueFromObject(pUnk)
    def RemoveInternalValues(self):
        '''Method IGPUtilities.RemoveInternalValues (from IGPUtilities)'''
        return super(IGPUtilities3, self).RemoveInternalValues()
    def RemoveInternalLayer(self, Name):
        '''Method IGPUtilities.RemoveInternalLayer (from IGPUtilities)

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities3, self).RemoveInternalLayer(Name)
    def RemoveInternalTable(self, Name):
        '''Method IGPUtilities.RemoveInternalTable (from IGPUtilities)

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities3, self).RemoveInternalTable(Name)
    def DecodeRaster(self, pValue):
        '''Method IGPUtilities.DecodeRaster (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IGPUtilities3, self).DecodeRaster(pValue)
    def GetGPSpRefEnv(self, pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities.GetGPSpRefEnv (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities3, self).GetGPSpRefEnv(pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def RemoveInternalLayerEx(self, pLayer):
        '''Method IGPUtilities.RemoveInternalLayerEx (from IGPUtilities)

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities3, self).RemoveInternalLayerEx(pLayer)
    def RemoveInternalTableEx(self, pTable):
        '''Method IGPUtilities.RemoveInternalTableEx (from IGPUtilities)

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities3, self).RemoveInternalTableEx(pTable)
    Catalog = property(get_Catalog, None, None)
    RefreshCatalogParent = property(get_RefreshCatalogParent, put_RefreshCatalogParent, None)
    VariableManager = property(get_VariableManager, putref_VariableManager, None)
    Workspace = property(get_Workspace, put_Workspace, None)

class IGPUtilities4(_esriGeoprocessing.IGPUtilities4):
    _IID = uuid.UUID('bf7053f9-a5a4-4128-a85f-7459b1dd46cd')

    def __init__(self, *args, **kw):
        super(IGPUtilities4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetSearchCursor(self, pValue, recycling, pEnvMgr):
        '''Method IGPUtilities4.GetSearchCursor

           INPUTS
            pValue              : IGPValue*
            recycling           : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IGPUtilities4, self).GetSearchCursor(pValue, recycling, pEnvMgr)
    def GetUpdateCursor(self, pValue, recycling, pEnvMgr):
        '''Method IGPUtilities4.GetUpdateCursor

           INPUTS
            pValue              : IGPValue*
            recycling           : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IGPUtilities4, self).GetUpdateCursor(pValue, recycling, pEnvMgr)
    def GetSelectionSet(self, pValue, pEnvMgr_Extent):
        '''Method IGPUtilities4.GetSelectionSet

           INPUTS
            pValue              : IGPValue*
            pEnvMgr_Extent      : IUnknown*

           OUTPUT
            ppSelSet            : ISelectionSet**'''
        return super(IGPUtilities4, self).GetSelectionSet(pValue, pEnvMgr_Extent)
    def OpenLayerFromLocation(self, catalogPath):
        '''Method IGPUtilities3.OpenLayerFromLocation (from IGPUtilities3)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities4, self).OpenLayerFromLocation(catalogPath)
    def Open(self, pValue):
        '''Method IGPUtilities2.Open (from IGPUtilities2)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IUnknown**'''
        return super(IGPUtilities4, self).Open(pValue)
    def SaveLayer(self, catalogPath, pLayer):
        '''Method IGPUtilities2.SaveLayer (from IGPUtilities2)

           INPUTS
            catalogPath         : BSTR
            pLayer              : ILayer*'''
        return super(IGPUtilities4, self).SaveLayer(catalogPath, pLayer)
    def GetActiveView(self):
        '''Method IGPUtilities2.GetActiveView (from IGPUtilities2)

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IGPUtilities4, self).GetActiveView()
    def GetMap(self):
        '''Method IGPUtilities2.GetMap (from IGPUtilities2)

           OUTPUT
            ppMap               : IMap**'''
        return super(IGPUtilities4, self).GetMap()
    def GetBasicMap(self):
        '''Method IGPUtilities2.GetBasicMap (from IGPUtilities2)

           OUTPUT
            ppMap               : IBasicMap**'''
        return super(IGPUtilities4, self).GetBasicMap()
    def InApplication(self):
        '''Method IGPUtilities2.InApplication (from IGPUtilities2)

           OUTPUT
            pInApplication      : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).InApplication()
    def MakeLayer(self, pValue, Name, pUnkRenderer):
        '''Method IGPUtilities2.MakeLayer (from IGPUtilities2)

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR
            pUnkRenderer        : IUnknown*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities4, self).MakeLayer(pValue, Name, pUnkRenderer)
    def GetStatusBar(self):
        '''Method IGPUtilities2.GetStatusBar (from IGPUtilities2)

           OUTPUT
            ppStatusBar         : IStatusBar**'''
        return super(IGPUtilities4, self).GetStatusBar()
    def StartEditOperation(self, pWorkspace, bHasPrivateEditSession):
        '''Method IGPUtilities2.StartEditOperation (from IGPUtilities2)

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            bHasPrivateEditSession: VARIANT_BOOL'''
        return super(IGPUtilities4, self).StartEditOperation(pWorkspace, bHasPrivateEditSession)
    def AbortEditOperation(self, pWorkspace):
        '''Method IGPUtilities2.AbortEditOperation (from IGPUtilities2)

           INPUT
            pWorkspace          : IWorkspaceEdit*'''
        return super(IGPUtilities4, self).AbortEditOperation(pWorkspace)
    def StopEditOperation(self, pWorkspace, operationLabel):
        '''Method IGPUtilities2.StopEditOperation (from IGPUtilities2)

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            operationLabel      : BSTR'''
        return super(IGPUtilities4, self).StopEditOperation(pWorkspace, operationLabel)
    def putref_VariableManager(self, ppVariableManager):
        '''Method IGPUtilities2.putref_VariableManager (from IGPUtilities2)

           INPUT
            ppVariableManager   : IGPVariableManager*'''
        return super(IGPUtilities4, self).putref_VariableManager(ppVariableManager)
    def get_VariableManager(self):
        '''Method IGPUtilities2.get_VariableManager (from IGPUtilities2)

           OUTPUT
            ppVariableManager   : IGPVariableManager**'''
        return super(IGPUtilities4, self).get_VariableManager()
    def GenerateGeographicTransformDomain(self, iUnk, pGTDomain, pInSR, pOutSR, pMessages):
        '''Method IGPUtilities2.GenerateGeographicTransformDomain (from IGPUtilities2)

           INPUTS
            iUnk                : IUnknown*
            pGTDomain           : IGPCodedValueDomain*
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            pMessages           : IGPMessages*'''
        return super(IGPUtilities4, self).GenerateGeographicTransformDomain(iUnk, pGTDomain, pInSR, pOutSR, pMessages)
    def GetGTOperationSet(self, pGTs, pInSR, pOutSR, ppGTs):
        '''Method IGPUtilities2.GetGTOperationSet (from IGPUtilities2)

           INPUTS
            pGTs                : IGPValue*
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            ppGTs               : ICompositeGeoTransformation**'''
        return super(IGPUtilities4, self).GetGTOperationSet(pGTs, pInSR, pOutSR, ppGTs)
    def GetExtent(self, pValue):
        '''Method IGPUtilities2.GetExtent (from IGPUtilities2)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            envType             : esriGPExtentEnum*
            Extent              : IEnvelope**'''
        return super(IGPUtilities4, self).GetExtent(pValue)
    def GetGPSpRefEnvEx(self, pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities2.GetGPSpRefEnvEx (from IGPUtilities2)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pTgtSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities4, self).GetGPSpRefEnvEx(pEnvMgr, pSrcSpRef, pTgtSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def CreateToolboxFromFactory(self, Alias, location, ToolboxName):
        '''Method IGPUtilities2.CreateToolboxFromFactory (from IGPUtilities2)

           INPUTS
            Alias               : BSTR
            location            : BSTR
            ToolboxName         : BSTR'''
        return super(IGPUtilities4, self).CreateToolboxFromFactory(Alias, location, ToolboxName)
    def SetInternalMap(self, pMap):
        '''Method IGPUtilities2.SetInternalMap (from IGPUtilities2)

           INPUT
            pMap                : IMap*'''
        return super(IGPUtilities4, self).SetInternalMap(pMap)
    def GetLayerName(self, pValue, Name):
        '''Method IGPUtilities2.GetLayerName (from IGPUtilities2)

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR

           OUTPUT
            pName               : BSTR*'''
        return super(IGPUtilities4, self).GetLayerName(pValue, Name)
    def RemoveInternalData(self):
        '''Method IGPUtilities2.RemoveInternalData (from IGPUtilities2)'''
        return super(IGPUtilities4, self).RemoveInternalData()
    def GetInMemoryWorkspace(self):
        '''Method IGPUtilities2.GetInMemoryWorkspace (from IGPUtilities2)

           OUTPUT
            ppWorkspace         : IWorkspace**'''
        return super(IGPUtilities4, self).GetInMemoryWorkspace()
    def ClearInMemoryWorkspace(self):
        '''Method IGPUtilities2.ClearInMemoryWorkspace (from IGPUtilities2)'''
        return super(IGPUtilities4, self).ClearInMemoryWorkspace()
    def OpenFromString(self, NameString):
        '''Method IGPUtilities2.OpenFromString (from IGPUtilities2)

           INPUT
            NameString          : BSTR

           OUTPUT
            ppDataset           : IUnknown**'''
        return super(IGPUtilities4, self).OpenFromString(NameString)
    def SetupEditSession(self, pTable):
        '''Method IGPUtilities2.SetupEditSession (from IGPUtilities2)

           INPUT
            pTable              : IClass*'''
        return super(IGPUtilities4, self).SetupEditSession(pTable)
    def CleanupEditSession(self, abort):
        '''Method IGPUtilities2.CleanupEditSession (from IGPUtilities2)

           INPUT
            abort               : VARIANT_BOOL'''
        return super(IGPUtilities4, self).CleanupEditSession(abort)
    def RemoveFromMapEx(self, pGPValue):
        '''Method IGPUtilities2.RemoveFromMapEx (from IGPUtilities2)

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities4, self).RemoveFromMapEx(pGPValue)
    def AddToMapEx(self, pGPValue, Name, temporary, pUnkRenderer, Visible):
        '''Method IGPUtilities2.AddToMapEx (from IGPUtilities2)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*
            Visible             : VARIANT_BOOL'''
        return super(IGPUtilities4, self).AddToMapEx(pGPValue, Name, temporary, pUnkRenderer, Visible)
    def InternalValidate(self, pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr):
        '''Method IGPUtilities.InternalValidate (from IGPUtilities)

           INPUTS
            pParameters         : IArray*
            pParamValues        : IArray*
            updateValues        : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGPUtilities4, self).InternalValidate(pParameters, pParamValues, updateValues, honorDerivedFlag, pEnvMgr)
    def InternalValidateValue(self, pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage):
        '''Method IGPUtilities.InternalValidateValue (from IGPUtilities)

           INPUTS
            pParameter          : IGPParameter*
            pValue              : IUnknown*
            updateValue         : VARIANT_BOOL
            honorDerivedFlag    : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*
            pMessage            : IGPMessage*'''
        return super(IGPUtilities4, self).InternalValidateValue(pParameter, pValue, updateValue, honorDerivedFlag, pEnvMgr, pMessage)
    def IsBadMessage(self, pMessages, Index):
        '''Method IGPUtilities.IsBadMessage (from IGPUtilities)

           INPUTS
            pMessages           : IGPMessages*
            Index               : long

           OUTPUT
            pBadMsg             : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).IsBadMessage(pMessages, Index)
    def GenerateDefaultOutputValue(self, pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit):
        '''Method IGPUtilities.GenerateDefaultOutputValue (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            functionname        : BSTR
            pOutputParam        : IGPParameter*
            pInputValue         : IGPValue*
            extension           : BSTR
            outputFileBaseLimit : long

           OUTPUT
            ppOutputValue       : IGPValue**'''
        return super(IGPUtilities4, self).GenerateDefaultOutputValue(pEnvMgr, functionname, pOutputParam, pInputValue, extension, outputFileBaseLimit)
    def QualifyOutputDataElement(self, pValue):
        '''Method IGPUtilities.QualifyOutputDataElement (from IGPUtilities)

           INPUT
            pValue              : IGPValue*'''
        return super(IGPUtilities4, self).QualifyOutputDataElement(pValue)
    def QualifyOutputCatalogPath(self, catalogPath):
        '''Method IGPUtilities.QualifyOutputCatalogPath (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            pQualifiedCatalogPath: BSTR*'''
        return super(IGPUtilities4, self).QualifyOutputCatalogPath(catalogPath)
    def GetUnQualifiedCatalogPath(self, pValue):
        '''Method IGPUtilities.GetUnQualifiedCatalogPath (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            Path                : BSTR*'''
        return super(IGPUtilities4, self).GetUnQualifiedCatalogPath(pValue)
    def put_Workspace(self, workPath):
        '''Method IGPUtilities.put_Workspace (from IGPUtilities)

           INPUT
            workPath            : BSTR'''
        return super(IGPUtilities4, self).put_Workspace(workPath)
    def get_Workspace(self):
        '''Method IGPUtilities.get_Workspace (from IGPUtilities)

           OUTPUT
            workPath            : BSTR*'''
        return super(IGPUtilities4, self).get_Workspace()
    def get_Catalog(self):
        '''Method IGPUtilities.get_Catalog (from IGPUtilities)

           OUTPUT
            Catalog             : IUnknown**'''
        return super(IGPUtilities4, self).get_Catalog()
    def get_RefreshCatalogParent(self):
        '''Method IGPUtilities.get_RefreshCatalogParent (from IGPUtilities)

           OUTPUT
            pRefresh            : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).get_RefreshCatalogParent()
    def put_RefreshCatalogParent(self, pRefresh):
        '''Method IGPUtilities.put_RefreshCatalogParent (from IGPUtilities)

           INPUT
            pRefresh            : VARIANT_BOOL'''
        return super(IGPUtilities4, self).put_RefreshCatalogParent(pRefresh)
    def MakeDataElement(self, catalogPath, pDataType, pExpandOptions):
        '''Method IGPUtilities.MakeDataElement (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            pExpandOptions      : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities4, self).MakeDataElement(catalogPath, pDataType, pExpandOptions)
    def MakeDataElementFromNameObject(self, Name):
        '''Method IGPUtilities.MakeDataElementFromNameObject (from IGPUtilities)

           INPUT
            Name                : IName*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities4, self).MakeDataElementFromNameObject(Name)
    def ExpandDataElement(self, pInDE, pExpandOptions):
        '''Method IGPUtilities.ExpandDataElement (from IGPUtilities)

           INPUTS
            pInDE               : IDataElement*
            pExpandOptions      : IDEBrowseOptions*'''
        return super(IGPUtilities4, self).ExpandDataElement(pInDE, pExpandOptions)
    def CreateDataElement(self, catalogPath, pDataType, optionalWorkspace):
        '''Method IGPUtilities.CreateDataElement (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*
            optionalWorkspace   : BSTR

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IGPUtilities4, self).CreateDataElement(catalogPath, pDataType, optionalWorkspace)
    def CreateFeatureLayer(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureLayer (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPUtilities4, self).CreateFeatureLayer(catalogPath)
    def OpenRasterDatasetFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterDatasetFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities4, self).OpenRasterDatasetFromString(catalogPath)
    def OpenFeatureClassFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureClassFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFC                : IFeatureClass**'''
        return super(IGPUtilities4, self).OpenFeatureClassFromString(catalogPath)
    def OpenTableFromString(self, catalogPath):
        '''Method IGPUtilities.OpenTableFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities4, self).OpenTableFromString(catalogPath)
    def OpenRasterLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenRasterLayerFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppRL                : IRasterLayer**'''
        return super(IGPUtilities4, self).OpenRasterLayerFromString(catalogPath)
    def OpenFeatureLayerFromString(self, catalogPath):
        '''Method IGPUtilities.OpenFeatureLayerFromString (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppFL                : IFeatureLayer**'''
        return super(IGPUtilities4, self).OpenFeatureLayerFromString(catalogPath)
    def CreateFeatureClassName(self, catalogPath):
        '''Method IGPUtilities.CreateFeatureClassName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).CreateFeatureClassName(catalogPath)
    def CreateRasterDatasetName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterDatasetName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).CreateRasterDatasetName(catalogPath)
    def CreateRasterCatalogName(self, catalogPath):
        '''Method IGPUtilities.CreateRasterCatalogName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).CreateRasterCatalogName(catalogPath)
    def CreateTableName(self, catalogPath):
        '''Method IGPUtilities.CreateTableName (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).CreateTableName(catalogPath)
    def OpenDataset(self, pValue):
        '''Method IGPUtilities.OpenDataset (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities4, self).OpenDataset(pValue)
    def OpenDatasetFromLocation(self, catalogPath):
        '''Method IGPUtilities.OpenDatasetFromLocation (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IGPUtilities4, self).OpenDatasetFromLocation(catalogPath)
    def AddToMap(self, pGPValue, Name, temporary, pUnkRenderer):
        '''Method IGPUtilities.AddToMap (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*'''
        return super(IGPUtilities4, self).AddToMap(pGPValue, Name, temporary, pUnkRenderer)
    def RefreshCatalog(self, pSourceDataElement):
        '''Method IGPUtilities.RefreshCatalog (from IGPUtilities)

           INPUT
            pSourceDataElement  : IDataElement*'''
        return super(IGPUtilities4, self).RefreshCatalog(pSourceDataElement)
    def ExportFeatureClass(self, pSourceDataElement, pTargetDataElement):
        '''Method IGPUtilities.ExportFeatureClass (from IGPUtilities)

           INPUTS
            pSourceDataElement  : IDataElement*
            pTargetDataElement  : IDataElement*'''
        return super(IGPUtilities4, self).ExportFeatureClass(pSourceDataElement, pTargetDataElement)
    def Delete(self, pGPValue):
        '''Method IGPUtilities.Delete (from IGPUtilities)

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilities4, self).Delete(pGPValue)
    def Rename(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Rename (from IGPUtilities)

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities4, self).Rename(pSourceGPValue, pTargetGPValue)
    def Copy(self, pSourceGPValue, pTargetGPValue):
        '''Method IGPUtilities.Copy (from IGPUtilities)

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IGPUtilities4, self).Copy(pSourceGPValue, pTargetGPValue)
    def Exists(self, pGPValue):
        '''Method IGPUtilities.Exists (from IGPUtilities)

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).Exists(pGPValue)
    def CompareWildCard(self, wildCard, Data):
        '''Method IGPUtilities.CompareWildCard (from IGPUtilities)

           INPUTS
            wildCard            : BSTR
            Data                : BSTR

           OUTPUT
            matched             : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).CompareWildCard(wildCard, Data)
    def GetNameObject(self, pDataElement):
        '''Method IGPUtilities.GetNameObject (from IGPUtilities)

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).GetNameObject(pDataElement)
    def GetNameObjectFromLocation(self, locationMoniker):
        '''Method IGPUtilities.GetNameObjectFromLocation (from IGPUtilities)

           INPUT
            locationMoniker     : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).GetNameObjectFromLocation(locationMoniker)
    def GetGxObjectFromLocation(self, catalogPath):
        '''Method IGPUtilities.GetGxObjectFromLocation (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities4, self).GetGxObjectFromLocation(catalogPath)
    def FieldExists(self, pGPValue, pField):
        '''Method IGPUtilities.FieldExists (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            pField              : IField*

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).FieldExists(pGPValue, pField)
    def FindField(self, pGPValue, Name):
        '''Method IGPUtilities.FindField (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR

           OUTPUT
            ppField             : IField**'''
        return super(IGPUtilities4, self).FindField(pGPValue, Name)
    def GetMapLayers(self):
        '''Method IGPUtilities.GetMapLayers (from IGPUtilities)

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IGPUtilities4, self).GetMapLayers()
    def FindMapLayer(self, Name):
        '''Method IGPUtilities.FindMapLayer (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities4, self).FindMapLayer(Name)
    def FindMapLayer2(self, Name):
        '''Method IGPUtilities.FindMapLayer2 (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities4, self).FindMapLayer2(Name)
    def GetGPLayers(self):
        '''Method IGPUtilities.GetGPLayers (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities4, self).GetGPLayers()
    def MakeGPLayer(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPLayer (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities4, self).MakeGPLayer(catalogPath, pDataType)
    def GetEnvironment(self, pEnvironments, Name):
        '''Method IGPUtilities.GetEnvironment (from IGPUtilities)

           INPUTS
            pEnvironments       : IArray*
            Name                : BSTR

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IGPUtilities4, self).GetEnvironment(pEnvironments, Name)
    def AddInternalLayer(self, pLayer):
        '''Method IGPUtilities.AddInternalLayer (from IGPUtilities)

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities4, self).AddInternalLayer(pLayer)
    def AddInternalLayer2(self, pLayer, pGPLayer):
        '''Method IGPUtilities.AddInternalLayer2 (from IGPUtilities)

           INPUTS
            pLayer              : ILayer*
            pGPLayer            : IGPLayer*'''
        return super(IGPUtilities4, self).AddInternalLayer2(pLayer, pGPLayer)
    def MakeGPLayerFromLayer(self, pLayer):
        '''Method IGPUtilities.MakeGPLayerFromLayer (from IGPUtilities)

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilities4, self).MakeGPLayerFromLayer(pLayer)
    def CreateParentFromCatalogPath(self, catalogPath):
        '''Method IGPUtilities.CreateParentFromCatalogPath (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGPUtilities4, self).CreateParentFromCatalogPath(catalogPath)
    def UnpackGPValue(self, pInput):
        '''Method IGPUtilities.UnpackGPValue (from IGPUtilities)

           INPUT
            pInput              : IUnknown*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities4, self).UnpackGPValue(pInput)
    def DecodeRasterLayer(self, pValue):
        '''Method IGPUtilities.DecodeRasterLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRD                : IRasterDataset**'''
        return super(IGPUtilities4, self).DecodeRasterLayer(pValue)
    def DecodeFeatureLayer(self, pValue):
        '''Method IGPUtilities.DecodeFeatureLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppFC                : IFeatureClass**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities4, self).DecodeFeatureLayer(pValue)
    def DecodeTableView(self, pValue):
        '''Method IGPUtilities.DecodeTableView (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUTS
            ppTable             : ITable**
            ppQF                : IQueryFilter**'''
        return super(IGPUtilities4, self).DecodeTableView(pValue)
    def DecodeLayer(self, pValue):
        '''Method IGPUtilities.DecodeLayer (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilities4, self).DecodeLayer(pValue)
    def DecodeStandaloneTable(self, pValue):
        '''Method IGPUtilities.DecodeStandaloneTable (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppStandaloneTable   : IStandaloneTable**'''
        return super(IGPUtilities4, self).DecodeStandaloneTable(pValue)
    def DecodeDETable(self, pValue):
        '''Method IGPUtilities.DecodeDETable (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGPUtilities4, self).DecodeDETable(pValue)
    def ReleaseInternals(self):
        '''Method IGPUtilities.ReleaseInternals (from IGPUtilities)'''
        return super(IGPUtilities4, self).ReleaseInternals()
    def GetMapTables(self):
        '''Method IGPUtilities.GetMapTables (from IGPUtilities)

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IGPUtilities4, self).GetMapTables()
    def FindMapTable(self, Name):
        '''Method IGPUtilities.FindMapTable (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUT
            ppTable             : ITable**'''
        return super(IGPUtilities4, self).FindMapTable(Name)
    def FindMapTable2(self, Name):
        '''Method IGPUtilities.FindMapTable2 (from IGPUtilities)

           INPUT
            Name                : BSTR

           OUTPUTS
            ppTable             : ITable**
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities4, self).FindMapTable2(Name)
    def GetGPTableViews(self):
        '''Method IGPUtilities.GetGPTableViews (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities4, self).GetGPTableViews()
    def IsGPTableView(self, pValue):
        '''Method IGPUtilities.IsGPTableView (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            pResult             : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).IsGPTableView(pValue)
    def MakeGPTableView(self, catalogPath, pDataType):
        '''Method IGPUtilities.MakeGPTableView (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities4, self).MakeGPTableView(catalogPath, pDataType)
    def AddInternalTable(self, pTable):
        '''Method IGPUtilities.AddInternalTable (from IGPUtilities)

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities4, self).AddInternalTable(pTable)
    def AddInternalTable2(self, pTable, pGPTableView):
        '''Method IGPUtilities.AddInternalTable2 (from IGPUtilities)

           INPUTS
            pTable              : ITable*
            pGPTableView        : IGPTableView*'''
        return super(IGPUtilities4, self).AddInternalTable2(pTable, pGPTableView)
    def MakeGPTableViewFromTable(self, pTable):
        '''Method IGPUtilities.MakeGPTableViewFromTable (from IGPUtilities)

           INPUT
            pTable              : ITable*

           OUTPUT
            ppGPTableView       : IGPTableView**'''
        return super(IGPUtilities4, self).MakeGPTableViewFromTable(pTable)
    def GetFields(self, pValue):
        '''Method IGPUtilities.GetFields (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppFields            : IFields**'''
        return super(IGPUtilities4, self).GetFields(pValue)
    def CanAddToMap(self):
        '''Method IGPUtilities.CanAddToMap (from IGPUtilities)

           OUTPUT
            pCanAddToMap        : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).CanAddToMap()
    def GenerateSpRef(self, pInputTables, pOverlayTable, growExtentBy):
        '''Method IGPUtilities.GenerateSpRef (from IGPUtilities)

           INPUTS
            pInputTables        : IArray*
            pOverlayTable       : ITable*
            growExtentBy        : double

           OUTPUTS
            ppSpRef             : ISpatialReference**
            ppExtent            : IEnvelope**
            pHasMs              : VARIANT_BOOL*
            pMMin               : double*
            pMMax               : double*
            pHasZs              : VARIANT_BOOL*
            pZMin               : double*
            pZMax               : double*'''
        return super(IGPUtilities4, self).GenerateSpRef(pInputTables, pOverlayTable, growExtentBy)
    def SetGridIndex(self, pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef):
        '''Method IGPUtilities.SetGridIndex (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pInputTables        : IArray*
            spatialIndex1       : double
            spatialIndex2       : double
            spatialIndex3       : double
            pUnk                : IUnknown*
            pGeometryDef        : IGeometryDef*'''
        return super(IGPUtilities4, self).SetGridIndex(pEnvMgr, pInputTables, spatialIndex1, spatialIndex2, spatialIndex3, pUnk, pGeometryDef)
    def IsDatasetType(self, pUnknown):
        '''Method IGPUtilities.IsDatasetType (from IGPUtilities)

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).IsDatasetType(pUnknown)
    def RemoveFromMap(self, pGPValue, Name):
        '''Method IGPUtilities.RemoveFromMap (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR'''
        return super(IGPUtilities4, self).RemoveFromMap(pGPValue, Name)
    def IsDerived(self, pInput):
        '''Method IGPUtilities.IsDerived (from IGPUtilities)

           INPUT
            pInput              : IUnknown*

           OUTPUT
            pDerived            : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).IsDerived(pInput)
    def RefreshView(self):
        '''Method IGPUtilities.RefreshView (from IGPUtilities)'''
        return super(IGPUtilities4, self).RefreshView()
    def PackGPValue(self, pValue, pInput):
        '''Method IGPUtilities.PackGPValue (from IGPUtilities)

           INPUTS
            pValue              : IGPValue*
            pInput              : IUnknown*'''
        return super(IGPUtilities4, self).PackGPValue(pValue, pInput)
    def CreateParameterValue(self, text, pDataType, Direction):
        '''Method IGPUtilities.CreateParameterValue (from IGPUtilities)

           INPUTS
            text                : BSTR
            pDataType           : IGPDataType*
            Direction           : esriGPParameterDirection

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPUtilities4, self).CreateParameterValue(text, pDataType, Direction)
    def ValidateExists(self, pGPValue, checkDerived):
        '''Method IGPUtilities.ValidateExists (from IGPUtilities)

           INPUTS
            pGPValue            : IGPValue*
            checkDerived        : VARIANT_BOOL

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGPUtilities4, self).ValidateExists(pGPValue, checkDerived)
    def GetGxObject(self, pDataElement):
        '''Method IGPUtilities.GetGxObject (from IGPUtilities)

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IGPUtilities4, self).GetGxObject(pDataElement)
    def GetGxObjects(self, catalogPath):
        '''Method IGPUtilities.GetGxObjects (from IGPUtilities)

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities4, self).GetGxObjects(catalogPath)
    def MakeDataElements(self, catalogPath, pBrowseOptions):
        '''Method IGPUtilities.MakeDataElements (from IGPUtilities)

           INPUTS
            catalogPath         : BSTR
            pBrowseOptions      : IDEBrowseOptions*

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilities4, self).MakeDataElements(catalogPath, pBrowseOptions)
    def GetGPMapData(self):
        '''Method IGPUtilities.GetGPMapData (from IGPUtilities)

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPUtilities4, self).GetGPMapData()
    def MakeGPValueFromObject(self, pUnk):
        '''Method IGPUtilities.MakeGPValueFromObject (from IGPUtilities)

           INPUT
            pUnk                : IUnknown*

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IGPUtilities4, self).MakeGPValueFromObject(pUnk)
    def RemoveInternalValues(self):
        '''Method IGPUtilities.RemoveInternalValues (from IGPUtilities)'''
        return super(IGPUtilities4, self).RemoveInternalValues()
    def RemoveInternalLayer(self, Name):
        '''Method IGPUtilities.RemoveInternalLayer (from IGPUtilities)

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities4, self).RemoveInternalLayer(Name)
    def RemoveInternalTable(self, Name):
        '''Method IGPUtilities.RemoveInternalTable (from IGPUtilities)

           INPUT
            Name                : BSTR'''
        return super(IGPUtilities4, self).RemoveInternalTable(Name)
    def DecodeRaster(self, pValue):
        '''Method IGPUtilities.DecodeRaster (from IGPUtilities)

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IGPUtilities4, self).DecodeRaster(pValue)
    def GetGPSpRefEnv(self, pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS):
        '''Method IGPUtilities.GetGPSpRefEnv (from IGPUtilities)

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            pSrcSpRef           : ISpatialReference*
            pNewExtent          : IEnvelope*
            newMMin             : double
            newMMax             : double
            newZMin             : double
            newZMax             : double
            pWkspFDS            : IUnknown*

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPUtilities4, self).GetGPSpRefEnv(pEnvMgr, pSrcSpRef, pNewExtent, newMMin, newMMax, newZMin, newZMax, pWkspFDS)
    def RemoveInternalLayerEx(self, pLayer):
        '''Method IGPUtilities.RemoveInternalLayerEx (from IGPUtilities)

           INPUT
            pLayer              : ILayer*'''
        return super(IGPUtilities4, self).RemoveInternalLayerEx(pLayer)
    def RemoveInternalTableEx(self, pTable):
        '''Method IGPUtilities.RemoveInternalTableEx (from IGPUtilities)

           INPUT
            pTable              : ITable*'''
        return super(IGPUtilities4, self).RemoveInternalTableEx(pTable)
    Catalog = property(get_Catalog, None, None)
    RefreshCatalogParent = property(get_RefreshCatalogParent, put_RefreshCatalogParent, None)
    VariableManager = property(get_VariableManager, putref_VariableManager, None)
    Workspace = property(get_Workspace, put_Workspace, None)

class IGPCompositeDataType(_esriGeoprocessing.IGPCompositeDataType):
    _IID = uuid.UUID('161ba20a-15b0-4af8-aa30-67653eebe69e')
    def get_Count(self):
        '''Method IGPCompositeDataType.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPCompositeDataType, self).get_Count()
    def get_DataType(self, Index):
        '''Method IGPCompositeDataType.get_DataType

           INPUT
            Index               : long

           OUTPUT
            ppType              : IGPDataType**'''
        return super(IGPCompositeDataType, self).get_DataType(Index)
    def AddDataType(self, pType):
        '''Method IGPCompositeDataType.AddDataType

           INPUT
            pType               : IGPDataType*'''
        return super(IGPCompositeDataType, self).AddDataType(pType)
    def RemoveDataType(self, Index):
        '''Method IGPCompositeDataType.RemoveDataType

           INPUT
            Index               : long'''
        return super(IGPCompositeDataType, self).RemoveDataType(Index)
    Count = property(get_Count, None, None)
    DataType = IndexProperty(get_DataType, None)

class IGPCompositeDomain(_esriGeoprocessing.IGPCompositeDomain):
    _IID = uuid.UUID('7b64e034-8b4b-4896-8e9c-2c4d2b4f51f3')
    def get_Count(self):
        '''Method IGPCompositeDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPCompositeDomain, self).get_Count()
    def get_Domain(self, Index):
        '''Method IGPCompositeDomain.get_Domain

           INPUT
            Index               : long

           OUTPUT
            ppDomain            : IGPDomain**'''
        return super(IGPCompositeDomain, self).get_Domain(Index)
    def AddDomain(self, pDomain):
        '''Method IGPCompositeDomain.AddDomain

           INPUT
            pDomain             : IGPDomain*'''
        return super(IGPCompositeDomain, self).AddDomain(pDomain)
    def RemoveDomain(self, Index):
        '''Method IGPCompositeDomain.RemoveDomain

           INPUT
            Index               : long'''
        return super(IGPCompositeDomain, self).RemoveDomain(Index)
    def ReplaceDomain(self, Index, pDomain):
        '''Method IGPCompositeDomain.ReplaceDomain

           INPUTS
            Index               : long
            pDomain             : IGPDomain*'''
        return super(IGPCompositeDomain, self).ReplaceDomain(Index, pDomain)
    Count = property(get_Count, None, None)
    Domain = IndexProperty(get_Domain, None)

class IGPFileSupport(_esriGeoprocessing.IGPFileSupport):
    _IID = uuid.UUID('59742448-eb0e-4830-9742-d4fd721d1971')
    def get_FileTypeCount(self):
        '''Method IGPFileSupport.get_FileTypeCount

           OUTPUT
            Count               : long*'''
        return super(IGPFileSupport, self).get_FileTypeCount()
    def get_FileTypeExtension(self, Index):
        '''Method IGPFileSupport.get_FileTypeExtension

           INPUT
            Index               : long

           OUTPUT
            extension           : BSTR*'''
        return super(IGPFileSupport, self).get_FileTypeExtension(Index)
    def get_FileTypeDescription(self, Index):
        '''Method IGPFileSupport.get_FileTypeDescription

           INPUT
            Index               : long

           OUTPUT
            Description         : BSTR*'''
        return super(IGPFileSupport, self).get_FileTypeDescription(Index)
    def get_FileTypeImagePath(self, Index):
        '''Method IGPFileSupport.get_FileTypeImagePath

           INPUT
            Index               : long

           OUTPUT
            Path                : BSTR*'''
        return super(IGPFileSupport, self).get_FileTypeImagePath(Index)
    FileTypeCount = property(get_FileTypeCount, None, None)
    FileTypeDescription = IndexProperty(get_FileTypeDescription, None)
    FileTypeExtension = IndexProperty(get_FileTypeExtension, None)
    FileTypeImagePath = IndexProperty(get_FileTypeImagePath, None)

class IGPLinearUnit(_esriGeoprocessing.IGPLinearUnit):
    _IID = uuid.UUID('0ee02101-1597-473c-b77d-1edfd547ace5')

    def __init__(self, *args, **kw):
        super(IGPLinearUnit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPLinearUnit.get_Value

           OUTPUT
            pValue              : double*'''
        return super(IGPLinearUnit, self).get_Value()
    def put_Value(self, pValue):
        '''Method IGPLinearUnit.put_Value

           INPUT
            pValue              : double'''
        return super(IGPLinearUnit, self).put_Value(pValue)
    def get_Units(self):
        '''Method IGPLinearUnit.get_Units

           OUTPUT
            pUnits              : esriUnits*'''
        return super(IGPLinearUnit, self).get_Units()
    def put_Units(self, pUnits):
        '''Method IGPLinearUnit.put_Units

           INPUT
            pUnits              : esriUnits'''
        return super(IGPLinearUnit, self).put_Units(pUnits)
    def ConvertValue(self, Units):
        '''Method IGPLinearUnit.ConvertValue

           INPUT
            Units               : esriUnits

           OUTPUT
            pValue              : double*'''
        return super(IGPLinearUnit, self).ConvertValue(Units)
    Units = property(get_Units, put_Units, None)
    Value = property(get_Value, put_Value, None)

class IGPArealUnit(_esriGeoprocessing.IGPArealUnit):
    _IID = uuid.UUID('c3e5e514-0fd9-4e5c-8b07-e9f838113f76')

    def __init__(self, *args, **kw):
        super(IGPArealUnit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IGPArealUnit.get_Value

           OUTPUT
            pValue              : double*'''
        return super(IGPArealUnit, self).get_Value()
    def put_Value(self, pValue):
        '''Method IGPArealUnit.put_Value

           INPUT
            pValue              : double'''
        return super(IGPArealUnit, self).put_Value(pValue)
    def get_Units(self):
        '''Method IGPArealUnit.get_Units

           OUTPUT
            pUnits              : esriAreaUnits*'''
        return super(IGPArealUnit, self).get_Units()
    def put_Units(self, pUnits):
        '''Method IGPArealUnit.put_Units

           INPUT
            pUnits              : esriAreaUnits'''
        return super(IGPArealUnit, self).put_Units(pUnits)
    def ConvertValue(self, Units):
        '''Method IGPArealUnit.ConvertValue

           INPUT
            Units               : esriAreaUnits

           OUTPUT
            pValue              : double*'''
        return super(IGPArealUnit, self).ConvertValue(Units)
    Units = property(get_Units, put_Units, None)
    Value = property(get_Value, put_Value, None)

class IGPLinearUnit2(_esriGeoprocessing.IGPLinearUnit2):
    _IID = uuid.UUID('acaf2c1b-97cb-45f5-99b1-3f0b0a7216e2')
    def SetDefaultUnits(self, Units):
        '''Method IGPLinearUnit2.SetDefaultUnits

           INPUT
            Units               : esriUnits'''
        return super(IGPLinearUnit2, self).SetDefaultUnits(Units)

class IGPRandomNumberGenerator(_esriGeoprocessing.IGPRandomNumberGenerator):
    _IID = uuid.UUID('f6adcf0e-13bb-4cd9-b6c6-630ffcc8052b')
    def get_Seed(self):
        '''Method IGPRandomNumberGenerator.get_Seed

           OUTPUT
            pSeed               : long*'''
        return super(IGPRandomNumberGenerator, self).get_Seed()
    def get_Type(self):
        '''Method IGPRandomNumberGenerator.get_Type

           OUTPUT
            Type                : esriRandomNumberGeneratorType*'''
        return super(IGPRandomNumberGenerator, self).get_Type()
    def Initialize(self, Seed, Type):
        '''Method IGPRandomNumberGenerator.Initialize

           INPUTS
            Seed                : long
            Type                : esriRandomNumberGeneratorType'''
        return super(IGPRandomNumberGenerator, self).Initialize(Seed, Type)
    def Reset(self):
        '''Method IGPRandomNumberGenerator.Reset'''
        return super(IGPRandomNumberGenerator, self).Reset()
    def GetValue(self, distribution):
        '''Method IGPRandomNumberGenerator.GetValue

           INPUT
            distribution        : BSTR

           OUTPUT
            Value               : double*'''
        return super(IGPRandomNumberGenerator, self).GetValue(distribution)
    Seed = property(get_Seed, None, None)
    Type = property(get_Type, None, None)

class IGPRasterLayer(_esriGeoprocessing.IGPRasterLayer):
    _IID = uuid.UUID('9d08ed26-ab4c-45d5-9f4e-32677670f7a0')

    def __init__(self, *args, **kw):
        super(IGPRasterLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Field(self):
        '''Method IGPRasterLayer.get_Field

           OUTPUT
            ppField             : IField**'''
        return super(IGPRasterLayer, self).get_Field()
    def putref_Field(self, ppField):
        '''Method IGPRasterLayer.putref_Field

           INPUT
            ppField             : IField*'''
        return super(IGPRasterLayer, self).putref_Field(ppField)
    def get_WhereClause(self):
        '''Method IGPRasterLayer.get_WhereClause

           OUTPUT
            pWhereClause        : BSTR*'''
        return super(IGPRasterLayer, self).get_WhereClause()
    def put_WhereClause(self, pWhereClause):
        '''Method IGPRasterLayer.put_WhereClause

           INPUT
            pWhereClause        : BSTR'''
        return super(IGPRasterLayer, self).put_WhereClause(pWhereClause)
    def get_IsInteger(self):
        '''Method IGPRasterLayer.get_IsInteger

           OUTPUT
            IsInteger           : VARIANT_BOOL*'''
        return super(IGPRasterLayer, self).get_IsInteger()
    def put_IsInteger(self, IsInteger):
        '''Method IGPRasterLayer.put_IsInteger

           INPUT
            IsInteger           : VARIANT_BOOL'''
        return super(IGPRasterLayer, self).put_IsInteger(IsInteger)
    def get_BandCount(self):
        '''Method IGPRasterLayer.get_BandCount

           OUTPUT
            BandCount           : long*'''
        return super(IGPRasterLayer, self).get_BandCount()
    def put_BandCount(self, BandCount):
        '''Method IGPRasterLayer.put_BandCount

           INPUT
            BandCount           : long'''
        return super(IGPRasterLayer, self).put_BandCount(BandCount)
    def get_PixelWidth(self):
        '''Method IGPRasterLayer.get_PixelWidth

           OUTPUT
            PixelWidth          : double*'''
        return super(IGPRasterLayer, self).get_PixelWidth()
    def put_PixelWidth(self, PixelWidth):
        '''Method IGPRasterLayer.put_PixelWidth

           INPUT
            PixelWidth          : double'''
        return super(IGPRasterLayer, self).put_PixelWidth(PixelWidth)
    def get_PixelHeight(self):
        '''Method IGPRasterLayer.get_PixelHeight

           OUTPUT
            PixelHeight         : double*'''
        return super(IGPRasterLayer, self).get_PixelHeight()
    def put_PixelHeight(self, PixelHeight):
        '''Method IGPRasterLayer.put_PixelHeight

           INPUT
            PixelHeight         : double'''
        return super(IGPRasterLayer, self).put_PixelHeight(PixelHeight)
    def get_RowCount(self):
        '''Method IGPRasterLayer.get_RowCount

           OUTPUT
            RowCount            : long*'''
        return super(IGPRasterLayer, self).get_RowCount()
    def get_ColumnCount(self):
        '''Method IGPRasterLayer.get_ColumnCount

           OUTPUT
            ColumnCount         : long*'''
        return super(IGPRasterLayer, self).get_ColumnCount()
    BandCount = property(get_BandCount, put_BandCount, None)
    ColumnCount = property(get_ColumnCount, None, None)
    Field = property(get_Field, putref_Field, None)
    IsInteger = property(get_IsInteger, put_IsInteger, None)
    PixelHeight = property(get_PixelHeight, put_PixelHeight, None)
    PixelWidth = property(get_PixelWidth, put_PixelWidth, None)
    RowCount = property(get_RowCount, None, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IGPNumericDomain(_esriGeoprocessing.IGPNumericDomain):
    _IID = uuid.UUID('8314b3a2-0001-450b-a503-7b152d2a6e28')

    def __init__(self, *args, **kw):
        super(IGPNumericDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AllowEmpty(self, AllowEmpty):
        '''Method IGPNumericDomain.put_AllowEmpty

           INPUT
            AllowEmpty          : VARIANT_BOOL'''
        return super(IGPNumericDomain, self).put_AllowEmpty(AllowEmpty)
    def get_AllowEmpty(self):
        '''Method IGPNumericDomain.get_AllowEmpty

           OUTPUT
            AllowEmpty          : VARIANT_BOOL*'''
        return super(IGPNumericDomain, self).get_AllowEmpty()
    def put_LowLimit(self, LowLimit):
        '''Method IGPNumericDomain.put_LowLimit

           INPUT
            LowLimit            : double'''
        return super(IGPNumericDomain, self).put_LowLimit(LowLimit)
    def get_LowLimit(self):
        '''Method IGPNumericDomain.get_LowLimit

           OUTPUT
            LowLimit            : double*'''
        return super(IGPNumericDomain, self).get_LowLimit()
    def put_LowLimitInclusive(self, bInclusive):
        '''Method IGPNumericDomain.put_LowLimitInclusive

           INPUT
            bInclusive          : VARIANT_BOOL'''
        return super(IGPNumericDomain, self).put_LowLimitInclusive(bInclusive)
    def get_LowLimitInclusive(self):
        '''Method IGPNumericDomain.get_LowLimitInclusive

           OUTPUT
            bInclusive          : VARIANT_BOOL*'''
        return super(IGPNumericDomain, self).get_LowLimitInclusive()
    def SetHighLimit(self, allowHighLimit, HighLimit):
        '''Method IGPNumericDomain.SetHighLimit

           INPUTS
            allowHighLimit      : VARIANT_BOOL
            HighLimit           : double'''
        return super(IGPNumericDomain, self).SetHighLimit(allowHighLimit, HighLimit)
    def GetHighLimit(self):
        '''Method IGPNumericDomain.GetHighLimit

           OUTPUTS
            allowHighLimit      : VARIANT_BOOL*
            HighLimit           : double*'''
        return super(IGPNumericDomain, self).GetHighLimit()
    AllowEmpty = property(get_AllowEmpty, put_AllowEmpty, None)
    LowLimit = property(get_LowLimit, put_LowLimit, None)
    LowLimitInclusive = property(get_LowLimitInclusive, put_LowLimitInclusive, None)

class IGPCompositeLayer(_esriGeoprocessing.IGPCompositeLayer):
    _IID = uuid.UUID('0bcc2e79-557e-4070-b876-f3928533830f')
    def get_Count(self):
        '''Method IGPCompositeLayer.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPCompositeLayer, self).get_Count()
    def get_Layer(self, Index):
        '''Method IGPCompositeLayer.get_Layer

           INPUT
            Index               : long

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPCompositeLayer, self).get_Layer(Index)
    def Add(self, pGPLayer):
        '''Method IGPCompositeLayer.Add

           INPUT
            pGPLayer            : IGPLayer*'''
        return super(IGPCompositeLayer, self).Add(pGPLayer)
    def Remove(self, Index):
        '''Method IGPCompositeLayer.Remove

           INPUT
            Index               : long'''
        return super(IGPCompositeLayer, self).Remove(Index)
    def Clear(self):
        '''Method IGPCompositeLayer.Clear'''
        return super(IGPCompositeLayer, self).Clear()
    def get_Children(self):
        '''Method IGPCompositeLayer.get_Children

           OUTPUT
            ppChildren          : IArray**'''
        return super(IGPCompositeLayer, self).get_Children()
    Children = property(get_Children, None, None)
    Count = property(get_Count, None, None)
    Layer = IndexProperty(get_Layer, None)

class IGPStandaloneTableCollection(_esriGeoprocessing.IGPStandaloneTableCollection):
    _IID = uuid.UUID('42c4e289-f938-4ed9-8069-939785862176')

    def __init__(self, *args, **kw):
        super(IGPStandaloneTableCollection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Tables(self):
        '''Method IGPStandaloneTableCollection.get_Tables

           OUTPUT
            ppTables            : IArray**'''
        return super(IGPStandaloneTableCollection, self).get_Tables()
    def putref_Tables(self, ppTables):
        '''Method IGPStandaloneTableCollection.putref_Tables

           INPUT
            ppTables            : IArray*'''
        return super(IGPStandaloneTableCollection, self).putref_Tables(ppTables)
    Tables = property(get_Tables, putref_Tables, None)

class IDEUtilities(_esriGeoprocessing.IDEUtilities):
    _IID = uuid.UUID('39fcba4f-fad5-4360-a91e-f6c995205676')

    def __init__(self, *args, **kw):
        super(IDEUtilities, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def AssignTinProperties(self, pTin, pDataElement):
        '''Method IDEUtilities.AssignTinProperties

           INPUTS
            pTin                : ITin*
            pDataElement        : IDataElement*'''
        return super(IDEUtilities, self).AssignTinProperties(pTin, pDataElement)
    def IsEqualArray(self, pObjects1, pObjects2):
        '''Method IDEUtilities.IsEqualArray

           INPUTS
            pObjects1           : IArray*
            pObjects2           : IArray*

           OUTPUT
            pEqual              : VARIANT_BOOL*'''
        return super(IDEUtilities, self).IsEqualArray(pObjects1, pObjects2)
    def put_Workspace(self, workPath):
        '''Method IDEUtilities.put_Workspace

           INPUT
            workPath            : BSTR'''
        return super(IDEUtilities, self).put_Workspace(workPath)
    def get_Workspace(self):
        '''Method IDEUtilities.get_Workspace

           OUTPUT
            workPath            : BSTR*'''
        return super(IDEUtilities, self).get_Workspace()
    def get_Catalog(self):
        '''Method IDEUtilities.get_Catalog

           OUTPUT
            Catalog             : IUnknown**'''
        return super(IDEUtilities, self).get_Catalog()
    def get_RefreshCatalogParent(self):
        '''Method IDEUtilities.get_RefreshCatalogParent

           OUTPUT
            pRefresh            : VARIANT_BOOL*'''
        return super(IDEUtilities, self).get_RefreshCatalogParent()
    def put_RefreshCatalogParent(self, pRefresh):
        '''Method IDEUtilities.put_RefreshCatalogParent

           INPUT
            pRefresh            : VARIANT_BOOL'''
        return super(IDEUtilities, self).put_RefreshCatalogParent(pRefresh)
    def MakeDataElement(self, catalogPath, pBrowseOptions, pDataType):
        '''Method IDEUtilities.MakeDataElement

           INPUTS
            catalogPath         : BSTR
            pBrowseOptions      : IDEBrowseOptions*
            pDataType           : IGPDataType*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IDEUtilities, self).MakeDataElement(catalogPath, pBrowseOptions, pDataType)
    def MakeDataElementFromNameObject(self, Name):
        '''Method IDEUtilities.MakeDataElementFromNameObject

           INPUT
            Name                : IName*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IDEUtilities, self).MakeDataElementFromNameObject(Name)
    def ExpandDataElement(self, pInDE, pBrowseOptions):
        '''Method IDEUtilities.ExpandDataElement

           INPUTS
            pInDE               : IDataElement*
            pBrowseOptions      : IDEBrowseOptions*'''
        return super(IDEUtilities, self).ExpandDataElement(pInDE, pBrowseOptions)
    def OpenDataset(self, pDataElement):
        '''Method IDEUtilities.OpenDataset

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IDEUtilities, self).OpenDataset(pDataElement)
    def OpenLayerFromLocation(self, catalogPath):
        '''Method IDEUtilities.OpenLayerFromLocation

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IDEUtilities, self).OpenLayerFromLocation(catalogPath)
    def OpenDatasetFromLocation(self, catalogPath, pDataType):
        '''Method IDEUtilities.OpenDatasetFromLocation

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IDEUtilities, self).OpenDatasetFromLocation(catalogPath, pDataType)
    def RefreshCatalog(self, pSourceDataElement):
        '''Method IDEUtilities.RefreshCatalog

           INPUT
            pSourceDataElement  : IDataElement*'''
        return super(IDEUtilities, self).RefreshCatalog(pSourceDataElement)
    def Delete(self, pGPValue):
        '''Method IDEUtilities.Delete

           INPUT
            pGPValue            : IGPValue*'''
        return super(IDEUtilities, self).Delete(pGPValue)
    def Rename(self, pSourceGPValue, pTargetGPValue):
        '''Method IDEUtilities.Rename

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IDEUtilities, self).Rename(pSourceGPValue, pTargetGPValue)
    def Copy(self, pSourceGPValue, pTargetGPValue):
        '''Method IDEUtilities.Copy

           INPUTS
            pSourceGPValue      : IGPValue*
            pTargetGPValue      : IGPValue*'''
        return super(IDEUtilities, self).Copy(pSourceGPValue, pTargetGPValue)
    def Exists(self, pGPValue):
        '''Method IDEUtilities.Exists

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IDEUtilities, self).Exists(pGPValue)
    def CompareWildCard(self, wildCard, Data):
        '''Method IDEUtilities.CompareWildCard

           INPUTS
            wildCard            : BSTR
            Data                : BSTR

           OUTPUT
            matched             : VARIANT_BOOL*'''
        return super(IDEUtilities, self).CompareWildCard(wildCard, Data)
    def GetNameObject(self, pDataElement):
        '''Method IDEUtilities.GetNameObject

           INPUT
            pDataElement        : IDataElement*

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilities, self).GetNameObject(pDataElement)
    def GetNameObjectFromLocation(self, locationMoniker, pDataType):
        '''Method IDEUtilities.GetNameObjectFromLocation

           INPUTS
            locationMoniker     : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilities, self).GetNameObjectFromLocation(locationMoniker, pDataType)
    def GetGxObjectFromLocation(self, catalogPath, pDataType):
        '''Method IDEUtilities.GetGxObjectFromLocation

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IDEUtilities, self).GetGxObjectFromLocation(catalogPath, pDataType)
    def ParseName(self, catalogPath, pName):
        '''Method IDEUtilities.ParseName

           INPUTS
            catalogPath         : BSTR
            pName               : BSTR*'''
        return super(IDEUtilities, self).ParseName(catalogPath, pName)
    def ParseContainer(self, catalogPath, pContainer):
        '''Method IDEUtilities.ParseContainer

           INPUTS
            catalogPath         : BSTR
            pContainer          : BSTR*'''
        return super(IDEUtilities, self).ParseContainer(catalogPath, pContainer)
    def ReleaseInternals(self):
        '''Method IDEUtilities.ReleaseInternals'''
        return super(IDEUtilities, self).ReleaseInternals()
    def GetGxObject(self, pDataTlement):
        '''Method IDEUtilities.GetGxObject

           INPUT
            pDataTlement        : IDataElement*

           OUTPUT
            ppGxObject          : IUnknown**'''
        return super(IDEUtilities, self).GetGxObject(pDataTlement)
    def GetGxObjects(self, catalogPath):
        '''Method IDEUtilities.GetGxObjects

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IDEUtilities, self).GetGxObjects(catalogPath)
    def MakeDataElements(self, catalogPath, pBrowseOptions):
        '''Method IDEUtilities.MakeDataElements

           INPUTS
            catalogPath         : BSTR
            pBrowseOptions      : IDEBrowseOptions*

           OUTPUT
            ppObjects           : IArray**'''
        return super(IDEUtilities, self).MakeDataElements(catalogPath, pBrowseOptions)
    Catalog = property(get_Catalog, None, None)
    RefreshCatalogParent = property(get_RefreshCatalogParent, put_RefreshCatalogParent, None)
    Workspace = property(get_Workspace, put_Workspace, None)

class IGPLayerSupport(_esriGeoprocessing.IGPLayerSupport):
    _IID = uuid.UUID('9029aac3-ebd3-4fa9-a9f8-8153775c870c')
    def MakeGPLayer(self, pLayer):
        '''Method IGPLayerSupport.MakeGPLayer

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppGPLayer           : IGPLayer**'''
        return super(IGPLayerSupport, self).MakeGPLayer(pLayer)
    def MakeLayer(self, pValue, Name, pRenderer):
        '''Method IGPLayerSupport.MakeLayer

           INPUTS
            pValue              : IGPValue*
            Name                : BSTR
            pRenderer           : IUnknown*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPLayerSupport, self).MakeLayer(pValue, Name, pRenderer)

class IGPValueExpression(_esriGeoprocessing.IGPValueExpression):
    _IID = uuid.UUID('1ac0728d-8da6-4592-bcf9-7c3027f51f38')

    def __init__(self, *args, **kw):
        super(IGPValueExpression, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Resolved(self):
        '''Method IGPValueExpression.get_Resolved

           OUTPUT
            pResolved           : VARIANT_BOOL*'''
        return super(IGPValueExpression, self).get_Resolved()
    def put_Resolved(self, pResolved):
        '''Method IGPValueExpression.put_Resolved

           INPUT
            pResolved           : VARIANT_BOOL'''
        return super(IGPValueExpression, self).put_Resolved(pResolved)
    def ResolveValue(self, pVariableManager):
        '''Method IGPValueExpression.ResolveValue

           INPUT
            pVariableManager    : IGPVariableManager*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPValueExpression, self).ResolveValue(pVariableManager)
    def GetVariableNames(self):
        '''Method IGPValueExpression.GetVariableNames

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IGPValueExpression, self).GetVariableNames()
    def get_Variables(self):
        '''Method IGPValueExpression.get_Variables

           OUTPUT
            ppVariables         : IArray**'''
        return super(IGPValueExpression, self).get_Variables()
    def putref_Variables(self, ppVariables):
        '''Method IGPValueExpression.putref_Variables

           INPUT
            ppVariables         : IArray*'''
        return super(IGPValueExpression, self).putref_Variables(ppVariables)
    def GetAsText(self, pVariableManager):
        '''Method IGPValueExpression.GetAsText

           INPUT
            pVariableManager    : IGPVariableManager*

           OUTPUT
            pText               : BSTR*'''
        return super(IGPValueExpression, self).GetAsText(pVariableManager)
    Resolved = property(get_Resolved, put_Resolved, None)
    Variables = property(get_Variables, putref_Variables, None)

class IGPCreateTiles(_esriGeoprocessing.IGPCreateTiles):
    _IID = uuid.UUID('fce175fa-bc70-4973-9a8d-15b1ed8435a1')
    def CreateTiles(self, pInputs):
        '''Method IGPCreateTiles.CreateTiles

           INPUT
            pInputs             : IArray*'''
        return super(IGPCreateTiles, self).CreateTiles(pInputs)
    def CreateTilesByPercentage(self, pInputs, ratio):
        '''Method IGPCreateTiles.CreateTilesByPercentage

           INPUTS
            pInputs             : IArray*
            ratio               : double'''
        return super(IGPCreateTiles, self).CreateTilesByPercentage(pInputs, ratio)
    def Reset(self):
        '''Method IGPCreateTiles.Reset'''
        return super(IGPCreateTiles, self).Reset()
    def GetNextTile(self):
        '''Method IGPCreateTiles.GetNextTile

           OUTPUT
            ppTileEnv           : IEnvelope**'''
        return super(IGPCreateTiles, self).GetNextTile()

class IGPRecordSet(_esriGeoprocessing.IGPRecordSet):
    _IID = uuid.UUID('23a1155c-92fb-4fcd-871c-a7ffb9b326ab')

    def __init__(self, *args, **kw):
        super(IGPRecordSet, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RecordSet(self):
        '''Method IGPRecordSet.get_RecordSet

           OUTPUT
            ppRs                : IRecordSet**'''
        return super(IGPRecordSet, self).get_RecordSet()
    def putref_RecordSet(self, ppRs):
        '''Method IGPRecordSet.putref_RecordSet

           INPUT
            ppRs                : IRecordSet*'''
        return super(IGPRecordSet, self).putref_RecordSet(ppRs)
    def get_OIDFieldName(self):
        '''Method IGPRecordSet.get_OIDFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPRecordSet, self).get_OIDFieldName()
    def put_OIDFieldName(self, Name):
        '''Method IGPRecordSet.put_OIDFieldName

           INPUT
            Name                : BSTR'''
        return super(IGPRecordSet, self).put_OIDFieldName(Name)
    def get_ExceededTransferLimit(self):
        '''Method IGPRecordSet.get_ExceededTransferLimit

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IGPRecordSet, self).get_ExceededTransferLimit()
    def put_ExceededTransferLimit(self, flag):
        '''Method IGPRecordSet.put_ExceededTransferLimit

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IGPRecordSet, self).put_ExceededTransferLimit(flag)
    ExceededTransferLimit = property(get_ExceededTransferLimit, put_ExceededTransferLimit, None)
    OIDFieldName = property(get_OIDFieldName, put_OIDFieldName, None)
    RecordSet = property(get_RecordSet, putref_RecordSet, None)

class IGPFeatureRecordSet(_esriGeoprocessing.IGPFeatureRecordSet):
    _IID = uuid.UUID('ff17ec66-8c89-4fbb-882d-483f4dd37065')

    def __init__(self, *args, **kw):
        super(IGPFeatureRecordSet, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShapeFieldName(self):
        '''Method IGPFeatureRecordSet.get_ShapeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPFeatureRecordSet, self).get_ShapeFieldName()
    def put_ShapeFieldName(self, Name):
        '''Method IGPFeatureRecordSet.put_ShapeFieldName

           INPUT
            Name                : BSTR'''
        return super(IGPFeatureRecordSet, self).put_ShapeFieldName(Name)
    ShapeFieldName = property(get_ShapeFieldName, put_ShapeFieldName, None)

class IGPRasterData(_esriGeoprocessing.IGPRasterData):
    _IID = uuid.UUID('d49252e7-ffe3-4ff5-af8e-789ddf5c27d1')

    def __init__(self, *args, **kw):
        super(IGPRasterData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Data(self):
        '''Method IGPRasterData.get_Data

           OUTPUT
            ppData              : IGDSData**'''
        return super(IGPRasterData, self).get_Data()
    def putref_Data(self, ppData):
        '''Method IGPRasterData.putref_Data

           INPUT
            ppData              : IGDSData*'''
        return super(IGPRasterData, self).putref_Data(ppData)
    def get_Format(self):
        '''Method IGPRasterData.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IGPRasterData, self).get_Format()
    def put_Format(self, Format):
        '''Method IGPRasterData.put_Format

           INPUT
            Format              : BSTR'''
        return super(IGPRasterData, self).put_Format(Format)
    Data = property(get_Data, putref_Data, None)
    Format = property(get_Format, put_Format, None)

class IGPLayerDescription(_esriGeoprocessing.IGPLayerDescription):
    _IID = uuid.UUID('36c58bcc-44b2-443f-80db-a6be31f31e41')

    def __init__(self, *args, **kw):
        super(IGPLayerDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LayerDrawingDescription(self):
        '''Method IGPLayerDescription.get_LayerDrawingDescription

           OUTPUT
            ppDesc              : ILayerDrawingDescription**'''
        return super(IGPLayerDescription, self).get_LayerDrawingDescription()
    def putref_LayerDrawingDescription(self, ppDesc):
        '''Method IGPLayerDescription.putref_LayerDrawingDescription

           INPUT
            ppDesc              : ILayerDrawingDescription*'''
        return super(IGPLayerDescription, self).putref_LayerDrawingDescription(ppDesc)
    def GetRenderer(self):
        '''Method IGPLayerDescription.GetRenderer

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IGPLayerDescription, self).GetRenderer()
    LayerDrawingDescription = property(get_LayerDrawingDescription, putref_LayerDrawingDescription, None)

class IGPDataFile(_esriGeoprocessing.IGPDataFile):
    _IID = uuid.UUID('b3397f01-2785-4ca3-9b30-283b88de8aa0')

    def __init__(self, *args, **kw):
        super(IGPDataFile, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Data(self):
        '''Method IGPDataFile.get_Data

           OUTPUT
            ppData              : IGDSData**'''
        return super(IGPDataFile, self).get_Data()
    def putref_Data(self, ppData):
        '''Method IGPDataFile.putref_Data

           INPUT
            ppData              : IGDSData*'''
        return super(IGPDataFile, self).putref_Data(ppData)
    def get_File(self):
        '''Method IGPDataFile.get_File

           OUTPUT
            File                : BSTR*'''
        return super(IGPDataFile, self).get_File()
    def put_File(self, File):
        '''Method IGPDataFile.put_File

           INPUT
            File                : BSTR'''
        return super(IGPDataFile, self).put_File(File)
    def get_DatasetName(self):
        '''Method IGPDataFile.get_DatasetName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPDataFile, self).get_DatasetName()
    def put_DatasetName(self, Name):
        '''Method IGPDataFile.put_DatasetName

           INPUT
            Name                : BSTR'''
        return super(IGPDataFile, self).put_DatasetName(Name)
    def get_DataType(self):
        '''Method IGPDataFile.get_DataType

           OUTPUT
            Type                : BSTR*'''
        return super(IGPDataFile, self).get_DataType()
    def put_DataType(self, Type):
        '''Method IGPDataFile.put_DataType

           INPUT
            Type                : BSTR'''
        return super(IGPDataFile, self).put_DataType(Type)
    Data = property(get_Data, putref_Data, None)
    DataType = property(get_DataType, put_DataType, None)
    DatasetName = property(get_DatasetName, put_DatasetName, None)
    File = property(get_File, put_File, None)

class IGPRasterBuilder(_esriGeoprocessing.IGPRasterBuilder):
    _IID = uuid.UUID('cee2318a-ee01-454f-8aaf-ade9e4df9ad6')

    def __init__(self, *args, **kw):
        super(IGPRasterBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterType(self):
        '''Method IGPRasterBuilder.get_RasterType

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IGPRasterBuilder, self).get_RasterType()
    def putref_RasterType(self, ppRasterType):
        '''Method IGPRasterBuilder.putref_RasterType

           INPUT
            ppRasterType        : IRasterType*'''
        return super(IGPRasterBuilder, self).putref_RasterType(ppRasterType)
    RasterType = property(get_RasterType, putref_RasterType, None)

class IGPCellSizeXY(_esriGeoprocessing.IGPCellSizeXY):
    _IID = uuid.UUID('a177e2ec-b7e2-45f6-acc1-558c91049417')

    def __init__(self, *args, **kw):
        super(IGPCellSizeXY, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_X(self):
        '''Method IGPCellSizeXY.get_X

           OUTPUT
            X                   : double*'''
        return super(IGPCellSizeXY, self).get_X()
    def put_X(self, X):
        '''Method IGPCellSizeXY.put_X

           INPUT
            X                   : double'''
        return super(IGPCellSizeXY, self).put_X(X)
    def get_Y(self):
        '''Method IGPCellSizeXY.get_Y

           OUTPUT
            Y                   : double*'''
        return super(IGPCellSizeXY, self).get_Y()
    def put_Y(self, Y):
        '''Method IGPCellSizeXY.put_Y

           INPUT
            Y                   : double'''
        return super(IGPCellSizeXY, self).put_Y(Y)
    X = property(get_X, put_X, None)
    Y = property(get_Y, put_Y, None)

class IGPTest(_esriGeoprocessing.IGPTest):
    _IID = uuid.UUID('029325c4-ed3b-4f7e-a172-1984a828c90b')
    def GetDataTypeNameObjects(self):
        '''Method IGPTest.GetDataTypeNameObjects

           OUTPUT
            gpNames             : IArray**'''
        return super(IGPTest, self).GetDataTypeNameObjects()
    def GetFunctionNameObjects(self):
        '''Method IGPTest.GetFunctionNameObjects

           OUTPUT
            gpNames             : IArray**'''
        return super(IGPTest, self).GetFunctionNameObjects()

class IMdDisplayNode(_esriGeoprocessing.IMdDisplayNode):
    _IID = uuid.UUID('42e93dc0-7581-4362-8d5c-d3f6e7295398')

    def __init__(self, *args, **kw):
        super(IMdDisplayNode, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Shape(self):
        '''Method IMdDisplayNode.get_Shape

           OUTPUT
            pShape              : esriModelDiagramNodeShape*'''
        return super(IMdDisplayNode, self).get_Shape()
    def put_Shape(self, pShape):
        '''Method IMdDisplayNode.put_Shape

           INPUT
            pShape              : esriModelDiagramNodeShape'''
        return super(IMdDisplayNode, self).put_Shape(pShape)
    def get_Height(self):
        '''Method IMdDisplayNode.get_Height

           OUTPUT
            pHeight             : long*'''
        return super(IMdDisplayNode, self).get_Height()
    def put_Height(self, pHeight):
        '''Method IMdDisplayNode.put_Height

           INPUT
            pHeight             : long'''
        return super(IMdDisplayNode, self).put_Height(pHeight)
    def get_Width(self):
        '''Method IMdDisplayNode.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IMdDisplayNode, self).get_Width()
    def put_Width(self, pWidth):
        '''Method IMdDisplayNode.put_Width

           INPUT
            pWidth              : long'''
        return super(IMdDisplayNode, self).put_Width(pWidth)
    def get_TextFont(self):
        '''Method IMdDisplayNode.get_TextFont

           OUTPUT
            ppFont              : IFont**'''
        return super(IMdDisplayNode, self).get_TextFont()
    def putref_TextFont(self, ppFont):
        '''Method IMdDisplayNode.putref_TextFont

           INPUT
            ppFont              : IFont*'''
        return super(IMdDisplayNode, self).putref_TextFont(ppFont)
    def get_TextColor(self):
        '''Method IMdDisplayNode.get_TextColor

           OUTPUT
            pColor              : long*'''
        return super(IMdDisplayNode, self).get_TextColor()
    def put_TextColor(self, pColor):
        '''Method IMdDisplayNode.put_TextColor

           INPUT
            pColor              : long'''
        return super(IMdDisplayNode, self).put_TextColor(pColor)
    def get_BackgroundColor(self):
        '''Method IMdDisplayNode.get_BackgroundColor

           OUTPUT
            pColor              : long*'''
        return super(IMdDisplayNode, self).get_BackgroundColor()
    def put_BackgroundColor(self, pColor):
        '''Method IMdDisplayNode.put_BackgroundColor

           INPUT
            pColor              : long'''
        return super(IMdDisplayNode, self).put_BackgroundColor(pColor)
    def get_OutlineColor(self):
        '''Method IMdDisplayNode.get_OutlineColor

           OUTPUT
            pColor              : long*'''
        return super(IMdDisplayNode, self).get_OutlineColor()
    def put_OutlineColor(self, pColor):
        '''Method IMdDisplayNode.put_OutlineColor

           INPUT
            pColor              : long'''
        return super(IMdDisplayNode, self).put_OutlineColor(pColor)
    def get_OutlineWidth(self):
        '''Method IMdDisplayNode.get_OutlineWidth

           OUTPUT
            pWidth              : long*'''
        return super(IMdDisplayNode, self).get_OutlineWidth()
    def put_OutlineWidth(self, pWidth):
        '''Method IMdDisplayNode.put_OutlineWidth

           INPUT
            pWidth              : long'''
        return super(IMdDisplayNode, self).put_OutlineWidth(pWidth)
    def get_ShowShadow(self):
        '''Method IMdDisplayNode.get_ShowShadow

           OUTPUT
            pShowShadow         : VARIANT_BOOL*'''
        return super(IMdDisplayNode, self).get_ShowShadow()
    def put_ShowShadow(self, pShowShadow):
        '''Method IMdDisplayNode.put_ShowShadow

           INPUT
            pShowShadow         : VARIANT_BOOL'''
        return super(IMdDisplayNode, self).put_ShowShadow(pShowShadow)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    Height = property(get_Height, put_Height, None)
    OutlineColor = property(get_OutlineColor, put_OutlineColor, None)
    OutlineWidth = property(get_OutlineWidth, put_OutlineWidth, None)
    Shape = property(get_Shape, put_Shape, None)
    ShowShadow = property(get_ShowShadow, put_ShowShadow, None)
    TextColor = property(get_TextColor, put_TextColor, None)
    TextFont = property(get_TextFont, putref_TextFont, None)
    Width = property(get_Width, put_Width, None)

class IMdDisplayEdge(_esriGeoprocessing.IMdDisplayEdge):
    _IID = uuid.UUID('8b9cf82f-0f27-4fb1-bf5a-27587726747e')

    def __init__(self, *args, **kw):
        super(IMdDisplayEdge, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Color(self):
        '''Method IMdDisplayEdge.get_Color

           OUTPUT
            pColor              : long*'''
        return super(IMdDisplayEdge, self).get_Color()
    def put_Color(self, pColor):
        '''Method IMdDisplayEdge.put_Color

           INPUT
            pColor              : long'''
        return super(IMdDisplayEdge, self).put_Color(pColor)
    def get_Width(self):
        '''Method IMdDisplayEdge.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IMdDisplayEdge, self).get_Width()
    def put_Width(self, pWidth):
        '''Method IMdDisplayEdge.put_Width

           INPUT
            pWidth              : long'''
        return super(IMdDisplayEdge, self).put_Width(pWidth)
    def get_Direction(self):
        '''Method IMdDisplayEdge.get_Direction

           OUTPUT
            pDirection          : long*'''
        return super(IMdDisplayEdge, self).get_Direction()
    def put_Direction(self, pDirection):
        '''Method IMdDisplayEdge.put_Direction

           INPUT
            pDirection          : long'''
        return super(IMdDisplayEdge, self).put_Direction(pDirection)
    def get_NonLeveling(self):
        '''Method IMdDisplayEdge.get_NonLeveling

           OUTPUT
            pNonLeveling        : VARIANT_BOOL*'''
        return super(IMdDisplayEdge, self).get_NonLeveling()
    def put_NonLeveling(self, pNonLeveling):
        '''Method IMdDisplayEdge.put_NonLeveling

           INPUT
            pNonLeveling        : VARIANT_BOOL'''
        return super(IMdDisplayEdge, self).put_NonLeveling(pNonLeveling)
    def get_Style(self):
        '''Method IMdDisplayEdge.get_Style

           OUTPUT
            pStyle              : esriModelDiagramEdgeStyle*'''
        return super(IMdDisplayEdge, self).get_Style()
    def put_Style(self, pStyle):
        '''Method IMdDisplayEdge.put_Style

           INPUT
            pStyle              : esriModelDiagramEdgeStyle'''
        return super(IMdDisplayEdge, self).put_Style(pStyle)
    Color = property(get_Color, put_Color, None)
    Direction = property(get_Direction, put_Direction, None)
    NonLeveling = property(get_NonLeveling, put_NonLeveling, None)
    Style = property(get_Style, put_Style, None)
    Width = property(get_Width, put_Width, None)

class IMdDiagramProperties(_esriGeoprocessing.IMdDiagramProperties):
    _IID = uuid.UUID('46d9fdb4-21c9-46a7-8440-0234d1ebe62b')

    def __init__(self, *args, **kw):
        super(IMdDiagramProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetDisplayNode(self, nodeType):
        '''Method IMdDiagramProperties.GetDisplayNode

           INPUT
            nodeType            : esriModelDiagramNodeType

           OUTPUT
            ppDisplayNode       : IMdDisplayNode**'''
        return super(IMdDiagramProperties, self).GetDisplayNode(nodeType)
    def SetDisplayNode(self, nodeType, pDisplayNode):
        '''Method IMdDiagramProperties.SetDisplayNode

           INPUTS
            nodeType            : esriModelDiagramNodeType
            pDisplayNode        : IMdDisplayNode*'''
        return super(IMdDiagramProperties, self).SetDisplayNode(nodeType, pDisplayNode)
    def GetDisplayEdge(self, edgeType):
        '''Method IMdDiagramProperties.GetDisplayEdge

           INPUT
            edgeType            : esriMdConnectionType

           OUTPUT
            ppDisplayEdge       : IMdDisplayEdge**'''
        return super(IMdDiagramProperties, self).GetDisplayEdge(edgeType)
    def SetDisplayEdge(self, edgeType, pDisplayEdge):
        '''Method IMdDiagramProperties.SetDisplayEdge

           INPUTS
            edgeType            : esriMdConnectionType
            pDisplayEdge        : IMdDisplayEdge*'''
        return super(IMdDiagramProperties, self).SetDisplayEdge(edgeType, pDisplayEdge)
    def get_VariableLevelSpacing(self):
        '''Method IMdDiagramProperties.get_VariableLevelSpacing

           OUTPUT
            pVariableLevelSpacing: VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_VariableLevelSpacing()
    def put_VariableLevelSpacing(self, pVariableLevelSpacing):
        '''Method IMdDiagramProperties.put_VariableLevelSpacing

           INPUT
            pVariableLevelSpacing: VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_VariableLevelSpacing(pVariableLevelSpacing)
    def get_LevelSpacing(self):
        '''Method IMdDiagramProperties.get_LevelSpacing

           OUTPUT
            pLevelSpacing       : long*'''
        return super(IMdDiagramProperties, self).get_LevelSpacing()
    def put_LevelSpacing(self, pLevelSpacing):
        '''Method IMdDiagramProperties.put_LevelSpacing

           INPUT
            pLevelSpacing       : long'''
        return super(IMdDiagramProperties, self).put_LevelSpacing(pLevelSpacing)
    def get_NodeSpacing(self):
        '''Method IMdDiagramProperties.get_NodeSpacing

           OUTPUT
            pNodeSpacing        : long*'''
        return super(IMdDiagramProperties, self).get_NodeSpacing()
    def put_NodeSpacing(self, pNodeSpacing):
        '''Method IMdDiagramProperties.put_NodeSpacing

           INPUT
            pNodeSpacing        : long'''
        return super(IMdDiagramProperties, self).put_NodeSpacing(pNodeSpacing)
    def get_MinimumSlopePercent(self):
        '''Method IMdDiagramProperties.get_MinimumSlopePercent

           OUTPUT
            pMinimumSlopePercent: long*'''
        return super(IMdDiagramProperties, self).get_MinimumSlopePercent()
    def put_MinimumSlopePercent(self, pMinimumSlopePercent):
        '''Method IMdDiagramProperties.put_MinimumSlopePercent

           INPUT
            pMinimumSlopePercent: long'''
        return super(IMdDiagramProperties, self).put_MinimumSlopePercent(pMinimumSlopePercent)
    def get_UseMinimumSlope(self):
        '''Method IMdDiagramProperties.get_UseMinimumSlope

           OUTPUT
            pUseMinimumSlope    : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_UseMinimumSlope()
    def put_UseMinimumSlope(self, pUseMinimumSlope):
        '''Method IMdDiagramProperties.put_UseMinimumSlope

           INPUT
            pUseMinimumSlope    : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_UseMinimumSlope(pUseMinimumSlope)
    def get_LayoutQuality(self):
        '''Method IMdDiagramProperties.get_LayoutQuality

           OUTPUT
            pLayoutQuality      : esriModelDiagramLayoutQuality*'''
        return super(IMdDiagramProperties, self).get_LayoutQuality()
    def put_LayoutQuality(self, pLayoutQuality):
        '''Method IMdDiagramProperties.put_LayoutQuality

           INPUT
            pLayoutQuality      : esriModelDiagramLayoutQuality'''
        return super(IMdDiagramProperties, self).put_LayoutQuality(pLayoutQuality)
    def get_LevelOrientation(self):
        '''Method IMdDiagramProperties.get_LevelOrientation

           OUTPUT
            pLevelOrientation   : esriModelDiagramLevelOrientation*'''
        return super(IMdDiagramProperties, self).get_LevelOrientation()
    def put_LevelOrientation(self, pLevelOrientation):
        '''Method IMdDiagramProperties.put_LevelOrientation

           INPUT
            pLevelOrientation   : esriModelDiagramLevelOrientation'''
        return super(IMdDiagramProperties, self).put_LevelOrientation(pLevelOrientation)
    def get_LevelConstraint(self):
        '''Method IMdDiagramProperties.get_LevelConstraint

           OUTPUT
            pLevelConstraint    : esriModelDiagramLevelConstraint*'''
        return super(IMdDiagramProperties, self).get_LevelConstraint()
    def put_LevelConstraint(self, pLevelConstraint):
        '''Method IMdDiagramProperties.put_LevelConstraint

           INPUT
            pLevelConstraint    : esriModelDiagramLevelConstraint'''
        return super(IMdDiagramProperties, self).put_LevelConstraint(pLevelConstraint)
    def get_LevelAlignment(self):
        '''Method IMdDiagramProperties.get_LevelAlignment

           OUTPUT
            pLevelAlignment     : esriModelDiagramLevelAlignment*'''
        return super(IMdDiagramProperties, self).get_LevelAlignment()
    def put_LevelAlignment(self, pLevelAlignment):
        '''Method IMdDiagramProperties.put_LevelAlignment

           INPUT
            pLevelAlignment     : esriModelDiagramLevelAlignment'''
        return super(IMdDiagramProperties, self).put_LevelAlignment(pLevelAlignment)
    def get_OrthogonalRouting(self):
        '''Method IMdDiagramProperties.get_OrthogonalRouting

           OUTPUT
            pOrthogonalRouting  : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_OrthogonalRouting()
    def put_OrthogonalRouting(self, pOrthogonalRouting):
        '''Method IMdDiagramProperties.put_OrthogonalRouting

           INPUT
            pOrthogonalRouting  : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_OrthogonalRouting(pOrthogonalRouting)
    def get_VerticalEdgeSpacing(self):
        '''Method IMdDiagramProperties.get_VerticalEdgeSpacing

           OUTPUT
            pVerticalEdgeSpacing: long*'''
        return super(IMdDiagramProperties, self).get_VerticalEdgeSpacing()
    def put_VerticalEdgeSpacing(self, pVerticalEdgeSpacing):
        '''Method IMdDiagramProperties.put_VerticalEdgeSpacing

           INPUT
            pVerticalEdgeSpacing: long'''
        return super(IMdDiagramProperties, self).put_VerticalEdgeSpacing(pVerticalEdgeSpacing)
    def get_HorizontalEdgeSpacing(self):
        '''Method IMdDiagramProperties.get_HorizontalEdgeSpacing

           OUTPUT
            pHorizontalEdgeSpacing: long*'''
        return super(IMdDiagramProperties, self).get_HorizontalEdgeSpacing()
    def put_HorizontalEdgeSpacing(self, pHorizontalEdgeSpacing):
        '''Method IMdDiagramProperties.put_HorizontalEdgeSpacing

           INPUT
            pHorizontalEdgeSpacing: long'''
        return super(IMdDiagramProperties, self).put_HorizontalEdgeSpacing(pHorizontalEdgeSpacing)
    def get_MergeEdgeChannels(self):
        '''Method IMdDiagramProperties.get_MergeEdgeChannels

           OUTPUT
            pMergeEdgeChannels  : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_MergeEdgeChannels()
    def put_MergeEdgeChannels(self, pMergeEdgeChannels):
        '''Method IMdDiagramProperties.put_MergeEdgeChannels

           INPUT
            pMergeEdgeChannels  : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_MergeEdgeChannels(pMergeEdgeChannels)
    def get_IncrementalLayout(self):
        '''Method IMdDiagramProperties.get_IncrementalLayout

           OUTPUT
            pIncrementalLayout  : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_IncrementalLayout()
    def put_IncrementalLayout(self, pIncrementalLayout):
        '''Method IMdDiagramProperties.put_IncrementalLayout

           INPUT
            pIncrementalLayout  : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_IncrementalLayout(pIncrementalLayout)
    def get_AutoLayout(self):
        '''Method IMdDiagramProperties.get_AutoLayout

           OUTPUT
            pAutoLayout         : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_AutoLayout()
    def put_AutoLayout(self, pAutoLayout):
        '''Method IMdDiagramProperties.put_AutoLayout

           INPUT
            pAutoLayout         : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_AutoLayout(pAutoLayout)
    def get_ShowGrid(self):
        '''Method IMdDiagramProperties.get_ShowGrid

           OUTPUT
            pShowGrid           : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_ShowGrid()
    def put_ShowGrid(self, pShowGrid):
        '''Method IMdDiagramProperties.put_ShowGrid

           INPUT
            pShowGrid           : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_ShowGrid(pShowGrid)
    def get_GridType(self):
        '''Method IMdDiagramProperties.get_GridType

           OUTPUT
            pGridType           : esriModelDiagramGridType*'''
        return super(IMdDiagramProperties, self).get_GridType()
    def put_GridType(self, pGridType):
        '''Method IMdDiagramProperties.put_GridType

           INPUT
            pGridType           : esriModelDiagramGridType'''
        return super(IMdDiagramProperties, self).put_GridType(pGridType)
    def get_GridSize(self):
        '''Method IMdDiagramProperties.get_GridSize

           OUTPUT
            pGridSize           : long*'''
        return super(IMdDiagramProperties, self).get_GridSize()
    def put_GridSize(self, pGridSize):
        '''Method IMdDiagramProperties.put_GridSize

           INPUT
            pGridSize           : long'''
        return super(IMdDiagramProperties, self).put_GridSize(pGridSize)
    def get_ReduceCrossings(self):
        '''Method IMdDiagramProperties.get_ReduceCrossings

           OUTPUT
            pReduceCrossings    : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_ReduceCrossings()
    def put_ReduceCrossings(self, pReduceCrossings):
        '''Method IMdDiagramProperties.put_ReduceCrossings

           INPUT
            pReduceCrossings    : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_ReduceCrossings(pReduceCrossings)
    def get_RespectFlow(self):
        '''Method IMdDiagramProperties.get_RespectFlow

           OUTPUT
            pRespectFlow        : VARIANT_BOOL*'''
        return super(IMdDiagramProperties, self).get_RespectFlow()
    def put_RespectFlow(self, pRespectFlow):
        '''Method IMdDiagramProperties.put_RespectFlow

           INPUT
            pRespectFlow        : VARIANT_BOOL'''
        return super(IMdDiagramProperties, self).put_RespectFlow(pRespectFlow)
    def get_SelectedColor(self):
        '''Method IMdDiagramProperties.get_SelectedColor

           OUTPUT
            pSelectedColor      : long*'''
        return super(IMdDiagramProperties, self).get_SelectedColor()
    def put_SelectedColor(self, pSelectedColor):
        '''Method IMdDiagramProperties.put_SelectedColor

           INPUT
            pSelectedColor      : long'''
        return super(IMdDiagramProperties, self).put_SelectedColor(pSelectedColor)
    def get_GridLineColor(self):
        '''Method IMdDiagramProperties.get_GridLineColor

           OUTPUT
            pColor              : long*'''
        return super(IMdDiagramProperties, self).get_GridLineColor()
    def put_GridLineColor(self, pColor):
        '''Method IMdDiagramProperties.put_GridLineColor

           INPUT
            pColor              : long'''
        return super(IMdDiagramProperties, self).put_GridLineColor(pColor)
    def get_GridPointColor(self):
        '''Method IMdDiagramProperties.get_GridPointColor

           OUTPUT
            pColor              : long*'''
        return super(IMdDiagramProperties, self).get_GridPointColor()
    def put_GridPointColor(self, pColor):
        '''Method IMdDiagramProperties.put_GridPointColor

           INPUT
            pColor              : long'''
        return super(IMdDiagramProperties, self).put_GridPointColor(pColor)
    AutoLayout = property(get_AutoLayout, put_AutoLayout, None)
    GridLineColor = property(get_GridLineColor, put_GridLineColor, None)
    GridPointColor = property(get_GridPointColor, put_GridPointColor, None)
    GridSize = property(get_GridSize, put_GridSize, None)
    GridType = property(get_GridType, put_GridType, None)
    HorizontalEdgeSpacing = property(get_HorizontalEdgeSpacing, put_HorizontalEdgeSpacing, None)
    IncrementalLayout = property(get_IncrementalLayout, put_IncrementalLayout, None)
    LayoutQuality = property(get_LayoutQuality, put_LayoutQuality, None)
    LevelAlignment = property(get_LevelAlignment, put_LevelAlignment, None)
    LevelConstraint = property(get_LevelConstraint, put_LevelConstraint, None)
    LevelOrientation = property(get_LevelOrientation, put_LevelOrientation, None)
    LevelSpacing = property(get_LevelSpacing, put_LevelSpacing, None)
    MergeEdgeChannels = property(get_MergeEdgeChannels, put_MergeEdgeChannels, None)
    MinimumSlopePercent = property(get_MinimumSlopePercent, put_MinimumSlopePercent, None)
    NodeSpacing = property(get_NodeSpacing, put_NodeSpacing, None)
    OrthogonalRouting = property(get_OrthogonalRouting, put_OrthogonalRouting, None)
    ReduceCrossings = property(get_ReduceCrossings, put_ReduceCrossings, None)
    RespectFlow = property(get_RespectFlow, put_RespectFlow, None)
    SelectedColor = property(get_SelectedColor, put_SelectedColor, None)
    ShowGrid = property(get_ShowGrid, put_ShowGrid, None)
    UseMinimumSlope = property(get_UseMinimumSlope, put_UseMinimumSlope, None)
    VariableLevelSpacing = property(get_VariableLevelSpacing, put_VariableLevelSpacing, None)
    VerticalEdgeSpacing = property(get_VerticalEdgeSpacing, put_VerticalEdgeSpacing, None)

class IMdVariable2(_esriGeoprocessing.IMdVariable2):
    _IID = uuid.UUID('a3ec5e23-1ffa-445b-b216-559252a91cfd')

    def __init__(self, *args, **kw):
        super(IMdVariable2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TemplateLayer(self):
        '''Method IMdVariable2.get_TemplateLayer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IMdVariable2, self).get_TemplateLayer()
    def putref_TemplateLayer(self, ppLayer):
        '''Method IMdVariable2.putref_TemplateLayer

           INPUT
            ppLayer             : ILayer*'''
        return super(IMdVariable2, self).putref_TemplateLayer(ppLayer)
    TemplateLayer = property(get_TemplateLayer, putref_TemplateLayer, None)

class IMdVariable3(_esriGeoprocessing.IMdVariable3):
    _IID = uuid.UUID('d581f2ca-e5c6-4aaf-bb56-4a1af5934128')

    def __init__(self, *args, **kw):
        super(IMdVariable3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TemplateLayerFile(self):
        '''Method IMdVariable3.get_TemplateLayerFile

           OUTPUT
            pLayer              : BSTR*'''
        return super(IMdVariable3, self).get_TemplateLayerFile()
    def put_TemplateLayerFile(self, pLayer):
        '''Method IMdVariable3.put_TemplateLayerFile

           INPUT
            pLayer              : BSTR'''
        return super(IMdVariable3, self).put_TemplateLayerFile(pLayer)
    TemplateLayerFile = property(get_TemplateLayerFile, put_TemplateLayerFile, None)

class IMdList(_esriGeoprocessing.IMdList):
    _IID = uuid.UUID('9c5185c9-dfdd-4452-9f64-5ba4803dbd6f')

    def __init__(self, *args, **kw):
        super(IMdList, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ListType(self):
        '''Method IMdList.get_ListType

           OUTPUT
            Type                : esriMdListType*'''
        return super(IMdList, self).get_ListType()
    def put_ListType(self, Type):
        '''Method IMdList.put_ListType

           INPUT
            Type                : esriMdListType'''
        return super(IMdList, self).put_ListType(Type)
    def get_CurrentIndex(self):
        '''Method IMdList.get_CurrentIndex

           OUTPUT
            Index               : long*'''
        return super(IMdList, self).get_CurrentIndex()
    def put_CurrentIndex(self, Index):
        '''Method IMdList.put_CurrentIndex

           INPUT
            Index               : long'''
        return super(IMdList, self).put_CurrentIndex(Index)
    def get_Count(self):
        '''Method IMdList.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMdList, self).get_Count()
    def get_Value(self, Index):
        '''Method IMdList.get_Value

           INPUT
            Index               : long

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IMdList, self).get_Value(Index)
    def putref_Value(self, Index, ppValue):
        '''Method IMdList.putref_Value

           INPUTS
            Index               : long
            ppValue             : IGPValue*'''
        return super(IMdList, self).putref_Value(Index, ppValue)
    def AddValue(self, pValue):
        '''Method IMdList.AddValue

           INPUT
            pValue              : IGPValue*'''
        return super(IMdList, self).AddValue(pValue)
    def InsertValue(self, Index, pValue):
        '''Method IMdList.InsertValue

           INPUTS
            Index               : long
            pValue              : IGPValue*'''
        return super(IMdList, self).InsertValue(Index, pValue)
    def MoveValue(self, Index, Direction):
        '''Method IMdList.MoveValue

           INPUTS
            Index               : long
            Direction           : long'''
        return super(IMdList, self).MoveValue(Index, Direction)
    def RemoveValue(self, Index):
        '''Method IMdList.RemoveValue

           INPUT
            Index               : long'''
        return super(IMdList, self).RemoveValue(Index)
    def RemoveAll(self):
        '''Method IMdList.RemoveAll'''
        return super(IMdList, self).RemoveAll()
    def GetValues(self, bClone):
        '''Method IMdList.GetValues

           INPUT
            bClone              : VARIANT_BOOL

           OUTPUTS
            ppValues            : IArray**
            ppFlags             : ILongArray**'''
        return super(IMdList, self).GetValues(bClone)
    def SetValues(self, pValues, pFlags):
        '''Method IMdList.SetValues

           INPUTS
            pValues             : IArray*
            pFlags              : ILongArray*'''
        return super(IMdList, self).SetValues(pValues, pFlags)
    def get_FeedbackVariable(self):
        '''Method IMdList.get_FeedbackVariable

           OUTPUT
            ppVariable          : IMdVariable**'''
        return super(IMdList, self).get_FeedbackVariable()
    def putref_FeedbackVariable(self, ppVariable):
        '''Method IMdList.putref_FeedbackVariable

           INPUT
            ppVariable          : IMdVariable*'''
        return super(IMdList, self).putref_FeedbackVariable(ppVariable)
    def GetValence(self):
        '''Method IMdList.GetValence

           OUTPUT
            valence             : long*'''
        return super(IMdList, self).GetValence()
    def SetValence(self, valence):
        '''Method IMdList.SetValence

           INPUT
            valence             : long'''
        return super(IMdList, self).SetValence(valence)
    def get_AlteredFlag(self):
        '''Method IMdList.get_AlteredFlag

           OUTPUT
            Altered             : VARIANT_BOOL*'''
        return super(IMdList, self).get_AlteredFlag()
    def put_AlteredFlag(self, Altered):
        '''Method IMdList.put_AlteredFlag

           INPUT
            Altered             : VARIANT_BOOL'''
        return super(IMdList, self).put_AlteredFlag(Altered)
    def GetAlteredFlag(self, Index):
        '''Method IMdList.GetAlteredFlag

           INPUT
            Index               : long

           OUTPUT
            flag                : long*'''
        return super(IMdList, self).GetAlteredFlag(Index)
    def SetAlteredFlag(self, Index, flag):
        '''Method IMdList.SetAlteredFlag

           INPUTS
            Index               : long
            flag                : long'''
        return super(IMdList, self).SetAlteredFlag(Index, flag)
    AlteredFlag = property(get_AlteredFlag, put_AlteredFlag, None)
    Count = property(get_Count, None, None)
    CurrentIndex = property(get_CurrentIndex, put_CurrentIndex, None)
    FeedbackVariable = property(get_FeedbackVariable, putref_FeedbackVariable, None)
    ListType = property(get_ListType, put_ListType, None)
    Value = property(None, putref_Value, None)
    Value = IndexProperty(get_Value, None)

class IMdModelIteration(_esriGeoprocessing.IMdModelIteration):
    _IID = uuid.UUID('843d1afe-9026-486e-8525-d2c8a256c82d')

    def __init__(self, *args, **kw):
        super(IMdModelIteration, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IterationType(self):
        '''Method IMdModelIteration.get_IterationType

           OUTPUT
            Type                : esriMdIterationType*'''
        return super(IMdModelIteration, self).get_IterationType()
    def put_IterationType(self, Type):
        '''Method IMdModelIteration.put_IterationType

           INPUT
            Type                : esriMdIterationType'''
        return super(IMdModelIteration, self).put_IterationType(Type)
    def get_IterationCount(self):
        '''Method IMdModelIteration.get_IterationCount

           OUTPUT
            Count               : long*'''
        return super(IMdModelIteration, self).get_IterationCount()
    def put_IterationCount(self, Count):
        '''Method IMdModelIteration.put_IterationCount

           INPUT
            Count               : long'''
        return super(IMdModelIteration, self).put_IterationCount(Count)
    def get_IterationVariable(self):
        '''Method IMdModelIteration.get_IterationVariable

           OUTPUT
            ppVariable          : IMdVariable**'''
        return super(IMdModelIteration, self).get_IterationVariable()
    def putref_IterationVariable(self, ppVariable):
        '''Method IMdModelIteration.putref_IterationVariable

           INPUT
            ppVariable          : IMdVariable*'''
        return super(IMdModelIteration, self).putref_IterationVariable(ppVariable)
    def get_CurrentIteration(self):
        '''Method IMdModelIteration.get_CurrentIteration

           OUTPUT
            iteration           : long*'''
        return super(IMdModelIteration, self).get_CurrentIteration()
    CurrentIteration = property(get_CurrentIteration, None, None)
    IterationCount = property(get_IterationCount, put_IterationCount, None)
    IterationType = property(get_IterationType, put_IterationType, None)
    IterationVariable = property(get_IterationVariable, putref_IterationVariable, None)

class IMBProgressor(_esriGeoprocessing.IMBProgressor):
    _IID = uuid.UUID('c9501b13-4a34-4ab1-9e81-85d1804cf68c')

    def __init__(self, *args, **kw):
        super(IMBProgressor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ProcessCount(self):
        '''Method IMBProgressor.get_ProcessCount

           OUTPUT
            Count               : long*'''
        return super(IMBProgressor, self).get_ProcessCount()
    def put_ProcessCount(self, Count):
        '''Method IMBProgressor.put_ProcessCount

           INPUT
            Count               : long'''
        return super(IMBProgressor, self).put_ProcessCount(Count)
    def StepProcess(self):
        '''Method IMBProgressor.StepProcess'''
        return super(IMBProgressor, self).StepProcess()
    ProcessCount = property(get_ProcessCount, put_ProcessCount, None)

class IEnumGPToolboxName(_esriGeoprocessing.IEnumGPToolboxName):
    _IID = uuid.UUID('e41ec58c-1448-427f-adb9-79cf7b6f4335')
    def Next(self):
        '''Method IEnumGPToolboxName.Next

           OUTPUT
            Name                : IGPToolboxName**'''
        return super(IEnumGPToolboxName, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPToolboxName, self).Reset()
            val = super(IEnumGPToolboxName, self).Next()
            while val:
                yield val
                val = super(IEnumGPToolboxName, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPToolboxName.Reset'''
        return super(IEnumGPToolboxName, self).Reset()

class IGPParameterInfo(_esriGeoprocessing.IGPParameterInfo):
    _IID = uuid.UUID('cee0770d-1b0f-40a5-aad8-57a40b88b13f')

    def __init__(self, *args, **kw):
        super(IGPParameterInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPParameterInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameterInfo, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPParameterInfo.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPParameterInfo, self).put_Name(Name)
    def get_DisplayName(self):
        '''Method IGPParameterInfo.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameterInfo, self).get_DisplayName()
    def put_DisplayName(self, Name):
        '''Method IGPParameterInfo.put_DisplayName

           INPUT
            Name                : BSTR'''
        return super(IGPParameterInfo, self).put_DisplayName(Name)
    def get_Category(self):
        '''Method IGPParameterInfo.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IGPParameterInfo, self).get_Category()
    def put_Category(self, Category):
        '''Method IGPParameterInfo.put_Category

           INPUT
            Category            : BSTR'''
        return super(IGPParameterInfo, self).put_Category(Category)
    def get_DataType(self):
        '''Method IGPParameterInfo.get_DataType

           OUTPUT
            Type                : BSTR*'''
        return super(IGPParameterInfo, self).get_DataType()
    def put_DataType(self, Type):
        '''Method IGPParameterInfo.put_DataType

           INPUT
            Type                : BSTR'''
        return super(IGPParameterInfo, self).put_DataType(Type)
    def get_Direction(self):
        '''Method IGPParameterInfo.get_Direction

           OUTPUT
            Direction           : esriGPParameterDirection*'''
        return super(IGPParameterInfo, self).get_Direction()
    def put_Direction(self, Direction):
        '''Method IGPParameterInfo.put_Direction

           INPUT
            Direction           : esriGPParameterDirection'''
        return super(IGPParameterInfo, self).put_Direction(Direction)
    def get_ParameterType(self):
        '''Method IGPParameterInfo.get_ParameterType

           OUTPUT
            paramtype           : esriGPParameterType*'''
        return super(IGPParameterInfo, self).get_ParameterType()
    def put_ParameterType(self, paramtype):
        '''Method IGPParameterInfo.put_ParameterType

           INPUT
            paramtype           : esriGPParameterType'''
        return super(IGPParameterInfo, self).put_ParameterType(paramtype)
    def get_ChoiceList(self):
        '''Method IGPParameterInfo.get_ChoiceList

           OUTPUT
            ppChoiceList        : IStringArray**'''
        return super(IGPParameterInfo, self).get_ChoiceList()
    def putref_ChoiceList(self, ppChoiceList):
        '''Method IGPParameterInfo.putref_ChoiceList

           INPUT
            ppChoiceList        : IStringArray*'''
        return super(IGPParameterInfo, self).putref_ChoiceList(ppChoiceList)
    def get_Value(self):
        '''Method IGPParameterInfo.get_Value

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPParameterInfo, self).get_Value()
    def putref_Value(self, ppValue):
        '''Method IGPParameterInfo.putref_Value

           INPUT
            ppValue             : IGPValue*'''
        return super(IGPParameterInfo, self).putref_Value(ppValue)
    Category = property(get_Category, put_Category, None)
    ChoiceList = property(get_ChoiceList, putref_ChoiceList, None)
    DataType = property(get_DataType, put_DataType, None)
    Direction = property(get_Direction, put_Direction, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    Name = property(get_Name, put_Name, None)
    ParameterType = property(get_ParameterType, put_ParameterType, None)
    Value = property(get_Value, putref_Value, None)

class IGPParameterInfos(_esriGeoprocessing.IGPParameterInfos):
    _IID = uuid.UUID('0785eab1-f0f7-4cf7-a813-2e67612b0fe4')
    def get_Count(self):
        '''Method IGPParameterInfos.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPParameterInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IGPParameterInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppParmInfo          : IGPParameterInfo**'''
        return super(IGPParameterInfos, self).get_Element(Index)
    def Add(self, pParmInfo):
        '''Method IGPParameterInfos.Add

           INPUT
            pParmInfo           : IGPParameterInfo*'''
        return super(IGPParameterInfos, self).Add(pParmInfo)
    def Insert(self, Index, pParmInfo):
        '''Method IGPParameterInfos.Insert

           INPUTS
            Index               : long
            pParmInfo           : IGPParameterInfo*'''
        return super(IGPParameterInfos, self).Insert(Index, pParmInfo)
    def Remove(self, Index):
        '''Method IGPParameterInfos.Remove

           INPUT
            Index               : long'''
        return super(IGPParameterInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGPParameterInfos.RemoveAll'''
        return super(IGPParameterInfos, self).RemoveAll()
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGPToolInfo(_esriGeoprocessing.IGPToolInfo):
    _IID = uuid.UUID('e4f9e74d-957a-471e-9c4a-6339fee513be')

    def __init__(self, *args, **kw):
        super(IGPToolInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPToolInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPToolInfo, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPToolInfo.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPToolInfo, self).put_Name(Name)
    def get_DisplayName(self):
        '''Method IGPToolInfo.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPToolInfo, self).get_DisplayName()
    def put_DisplayName(self, Name):
        '''Method IGPToolInfo.put_DisplayName

           INPUT
            Name                : BSTR'''
        return super(IGPToolInfo, self).put_DisplayName(Name)
    def get_Category(self):
        '''Method IGPToolInfo.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IGPToolInfo, self).get_Category()
    def put_Category(self, Category):
        '''Method IGPToolInfo.put_Category

           INPUT
            Category            : BSTR'''
        return super(IGPToolInfo, self).put_Category(Category)
    def get_Help(self):
        '''Method IGPToolInfo.get_Help

           OUTPUT
            helpUrl             : BSTR*'''
        return super(IGPToolInfo, self).get_Help()
    def put_Help(self, helpUrl):
        '''Method IGPToolInfo.put_Help

           INPUT
            helpUrl             : BSTR'''
        return super(IGPToolInfo, self).put_Help(helpUrl)
    def get_ParameterInfo(self):
        '''Method IGPToolInfo.get_ParameterInfo

           OUTPUT
            ppParameterInfos    : IGPParameterInfos**'''
        return super(IGPToolInfo, self).get_ParameterInfo()
    def putref_ParameterInfo(self, ppParameterInfos):
        '''Method IGPToolInfo.putref_ParameterInfo

           INPUT
            ppParameterInfos    : IGPParameterInfos*'''
        return super(IGPToolInfo, self).putref_ParameterInfo(ppParameterInfos)
    def get_Extent(self):
        '''Method IGPToolInfo.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGPToolInfo, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IGPToolInfo.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IGPToolInfo, self).putref_Extent(ppExtent)
    Category = property(get_Category, put_Category, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    Extent = property(get_Extent, putref_Extent, None)
    Help = property(get_Help, put_Help, None)
    Name = property(get_Name, put_Name, None)
    ParameterInfo = property(get_ParameterInfo, putref_ParameterInfo, None)

class IGPToolboxEvents2(_esriGeoprocessing.IGPToolboxEvents2):
    _IID = uuid.UUID('48870875-7b09-4ea3-a166-b1a499dca57a')
    def OnToolboxDisplayNameAltered(self, oldName, newName):
        '''Method IGPToolboxEvents2.OnToolboxDisplayNameAltered

           INPUTS
            oldName             : BSTR
            newName             : BSTR'''
        return super(IGPToolboxEvents2, self).OnToolboxDisplayNameAltered(oldName, newName)

class IGPFunctionTool(_esriGeoprocessing.IGPFunctionTool):
    _IID = uuid.UUID('a2596611-bd07-49a3-8e62-1db89c8a30af')

    def __init__(self, *args, **kw):
        super(IGPFunctionTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Function(self):
        '''Method IGPFunctionTool.get_Function

           OUTPUT
            Function            : IGPFunction**'''
        return super(IGPFunctionTool, self).get_Function()
    def putref_Function(self, Function):
        '''Method IGPFunctionTool.putref_Function

           INPUT
            Function            : IGPFunction*'''
        return super(IGPFunctionTool, self).putref_Function(Function)
    Function = property(get_Function, putref_Function, None)

class IGPScriptTool(_esriGeoprocessing.IGPScriptTool):
    _IID = uuid.UUID('03ae1e9c-9f57-44ff-87ad-1910acd6b3cf')

    def __init__(self, *args, **kw):
        super(IGPScriptTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FileName(self):
        '''Method IGPScriptTool.get_FileName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPScriptTool, self).get_FileName()
    def put_FileName(self, Name):
        '''Method IGPScriptTool.put_FileName

           INPUT
            Name                : BSTR'''
        return super(IGPScriptTool, self).put_FileName(Name)
    def putref_ParameterInfo(self, _arg1):
        '''Method IGPScriptTool.putref_ParameterInfo

           INPUT
            _arg1               : IArray*'''
        return super(IGPScriptTool, self).putref_ParameterInfo(_arg1)
    def get_Environments(self):
        '''Method IGPScriptTool.get_Environments

           OUTPUT
            Environments        : IArray**'''
        return super(IGPScriptTool, self).get_Environments()
    def putref_Environments(self, Environments):
        '''Method IGPScriptTool.putref_Environments

           INPUT
            Environments        : IArray*'''
        return super(IGPScriptTool, self).putref_Environments(Environments)
    def get_ShowCommandWindow(self):
        '''Method IGPScriptTool.get_ShowCommandWindow

           OUTPUT
            showWindow          : VARIANT_BOOL*'''
        return super(IGPScriptTool, self).get_ShowCommandWindow()
    def put_ShowCommandWindow(self, showWindow):
        '''Method IGPScriptTool.put_ShowCommandWindow

           INPUT
            showWindow          : VARIANT_BOOL'''
        return super(IGPScriptTool, self).put_ShowCommandWindow(showWindow)
    Environments = property(get_Environments, putref_Environments, None)
    FileName = property(get_FileName, put_FileName, None)
    ParameterInfo = property(None, putref_ParameterInfo, None)
    ShowCommandWindow = property(get_ShowCommandWindow, put_ShowCommandWindow, None)

class IGPScriptTool2(_esriGeoprocessing.IGPScriptTool2):
    _IID = uuid.UUID('ada6b529-e9e7-4cf1-875f-bfb55c666b76')

    def __init__(self, *args, **kw):
        super(IGPScriptTool2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RunInProc(self):
        '''Method IGPScriptTool2.get_RunInProc

           OUTPUT
            inProc              : VARIANT_BOOL*'''
        return super(IGPScriptTool2, self).get_RunInProc()
    def put_RunInProc(self, inProc):
        '''Method IGPScriptTool2.put_RunInProc

           INPUT
            inProc              : VARIANT_BOOL'''
        return super(IGPScriptTool2, self).put_RunInProc(inProc)
    def get_CodeBlock(self):
        '''Method IGPScriptTool2.get_CodeBlock

           OUTPUT
            CodeBlock           : BSTR*'''
        return super(IGPScriptTool2, self).get_CodeBlock()
    def put_CodeBlock(self, CodeBlock):
        '''Method IGPScriptTool2.put_CodeBlock

           INPUT
            CodeBlock           : BSTR'''
        return super(IGPScriptTool2, self).put_CodeBlock(CodeBlock)
    def TestGetParameterInfo(self):
        '''Method IGPScriptTool2.TestGetParameterInfo

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGPScriptTool2, self).TestGetParameterInfo()
    def get_ProductCode(self):
        '''Method IGPScriptTool2.get_ProductCode

           OUTPUT
            ProductCode         : esriProductCode*'''
        return super(IGPScriptTool2, self).get_ProductCode()
    def put_ProductCode(self, ProductCode):
        '''Method IGPScriptTool2.put_ProductCode

           INPUT
            ProductCode         : esriProductCode'''
        return super(IGPScriptTool2, self).put_ProductCode(ProductCode)
    def get_ExtensionCode(self):
        '''Method IGPScriptTool2.get_ExtensionCode

           OUTPUT
            ExtensionCode       : esriProductCode*'''
        return super(IGPScriptTool2, self).get_ExtensionCode()
    def put_ExtensionCode(self, ExtensionCode):
        '''Method IGPScriptTool2.put_ExtensionCode

           INPUT
            ExtensionCode       : esriProductCode'''
        return super(IGPScriptTool2, self).put_ExtensionCode(ExtensionCode)
    def get_UseExtensionCode(self):
        '''Method IGPScriptTool2.get_UseExtensionCode

           OUTPUT
            UseExtensionCode    : VARIANT_BOOL*'''
        return super(IGPScriptTool2, self).get_UseExtensionCode()
    def put_UseExtensionCode(self, UseExtensionCode):
        '''Method IGPScriptTool2.put_UseExtensionCode

           INPUT
            UseExtensionCode    : VARIANT_BOOL'''
        return super(IGPScriptTool2, self).put_UseExtensionCode(UseExtensionCode)
    def get_ProductAndExtensionCodes(self):
        '''Method IGPScriptTool2.get_ProductAndExtensionCodes

           OUTPUT
            productAndExtension : VARIANT_BOOL*'''
        return super(IGPScriptTool2, self).get_ProductAndExtensionCodes()
    def put_ProductAndExtensionCodes(self, productAndExtension):
        '''Method IGPScriptTool2.put_ProductAndExtensionCodes

           INPUT
            productAndExtension : VARIANT_BOOL'''
        return super(IGPScriptTool2, self).put_ProductAndExtensionCodes(productAndExtension)
    def get_SymbologyLayer(self, parameterName):
        '''Method IGPScriptTool2.get_SymbologyLayer

           INPUT
            parameterName       : BSTR

           OUTPUT
            Layer               : BSTR*'''
        return super(IGPScriptTool2, self).get_SymbologyLayer(parameterName)
    def put_SymbologyLayer(self, parameterName, Layer):
        '''Method IGPScriptTool2.put_SymbologyLayer

           INPUTS
            parameterName       : BSTR
            Layer               : BSTR'''
        return super(IGPScriptTool2, self).put_SymbologyLayer(parameterName, Layer)
    CodeBlock = property(get_CodeBlock, put_CodeBlock, None)
    ExtensionCode = property(get_ExtensionCode, put_ExtensionCode, None)
    ProductAndExtensionCodes = property(get_ProductAndExtensionCodes, put_ProductAndExtensionCodes, None)
    ProductCode = property(get_ProductCode, put_ProductCode, None)
    RunInProc = property(get_RunInProc, put_RunInProc, None)
    SymbologyLayer = property(None, put_SymbologyLayer, None)
    UseExtensionCode = property(get_UseExtensionCode, put_UseExtensionCode, None)
    SymbologyLayer = IndexProperty(get_SymbologyLayer, None)

class IDEToolbox(_esriGeoprocessing.IDEToolbox):
    _IID = uuid.UUID('13898bab-baf8-438c-ae88-cc3f3341b270')

    def __init__(self, *args, **kw):
        super(IDEToolbox, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Alias(self):
        '''Method IDEToolbox.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IDEToolbox, self).get_Alias()
    def put_Alias(self, Alias):
        '''Method IDEToolbox.put_Alias

           INPUT
            Alias               : BSTR'''
        return super(IDEToolbox, self).put_Alias(Alias)
    Alias = property(get_Alias, put_Alias, None)

class IDEToolbox2(_esriGeoprocessing.IDEToolbox2):
    _IID = uuid.UUID('a6bfa57e-e24f-4488-b12b-0039e32e7c3e')

    def __init__(self, *args, **kw):
        super(IDEToolbox2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DisplayName(self):
        '''Method IDEToolbox2.get_DisplayName

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IDEToolbox2, self).get_DisplayName()
    def put_DisplayName(self, DisplayName):
        '''Method IDEToolbox2.put_DisplayName

           INPUT
            DisplayName         : BSTR'''
        return super(IDEToolbox2, self).put_DisplayName(DisplayName)
    def get_HelpFile(self):
        '''Method IDEToolbox2.get_HelpFile

           OUTPUT
            File                : BSTR*'''
        return super(IDEToolbox2, self).get_HelpFile()
    def put_HelpFile(self, File):
        '''Method IDEToolbox2.put_HelpFile

           INPUT
            File                : BSTR'''
        return super(IDEToolbox2, self).put_HelpFile(File)
    def get_HelpContext(self):
        '''Method IDEToolbox2.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IDEToolbox2, self).get_HelpContext()
    def put_HelpContext(self, context):
        '''Method IDEToolbox2.put_HelpContext

           INPUT
            context             : long'''
        return super(IDEToolbox2, self).put_HelpContext(context)
    def get_Alias(self):
        '''Method IDEToolbox.get_Alias (from IDEToolbox)

           OUTPUT
            Alias               : BSTR*'''
        return super(IDEToolbox2, self).get_Alias()
    def put_Alias(self, Alias):
        '''Method IDEToolbox.put_Alias (from IDEToolbox)

           INPUT
            Alias               : BSTR'''
        return super(IDEToolbox2, self).put_Alias(Alias)
    Alias = property(get_Alias, put_Alias, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    HelpContext = property(get_HelpContext, put_HelpContext, None)
    HelpFile = property(get_HelpFile, put_HelpFile, None)

class IGpEnumList(_esriGeoprocessing.IGpEnumList):
    _IID = uuid.UUID('ba7bf773-77ce-48cf-8ee3-b541e66e9746')
    def Reset(self):
        '''Method IGpEnumList.Reset'''
        return super(IGpEnumList, self).Reset()
    def Next(self):
        '''Method IGpEnumList.Next

           OUTPUT
            pName               : BSTR*'''
        return super(IGpEnumList, self).Next()
    def __iter__(self):
        try:
            super(IGpEnumList, self).Reset()
            val = super(IGpEnumList, self).Next()
            while val:
                yield val
                val = super(IGpEnumList, self).Next()
        except:
            pass

class IGpEnumObject(_esriGeoprocessing.IGpEnumObject):
    _IID = uuid.UUID('07b214db-9fae-4260-acb1-1dbdec489352')
    def Reset(self):
        '''Method IGpEnumObject.Reset'''
        return super(IGpEnumObject, self).Reset()
    def Next(self):
        '''Method IGpEnumObject.Next

           OUTPUT
            ppObject            : IDispatch**'''
        return super(IGpEnumObject, self).Next()
    def __iter__(self):
        try:
            super(IGpEnumObject, self).Reset()
            val = super(IGpEnumObject, self).Next()
            while val:
                yield val
                val = super(IGpEnumObject, self).Next()
        except:
            pass
    def NewRow(self):
        '''Method IGpEnumObject.NewRow

           OUTPUT
            ppObject            : IDispatch**'''
        return super(IGpEnumObject, self).NewRow()
    def SetFields(self, Fields, wildCard, FieldType):
        '''Method IGpEnumObject.SetFields

           INPUTS
            Fields              : IFields*
            wildCard            : BSTR
            FieldType           : BSTR'''
        return super(IGpEnumObject, self).SetFields(Fields, wildCard, FieldType)
    def SetIndexes(self, indexes, wildCard):
        '''Method IGpEnumObject.SetIndexes

           INPUTS
            indexes             : IIndexes*
            wildCard            : BSTR'''
        return super(IGpEnumObject, self).SetIndexes(indexes, wildCard)
    def SetCursor(self, cursor, cursorCookie, Fields, FieldInfo, pRowBuffer, pRowSet, update, updateType, Type, pSpRef, HasM, HasZ, defaultZ):
        '''Method IGpEnumObject.SetCursor

           INPUTS
            cursor              : ICursor*
            cursorCookie        : long
            Fields              : IFields*
            FieldInfo           : IGPFieldInfo*
            pRowBuffer          : IRowBuffer*
            pRowSet             : IPropertySet*
            update              : VARIANT_BOOL
            updateType          : long
            Type                : esriGeometryType
            pSpRef              : ISpatialReference*
            HasM                : VARIANT_BOOL
            HasZ                : VARIANT_BOOL
            defaultZ            : double'''
        return super(IGpEnumObject, self).SetCursor(cursor, cursorCookie, Fields, FieldInfo, pRowBuffer, pRowSet, update, updateType, Type, pSpRef, HasM, HasZ, defaultZ)
    def UpdateRow(self, row):
        '''Method IGpEnumObject.UpdateRow

           INPUT
            row                 : IDispatch*'''
        return super(IGpEnumObject, self).UpdateRow(row)
    def InsertRow(self, row):
        '''Method IGpEnumObject.InsertRow

           INPUT
            row                 : IDispatch*'''
        return super(IGpEnumObject, self).InsertRow(row)
    def DeleteRow(self, row):
        '''Method IGpEnumObject.DeleteRow

           INPUT
            row                 : IDispatch*'''
        return super(IGpEnumObject, self).DeleteRow(row)

class IGpDescribeData(_esriGeoprocessing.IGpDescribeData):
    _IID = uuid.UUID('a558acf8-b612-4fea-a2f4-9bf1760653da')
    def Describe(self, Method):
        '''Method IGpDescribeData.Describe

           INPUT
            Method              : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IGpDescribeData, self).Describe(Method)

class IGpSpRefObject(_esriGeoprocessing.IGpSpRefObject):
    _IID = uuid.UUID('20177b11-e8b3-4610-a492-f00af2e817d3')

    def __init__(self, *args, **kw):
        super(IGpSpRefObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IGpSpRefObject.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IGpSpRefObject, self).get_Type()
    def put_Type(self, Type):
        '''Method IGpSpRefObject.put_Type

           INPUT
            Type                : BSTR'''
        return super(IGpSpRefObject, self).put_Type(Type)
    def get_Name(self):
        '''Method IGpSpRefObject.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_Name()
    def put_Name(self, Name):
        '''Method IGpSpRefObject.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_Name(Name)
    def get_Alias(self):
        '''Method IGpSpRefObject.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IGpSpRefObject, self).get_Alias()
    def put_Alias(self, Alias):
        '''Method IGpSpRefObject.put_Alias

           INPUT
            Alias               : BSTR'''
        return super(IGpSpRefObject, self).put_Alias(Alias)
    def get_Abbreviation(self):
        '''Method IGpSpRefObject.get_Abbreviation

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IGpSpRefObject, self).get_Abbreviation()
    def put_Abbreviation(self, Abbreviation):
        '''Method IGpSpRefObject.put_Abbreviation

           INPUT
            Abbreviation        : BSTR'''
        return super(IGpSpRefObject, self).put_Abbreviation(Abbreviation)
    def get_Remarks(self):
        '''Method IGpSpRefObject.get_Remarks

           OUTPUT
            Remarks             : BSTR*'''
        return super(IGpSpRefObject, self).get_Remarks()
    def put_Remarks(self, Remarks):
        '''Method IGpSpRefObject.put_Remarks

           INPUT
            Remarks             : BSTR'''
        return super(IGpSpRefObject, self).put_Remarks(Remarks)
    def get_FactoryCode(self):
        '''Method IGpSpRefObject.get_FactoryCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_FactoryCode()
    def put_FactoryCode(self, code):
        '''Method IGpSpRefObject.put_FactoryCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_FactoryCode(code)
    def get_HasXYPrecision(self):
        '''Method IGpSpRefObject.get_HasXYPrecision

           OUTPUT
            HasXYPrecision      : BSTR*'''
        return super(IGpSpRefObject, self).get_HasXYPrecision()
    def get_HasZPrecision(self):
        '''Method IGpSpRefObject.get_HasZPrecision

           OUTPUT
            HasZPrecision       : BSTR*'''
        return super(IGpSpRefObject, self).get_HasZPrecision()
    def get_HasMPrecision(self):
        '''Method IGpSpRefObject.get_HasMPrecision

           OUTPUT
            HasMPrecision       : BSTR*'''
        return super(IGpSpRefObject, self).get_HasMPrecision()
    def get_FalseOriginAndUnits(self):
        '''Method IGpSpRefObject.get_FalseOriginAndUnits

           OUTPUT
            Results             : BSTR*'''
        return super(IGpSpRefObject, self).get_FalseOriginAndUnits()
    def get_ZFalseOriginAndUnits(self):
        '''Method IGpSpRefObject.get_ZFalseOriginAndUnits

           OUTPUT
            Results             : BSTR*'''
        return super(IGpSpRefObject, self).get_ZFalseOriginAndUnits()
    def get_MFalseOriginAndUnits(self):
        '''Method IGpSpRefObject.get_MFalseOriginAndUnits

           OUTPUT
            Results             : BSTR*'''
        return super(IGpSpRefObject, self).get_MFalseOriginAndUnits()
    def get_Domain(self):
        '''Method IGpSpRefObject.get_Domain

           OUTPUT
            Results             : BSTR*'''
        return super(IGpSpRefObject, self).get_Domain()
    def get_ZDomain(self):
        '''Method IGpSpRefObject.get_ZDomain

           OUTPUT
            Results             : BSTR*'''
        return super(IGpSpRefObject, self).get_ZDomain()
    def get_MDomain(self):
        '''Method IGpSpRefObject.get_MDomain

           OUTPUT
            Results             : BSTR*'''
        return super(IGpSpRefObject, self).get_MDomain()
    def get_Usage(self):
        '''Method IGpSpRefObject.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IGpSpRefObject, self).get_Usage()
    def get_CentralMeridian(self):
        '''Method IGpSpRefObject.get_CentralMeridian

           OUTPUT
            CentralMeridian     : double*'''
        return super(IGpSpRefObject, self).get_CentralMeridian()
    def put_CentralMeridian(self, CentralMeridian):
        '''Method IGpSpRefObject.put_CentralMeridian

           INPUT
            CentralMeridian     : double'''
        return super(IGpSpRefObject, self).put_CentralMeridian(CentralMeridian)
    def get_CentralMeridianInDegrees(self):
        '''Method IGpSpRefObject.get_CentralMeridianInDegrees

           OUTPUT
            CentralMeridian     : double*'''
        return super(IGpSpRefObject, self).get_CentralMeridianInDegrees()
    def put_CentralMeridianInDegrees(self, CentralMeridian):
        '''Method IGpSpRefObject.put_CentralMeridianInDegrees

           INPUT
            CentralMeridian     : double'''
        return super(IGpSpRefObject, self).put_CentralMeridianInDegrees(CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IGpSpRefObject.get_LongitudeOfOrigin

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IGpSpRefObject, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IGpSpRefObject.put_LongitudeOfOrigin

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IGpSpRefObject, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IGpSpRefObject.get_LatitudeOf1st

           OUTPUT
            standardLongitude1  : double*'''
        return super(IGpSpRefObject, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IGpSpRefObject.put_LatitudeOf1st

           INPUT
            standardLongitude1  : double'''
        return super(IGpSpRefObject, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IGpSpRefObject.get_LatitudeOf2nd

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IGpSpRefObject, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IGpSpRefObject.put_LatitudeOf2nd

           INPUT
            LatitudeOf2nd       : double'''
        return super(IGpSpRefObject, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IGpSpRefObject.get_FalseEasting

           OUTPUT
            FalseEasting        : double*'''
        return super(IGpSpRefObject, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IGpSpRefObject.put_FalseEasting

           INPUT
            FalseEasting        : double'''
        return super(IGpSpRefObject, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IGpSpRefObject.get_FalseNorthing

           OUTPUT
            FalseNorthing       : double*'''
        return super(IGpSpRefObject, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IGpSpRefObject.put_FalseNorthing

           INPUT
            FalseNorthing       : double'''
        return super(IGpSpRefObject, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IGpSpRefObject.get_CentralParallel

           OUTPUT
            CentralParallel     : double*'''
        return super(IGpSpRefObject, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IGpSpRefObject.put_CentralParallel

           INPUT
            CentralParallel     : double'''
        return super(IGpSpRefObject, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IGpSpRefObject.get_StandardParallel1

           OUTPUT
            StandardParallel1   : double*'''
        return super(IGpSpRefObject, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IGpSpRefObject.put_StandardParallel1

           INPUT
            StandardParallel1   : double'''
        return super(IGpSpRefObject, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IGpSpRefObject.get_StandardParallel2

           OUTPUT
            StandardParallel2   : double*'''
        return super(IGpSpRefObject, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IGpSpRefObject.put_StandardParallel2

           INPUT
            StandardParallel2   : double'''
        return super(IGpSpRefObject, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IGpSpRefObject.get_LongitudeOf1st

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IGpSpRefObject, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IGpSpRefObject.put_LongitudeOf1st

           INPUT
            LongitudeOf1st      : double'''
        return super(IGpSpRefObject, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IGpSpRefObject.get_LongitudeOf2nd

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IGpSpRefObject, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IGpSpRefObject.put_LongitudeOf2nd

           INPUT
            LongitudeOf2nd      : double'''
        return super(IGpSpRefObject, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IGpSpRefObject.get_ScaleFactor

           OUTPUT
            ScaleFactor         : double*'''
        return super(IGpSpRefObject, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IGpSpRefObject.put_ScaleFactor

           INPUT
            ScaleFactor         : double'''
        return super(IGpSpRefObject, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IGpSpRefObject.get_Azimuth

           OUTPUT
            Azimuth             : double*'''
        return super(IGpSpRefObject, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IGpSpRefObject.put_Azimuth

           INPUT
            Azimuth             : double'''
        return super(IGpSpRefObject, self).put_Azimuth(Azimuth)
    def get_SemiMajorAxis(self):
        '''Method IGpSpRefObject.get_SemiMajorAxis

           OUTPUT
            axis                : double*'''
        return super(IGpSpRefObject, self).get_SemiMajorAxis()
    def put_SemiMajorAxis(self, axis):
        '''Method IGpSpRefObject.put_SemiMajorAxis

           INPUT
            axis                : double'''
        return super(IGpSpRefObject, self).put_SemiMajorAxis(axis)
    def get_SemiMinorAxis(self):
        '''Method IGpSpRefObject.get_SemiMinorAxis

           OUTPUT
            axis                : double*'''
        return super(IGpSpRefObject, self).get_SemiMinorAxis()
    def put_SemiMinorAxis(self, axis):
        '''Method IGpSpRefObject.put_SemiMinorAxis

           INPUT
            axis                : double'''
        return super(IGpSpRefObject, self).put_SemiMinorAxis(axis)
    def get_Flattening(self):
        '''Method IGpSpRefObject.get_Flattening

           OUTPUT
            Flattening          : double*'''
        return super(IGpSpRefObject, self).get_Flattening()
    def put_Flattening(self, Flattening):
        '''Method IGpSpRefObject.put_Flattening

           INPUT
            Flattening          : double'''
        return super(IGpSpRefObject, self).put_Flattening(Flattening)
    def get_Longitude(self):
        '''Method IGpSpRefObject.get_Longitude

           OUTPUT
            Longitude           : double*'''
        return super(IGpSpRefObject, self).get_Longitude()
    def get_RadiansPerUnit(self):
        '''Method IGpSpRefObject.get_RadiansPerUnit

           OUTPUT
            RadiansPerUnit      : double*'''
        return super(IGpSpRefObject, self).get_RadiansPerUnit()
    def get_Classification(self):
        '''Method IGpSpRefObject.get_Classification

           OUTPUT
            Classification      : BSTR*'''
        return super(IGpSpRefObject, self).get_Classification()
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method IGpSpRefObject.SetFalseOriginAndUnits

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IGpSpRefObject, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method IGpSpRefObject.SetZFalseOriginAndUnits

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IGpSpRefObject, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method IGpSpRefObject.SetMFalseOriginAndUnits

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IGpSpRefObject, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def SetDomain(self, XMin, YMin, XMax, YMax):
        '''Method IGpSpRefObject.SetDomain

           INPUTS
            XMin                : double
            YMin                : double
            XMax                : double
            YMax                : double'''
        return super(IGpSpRefObject, self).SetDomain(XMin, YMin, XMax, YMax)
    def SetZDomain(self, ZMin, ZMax):
        '''Method IGpSpRefObject.SetZDomain

           INPUTS
            ZMin                : double
            ZMax                : double'''
        return super(IGpSpRefObject, self).SetZDomain(ZMin, ZMax)
    def SetMDomain(self, MMin, MMax):
        '''Method IGpSpRefObject.SetMDomain

           INPUTS
            MMin                : double
            MMax                : double'''
        return super(IGpSpRefObject, self).SetMDomain(MMin, MMax)
    def put_Longitude(self, Longitude):
        '''Method IGpSpRefObject.put_Longitude

           INPUT
            Longitude           : BSTR'''
        return super(IGpSpRefObject, self).put_Longitude(Longitude)
    def put_PCSName(self, Name):
        '''Method IGpSpRefObject.put_PCSName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_PCSName(Name)
    def get_PCSName(self):
        '''Method IGpSpRefObject.get_PCSName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_PCSName()
    def put_PCSCode(self, code):
        '''Method IGpSpRefObject.put_PCSCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_PCSCode(code)
    def get_PCSCode(self):
        '''Method IGpSpRefObject.get_PCSCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_PCSCode()
    def put_GCSName(self, Name):
        '''Method IGpSpRefObject.put_GCSName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_GCSName(Name)
    def get_GCSName(self):
        '''Method IGpSpRefObject.get_GCSName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_GCSName()
    def put_GCSCode(self, code):
        '''Method IGpSpRefObject.put_GCSCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_GCSCode(code)
    def get_GCSCode(self):
        '''Method IGpSpRefObject.get_GCSCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_GCSCode()
    def put_SpheroidName(self, Name):
        '''Method IGpSpRefObject.put_SpheroidName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_SpheroidName(Name)
    def get_SpheroidName(self):
        '''Method IGpSpRefObject.get_SpheroidName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_SpheroidName()
    def put_SpheroidCode(self, code):
        '''Method IGpSpRefObject.put_SpheroidCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_SpheroidCode(code)
    def get_SpheroidCode(self):
        '''Method IGpSpRefObject.get_SpheroidCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_SpheroidCode()
    def put_ProjectionName(self, Name):
        '''Method IGpSpRefObject.put_ProjectionName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_ProjectionName(Name)
    def get_ProjectionName(self):
        '''Method IGpSpRefObject.get_ProjectionName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_ProjectionName()
    def put_ProjectionCode(self, code):
        '''Method IGpSpRefObject.put_ProjectionCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_ProjectionCode(code)
    def get_ProjectionCode(self):
        '''Method IGpSpRefObject.get_ProjectionCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_ProjectionCode()
    def put_DatumName(self, Name):
        '''Method IGpSpRefObject.put_DatumName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_DatumName(Name)
    def get_DatumName(self):
        '''Method IGpSpRefObject.get_DatumName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_DatumName()
    def put_DatumCode(self, code):
        '''Method IGpSpRefObject.put_DatumCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_DatumCode(code)
    def get_DatumCode(self):
        '''Method IGpSpRefObject.get_DatumCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_DatumCode()
    def put_PrimeMeridianName(self, Name):
        '''Method IGpSpRefObject.put_PrimeMeridianName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_PrimeMeridianName(Name)
    def get_PrimeMeridianName(self):
        '''Method IGpSpRefObject.get_PrimeMeridianName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_PrimeMeridianName()
    def put_PrimeMeridianCode(self, code):
        '''Method IGpSpRefObject.put_PrimeMeridianCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_PrimeMeridianCode(code)
    def get_PrimeMeridianCode(self):
        '''Method IGpSpRefObject.get_PrimeMeridianCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_PrimeMeridianCode()
    def put_AngularUnitName(self, Name):
        '''Method IGpSpRefObject.put_AngularUnitName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_AngularUnitName(Name)
    def get_AngularUnitName(self):
        '''Method IGpSpRefObject.get_AngularUnitName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_AngularUnitName()
    def put_AngularUnitCode(self, code):
        '''Method IGpSpRefObject.put_AngularUnitCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_AngularUnitCode(code)
    def get_AngularUnitCode(self):
        '''Method IGpSpRefObject.get_AngularUnitCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_AngularUnitCode()
    def put_LinearUnitName(self, Name):
        '''Method IGpSpRefObject.put_LinearUnitName

           INPUT
            Name                : BSTR'''
        return super(IGpSpRefObject, self).put_LinearUnitName(Name)
    def get_LinearUnitName(self):
        '''Method IGpSpRefObject.get_LinearUnitName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpSpRefObject, self).get_LinearUnitName()
    def put_LinearUnitCode(self, code):
        '''Method IGpSpRefObject.put_LinearUnitCode

           INPUT
            code                : long'''
        return super(IGpSpRefObject, self).put_LinearUnitCode(code)
    def get_LinearUnitCode(self):
        '''Method IGpSpRefObject.get_LinearUnitCode

           OUTPUT
            code                : long*'''
        return super(IGpSpRefObject, self).get_LinearUnitCode()
    def CreateFromFile(self, prjFile):
        '''Method IGpSpRefObject.CreateFromFile

           INPUT
            prjFile             : BSTR'''
        return super(IGpSpRefObject, self).CreateFromFile(prjFile)
    def Create(self):
        '''Method IGpSpRefObject.Create'''
        return super(IGpSpRefObject, self).Create()
    def putref_SpatialReference(self, ppSpRef):
        '''Method IGpSpRefObject.putref_SpatialReference

           INPUT
            ppSpRef             : ISpatialReference*'''
        return super(IGpSpRefObject, self).putref_SpatialReference(ppSpRef)
    def get_SpatialReference(self):
        '''Method IGpSpRefObject.get_SpatialReference

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGpSpRefObject, self).get_SpatialReference()
    def put_XYTolerance(self, Value):
        '''Method IGpSpRefObject.put_XYTolerance

           INPUT
            Value               : double'''
        return super(IGpSpRefObject, self).put_XYTolerance(Value)
    def get_XYTolerance(self):
        '''Method IGpSpRefObject.get_XYTolerance

           OUTPUT
            Value               : double*'''
        return super(IGpSpRefObject, self).get_XYTolerance()
    def put_MTolerance(self, Value):
        '''Method IGpSpRefObject.put_MTolerance

           INPUT
            Value               : double'''
        return super(IGpSpRefObject, self).put_MTolerance(Value)
    def get_MTolerance(self):
        '''Method IGpSpRefObject.get_MTolerance

           OUTPUT
            Value               : double*'''
        return super(IGpSpRefObject, self).get_MTolerance()
    def put_ZTolerance(self, Value):
        '''Method IGpSpRefObject.put_ZTolerance

           INPUT
            Value               : double'''
        return super(IGpSpRefObject, self).put_ZTolerance(Value)
    def get_ZTolerance(self):
        '''Method IGpSpRefObject.get_ZTolerance

           OUTPUT
            Value               : double*'''
        return super(IGpSpRefObject, self).get_ZTolerance()
    def put_XYResolution(self, Value):
        '''Method IGpSpRefObject.put_XYResolution

           INPUT
            Value               : double'''
        return super(IGpSpRefObject, self).put_XYResolution(Value)
    def get_XYResolution(self):
        '''Method IGpSpRefObject.get_XYResolution

           OUTPUT
            Value               : double*'''
        return super(IGpSpRefObject, self).get_XYResolution()
    def put_MResolution(self, Value):
        '''Method IGpSpRefObject.put_MResolution

           INPUT
            Value               : double'''
        return super(IGpSpRefObject, self).put_MResolution(Value)
    def get_MResolution(self):
        '''Method IGpSpRefObject.get_MResolution

           OUTPUT
            Value               : double*'''
        return super(IGpSpRefObject, self).get_MResolution()
    def put_ZResolution(self, Value):
        '''Method IGpSpRefObject.put_ZResolution

           INPUT
            Value               : double'''
        return super(IGpSpRefObject, self).put_ZResolution(Value)
    def get_ZResolution(self):
        '''Method IGpSpRefObject.get_ZResolution

           OUTPUT
            Value               : double*'''
        return super(IGpSpRefObject, self).get_ZResolution()
    def put_IsHighPrecision(self, Value):
        '''Method IGpSpRefObject.put_IsHighPrecision

           INPUT
            Value               : BSTR'''
        return super(IGpSpRefObject, self).put_IsHighPrecision(Value)
    def get_IsHighPrecision(self):
        '''Method IGpSpRefObject.get_IsHighPrecision

           OUTPUT
            Value               : BSTR*'''
        return super(IGpSpRefObject, self).get_IsHighPrecision()
    Abbreviation = property(get_Abbreviation, put_Abbreviation, None)
    Alias = property(get_Alias, put_Alias, None)
    AngularUnitCode = property(get_AngularUnitCode, put_AngularUnitCode, None)
    AngularUnitName = property(get_AngularUnitName, put_AngularUnitName, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(get_CentralMeridian, put_CentralMeridian, None)
    CentralMeridianInDegrees = property(get_CentralMeridianInDegrees, put_CentralMeridianInDegrees, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    Classification = property(get_Classification, None, None)
    DatumCode = property(get_DatumCode, put_DatumCode, None)
    DatumName = property(get_DatumName, put_DatumName, None)
    Domain = property(get_Domain, None, None)
    FactoryCode = property(get_FactoryCode, put_FactoryCode, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    FalseOriginAndUnits = property(get_FalseOriginAndUnits, None, None)
    Flattening = property(get_Flattening, put_Flattening, None)
    GCSCode = property(get_GCSCode, put_GCSCode, None)
    GCSName = property(get_GCSName, put_GCSName, None)
    HasMPrecision = property(get_HasMPrecision, None, None)
    HasXYPrecision = property(get_HasXYPrecision, None, None)
    HasZPrecision = property(get_HasZPrecision, None, None)
    IsHighPrecision = property(get_IsHighPrecision, put_IsHighPrecision, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LinearUnitCode = property(get_LinearUnitCode, put_LinearUnitCode, None)
    LinearUnitName = property(get_LinearUnitName, put_LinearUnitName, None)
    Longitude = property(get_Longitude, put_Longitude, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    MDomain = property(get_MDomain, None, None)
    MFalseOriginAndUnits = property(get_MFalseOriginAndUnits, None, None)
    MResolution = property(get_MResolution, put_MResolution, None)
    MTolerance = property(get_MTolerance, put_MTolerance, None)
    Name = property(get_Name, put_Name, None)
    PCSCode = property(get_PCSCode, put_PCSCode, None)
    PCSName = property(get_PCSName, put_PCSName, None)
    PrimeMeridianCode = property(get_PrimeMeridianCode, put_PrimeMeridianCode, None)
    PrimeMeridianName = property(get_PrimeMeridianName, put_PrimeMeridianName, None)
    ProjectionCode = property(get_ProjectionCode, put_ProjectionCode, None)
    ProjectionName = property(get_ProjectionName, put_ProjectionName, None)
    RadiansPerUnit = property(get_RadiansPerUnit, None, None)
    Remarks = property(get_Remarks, put_Remarks, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SemiMajorAxis = property(get_SemiMajorAxis, put_SemiMajorAxis, None)
    SemiMinorAxis = property(get_SemiMinorAxis, put_SemiMinorAxis, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    SpheroidCode = property(get_SpheroidCode, put_SpheroidCode, None)
    SpheroidName = property(get_SpheroidName, put_SpheroidName, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Type = property(get_Type, put_Type, None)
    Usage = property(get_Usage, None, None)
    XYResolution = property(get_XYResolution, put_XYResolution, None)
    XYTolerance = property(get_XYTolerance, put_XYTolerance, None)
    ZDomain = property(get_ZDomain, None, None)
    ZFalseOriginAndUnits = property(get_ZFalseOriginAndUnits, None, None)
    ZResolution = property(get_ZResolution, put_ZResolution, None)
    ZTolerance = property(get_ZTolerance, put_ZTolerance, None)

class IGpValueTableObject(_esriGeoprocessing.IGpValueTableObject):
    _IID = uuid.UUID('527b0a11-811d-474c-b34e-919b560e72c0')
    def SetColumns(self, nColumns):
        '''Method IGpValueTableObject.SetColumns

           INPUT
            nColumns            : long'''
        return super(IGpValueTableObject, self).SetColumns(nColumns)
    def get_RowCount(self):
        '''Method IGpValueTableObject.get_RowCount

           OUTPUT
            Count               : long*'''
        return super(IGpValueTableObject, self).get_RowCount()
    def get_ColumnCount(self):
        '''Method IGpValueTableObject.get_ColumnCount

           OUTPUT
            Count               : long*'''
        return super(IGpValueTableObject, self).get_ColumnCount()
    def AddRow(self, row):
        '''Method IGpValueTableObject.AddRow

           INPUT
            row                 : VARIANT*'''
        return super(IGpValueTableObject, self).AddRow(row)
    def GetRow(self, Index):
        '''Method IGpValueTableObject.GetRow

           INPUT
            Index               : long

           OUTPUT
            row                 : BSTR*'''
        return super(IGpValueTableObject, self).GetRow(Index)
    def GetValue(self, rowIndex, columnIndex):
        '''Method IGpValueTableObject.GetValue

           INPUTS
            rowIndex            : long
            columnIndex         : long

           OUTPUT
            Value               : BSTR*'''
        return super(IGpValueTableObject, self).GetValue(rowIndex, columnIndex)
    def LoadFromString(self, Value):
        '''Method IGpValueTableObject.LoadFromString

           INPUT
            Value               : BSTR'''
        return super(IGpValueTableObject, self).LoadFromString(Value)
    def ExportToString(self):
        '''Method IGpValueTableObject.ExportToString

           OUTPUT
            Value               : BSTR*'''
        return super(IGpValueTableObject, self).ExportToString()
    def RemoveRow(self, rowIndex):
        '''Method IGpValueTableObject.RemoveRow

           INPUT
            rowIndex            : long'''
        return super(IGpValueTableObject, self).RemoveRow(rowIndex)
    def SetRow(self, rowIndex, Value):
        '''Method IGpValueTableObject.SetRow

           INPUTS
            rowIndex            : long
            Value               : VARIANT*'''
        return super(IGpValueTableObject, self).SetRow(rowIndex, Value)
    def SetValue(self, rowIndex, columnIndex, Value):
        '''Method IGpValueTableObject.SetValue

           INPUTS
            rowIndex            : long
            columnIndex         : long
            Value               : VARIANT*'''
        return super(IGpValueTableObject, self).SetValue(rowIndex, columnIndex, Value)
    def Populate(self, pGpValueTable):
        '''Method IGpValueTableObject.Populate

           INPUT
            pGpValueTable       : IGPValueTable*'''
        return super(IGpValueTableObject, self).Populate(pGpValueTable)
    ColumnCount = property(get_ColumnCount, None, None)
    RowCount = property(get_RowCount, None, None)

class IGpValueTableObject2(_esriGeoprocessing.IGpValueTableObject2):
    _IID = uuid.UUID('1f3f1579-8c0c-46dd-b408-09dea1166aa7')
    def GetTrueValue(self, rowIndex, columnIndex):
        '''Method IGpValueTableObject2.GetTrueValue

           INPUTS
            rowIndex            : long
            columnIndex         : long

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGpValueTableObject2, self).GetTrueValue(rowIndex, columnIndex)

class IGPEnvironmentManagerImpl(_esriGeoprocessing.IGPEnvironmentManagerImpl):
    _IID = uuid.UUID('bdad9d1f-da91-4312-9c59-d2657be87670')

    def __init__(self, *args, **kw):
        super(IGPEnvironmentManagerImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Reset(self):
        '''Method IGPEnvironmentManagerImpl.Reset'''
        return super(IGPEnvironmentManagerImpl, self).Reset()
    def GetValue(self, Name):
        '''Method IGPEnvironmentManagerImpl.GetValue

           INPUT
            Name                : BSTR

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPEnvironmentManagerImpl, self).GetValue(Name)
    def SetOverride(self, Name, canOverride):
        '''Method IGPEnvironmentManagerImpl.SetOverride

           INPUTS
            Name                : BSTR
            canOverride         : VARIANT_BOOL'''
        return super(IGPEnvironmentManagerImpl, self).SetOverride(Name, canOverride)
    def GetOverride(self, Name):
        '''Method IGPEnvironmentManagerImpl.GetOverride

           INPUT
            Name                : BSTR

           OUTPUT
            canOverride         : VARIANT_BOOL*'''
        return super(IGPEnvironmentManagerImpl, self).GetOverride(Name)
    def Localize(self):
        '''Method IGPEnvironmentManagerImpl.Localize'''
        return super(IGPEnvironmentManagerImpl, self).Localize()
    def put_ValidationMode(self, Mode):
        '''Method IGPEnvironmentManagerImpl.put_ValidationMode

           INPUT
            Mode                : long'''
        return super(IGPEnvironmentManagerImpl, self).put_ValidationMode(Mode)
    def get_ValidationMode(self):
        '''Method IGPEnvironmentManagerImpl.get_ValidationMode

           OUTPUT
            Mode                : long*'''
        return super(IGPEnvironmentManagerImpl, self).get_ValidationMode()
    ValidationMode = property(get_ValidationMode, put_ValidationMode, None)

class IGeoProcessorResult(_esriGeoprocessing.IGeoProcessorResult):
    _IID = uuid.UUID('e6f5ed50-72bb-42ae-b62f-b749185e2792')
    def get_ReturnValue(self):
        '''Method IGeoProcessorResult.get_ReturnValue

           OUTPUT
            pRetValue           : VARIANT*'''
        return super(IGeoProcessorResult, self).get_ReturnValue()
    def get_Status(self):
        '''Method IGeoProcessorResult.get_Status

           OUTPUT
            Status              : esriJobStatus*'''
        return super(IGeoProcessorResult, self).get_Status()
    def get_ResultID(self):
        '''Method IGeoProcessorResult.get_ResultID

           OUTPUT
            ResultID            : BSTR*'''
        return super(IGeoProcessorResult, self).get_ResultID()
    def GetResultMessages(self):
        '''Method IGeoProcessorResult.GetResultMessages

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGeoProcessorResult, self).GetResultMessages()
    def get_MessageCount(self):
        '''Method IGeoProcessorResult.get_MessageCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessorResult, self).get_MessageCount()
    def GetMessage(self, Index):
        '''Method IGeoProcessorResult.GetMessage

           INPUT
            Index               : long

           OUTPUT
            pMessage            : BSTR*'''
        return super(IGeoProcessorResult, self).GetMessage(Index)
    def GetSeverity(self, Index):
        '''Method IGeoProcessorResult.GetSeverity

           INPUT
            Index               : long

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessorResult, self).GetSeverity(Index)
    def GetReturnCode(self, Index):
        '''Method IGeoProcessorResult.GetReturnCode

           INPUT
            Index               : long

           OUTPUT
            pCode               : long*'''
        return super(IGeoProcessorResult, self).GetReturnCode(Index)
    def GetMessages(self, severity):
        '''Method IGeoProcessorResult.GetMessages

           INPUT
            severity            : long

           OUTPUT
            pMessages           : BSTR*'''
        return super(IGeoProcessorResult, self).GetMessages(severity)
    def get_MaxSeverity(self):
        '''Method IGeoProcessorResult.get_MaxSeverity

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessorResult, self).get_MaxSeverity()
    def get_OutputCount(self):
        '''Method IGeoProcessorResult.get_OutputCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessorResult, self).get_OutputCount()
    def GetOutput(self, Index):
        '''Method IGeoProcessorResult.GetOutput

           INPUT
            Index               : long

           OUTPUT
            outputValue         : IGPValue**'''
        return super(IGeoProcessorResult, self).GetOutput(Index)
    def get_InputCount(self):
        '''Method IGeoProcessorResult.get_InputCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessorResult, self).get_InputCount()
    def GetInput(self, Index):
        '''Method IGeoProcessorResult.GetInput

           INPUT
            Index               : long

           OUTPUT
            inputValue          : IGPValue**'''
        return super(IGeoProcessorResult, self).GetInput(Index)
    def Cancel(self):
        '''Method IGeoProcessorResult.Cancel'''
        return super(IGeoProcessorResult, self).Cancel()
    def GetMapImageURL(self, pParamIndexes, Height, Width, resolution):
        '''Method IGeoProcessorResult.GetMapImageURL

           INPUTS
            pParamIndexes       : ILongArray*
            Height              : long
            Width               : long
            resolution          : long

           OUTPUT
            URL                 : BSTR*'''
        return super(IGeoProcessorResult, self).GetMapImageURL(pParamIndexes, Height, Width, resolution)
    InputCount = property(get_InputCount, None, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    MessageCount = property(get_MessageCount, None, None)
    OutputCount = property(get_OutputCount, None, None)
    ResultID = property(get_ResultID, None, None)
    ReturnValue = property(get_ReturnValue, None, None)
    Status = property(get_Status, None, None)

class IGeoProcessorEvents3(_esriGeoprocessing.IGeoProcessorEvents3):
    _IID = uuid.UUID('b7d4ef49-8fdd-4a67-88cd-b497e42d5969')
    def OnProgressMessage(self, result, message):
        '''Method IGeoProcessorEvents3.OnProgressMessage

           INPUTS
            result              : IGeoProcessorResult*
            message             : BSTR'''
        return super(IGeoProcessorEvents3, self).OnProgressMessage(result, message)
    def OnProgressShow(self, result, Show):
        '''Method IGeoProcessorEvents3.OnProgressShow

           INPUTS
            result              : IGeoProcessorResult*
            Show                : VARIANT_BOOL'''
        return super(IGeoProcessorEvents3, self).OnProgressShow(result, Show)
    def OnProgressPercentage(self, result, percentage):
        '''Method IGeoProcessorEvents3.OnProgressPercentage

           INPUTS
            result              : IGeoProcessorResult*
            percentage          : double'''
        return super(IGeoProcessorEvents3, self).OnProgressPercentage(result, percentage)
    def OnProcessMessages(self, result, pMsgs):
        '''Method IGeoProcessorEvents3.OnProcessMessages

           INPUTS
            result              : IGeoProcessorResult*
            pMsgs               : IGPMessages*'''
        return super(IGeoProcessorEvents3, self).OnProcessMessages(result, pMsgs)
    def PreToolExecute(self, result):
        '''Method IGeoProcessorEvents3.PreToolExecute

           INPUT
            result              : IGeoProcessorResult*'''
        return super(IGeoProcessorEvents3, self).PreToolExecute(result)
    def PostToolExecute(self, result):
        '''Method IGeoProcessorEvents3.PostToolExecute

           INPUT
            result              : IGeoProcessorResult*'''
        return super(IGeoProcessorEvents3, self).PostToolExecute(result)

class IGpObjectArray(_esriGeoprocessing.IGpObjectArray):
    _IID = uuid.UUID('02876181-9a06-4ef1-943a-15d337c2c90e')
    def get_Count(self):
        '''Method IGpObjectArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGpObjectArray, self).get_Count()
    def Add(self, pObject):
        '''Method IGpObjectArray.Add

           INPUT
            pObject             : IDispatch*'''
        return super(IGpObjectArray, self).Add(pObject)
    def GetObject(self, Element):
        '''Method IGpObjectArray.GetObject

           INPUT
            Element             : long

           OUTPUT
            ppObject            : IDispatch**'''
        return super(IGpObjectArray, self).GetObject(Element)
    def Reset(self):
        '''Method IGpObjectArray.Reset'''
        return super(IGpObjectArray, self).Reset()
    def Next(self):
        '''Method IGpObjectArray.Next

           OUTPUT
            ppObject            : IDispatch**'''
        return super(IGpObjectArray, self).Next()
    def __iter__(self):
        try:
            super(IGpObjectArray, self).Reset()
            val = super(IGpObjectArray, self).Next()
            while val:
                yield val
                val = super(IGpObjectArray, self).Next()
        except:
            pass
    def Remove(self, Element):
        '''Method IGpObjectArray.Remove

           INPUT
            Element             : long'''
        return super(IGpObjectArray, self).Remove(Element)
    def RemoveAll(self):
        '''Method IGpObjectArray.RemoveAll'''
        return super(IGpObjectArray, self).RemoveAll()
    def Insert(self, Element, pObject):
        '''Method IGpObjectArray.Insert

           INPUTS
            Element             : long
            pObject             : IDispatch*'''
        return super(IGpObjectArray, self).Insert(Element, pObject)
    def Replace(self, Element, pObject):
        '''Method IGpObjectArray.Replace

           INPUTS
            Element             : long
            pObject             : IDispatch*'''
        return super(IGpObjectArray, self).Replace(Element, pObject)
    def Clone(self, pSrcObj):
        '''Method IGpObjectArray.Clone

           INPUT
            pSrcObj             : IGpObjectArray*'''
        return super(IGpObjectArray, self).Clone(pSrcObj)
    Count = property(get_Count, None, None)

class IGpDescribeGeometry(_esriGeoprocessing.IGpDescribeGeometry):
    _IID = uuid.UUID('27dffb2e-7b69-4dde-8aca-42b14e37c5f0')
    def get_Type(self):
        '''Method IGpDescribeGeometry.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IGpDescribeGeometry, self).get_Type()
    def get_Extent(self):
        '''Method IGpDescribeGeometry.get_Extent

           OUTPUT
            Extent              : BSTR*'''
        return super(IGpDescribeGeometry, self).get_Extent()
    def get_Centroid(self, pInside):
        '''Method IGpDescribeGeometry.get_Centroid

           INPUT
            pInside             : VARIANT*

           OUTPUT
            Centroid            : BSTR*'''
        return super(IGpDescribeGeometry, self).get_Centroid(pInside)
    def get_TrueCentroid(self):
        '''Method IGpDescribeGeometry.get_TrueCentroid

           OUTPUT
            Centroid            : BSTR*'''
        return super(IGpDescribeGeometry, self).get_TrueCentroid()
    def get_LabelPoint(self):
        '''Method IGpDescribeGeometry.get_LabelPoint

           OUTPUT
            LabelPoint          : BSTR*'''
        return super(IGpDescribeGeometry, self).get_LabelPoint()
    def get_FirstPoint(self):
        '''Method IGpDescribeGeometry.get_FirstPoint

           OUTPUT
            FirstPoint          : BSTR*'''
        return super(IGpDescribeGeometry, self).get_FirstPoint()
    def get_LastPoint(self):
        '''Method IGpDescribeGeometry.get_LastPoint

           OUTPUT
            LastPoint           : BSTR*'''
        return super(IGpDescribeGeometry, self).get_LastPoint()
    def get_Area(self):
        '''Method IGpDescribeGeometry.get_Area

           OUTPUT
            Area                : double*'''
        return super(IGpDescribeGeometry, self).get_Area()
    def get_Length(self):
        '''Method IGpDescribeGeometry.get_Length

           OUTPUT
            Length              : double*'''
        return super(IGpDescribeGeometry, self).get_Length()
    def get_IsMultipart(self):
        '''Method IGpDescribeGeometry.get_IsMultipart

           OUTPUT
            multipart           : BSTR*'''
        return super(IGpDescribeGeometry, self).get_IsMultipart()
    def get_PartCount(self):
        '''Method IGpDescribeGeometry.get_PartCount

           OUTPUT
            Count               : long*'''
        return super(IGpDescribeGeometry, self).get_PartCount()
    def GetPart(self, part):
        '''Method IGpDescribeGeometry.GetPart

           INPUT
            part                : VARIANT*

           OUTPUT
            Points              : IDispatch**'''
        return super(IGpDescribeGeometry, self).GetPart(part)
    def GetGeometry(self):
        '''Method IGpDescribeGeometry.GetGeometry

           OUTPUT
            ppGeom              : IGeometry**'''
        return super(IGpDescribeGeometry, self).GetGeometry()
    def get_HullRectangle(self):
        '''Method IGpDescribeGeometry.get_HullRectangle

           OUTPUT
            rectangle           : BSTR*'''
        return super(IGpDescribeGeometry, self).get_HullRectangle()
    def get_PointCount(self):
        '''Method IGpDescribeGeometry.get_PointCount

           OUTPUT
            Count               : long*'''
        return super(IGpDescribeGeometry, self).get_PointCount()
    Area = property(get_Area, None, None)
    Extent = property(get_Extent, None, None)
    FirstPoint = property(get_FirstPoint, None, None)
    HullRectangle = property(get_HullRectangle, None, None)
    IsMultipart = property(get_IsMultipart, None, None)
    LabelPoint = property(get_LabelPoint, None, None)
    LastPoint = property(get_LastPoint, None, None)
    Length = property(get_Length, None, None)
    PartCount = property(get_PartCount, None, None)
    PointCount = property(get_PointCount, None, None)
    TrueCentroid = property(get_TrueCentroid, None, None)
    Type = property(get_Type, None, None)
    Centroid = IndexProperty(get_Centroid, None)

class IGpPointObject(_esriGeoprocessing.IGpPointObject):
    _IID = uuid.UUID('d667c872-3903-4b29-9eb5-febf6739f1b8')

    def __init__(self, *args, **kw):
        super(IGpPointObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_X(self):
        '''Method IGpPointObject.get_X

           OUTPUT
            X                   : double*'''
        return super(IGpPointObject, self).get_X()
    def put_X(self, X):
        '''Method IGpPointObject.put_X

           INPUT
            X                   : double'''
        return super(IGpPointObject, self).put_X(X)
    def get_Y(self):
        '''Method IGpPointObject.get_Y

           OUTPUT
            Y                   : double*'''
        return super(IGpPointObject, self).get_Y()
    def put_Y(self, Y):
        '''Method IGpPointObject.put_Y

           INPUT
            Y                   : double'''
        return super(IGpPointObject, self).put_Y(Y)
    def get_M(self):
        '''Method IGpPointObject.get_M

           OUTPUT
            M                   : double*'''
        return super(IGpPointObject, self).get_M()
    def put_M(self, M):
        '''Method IGpPointObject.put_M

           INPUT
            M                   : double'''
        return super(IGpPointObject, self).put_M(M)
    def get_Z(self):
        '''Method IGpPointObject.get_Z

           OUTPUT
            Z                   : double*'''
        return super(IGpPointObject, self).get_Z()
    def put_Z(self, Z):
        '''Method IGpPointObject.put_Z

           INPUT
            Z                   : double'''
        return super(IGpPointObject, self).put_Z(Z)
    def get_ID(self):
        '''Method IGpPointObject.get_ID

           OUTPUT
            ID                  : long*'''
        return super(IGpPointObject, self).get_ID()
    def put_ID(self, ID):
        '''Method IGpPointObject.put_ID

           INPUT
            ID                  : long'''
        return super(IGpPointObject, self).put_ID(ID)
    def SetPoint(self, pPoint):
        '''Method IGpPointObject.SetPoint

           INPUT
            pPoint              : IPoint*'''
        return super(IGpPointObject, self).SetPoint(pPoint)
    def Clone(self, pSrcObj):
        '''Method IGpPointObject.Clone

           INPUT
            pSrcObj             : IGpPointObject*'''
        return super(IGpPointObject, self).Clone(pSrcObj)
    ID = property(get_ID, put_ID, None)
    M = property(get_M, put_M, None)
    X = property(get_X, put_X, None)
    Y = property(get_Y, put_Y, None)
    Z = property(get_Z, put_Z, None)

class IGpPointObject2(_esriGeoprocessing.IGpPointObject2):
    _IID = uuid.UUID('91efa0f3-f7b2-42bf-9349-f80572c448a1')

    def __init__(self, *args, **kw):
        super(IGpPointObject2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasM(self):
        '''Method IGpPointObject2.get_HasM

           OUTPUT
            HasM                : VARIANT_BOOL*'''
        return super(IGpPointObject2, self).get_HasM()
    def put_HasM(self, HasM):
        '''Method IGpPointObject2.put_HasM

           INPUT
            HasM                : VARIANT_BOOL'''
        return super(IGpPointObject2, self).put_HasM(HasM)
    def get_HasZ(self):
        '''Method IGpPointObject2.get_HasZ

           OUTPUT
            HasZ                : VARIANT_BOOL*'''
        return super(IGpPointObject2, self).get_HasZ()
    def put_HasZ(self, HasZ):
        '''Method IGpPointObject2.put_HasZ

           INPUT
            HasZ                : VARIANT_BOOL'''
        return super(IGpPointObject2, self).put_HasZ(HasZ)
    HasM = property(get_HasM, put_HasM, None)
    HasZ = property(get_HasZ, put_HasZ, None)

class IGpRandomNumberGeneratorObject(_esriGeoprocessing.IGpRandomNumberGeneratorObject):
    _IID = uuid.UUID('9dbdd887-24c3-413c-89fd-b6b5839d0d26')

    def __init__(self, *args, **kw):
        super(IGpRandomNumberGeneratorObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RandomNumberGenerator(self):
        '''Method IGpRandomNumberGeneratorObject.get_RandomNumberGenerator

           OUTPUT
            ppRandGen           : IGPRandomNumberGenerator**'''
        return super(IGpRandomNumberGeneratorObject, self).get_RandomNumberGenerator()
    def putref_RandomNumberGenerator(self, ppRandGen):
        '''Method IGpRandomNumberGeneratorObject.putref_RandomNumberGenerator

           INPUT
            ppRandGen           : IGPRandomNumberGenerator*'''
        return super(IGpRandomNumberGeneratorObject, self).putref_RandomNumberGenerator(ppRandGen)
    def LoadFromString(self, valueText):
        '''Method IGpRandomNumberGeneratorObject.LoadFromString

           INPUT
            valueText           : BSTR'''
        return super(IGpRandomNumberGeneratorObject, self).LoadFromString(valueText)
    def ExportToString(self):
        '''Method IGpRandomNumberGeneratorObject.ExportToString

           OUTPUT
            valueText           : BSTR*'''
        return super(IGpRandomNumberGeneratorObject, self).ExportToString()
    RandomNumberGenerator = property(get_RandomNumberGenerator, putref_RandomNumberGenerator, None)

class IGpCursorRow(_esriGeoprocessing.IGpCursorRow):
    _IID = uuid.UUID('4ca0ac7e-0388-4bf9-ae30-ab5f876cbbef')
    def UpdateRow(self, pCursor, cursorCookie):
        '''Method IGpCursorRow.UpdateRow

           INPUTS
            pCursor             : ICursor*
            cursorCookie        : long'''
        return super(IGpCursorRow, self).UpdateRow(pCursor, cursorCookie)
    def InsertRow(self, pCursor, cursorCookie):
        '''Method IGpCursorRow.InsertRow

           INPUTS
            pCursor             : ICursor*
            cursorCookie        : long'''
        return super(IGpCursorRow, self).InsertRow(pCursor, cursorCookie)
    def DeleteRow(self, pCursor, cursorCookie):
        '''Method IGpCursorRow.DeleteRow

           INPUTS
            pCursor             : ICursor*
            cursorCookie        : long'''
        return super(IGpCursorRow, self).DeleteRow(pCursor, cursorCookie)
    def SetValue(self, Field, Value):
        '''Method IGpCursorRow.SetValue

           INPUTS
            Field               : BSTR
            Value               : VARIANT'''
        return super(IGpCursorRow, self).SetValue(Field, Value)
    def GetValue(self, Field):
        '''Method IGpCursorRow.GetValue

           INPUT
            Field               : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IGpCursorRow, self).GetValue(Field)
    def SetNull(self, Field):
        '''Method IGpCursorRow.SetNull

           INPUT
            Field               : BSTR'''
        return super(IGpCursorRow, self).SetNull(Field)
    def get_IsNull(self, Field):
        '''Method IGpCursorRow.get_IsNull

           INPUT
            Field               : BSTR

           OUTPUT
            IsNull              : VARIANT_BOOL*'''
        return super(IGpCursorRow, self).get_IsNull(Field)
    def SetRow(self, pRowBuffer, pRowSet):
        '''Method IGpCursorRow.SetRow

           INPUTS
            pRowBuffer          : IRowBuffer*
            pRowSet             : IPropertySet*'''
        return super(IGpCursorRow, self).SetRow(pRowBuffer, pRowSet)
    IsNull = IndexProperty(get_IsNull, None)

class IGpCursorRow2(_esriGeoprocessing.IGpCursorRow2):
    _IID = uuid.UUID('07897e4f-0a73-4f20-9c9a-5d31bc612340')
    def get_IsInsertCursor(self):
        '''Method IGpCursorRow2.get_IsInsertCursor

           OUTPUT
            isInsert            : VARIANT_BOOL*'''
        return super(IGpCursorRow2, self).get_IsInsertCursor()
    def GetOIDandGeomFieldNames(self):
        '''Method IGpCursorRow2.GetOIDandGeomFieldNames

           OUTPUTS
            OIDFieldName        : BSTR*
            GeomFieldName       : BSTR*'''
        return super(IGpCursorRow2, self).GetOIDandGeomFieldNames()
    def UpdateRow(self, pCursor, cursorCookie):
        '''Method IGpCursorRow.UpdateRow (from IGpCursorRow)

           INPUTS
            pCursor             : ICursor*
            cursorCookie        : long'''
        return super(IGpCursorRow2, self).UpdateRow(pCursor, cursorCookie)
    def InsertRow(self, pCursor, cursorCookie):
        '''Method IGpCursorRow.InsertRow (from IGpCursorRow)

           INPUTS
            pCursor             : ICursor*
            cursorCookie        : long'''
        return super(IGpCursorRow2, self).InsertRow(pCursor, cursorCookie)
    def DeleteRow(self, pCursor, cursorCookie):
        '''Method IGpCursorRow.DeleteRow (from IGpCursorRow)

           INPUTS
            pCursor             : ICursor*
            cursorCookie        : long'''
        return super(IGpCursorRow2, self).DeleteRow(pCursor, cursorCookie)
    def SetValue(self, Field, Value):
        '''Method IGpCursorRow.SetValue (from IGpCursorRow)

           INPUTS
            Field               : BSTR
            Value               : VARIANT'''
        return super(IGpCursorRow2, self).SetValue(Field, Value)
    def GetValue(self, Field):
        '''Method IGpCursorRow.GetValue (from IGpCursorRow)

           INPUT
            Field               : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IGpCursorRow2, self).GetValue(Field)
    def SetNull(self, Field):
        '''Method IGpCursorRow.SetNull (from IGpCursorRow)

           INPUT
            Field               : BSTR'''
        return super(IGpCursorRow2, self).SetNull(Field)
    def get_IsNull(self, Field):
        '''Method IGpCursorRow.get_IsNull (from IGpCursorRow)

           INPUT
            Field               : BSTR

           OUTPUT
            IsNull              : VARIANT_BOOL*'''
        return super(IGpCursorRow2, self).get_IsNull(Field)
    def SetRow(self, pRowBuffer, pRowSet):
        '''Method IGpCursorRow.SetRow (from IGpCursorRow)

           INPUTS
            pRowBuffer          : IRowBuffer*
            pRowSet             : IPropertySet*'''
        return super(IGpCursorRow2, self).SetRow(pRowBuffer, pRowSet)
    IsInsertCursor = property(get_IsInsertCursor, None, None)
    IsNull = IndexProperty(get_IsNull, None)

class IGpFieldMappingsObject(_esriGeoprocessing.IGpFieldMappingsObject):
    _IID = uuid.UUID('3fdf95a7-b0d6-446a-be8b-f2d75e801da8')

    def __init__(self, *args, **kw):
        super(IGpFieldMappingsObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FieldMapping(self, ppFieldMapping):
        '''Method IGpFieldMappingsObject.putref_FieldMapping

           INPUT
            ppFieldMapping      : IGPFieldMapping*'''
        return super(IGpFieldMappingsObject, self).putref_FieldMapping(ppFieldMapping)
    def get_FieldMapping(self):
        '''Method IGpFieldMappingsObject.get_FieldMapping

           OUTPUT
            ppFieldMapping      : IGPFieldMapping**'''
        return super(IGpFieldMappingsObject, self).get_FieldMapping()
    def AddTable(self, Table):
        '''Method IGpFieldMappingsObject.AddTable

           INPUT
            Table               : BSTR'''
        return super(IGpFieldMappingsObject, self).AddTable(Table)
    def put_FieldValidationWorkspace(self, Workspace):
        '''Method IGpFieldMappingsObject.put_FieldValidationWorkspace

           INPUT
            Workspace           : BSTR'''
        return super(IGpFieldMappingsObject, self).put_FieldValidationWorkspace(Workspace)
    def get_FieldValidationWorkspace(self):
        '''Method IGpFieldMappingsObject.get_FieldValidationWorkspace

           OUTPUT
            Workspace           : BSTR*'''
        return super(IGpFieldMappingsObject, self).get_FieldValidationWorkspace()
    def get_Fields(self):
        '''Method IGpFieldMappingsObject.get_Fields

           OUTPUT
            ppFields            : IDispatch**'''
        return super(IGpFieldMappingsObject, self).get_Fields()
    def get_FieldCount(self):
        '''Method IGpFieldMappingsObject.get_FieldCount

           OUTPUT
            pCount              : long*'''
        return super(IGpFieldMappingsObject, self).get_FieldCount()
    def RemoveAll(self):
        '''Method IGpFieldMappingsObject.RemoveAll'''
        return super(IGpFieldMappingsObject, self).RemoveAll()
    def AddFieldMap(self, pFieldMap):
        '''Method IGpFieldMappingsObject.AddFieldMap

           INPUT
            pFieldMap           : IDispatch*'''
        return super(IGpFieldMappingsObject, self).AddFieldMap(pFieldMap)
    def GetFieldMap(self, Index):
        '''Method IGpFieldMappingsObject.GetFieldMap

           INPUT
            Index               : long

           OUTPUT
            ppFieldMap          : IDispatch**'''
        return super(IGpFieldMappingsObject, self).GetFieldMap(Index)
    def ReplaceFieldMap(self, Index, pFieldMap):
        '''Method IGpFieldMappingsObject.ReplaceFieldMap

           INPUTS
            Index               : long
            pFieldMap           : IDispatch*'''
        return super(IGpFieldMappingsObject, self).ReplaceFieldMap(Index, pFieldMap)
    def RemoveFieldMap(self, Index):
        '''Method IGpFieldMappingsObject.RemoveFieldMap

           INPUT
            Index               : long'''
        return super(IGpFieldMappingsObject, self).RemoveFieldMap(Index)
    def FindFieldMapIndex(self, FieldName):
        '''Method IGpFieldMappingsObject.FindFieldMapIndex

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGpFieldMappingsObject, self).FindFieldMapIndex(FieldName)
    def LoadFromString(self, valueText):
        '''Method IGpFieldMappingsObject.LoadFromString

           INPUT
            valueText           : BSTR'''
        return super(IGpFieldMappingsObject, self).LoadFromString(valueText)
    def ExportToString(self):
        '''Method IGpFieldMappingsObject.ExportToString

           OUTPUT
            valueText           : BSTR*'''
        return super(IGpFieldMappingsObject, self).ExportToString()
    FieldCount = property(get_FieldCount, None, None)
    FieldMapping = property(get_FieldMapping, putref_FieldMapping, None)
    FieldValidationWorkspace = property(get_FieldValidationWorkspace, put_FieldValidationWorkspace, None)
    Fields = property(get_Fields, None, None)

class IGpFieldMapObject(_esriGeoprocessing.IGpFieldMapObject):
    _IID = uuid.UUID('7afa67b8-09f0-4d5c-ae19-f2b7b3c8a167')

    def __init__(self, *args, **kw):
        super(IGpFieldMapObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FieldMap(self, ppFieldMap):
        '''Method IGpFieldMapObject.putref_FieldMap

           INPUT
            ppFieldMap          : IGPFieldMap*'''
        return super(IGpFieldMapObject, self).putref_FieldMap(ppFieldMap)
    def get_FieldMap(self):
        '''Method IGpFieldMapObject.get_FieldMap

           OUTPUT
            ppFieldMap          : IGPFieldMap**'''
        return super(IGpFieldMapObject, self).get_FieldMap()
    def put_MergeRule(self, rule):
        '''Method IGpFieldMapObject.put_MergeRule

           INPUT
            rule                : BSTR'''
        return super(IGpFieldMapObject, self).put_MergeRule(rule)
    def get_MergeRule(self):
        '''Method IGpFieldMapObject.get_MergeRule

           OUTPUT
            rule                : BSTR*'''
        return super(IGpFieldMapObject, self).get_MergeRule()
    def put_JoinDelimiter(self, Delimiter):
        '''Method IGpFieldMapObject.put_JoinDelimiter

           INPUT
            Delimiter           : BSTR'''
        return super(IGpFieldMapObject, self).put_JoinDelimiter(Delimiter)
    def get_JoinDelimiter(self):
        '''Method IGpFieldMapObject.get_JoinDelimiter

           OUTPUT
            Delimiter           : BSTR*'''
        return super(IGpFieldMapObject, self).get_JoinDelimiter()
    def get_OutputField(self):
        '''Method IGpFieldMapObject.get_OutputField

           OUTPUT
            ppField             : IDispatch**'''
        return super(IGpFieldMapObject, self).get_OutputField()
    def put_OutputField(self, ppField):
        '''Method IGpFieldMapObject.put_OutputField

           INPUT
            ppField             : IDispatch*'''
        return super(IGpFieldMapObject, self).put_OutputField(ppField)
    def AddInputField(self, Table, Field, pStartTextValue, pEndTextValue):
        '''Method IGpFieldMapObject.AddInputField

           INPUTS
            Table               : BSTR
            Field               : BSTR
            pStartTextValue     : VARIANT*
            pEndTextValue       : VARIANT*'''
        return super(IGpFieldMapObject, self).AddInputField(Table, Field, pStartTextValue, pEndTextValue)
    def GetInputTableName(self, Index):
        '''Method IGpFieldMapObject.GetInputTableName

           INPUT
            Index               : long

           OUTPUT
            pTable              : BSTR*'''
        return super(IGpFieldMapObject, self).GetInputTableName(Index)
    def GetInputFieldName(self, Index):
        '''Method IGpFieldMapObject.GetInputFieldName

           INPUT
            Index               : long

           OUTPUT
            pField              : BSTR*'''
        return super(IGpFieldMapObject, self).GetInputFieldName(Index)
    def GetStartTextPosition(self, Index):
        '''Method IGpFieldMapObject.GetStartTextPosition

           INPUT
            Index               : long

           OUTPUT
            pStart              : long*'''
        return super(IGpFieldMapObject, self).GetStartTextPosition(Index)
    def GetEndTextPosition(self, Index):
        '''Method IGpFieldMapObject.GetEndTextPosition

           INPUT
            Index               : long

           OUTPUT
            pEnd                : long*'''
        return super(IGpFieldMapObject, self).GetEndTextPosition(Index)
    def get_InputFieldCount(self):
        '''Method IGpFieldMapObject.get_InputFieldCount

           OUTPUT
            pCount              : long*'''
        return super(IGpFieldMapObject, self).get_InputFieldCount()
    def RemoveAll(self):
        '''Method IGpFieldMapObject.RemoveAll'''
        return super(IGpFieldMapObject, self).RemoveAll()
    def RemoveInputField(self, Index):
        '''Method IGpFieldMapObject.RemoveInputField

           INPUT
            Index               : long'''
        return super(IGpFieldMapObject, self).RemoveInputField(Index)
    def FindInputFieldIndex(self, Table, Field):
        '''Method IGpFieldMapObject.FindInputFieldIndex

           INPUTS
            Table               : BSTR
            Field               : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGpFieldMapObject, self).FindInputFieldIndex(Table, Field)
    def SetStartTextPosition(self, Index, Start):
        '''Method IGpFieldMapObject.SetStartTextPosition

           INPUTS
            Index               : long
            Start               : long'''
        return super(IGpFieldMapObject, self).SetStartTextPosition(Index, Start)
    def SetEndTextPosition(self, Index, end):
        '''Method IGpFieldMapObject.SetEndTextPosition

           INPUTS
            Index               : long
            end                 : long'''
        return super(IGpFieldMapObject, self).SetEndTextPosition(Index, end)
    FieldMap = property(get_FieldMap, putref_FieldMap, None)
    InputFieldCount = property(get_InputFieldCount, None, None)
    JoinDelimiter = property(get_JoinDelimiter, put_JoinDelimiter, None)
    MergeRule = property(get_MergeRule, put_MergeRule, None)
    OutputField = property(get_OutputField, put_OutputField, None)

class IGpDescribeField(_esriGeoprocessing.IGpDescribeField):
    _IID = uuid.UUID('95c402e9-4fe5-4eb5-9ecb-bd009bc4b039')

    def __init__(self, *args, **kw):
        super(IGpDescribeField, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGpDescribeField.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGpDescribeField, self).get_Name()
    def put_Name(self, Name):
        '''Method IGpDescribeField.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGpDescribeField, self).put_Name(Name)
    def get_AliasName(self):
        '''Method IGpDescribeField.get_AliasName

           OUTPUT
            Name                : BSTR*'''
        return super(IGpDescribeField, self).get_AliasName()
    def put_AliasName(self, Name):
        '''Method IGpDescribeField.put_AliasName

           INPUT
            Name                : BSTR'''
        return super(IGpDescribeField, self).put_AliasName(Name)
    def get_Domain(self):
        '''Method IGpDescribeField.get_Domain

           OUTPUT
            Name                : BSTR*'''
        return super(IGpDescribeField, self).get_Domain()
    def put_Domain(self, Name):
        '''Method IGpDescribeField.put_Domain

           INPUT
            Name                : BSTR'''
        return super(IGpDescribeField, self).put_Domain(Name)
    def get_Editable(self):
        '''Method IGpDescribeField.get_Editable

           OUTPUT
            Editable            : BSTR*'''
        return super(IGpDescribeField, self).get_Editable()
    def put_Editable(self, Editable):
        '''Method IGpDescribeField.put_Editable

           INPUT
            Editable            : BSTR'''
        return super(IGpDescribeField, self).put_Editable(Editable)
    def get_IsNullable(self):
        '''Method IGpDescribeField.get_IsNullable

           OUTPUT
            IsNullable          : BSTR*'''
        return super(IGpDescribeField, self).get_IsNullable()
    def put_IsNullable(self, IsNullable):
        '''Method IGpDescribeField.put_IsNullable

           INPUT
            IsNullable          : BSTR'''
        return super(IGpDescribeField, self).put_IsNullable(IsNullable)
    def get_Required(self):
        '''Method IGpDescribeField.get_Required

           OUTPUT
            Required            : BSTR*'''
        return super(IGpDescribeField, self).get_Required()
    def put_Required(self, Required):
        '''Method IGpDescribeField.put_Required

           INPUT
            Required            : BSTR'''
        return super(IGpDescribeField, self).put_Required(Required)
    def get_Length(self):
        '''Method IGpDescribeField.get_Length

           OUTPUT
            Length              : long*'''
        return super(IGpDescribeField, self).get_Length()
    def put_Length(self, Length):
        '''Method IGpDescribeField.put_Length

           INPUT
            Length              : long'''
        return super(IGpDescribeField, self).put_Length(Length)
    def get_Precision(self):
        '''Method IGpDescribeField.get_Precision

           OUTPUT
            Precision           : long*'''
        return super(IGpDescribeField, self).get_Precision()
    def put_Precision(self, Precision):
        '''Method IGpDescribeField.put_Precision

           INPUT
            Precision           : long'''
        return super(IGpDescribeField, self).put_Precision(Precision)
    def get_Scale(self):
        '''Method IGpDescribeField.get_Scale

           OUTPUT
            Scale               : long*'''
        return super(IGpDescribeField, self).get_Scale()
    def put_Scale(self, Scale):
        '''Method IGpDescribeField.put_Scale

           INPUT
            Scale               : long'''
        return super(IGpDescribeField, self).put_Scale(Scale)
    def get_Type(self):
        '''Method IGpDescribeField.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IGpDescribeField, self).get_Type()
    def put_Type(self, Type):
        '''Method IGpDescribeField.put_Type

           INPUT
            Type                : BSTR'''
        return super(IGpDescribeField, self).put_Type(Type)
    def SetField(self, Field):
        '''Method IGpDescribeField.SetField

           INPUT
            Field               : IField*'''
        return super(IGpDescribeField, self).SetField(Field)
    def GetField(self):
        '''Method IGpDescribeField.GetField

           OUTPUT
            Field               : IField**'''
        return super(IGpDescribeField, self).GetField()
    def put_Position(self, pos):
        '''Method IGpDescribeField.put_Position

           INPUT
            pos                 : long'''
        return super(IGpDescribeField, self).put_Position(pos)
    def get_Position(self):
        '''Method IGpDescribeField.get_Position

           OUTPUT
            pos                 : long*'''
        return super(IGpDescribeField, self).get_Position()
    AliasName = property(get_AliasName, put_AliasName, None)
    Domain = property(get_Domain, put_Domain, None)
    Editable = property(get_Editable, put_Editable, None)
    IsNullable = property(get_IsNullable, put_IsNullable, None)
    Length = property(get_Length, put_Length, None)
    Name = property(get_Name, put_Name, None)
    Position = property(get_Position, put_Position, None)
    Precision = property(get_Precision, put_Precision, None)
    Required = property(get_Required, put_Required, None)
    Scale = property(get_Scale, put_Scale, None)
    Type = property(get_Type, put_Type, None)

class IGpDescribeIndex(_esriGeoprocessing.IGpDescribeIndex):
    _IID = uuid.UUID('b6da9ad5-c907-403a-a1b6-7cf2ccba0d54')
    def get_Name(self):
        '''Method IGpDescribeIndex.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGpDescribeIndex, self).get_Name()
    def get_IsAscending(self):
        '''Method IGpDescribeIndex.get_IsAscending

           OUTPUT
            IsAscending         : BSTR*'''
        return super(IGpDescribeIndex, self).get_IsAscending()
    def get_IsUnique(self):
        '''Method IGpDescribeIndex.get_IsUnique

           OUTPUT
            IsUnique            : BSTR*'''
        return super(IGpDescribeIndex, self).get_IsUnique()
    def get_Fields(self):
        '''Method IGpDescribeIndex.get_Fields

           OUTPUT
            Fields              : IGpEnumObject**'''
        return super(IGpDescribeIndex, self).get_Fields()
    Fields = property(get_Fields, None, None)
    IsAscending = property(get_IsAscending, None, None)
    IsUnique = property(get_IsUnique, None, None)
    Name = property(get_Name, None, None)

class IGpFieldInfoObject(_esriGeoprocessing.IGpFieldInfoObject):
    _IID = uuid.UUID('b8aa3d79-0605-49a9-b351-647fea86bc94')
    def AddField(self, FieldName, newFieldName, Visible, SplitRule):
        '''Method IGpFieldInfoObject.AddField

           INPUTS
            FieldName           : BSTR
            newFieldName        : BSTR
            Visible             : BSTR
            SplitRule           : BSTR'''
        return super(IGpFieldInfoObject, self).AddField(FieldName, newFieldName, Visible, SplitRule)
    def get_Count(self):
        '''Method IGpFieldInfoObject.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGpFieldInfoObject, self).get_Count()
    def GetFieldName(self, Index):
        '''Method IGpFieldInfoObject.GetFieldName

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IGpFieldInfoObject, self).GetFieldName(Index)
    def GetNewName(self, Index):
        '''Method IGpFieldInfoObject.GetNewName

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IGpFieldInfoObject, self).GetNewName(Index)
    def GetSplitRule(self, Index):
        '''Method IGpFieldInfoObject.GetSplitRule

           INPUT
            Index               : long

           OUTPUT
            rule                : BSTR*'''
        return super(IGpFieldInfoObject, self).GetSplitRule(Index)
    def GetVisible(self, Index):
        '''Method IGpFieldInfoObject.GetVisible

           INPUT
            Index               : long

           OUTPUT
            Visible             : BSTR*'''
        return super(IGpFieldInfoObject, self).GetVisible(Index)
    def SetFieldName(self, Index, Name):
        '''Method IGpFieldInfoObject.SetFieldName

           INPUTS
            Index               : long
            Name                : BSTR'''
        return super(IGpFieldInfoObject, self).SetFieldName(Index, Name)
    def SetNewName(self, Index, Name):
        '''Method IGpFieldInfoObject.SetNewName

           INPUTS
            Index               : long
            Name                : BSTR'''
        return super(IGpFieldInfoObject, self).SetNewName(Index, Name)
    def SetSplitRule(self, Index, rule):
        '''Method IGpFieldInfoObject.SetSplitRule

           INPUTS
            Index               : long
            rule                : BSTR'''
        return super(IGpFieldInfoObject, self).SetSplitRule(Index, rule)
    def SetVisible(self, Index, Visible):
        '''Method IGpFieldInfoObject.SetVisible

           INPUTS
            Index               : long
            Visible             : BSTR'''
        return super(IGpFieldInfoObject, self).SetVisible(Index, Visible)
    def RemoveField(self, Index):
        '''Method IGpFieldInfoObject.RemoveField

           INPUT
            Index               : long'''
        return super(IGpFieldInfoObject, self).RemoveField(Index)
    def FindFieldByName(self, FieldName):
        '''Method IGpFieldInfoObject.FindFieldByName

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGpFieldInfoObject, self).FindFieldByName(FieldName)
    def FindFieldByNewName(self, FieldName):
        '''Method IGpFieldInfoObject.FindFieldByNewName

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(IGpFieldInfoObject, self).FindFieldByNewName(FieldName)
    def LoadFromString(self, Value):
        '''Method IGpFieldInfoObject.LoadFromString

           INPUT
            Value               : BSTR'''
        return super(IGpFieldInfoObject, self).LoadFromString(Value)
    def ExportToString(self):
        '''Method IGpFieldInfoObject.ExportToString

           OUTPUT
            Value               : BSTR*'''
        return super(IGpFieldInfoObject, self).ExportToString()
    Count = property(get_Count, None, None)

class IGPNetCDFWorkspace(_esriGeoprocessing.IGPNetCDFWorkspace):
    _IID = uuid.UUID('989fab73-2af7-4823-9be0-5732bf089aa6')
    def Initialize(self, pNetCDFWorkspace):
        '''Method IGPNetCDFWorkspace.Initialize

           INPUT
            pNetCDFWorkspace    : INetCDFWorkspace*'''
        return super(IGPNetCDFWorkspace, self).Initialize(pNetCDFWorkspace)
    def GetVariables(self):
        '''Method IGPNetCDFWorkspace.GetVariables

           OUTPUT
            ppNames             : IGpEnumList**'''
        return super(IGPNetCDFWorkspace, self).GetVariables()
    def GetVariablesByDimension(self, dimension):
        '''Method IGPNetCDFWorkspace.GetVariablesByDimension

           INPUT
            dimension           : BSTR

           OUTPUT
            ppNames             : IGpEnumList**'''
        return super(IGPNetCDFWorkspace, self).GetVariablesByDimension(dimension)
    def GetDimensions(self):
        '''Method IGPNetCDFWorkspace.GetDimensions

           OUTPUT
            ppNames             : IGpEnumList**'''
        return super(IGPNetCDFWorkspace, self).GetDimensions()
    def GetDimensionsByVariable(self, variable):
        '''Method IGPNetCDFWorkspace.GetDimensionsByVariable

           INPUT
            variable            : BSTR

           OUTPUT
            ppNames             : IGpEnumList**'''
        return super(IGPNetCDFWorkspace, self).GetDimensionsByVariable(variable)
    def GetDimensionSize(self, dimension):
        '''Method IGPNetCDFWorkspace.GetDimensionSize

           INPUT
            dimension           : BSTR

           OUTPUT
            pSize               : long*'''
        return super(IGPNetCDFWorkspace, self).GetDimensionSize(dimension)
    def GetDimensionValue(self, dimension, Index):
        '''Method IGPNetCDFWorkspace.GetDimensionValue

           INPUTS
            dimension           : BSTR
            Index               : long

           OUTPUT
            pValue              : VARIANT*'''
        return super(IGPNetCDFWorkspace, self).GetDimensionValue(dimension, Index)
    def GetDimensionIndex(self, dimension, Value):
        '''Method IGPNetCDFWorkspace.GetDimensionIndex

           INPUTS
            dimension           : BSTR
            Value               : VARIANT

           OUTPUT
            pIndex              : long*'''
        return super(IGPNetCDFWorkspace, self).GetDimensionIndex(dimension, Value)
    def GetAttributeNames(self, variable):
        '''Method IGPNetCDFWorkspace.GetAttributeNames

           INPUT
            variable            : BSTR

           OUTPUT
            ppNames             : IGpEnumList**'''
        return super(IGPNetCDFWorkspace, self).GetAttributeNames(variable)
    def GetAttributeValue(self, variable, attribute, valueIndex):
        '''Method IGPNetCDFWorkspace.GetAttributeValue

           INPUTS
            variable            : BSTR
            attribute           : BSTR
            valueIndex          : long

           OUTPUT
            pValue              : VARIANT*'''
        return super(IGPNetCDFWorkspace, self).GetAttributeValue(variable, attribute, valueIndex)
    def GetFieldType(self, Name):
        '''Method IGPNetCDFWorkspace.GetFieldType

           INPUT
            Name                : BSTR

           OUTPUT
            pType               : BSTR*'''
        return super(IGPNetCDFWorkspace, self).GetFieldType(Name)
    def GetSpatialReference(self, variable, xDim, yDim):
        '''Method IGPNetCDFWorkspace.GetSpatialReference

           INPUTS
            variable            : BSTR
            xDim                : BSTR
            yDim                : BSTR

           OUTPUT
            ppGpSpRefObj        : IGpSpRefObject**'''
        return super(IGPNetCDFWorkspace, self).GetSpatialReference(variable, xDim, yDim)

class IGPToolBackground(_esriGeoprocessing.IGPToolBackground):
    _IID = uuid.UUID('632f8246-0681-4222-9080-48ad9fadade7')

    def __init__(self, *args, **kw):
        super(IGPToolBackground, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanRunInBackground(self):
        '''Method IGPToolBackground.get_CanRunInBackground

           OUTPUT
            pCanRunInBackground : VARIANT_BOOL*'''
        return super(IGPToolBackground, self).get_CanRunInBackground()
    def put_CanRunInBackground(self, pCanRunInBackground):
        '''Method IGPToolBackground.put_CanRunInBackground

           INPUT
            pCanRunInBackground : VARIANT_BOOL'''
        return super(IGPToolBackground, self).put_CanRunInBackground(pCanRunInBackground)
    CanRunInBackground = property(get_CanRunInBackground, put_CanRunInBackground, None)

class IGPComHelper(_esriGeoprocessing.IGPComHelper):
    _IID = uuid.UUID('1e54e6b6-c2b0-470f-b030-d81d9464f3b3')
    def Execute(self, ToolName, params, TrackCancel):
        '''Method IGPComHelper.Execute

           INPUTS
            ToolName            : BSTR
            params              : IPropertySet*
            TrackCancel         : ITrackCancel*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGPComHelper, self).Execute(ToolName, params, TrackCancel)
    def GetParameterName(self, ToolName, Index):
        '''Method IGPComHelper.GetParameterName

           INPUTS
            ToolName            : BSTR
            Index               : long

           OUTPUT
            paramName           : BSTR*'''
        return super(IGPComHelper, self).GetParameterName(ToolName, Index)
    def AddToolbox(self, Toolbox):
        '''Method IGPComHelper.AddToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGPComHelper, self).AddToolbox(Toolbox)
    def RemoveToolbox(self, Toolbox):
        '''Method IGPComHelper.RemoveToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGPComHelper, self).RemoveToolbox(Toolbox)
    def get_EnvironmentManager(self):
        '''Method IGPComHelper.get_EnvironmentManager

           OUTPUT
            envMgr              : IGPEnvironmentManager**'''
        return super(IGPComHelper, self).get_EnvironmentManager()
    EnvironmentManager = property(get_EnvironmentManager, None, None)

class IGpDispatch(_esriGeoprocessing.IGpDispatch):
    _IID = uuid.UUID('ccbc8b04-f507-423d-a9b8-20971e86ea86')

    def __init__(self, *args, **kw):
        super(IGpDispatch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MessageCount(self):
        '''Method IGpDispatch.get_MessageCount

           OUTPUT
            Count               : long*'''
        return super(IGpDispatch, self).get_MessageCount()
    def GetMessage(self, Index):
        '''Method IGpDispatch.GetMessage

           INPUT
            Index               : long

           OUTPUT
            message             : BSTR*'''
        return super(IGpDispatch, self).GetMessage(Index)
    def GetSeverity(self, Index):
        '''Method IGpDispatch.GetSeverity

           INPUT
            Index               : long

           OUTPUT
            severity            : long*'''
        return super(IGpDispatch, self).GetSeverity(Index)
    def GetReturnCode(self, Index):
        '''Method IGpDispatch.GetReturnCode

           INPUT
            Index               : long

           OUTPUT
            code                : long*'''
        return super(IGpDispatch, self).GetReturnCode(Index)
    def GetMessages(self, severity):
        '''Method IGpDispatch.GetMessages

           INPUT
            severity            : VARIANT*

           OUTPUT
            Messages            : BSTR*'''
        return super(IGpDispatch, self).GetMessages(severity)
    def get_MaxSeverity(self):
        '''Method IGpDispatch.get_MaxSeverity

           OUTPUT
            severity            : long*'''
        return super(IGpDispatch, self).get_MaxSeverity()
    def AddMessage(self, message):
        '''Method IGpDispatch.AddMessage

           INPUT
            message             : BSTR'''
        return super(IGpDispatch, self).AddMessage(message)
    def AddError(self, message):
        '''Method IGpDispatch.AddError

           INPUT
            message             : BSTR'''
        return super(IGpDispatch, self).AddError(message)
    def AddWarning(self, message):
        '''Method IGpDispatch.AddWarning

           INPUT
            message             : BSTR'''
        return super(IGpDispatch, self).AddWarning(message)
    def AddReturnMessage(self, Index):
        '''Method IGpDispatch.AddReturnMessage

           INPUT
            Index               : long'''
        return super(IGpDispatch, self).AddReturnMessage(Index)
    def SetProduct(self, code):
        '''Method IGpDispatch.SetProduct

           INPUT
            code                : BSTR

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).SetProduct(code)
    def CheckProduct(self, code):
        '''Method IGpDispatch.CheckProduct

           INPUT
            code                : BSTR

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).CheckProduct(code)
    def ProductInfo(self):
        '''Method IGpDispatch.ProductInfo

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).ProductInfo()
    def CheckOutExtension(self, extension):
        '''Method IGpDispatch.CheckOutExtension

           INPUT
            extension           : BSTR

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).CheckOutExtension(extension)
    def CheckInExtension(self, extension):
        '''Method IGpDispatch.CheckInExtension

           INPUT
            extension           : BSTR

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).CheckInExtension(extension)
    def CheckExtension(self, extension):
        '''Method IGpDispatch.CheckExtension

           INPUT
            extension           : BSTR

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).CheckExtension(extension)
    def get_ParameterCount(self):
        '''Method IGpDispatch.get_ParameterCount

           OUTPUT
            Count               : long*'''
        return super(IGpDispatch, self).get_ParameterCount()
    def GetParameterAsText(self, Index):
        '''Method IGpDispatch.GetParameterAsText

           INPUT
            Index               : long

           OUTPUT
            argument            : BSTR*'''
        return super(IGpDispatch, self).GetParameterAsText(Index)
    def SetParameterAsText(self, Index, argument):
        '''Method IGpDispatch.SetParameterAsText

           INPUTS
            Index               : long
            argument            : BSTR'''
        return super(IGpDispatch, self).SetParameterAsText(Index, argument)
    def CopyParameter(self, From, to):
        '''Method IGpDispatch.CopyParameter

           INPUTS
            from                : long
            to                  : long'''
        return super(IGpDispatch, self).CopyParameter(From, to)
    def ListTools(self, pWildcard):
        '''Method IGpDispatch.ListTools

           INPUT
            pWildcard           : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListTools(pWildcard)
    def ListEnvironments(self, pWildcard):
        '''Method IGpDispatch.ListEnvironments

           INPUT
            pWildcard           : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListEnvironments(pWildcard)
    def ListToolboxes(self, pWildcard):
        '''Method IGpDispatch.ListToolboxes

           INPUT
            pWildcard           : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListToolboxes(pWildcard)
    def put_Toolbox(self, Toolbox):
        '''Method IGpDispatch.put_Toolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGpDispatch, self).put_Toolbox(Toolbox)
    def get_Toolbox(self):
        '''Method IGpDispatch.get_Toolbox

           OUTPUT
            Toolbox             : BSTR*'''
        return super(IGpDispatch, self).get_Toolbox()
    def AddToolbox(self, Toolbox):
        '''Method IGpDispatch.AddToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGpDispatch, self).AddToolbox(Toolbox)
    def RemoveToolbox(self, Toolbox):
        '''Method IGpDispatch.RemoveToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGpDispatch, self).RemoveToolbox(Toolbox)
    def GetSystemEnvironment(self, envName):
        '''Method IGpDispatch.GetSystemEnvironment

           INPUT
            envName             : BSTR

           OUTPUT
            pEnvironment        : BSTR*'''
        return super(IGpDispatch, self).GetSystemEnvironment(envName)
    def Command(self, CommandLine):
        '''Method IGpDispatch.Command

           INPUT
            CommandLine         : BSTR

           OUTPUT
            Results             : BSTR*'''
        return super(IGpDispatch, self).Command(CommandLine)
    def Usage(self, Method):
        '''Method IGpDispatch.Usage

           INPUT
            Method              : BSTR

           OUTPUT
            Usage               : BSTR*'''
        return super(IGpDispatch, self).Usage(Method)
    def Exists(self, pInputValue, DataType):
        '''Method IGpDispatch.Exists

           INPUTS
            pInputValue         : VARIANT*
            DataType            : VARIANT*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGpDispatch, self).Exists(pInputValue, DataType)
    def RefreshCatalog(self, pInputValue):
        '''Method IGpDispatch.RefreshCatalog

           INPUT
            pInputValue         : VARIANT*'''
        return super(IGpDispatch, self).RefreshCatalog(pInputValue)
    def ListFeatureClasses(self, wildCard, FeatureType, dataset):
        '''Method IGpDispatch.ListFeatureClasses

           INPUTS
            wildCard            : VARIANT*
            FeatureType         : VARIANT*
            dataset             : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListFeatureClasses(wildCard, FeatureType, dataset)
    def ListDatasets(self, wildCard, FeatureType):
        '''Method IGpDispatch.ListDatasets

           INPUTS
            wildCard            : VARIANT*
            FeatureType         : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListDatasets(wildCard, FeatureType)
    def ListTables(self, wildCard, tableType):
        '''Method IGpDispatch.ListTables

           INPUTS
            wildCard            : VARIANT*
            tableType           : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListTables(wildCard, tableType)
    def ListRasters(self, wildCard, RasterType):
        '''Method IGpDispatch.ListRasters

           INPUTS
            wildCard            : VARIANT*
            RasterType          : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListRasters(wildCard, RasterType)
    def ListWorkspaces(self, wildCard, workspaceType):
        '''Method IGpDispatch.ListWorkspaces

           INPUTS
            wildCard            : VARIANT*
            workspaceType       : VARIANT*

           OUTPUT
            ppEnumList          : IDispatch**'''
        return super(IGpDispatch, self).ListWorkspaces(wildCard, workspaceType)
    def ListFields(self, pInputValue, wildCard, FieldType):
        '''Method IGpDispatch.ListFields

           INPUTS
            pInputValue         : VARIANT*
            wildCard            : VARIANT*
            FieldType           : VARIANT*

           OUTPUT
            ppDescribe          : IDispatch**'''
        return super(IGpDispatch, self).ListFields(pInputValue, wildCard, FieldType)
    def ListIndexes(self, pInputValue, wildCard):
        '''Method IGpDispatch.ListIndexes

           INPUTS
            pInputValue         : VARIANT*
            wildCard            : VARIANT*

           OUTPUT
            ppDescribe          : IDispatch**'''
        return super(IGpDispatch, self).ListIndexes(pInputValue, wildCard)
    def SearchCursor(self, pInputValue, WhereClause, SpRef, Fields, sortFields):
        '''Method IGpDispatch.SearchCursor

           INPUTS
            pInputValue         : VARIANT*
            WhereClause         : VARIANT*
            SpRef               : VARIANT*
            Fields              : VARIANT*
            sortFields          : VARIANT*

           OUTPUT
            ppCursor            : IDispatch**'''
        return super(IGpDispatch, self).SearchCursor(pInputValue, WhereClause, SpRef, Fields, sortFields)
    def UpdateCursor(self, pInputValue, WhereClause, SpRef, Fields, sortFields):
        '''Method IGpDispatch.UpdateCursor

           INPUTS
            pInputValue         : VARIANT*
            WhereClause         : VARIANT*
            SpRef               : VARIANT*
            Fields              : VARIANT*
            sortFields          : VARIANT*

           OUTPUT
            ppCursor            : IDispatch**'''
        return super(IGpDispatch, self).UpdateCursor(pInputValue, WhereClause, SpRef, Fields, sortFields)
    def InsertCursor(self, pInputValue, SpRef):
        '''Method IGpDispatch.InsertCursor

           INPUTS
            pInputValue         : VARIANT*
            SpRef               : VARIANT*

           OUTPUT
            ppCursor            : IDispatch**'''
        return super(IGpDispatch, self).InsertCursor(pInputValue, SpRef)
    def Describe(self, pInputValue, DataType):
        '''Method IGpDispatch.Describe

           INPUTS
            pInputValue         : VARIANT*
            DataType            : VARIANT*

           OUTPUT
            ppDescribe          : IDispatch**'''
        return super(IGpDispatch, self).Describe(pInputValue, DataType)
    def CreateObject(self, pObjectName, pExtraArg):
        '''Method IGpDispatch.CreateObject

           INPUTS
            pObjectName         : VARIANT*
            pExtraArg           : VARIANT*

           OUTPUT
            ppObject            : IDispatch**'''
        return super(IGpDispatch, self).CreateObject(pObjectName, pExtraArg)
    def CreateRandomValueGenerator(self, Seed, distributionType):
        '''Method IGpDispatch.CreateRandomValueGenerator

           INPUTS
            Seed                : long
            distributionType    : BSTR

           OUTPUT
            ppObject            : IDispatch**'''
        return super(IGpDispatch, self).CreateRandomValueGenerator(Seed, distributionType)
    def put_OverwriteOutput(self, OverwriteOutput):
        '''Method IGpDispatch.put_OverwriteOutput

           INPUT
            OverwriteOutput     : VARIANT_BOOL'''
        return super(IGpDispatch, self).put_OverwriteOutput(OverwriteOutput)
    def get_OverwriteOutput(self):
        '''Method IGpDispatch.get_OverwriteOutput

           OUTPUT
            OverwriteOutput     : VARIANT_BOOL*'''
        return super(IGpDispatch, self).get_OverwriteOutput()
    def put_LogHistory(self, LogHistory):
        '''Method IGpDispatch.put_LogHistory

           INPUT
            LogHistory          : VARIANT_BOOL'''
        return super(IGpDispatch, self).put_LogHistory(LogHistory)
    def get_LogHistory(self):
        '''Method IGpDispatch.get_LogHistory

           OUTPUT
            LogHistory          : VARIANT_BOOL*'''
        return super(IGpDispatch, self).get_LogHistory()
    def ValidateFieldName(self, inputFieldName, Workspace):
        '''Method IGpDispatch.ValidateFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputFieldName     : BSTR*'''
        return super(IGpDispatch, self).ValidateFieldName(inputFieldName, Workspace)
    def ValidateTableName(self, inputTableName, Workspace):
        '''Method IGpDispatch.ValidateTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGpDispatch, self).ValidateTableName(inputTableName, Workspace)
    def QualifyFieldName(self, inputFieldName, Workspace):
        '''Method IGpDispatch.QualifyFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputFieldName     : BSTR*'''
        return super(IGpDispatch, self).QualifyFieldName(inputFieldName, Workspace)
    def QualifyTableName(self, inputTableName, Workspace):
        '''Method IGpDispatch.QualifyTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGpDispatch, self).QualifyTableName(inputTableName, Workspace)
    def ParseFieldName(self, inputFieldName, Workspace):
        '''Method IGpDispatch.ParseFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputParsedName    : BSTR*'''
        return super(IGpDispatch, self).ParseFieldName(inputFieldName, Workspace)
    def ParseTableName(self, inputTableName, Workspace):
        '''Method IGpDispatch.ParseTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputParsedName    : BSTR*'''
        return super(IGpDispatch, self).ParseTableName(inputTableName, Workspace)
    def CreateScratchName(self, Prefix, Suffix, DataType, Workspace):
        '''Method IGpDispatch.CreateScratchName

           INPUTS
            Prefix              : VARIANT*
            Suffix              : VARIANT*
            DataType            : VARIANT*
            Workspace           : VARIANT*

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGpDispatch, self).CreateScratchName(Prefix, Suffix, DataType, Workspace)
    def CreateUniqueName(self, inputTableName, Workspace):
        '''Method IGpDispatch.CreateUniqueName

           INPUTS
            inputTableName      : BSTR
            Workspace           : VARIANT*

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGpDispatch, self).CreateUniqueName(inputTableName, Workspace)
    def SaveSettings(self, FileName):
        '''Method IGpDispatch.SaveSettings

           INPUT
            FileName            : BSTR'''
        return super(IGpDispatch, self).SaveSettings(FileName)
    def LoadSettings(self, FileName):
        '''Method IGpDispatch.LoadSettings

           INPUT
            FileName            : BSTR'''
        return super(IGpDispatch, self).LoadSettings(FileName)
    def TestSchemaLock(self, FileName):
        '''Method IGpDispatch.TestSchemaLock

           INPUT
            FileName            : BSTR

           OUTPUT
            Status              : BSTR*'''
        return super(IGpDispatch, self).TestSchemaLock(FileName)
    def ClearEnvironment(self, env):
        '''Method IGpDispatch.ClearEnvironment

           INPUT
            env                 : BSTR'''
        return super(IGpDispatch, self).ClearEnvironment(env)
    def ResetEnvironments(self):
        '''Method IGpDispatch.ResetEnvironments'''
        return super(IGpDispatch, self).ResetEnvironments()
    LogHistory = property(get_LogHistory, put_LogHistory, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    MessageCount = property(get_MessageCount, None, None)
    OverwriteOutput = property(get_OverwriteOutput, put_OverwriteOutput, None)
    ParameterCount = property(get_ParameterCount, None, None)
    Toolbox = property(get_Toolbox, put_Toolbox, None)

class IGPArc(_esriGeoprocessing.IGPArc):
    _IID = uuid.UUID('a6aa3a20-f338-4fa0-b6c9-02f081c54560')
    def PushString(self, String):
        '''Method IGPArc.PushString

           INPUT
            String              : BSTR'''
        return super(IGPArc, self).PushString(String)
    def Command(self, Command, pTrackCancel, pMessages):
        '''Method IGPArc.Command

           INPUTS
            Command             : BSTR
            pTrackCancel        : ITrackCancel*
            pMessages           : IGPMessages*'''
        return super(IGPArc, self).Command(Command, pTrackCancel, pMessages)
    def ReleaseInternals(self):
        '''Method IGPArc.ReleaseInternals'''
        return super(IGPArc, self).ReleaseInternals()

class IGPLayersAndTablesDomain(_esriGeoprocessing.IGPLayersAndTablesDomain):
    _IID = uuid.UUID('a875e6f9-613d-4e85-9f7a-6b9422f5b062')

    def __init__(self, *args, **kw):
        super(IGPLayersAndTablesDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_HideDELayer(self, hide):
        '''Method IGPLayersAndTablesDomain.put_HideDELayer

           INPUT
            hide                : VARIANT_BOOL'''
        return super(IGPLayersAndTablesDomain, self).put_HideDELayer(hide)
    def get_HideDELayer(self):
        '''Method IGPLayersAndTablesDomain.get_HideDELayer

           OUTPUT
            hide                : VARIANT_BOOL*'''
        return super(IGPLayersAndTablesDomain, self).get_HideDELayer()
    HideDELayer = property(get_HideDELayer, put_HideDELayer, None)

class IGPTablesDomain(_esriGeoprocessing.IGPTablesDomain):
    _IID = uuid.UUID('15844bbd-aec1-4315-9ba9-9a95a3644af9')

    def __init__(self, *args, **kw):
        super(IGPTablesDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_HideJoinedLayers(self, hide):
        '''Method IGPTablesDomain.put_HideJoinedLayers

           INPUT
            hide                : VARIANT_BOOL'''
        return super(IGPTablesDomain, self).put_HideJoinedLayers(hide)
    def get_HideJoinedLayers(self):
        '''Method IGPTablesDomain.get_HideJoinedLayers

           OUTPUT
            hide                : VARIANT_BOOL*'''
        return super(IGPTablesDomain, self).get_HideJoinedLayers()
    HideJoinedLayers = property(get_HideJoinedLayers, put_HideJoinedLayers, None)

class IGPTablesDomain2(_esriGeoprocessing.IGPTablesDomain2):
    _IID = uuid.UUID('79f5ea17-26d0-44be-9a8b-f3dda0a32ef1')

    def __init__(self, *args, **kw):
        super(IGPTablesDomain2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ShowOnlyStandaloneTables(self, bShowOnlyStandaloneTables):
        '''Method IGPTablesDomain2.put_ShowOnlyStandaloneTables

           INPUT
            bShowOnlyStandaloneTables: VARIANT_BOOL'''
        return super(IGPTablesDomain2, self).put_ShowOnlyStandaloneTables(bShowOnlyStandaloneTables)
    def get_ShowOnlyStandaloneTables(self):
        '''Method IGPTablesDomain2.get_ShowOnlyStandaloneTables

           OUTPUT
            bShowOnlyStandaloneTables: VARIANT_BOOL*'''
        return super(IGPTablesDomain2, self).get_ShowOnlyStandaloneTables()
    def put_HideJoinedLayers(self, hide):
        '''Method IGPTablesDomain.put_HideJoinedLayers (from IGPTablesDomain)

           INPUT
            hide                : VARIANT_BOOL'''
        return super(IGPTablesDomain2, self).put_HideJoinedLayers(hide)
    def get_HideJoinedLayers(self):
        '''Method IGPTablesDomain.get_HideJoinedLayers (from IGPTablesDomain)

           OUTPUT
            hide                : VARIANT_BOOL*'''
        return super(IGPTablesDomain2, self).get_HideJoinedLayers()
    HideJoinedLayers = property(get_HideJoinedLayers, put_HideJoinedLayers, None)
    ShowOnlyStandaloneTables = property(get_ShowOnlyStandaloneTables, put_ShowOnlyStandaloneTables, None)

class IMdElementDialogSupport(_esriGeoprocessing.IMdElementDialogSupport):
    _IID = uuid.UUID('14e33f2b-0ccf-48c8-a393-3cfd49766933')

    def __init__(self, *args, **kw):
        super(IMdElementDialogSupport, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Stylesheet(self):
        '''Method IMdElementDialogSupport.get_Stylesheet

           OUTPUT
            Stylesheet          : BSTR*'''
        return super(IMdElementDialogSupport, self).get_Stylesheet()
    def put_Stylesheet(self, Stylesheet):
        '''Method IMdElementDialogSupport.put_Stylesheet

           INPUT
            Stylesheet          : BSTR'''
        return super(IMdElementDialogSupport, self).put_Stylesheet(Stylesheet)
    Stylesheet = property(get_Stylesheet, put_Stylesheet, None)

class IEnumGPVariable(_esriGeoprocessing.IEnumGPVariable):
    _IID = uuid.UUID('ec254d4e-ecc5-4a36-9304-6aa60c7ec8f5')
    def Next(self):
        '''Method IEnumGPVariable.Next

           OUTPUT
            variable            : IGPVariable**'''
        return super(IEnumGPVariable, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPVariable, self).Reset()
            val = super(IEnumGPVariable, self).Next()
            while val:
                yield val
                val = super(IEnumGPVariable, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPVariable.Reset'''
        return super(IEnumGPVariable, self).Reset()

class IEnumGPDataType(_esriGeoprocessing.IEnumGPDataType):
    _IID = uuid.UUID('026a8df6-199c-41fb-a286-a67230d8371c')
    def Next(self):
        '''Method IEnumGPDataType.Next

           OUTPUT
            ppType              : IGPDataType**'''
        return super(IEnumGPDataType, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPDataType, self).Reset()
            val = super(IEnumGPDataType, self).Next()
            while val:
                yield val
                val = super(IEnumGPDataType, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPDataType.Reset'''
        return super(IEnumGPDataType, self).Reset()

class IEnumFieldType(_esriGeoprocessing.IEnumFieldType):
    _IID = uuid.UUID('6be153c4-4451-4180-80ab-8d79db63ac04')
    def Next(self):
        '''Method IEnumFieldType.Next

           OUTPUT
            pType               : esriFieldType*'''
        return super(IEnumFieldType, self).Next()
    def __iter__(self):
        try:
            super(IEnumFieldType, self).Reset()
            val = super(IEnumFieldType, self).Next()
            while val:
                yield val
                val = super(IEnumFieldType, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumFieldType.Reset'''
        return super(IEnumFieldType, self).Reset()

class IEnumGeometryType(_esriGeoprocessing.IEnumGeometryType):
    _IID = uuid.UUID('b2151e46-0e8d-4cd7-9078-e9bab1f39fcf')
    def Next(self):
        '''Method IEnumGeometryType.Next

           OUTPUT
            pType               : esriGeometryType*'''
        return super(IEnumGeometryType, self).Next()
    def __iter__(self):
        try:
            super(IEnumGeometryType, self).Reset()
            val = super(IEnumGeometryType, self).Next()
            while val:
                yield val
                val = super(IEnumGeometryType, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGeometryType.Reset'''
        return super(IEnumGeometryType, self).Reset()

class IGPSAGeoDataDomain(_esriGeoprocessing.IGPSAGeoDataDomain):
    _IID = uuid.UUID('c20fa807-c504-446c-8279-39a9170c8ffe')

    def __init__(self, *args, **kw):
        super(IGPSAGeoDataDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataTypeCount(self):
        '''Method IGPSAGeoDataDomain.get_DataTypeCount

           OUTPUT
            pCount              : long*'''
        return super(IGPSAGeoDataDomain, self).get_DataTypeCount()
    def get_DataType(self, Index):
        '''Method IGPSAGeoDataDomain.get_DataType

           INPUT
            Index               : long

           OUTPUT
            Type                : IGPDataType**'''
        return super(IGPSAGeoDataDomain, self).get_DataType(Index)
    def AddDataType(self, Type):
        '''Method IGPSAGeoDataDomain.AddDataType

           INPUT
            Type                : IGPDataType*'''
        return super(IGPSAGeoDataDomain, self).AddDataType(Type)
    def RemoveDataType(self, Type):
        '''Method IGPSAGeoDataDomain.RemoveDataType

           INPUT
            Type                : IGPDataType*'''
        return super(IGPSAGeoDataDomain, self).RemoveDataType(Type)
    def ClearDataType(self):
        '''Method IGPSAGeoDataDomain.ClearDataType'''
        return super(IGPSAGeoDataDomain, self).ClearDataType()
    def get_DataTypes(self):
        '''Method IGPSAGeoDataDomain.get_DataTypes

           OUTPUT
            types               : IEnumGPDataType**'''
        return super(IGPSAGeoDataDomain, self).get_DataTypes()
    def get_FieldTypeCount(self):
        '''Method IGPSAGeoDataDomain.get_FieldTypeCount

           OUTPUT
            pCount              : long*'''
        return super(IGPSAGeoDataDomain, self).get_FieldTypeCount()
    def get_FieldType(self, Index):
        '''Method IGPSAGeoDataDomain.get_FieldType

           INPUT
            Index               : long

           OUTPUT
            Type                : esriFieldType*'''
        return super(IGPSAGeoDataDomain, self).get_FieldType(Index)
    def AddFieldType(self, Type):
        '''Method IGPSAGeoDataDomain.AddFieldType

           INPUT
            Type                : esriFieldType'''
        return super(IGPSAGeoDataDomain, self).AddFieldType(Type)
    def RemoveFieldType(self, Type):
        '''Method IGPSAGeoDataDomain.RemoveFieldType

           INPUT
            Type                : esriFieldType'''
        return super(IGPSAGeoDataDomain, self).RemoveFieldType(Type)
    def ClearFieldType(self):
        '''Method IGPSAGeoDataDomain.ClearFieldType'''
        return super(IGPSAGeoDataDomain, self).ClearFieldType()
    def get_FieldTypes(self):
        '''Method IGPSAGeoDataDomain.get_FieldTypes

           OUTPUT
            types               : IEnumFieldType**'''
        return super(IGPSAGeoDataDomain, self).get_FieldTypes()
    def get_GeometryTypeCount(self):
        '''Method IGPSAGeoDataDomain.get_GeometryTypeCount

           OUTPUT
            pCount              : long*'''
        return super(IGPSAGeoDataDomain, self).get_GeometryTypeCount()
    def get_GeometryType(self, Index):
        '''Method IGPSAGeoDataDomain.get_GeometryType

           INPUT
            Index               : long

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IGPSAGeoDataDomain, self).get_GeometryType(Index)
    def AddGeometryType(self, Type):
        '''Method IGPSAGeoDataDomain.AddGeometryType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPSAGeoDataDomain, self).AddGeometryType(Type)
    def RemoveGeometryType(self, Type):
        '''Method IGPSAGeoDataDomain.RemoveGeometryType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPSAGeoDataDomain, self).RemoveGeometryType(Type)
    def ClearGeometryType(self):
        '''Method IGPSAGeoDataDomain.ClearGeometryType'''
        return super(IGPSAGeoDataDomain, self).ClearGeometryType()
    def get_GeometryTypes(self):
        '''Method IGPSAGeoDataDomain.get_GeometryTypes

           OUTPUT
            types               : IEnumGeometryType**'''
        return super(IGPSAGeoDataDomain, self).get_GeometryTypes()
    def ValidateDataType(self, Type):
        '''Method IGPSAGeoDataDomain.ValidateDataType

           INPUT
            Type                : IGPDataType*

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(IGPSAGeoDataDomain, self).ValidateDataType(Type)
    def ValidateFieldType(self, Type):
        '''Method IGPSAGeoDataDomain.ValidateFieldType

           INPUT
            Type                : esriFieldType

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(IGPSAGeoDataDomain, self).ValidateFieldType(Type)
    def ValidateGeometryType(self, Type):
        '''Method IGPSAGeoDataDomain.ValidateGeometryType

           INPUT
            Type                : esriGeometryType

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(IGPSAGeoDataDomain, self).ValidateGeometryType(Type)
    def SelectFields(self, pDETable):
        '''Method IGPSAGeoDataDomain.SelectFields

           INPUT
            pDETable            : IDETable*

           OUTPUT
            ppFields            : IArray**'''
        return super(IGPSAGeoDataDomain, self).SelectFields(pDETable)
    def SelectFromWorkspace(self, workspacepath):
        '''Method IGPSAGeoDataDomain.SelectFromWorkspace

           INPUT
            workspacepath       : BSTR

           OUTPUT
            ppDEGeoDatasets     : IArray**'''
        return super(IGPSAGeoDataDomain, self).SelectFromWorkspace(workspacepath)
    def SelectFromArray(self, DEGeoDatasets):
        '''Method IGPSAGeoDataDomain.SelectFromArray

           INPUT
            DEGeoDatasets       : IArray*

           OUTPUT
            ppDEGeoDatasets     : IArray**'''
        return super(IGPSAGeoDataDomain, self).SelectFromArray(DEGeoDatasets)
    def SetRasterData(self, integerOnly, allowFormulated):
        '''Method IGPSAGeoDataDomain.SetRasterData

           INPUTS
            integerOnly         : VARIANT_BOOL
            allowFormulated     : VARIANT_BOOL'''
        return super(IGPSAGeoDataDomain, self).SetRasterData(integerOnly, allowFormulated)
    def SetFeatureData(self):
        '''Method IGPSAGeoDataDomain.SetFeatureData'''
        return super(IGPSAGeoDataDomain, self).SetFeatureData()
    def SetPointFeatureData(self):
        '''Method IGPSAGeoDataDomain.SetPointFeatureData'''
        return super(IGPSAGeoDataDomain, self).SetPointFeatureData()
    def SetLineFeatureData(self):
        '''Method IGPSAGeoDataDomain.SetLineFeatureData'''
        return super(IGPSAGeoDataDomain, self).SetLineFeatureData()
    def SetAreaFeatureData(self):
        '''Method IGPSAGeoDataDomain.SetAreaFeatureData'''
        return super(IGPSAGeoDataDomain, self).SetAreaFeatureData()
    def SetNumericFieldTypes(self, integerOnly, allowOID):
        '''Method IGPSAGeoDataDomain.SetNumericFieldTypes

           INPUTS
            integerOnly         : VARIANT_BOOL
            allowOID            : VARIANT_BOOL'''
        return super(IGPSAGeoDataDomain, self).SetNumericFieldTypes(integerOnly, allowOID)
    def put_CheckField(self, bUse):
        '''Method IGPSAGeoDataDomain.put_CheckField

           INPUT
            bUse                : VARIANT_BOOL'''
        return super(IGPSAGeoDataDomain, self).put_CheckField(bUse)
    def get_CheckField(self):
        '''Method IGPSAGeoDataDomain.get_CheckField

           OUTPUT
            bUse                : VARIANT_BOOL*'''
        return super(IGPSAGeoDataDomain, self).get_CheckField()
    def put_DefaultFieldName(self, FieldName):
        '''Method IGPSAGeoDataDomain.put_DefaultFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IGPSAGeoDataDomain, self).put_DefaultFieldName(FieldName)
    def get_DefaultFieldName(self):
        '''Method IGPSAGeoDataDomain.get_DefaultFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IGPSAGeoDataDomain, self).get_DefaultFieldName()
    CheckField = property(get_CheckField, put_CheckField, None)
    DataTypeCount = property(get_DataTypeCount, None, None)
    DataTypes = property(get_DataTypes, None, None)
    DefaultFieldName = property(get_DefaultFieldName, put_DefaultFieldName, None)
    FieldTypeCount = property(get_FieldTypeCount, None, None)
    FieldTypes = property(get_FieldTypes, None, None)
    GeometryTypeCount = property(get_GeometryTypeCount, None, None)
    GeometryTypes = property(get_GeometryTypes, None, None)
    DataType = IndexProperty(get_DataType, None)
    FieldType = IndexProperty(get_FieldType, None)
    GeometryType = IndexProperty(get_GeometryType, None)

class IGPGraphUtilitiesUI(_esriGeoprocessing.IGPGraphUtilitiesUI):
    _IID = uuid.UUID('efff76b8-1004-48a8-857d-6e4a5578bdd4')
    def get_DocumentGraphs(self):
        '''Method IGPGraphUtilitiesUI.get_DocumentGraphs

           OUTPUT
            ppGraphs            : IDataGraphCollection**'''
        return super(IGPGraphUtilitiesUI, self).get_DocumentGraphs()
    def OpenGraph(self, pGraph):
        '''Method IGPGraphUtilitiesUI.OpenGraph

           INPUT
            pGraph              : IDataGraphBase*'''
        return super(IGPGraphUtilitiesUI, self).OpenGraph(pGraph)
    def CreateZonalHistogramGraph(self, pTable, pColors, pZoneFields, histoTitle, legnedTitle, labelFieldName):
        '''Method IGPGraphUtilitiesUI.CreateZonalHistogramGraph

           INPUTS
            pTable              : ITable*
            pColors             : IArray*
            pZoneFields         : IStringArray*
            histoTitle          : BSTR
            legnedTitle         : BSTR
            labelFieldName      : BSTR

           OUTPUT
            ppDGT               : IDataGraphT**'''
        return super(IGPGraphUtilitiesUI, self).CreateZonalHistogramGraph(pTable, pColors, pZoneFields, histoTitle, legnedTitle, labelFieldName)
    DocumentGraphs = property(get_DocumentGraphs, None, None)

class INAClassFieldMapItemHelperImpl(_esriGeoprocessing.INAClassFieldMapItemHelperImpl):
    _IID = uuid.UUID('c6b50935-7778-488c-9b71-88b2ba4fb54f')

    def __init__(self, *args, **kw):
        super(INAClassFieldMapItemHelperImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FieldName(self):
        '''Method INAClassFieldMapItemHelperImpl.get_FieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(INAClassFieldMapItemHelperImpl, self).get_FieldName()
    def ExportToString(self):
        '''Method INAClassFieldMapItemHelperImpl.ExportToString

           OUTPUT
            valueText           : BSTR*'''
        return super(INAClassFieldMapItemHelperImpl, self).ExportToString()
    def get_IsDefault(self):
        '''Method INAClassFieldMapItemHelperImpl.get_IsDefault

           OUTPUT
            IsDefault           : VARIANT_BOOL*'''
        return super(INAClassFieldMapItemHelperImpl, self).get_IsDefault()
    def put_MappedField(self, MappedField):
        '''Method INAClassFieldMapItemHelperImpl.put_MappedField

           INPUT
            MappedField         : BSTR'''
        return super(INAClassFieldMapItemHelperImpl, self).put_MappedField(MappedField)
    def get_MappedField(self):
        '''Method INAClassFieldMapItemHelperImpl.get_MappedField

           OUTPUT
            MappedField         : BSTR*'''
        return super(INAClassFieldMapItemHelperImpl, self).get_MappedField()
    def put_DefaultValue(self, Value):
        '''Method INAClassFieldMapItemHelperImpl.put_DefaultValue

           INPUT
            Value               : VARIANT'''
        return super(INAClassFieldMapItemHelperImpl, self).put_DefaultValue(Value)
    def get_DefaultValue(self):
        '''Method INAClassFieldMapItemHelperImpl.get_DefaultValue

           OUTPUT
            Value               : VARIANT*'''
        return super(INAClassFieldMapItemHelperImpl, self).get_DefaultValue()
    def ResetDefaultValue(self):
        '''Method INAClassFieldMapItemHelperImpl.ResetDefaultValue'''
        return super(INAClassFieldMapItemHelperImpl, self).ResetDefaultValue()
    DefaultValue = property(get_DefaultValue, put_DefaultValue, None)
    FieldName = property(get_FieldName, None, None)
    IsDefault = property(get_IsDefault, None, None)
    MappedField = property(get_MappedField, put_MappedField, None)

class INAClassFieldMappingsHelperImpl(_esriGeoprocessing.INAClassFieldMappingsHelperImpl):
    _IID = uuid.UUID('db1cc986-aac9-4ece-bb87-4f9c60afd16b')
    def GetSubDataLayerNames(self, naLayer, naClassEditType, naLocationType, shapeType):
        '''Method INAClassFieldMappingsHelperImpl.GetSubDataLayerNames

           INPUTS
            naLayer             : ILayer*
            naClassEditType     : BSTR
            naLocationType      : BSTR
            shapeType           : esriGeometryType

           OUTPUT
            names               : IStringArray**'''
        return super(INAClassFieldMappingsHelperImpl, self).GetSubDataLayerNames(naLayer, naClassEditType, naLocationType, shapeType)
    def GetSubDataLayer(self, naLayer, subDataLayerName):
        '''Method INAClassFieldMappingsHelperImpl.GetSubDataLayer

           INPUTS
            naLayer             : ILayer*
            subDataLayerName    : BSTR

           OUTPUT
            subDataLayer        : IDataLayer**'''
        return super(INAClassFieldMappingsHelperImpl, self).GetSubDataLayer(naLayer, subDataLayerName)
    def GetNAClassDefinitionProperties(self, subDataLayer):
        '''Method INAClassFieldMappingsHelperImpl.GetNAClassDefinitionProperties

           INPUT
            subDataLayer        : IDataLayer*

           OUTPUTS
            isInputClass        : VARIANT_BOOL*
            isOutputClass       : VARIANT_BOOL*
            isLocationClass     : VARIANT_BOOL*
            shapeType           : esriGeometryType*'''
        return super(INAClassFieldMappingsHelperImpl, self).GetNAClassDefinitionProperties(subDataLayer)
    def Initialize(self, naLayer, subDataLayerName, useLocationFields, sourceFields):
        '''Method INAClassFieldMappingsHelperImpl.Initialize

           INPUTS
            naLayer             : ILayer*
            subDataLayerName    : BSTR
            useLocationFields   : VARIANT_BOOL
            sourceFields        : IFields*'''
        return super(INAClassFieldMappingsHelperImpl, self).Initialize(naLayer, subDataLayerName, useLocationFields, sourceFields)
    def get_IsInitialized(self):
        '''Method INAClassFieldMappingsHelperImpl.get_IsInitialized

           OUTPUT
            IsInitialized       : VARIANT_BOOL*'''
        return super(INAClassFieldMappingsHelperImpl, self).get_IsInitialized()
    def get_MappableFieldNames(self):
        '''Method INAClassFieldMappingsHelperImpl.get_MappableFieldNames

           OUTPUT
            fieldNames          : IStringArray**'''
        return super(INAClassFieldMappingsHelperImpl, self).get_MappableFieldNames()
    def GetFieldMapItem(self, FieldName):
        '''Method INAClassFieldMappingsHelperImpl.GetFieldMapItem

           INPUT
            FieldName           : BSTR

           OUTPUT
            fieldMapItem        : INAClassFieldMapItemHelperImpl**'''
        return super(INAClassFieldMappingsHelperImpl, self).GetFieldMapItem(FieldName)
    IsInitialized = property(get_IsInitialized, None, None)
    MappableFieldNames = property(get_MappableFieldNames, None, None)

class INASolverPropertiesHelperImpl(_esriGeoprocessing.INASolverPropertiesHelperImpl):
    _IID = uuid.UUID('80a11d14-ae0d-4569-a76f-c07b3cca5b72')

    def __init__(self, *args, **kw):
        super(INASolverPropertiesHelperImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Initialize(self, naLayerOrSolver):
        '''Method INASolverPropertiesHelperImpl.Initialize

           INPUT
            naLayerOrSolver     : IUnknown*'''
        return super(INASolverPropertiesHelperImpl, self).Initialize(naLayerOrSolver)
    def get_IsInitialized(self):
        '''Method INASolverPropertiesHelperImpl.get_IsInitialized

           OUTPUT
            IsInitialized       : VARIANT_BOOL*'''
        return super(INASolverPropertiesHelperImpl, self).get_IsInitialized()
    def put_Value(self, propertyName, Value):
        '''Method INASolverPropertiesHelperImpl.put_Value

           INPUTS
            propertyName        : BSTR
            Value               : VARIANT'''
        return super(INASolverPropertiesHelperImpl, self).put_Value(propertyName, Value)
    def get_Value(self, propertyName):
        '''Method INASolverPropertiesHelperImpl.get_Value

           INPUT
            propertyName        : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(INASolverPropertiesHelperImpl, self).get_Value(propertyName)
    def get_Keywords(self, propertyName):
        '''Method INASolverPropertiesHelperImpl.get_Keywords

           INPUT
            propertyName        : BSTR

           OUTPUT
            Keywords            : IStringArray**'''
        return super(INASolverPropertiesHelperImpl, self).get_Keywords(propertyName)
    def get_CompositePropertyIdentifierNames(self, compositePropertyName):
        '''Method INASolverPropertiesHelperImpl.get_CompositePropertyIdentifierNames

           INPUT
            compositePropertyName: BSTR

           OUTPUT
            names               : IStringArray**'''
        return super(INASolverPropertiesHelperImpl, self).get_CompositePropertyIdentifierNames(compositePropertyName)
    def get_CompositePropertyIdentifierSubNames(self, compositePropertyName, identifierName):
        '''Method INASolverPropertiesHelperImpl.get_CompositePropertyIdentifierSubNames

           INPUTS
            compositePropertyName: BSTR
            identifierName      : BSTR

           OUTPUT
            subNames            : IStringArray**'''
        return super(INASolverPropertiesHelperImpl, self).get_CompositePropertyIdentifierSubNames(compositePropertyName, identifierName)
    def get_CompositePropertyItemVarType(self, compositePropertyName, identifierName, subName):
        '''Method INASolverPropertiesHelperImpl.get_CompositePropertyItemVarType

           INPUTS
            compositePropertyName: BSTR
            identifierName      : BSTR
            subName             : BSTR

           OUTPUT
            varType             : long*'''
        return super(INASolverPropertiesHelperImpl, self).get_CompositePropertyItemVarType(compositePropertyName, identifierName, subName)
    def get_CompositePropertyItemKeywords(self, compositePropertyName, identifierName, subName):
        '''Method INASolverPropertiesHelperImpl.get_CompositePropertyItemKeywords

           INPUTS
            compositePropertyName: BSTR
            identifierName      : BSTR
            subName             : BSTR

           OUTPUT
            Keywords            : IStringArray**'''
        return super(INASolverPropertiesHelperImpl, self).get_CompositePropertyItemKeywords(compositePropertyName, identifierName, subName)
    def put_CompositePropertyItemValue(self, compositePropertyName, identifierName, subName, itemValue):
        '''Method INASolverPropertiesHelperImpl.put_CompositePropertyItemValue

           INPUTS
            compositePropertyName: BSTR
            identifierName      : BSTR
            subName             : BSTR
            itemValue           : VARIANT'''
        return super(INASolverPropertiesHelperImpl, self).put_CompositePropertyItemValue(compositePropertyName, identifierName, subName, itemValue)
    def get_CompositePropertyItemValue(self, compositePropertyName, identifierName, subName):
        '''Method INASolverPropertiesHelperImpl.get_CompositePropertyItemValue

           INPUTS
            compositePropertyName: BSTR
            identifierName      : BSTR
            subName             : BSTR

           OUTPUT
            itemValue           : VARIANT*'''
        return super(INASolverPropertiesHelperImpl, self).get_CompositePropertyItemValue(compositePropertyName, identifierName, subName)
    CompositePropertyItemValue = property(None, put_CompositePropertyItemValue, None)
    IsInitialized = property(get_IsInitialized, None, None)
    Value = property(None, put_Value, None)
    CompositePropertyIdentifierNames = IndexProperty(get_CompositePropertyIdentifierNames, None)
    Keywords = IndexProperty(get_Keywords, None)
    Value = IndexProperty(get_Value, None)

class IGPToolCommandHelperImpl(_esriGeoprocessing.IGPToolCommandHelperImpl):
    _IID = uuid.UUID('4d95d3b9-0436-4a10-8321-c7f85e9ae264')

    def __init__(self, *args, **kw):
        super(IGPToolCommandHelperImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SetPreview(self, _arg1):
        '''Method IGPToolCommandHelperImpl.put_SetPreview

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPToolCommandHelperImpl, self).put_SetPreview(_arg1)
    SetPreview = property(None, put_SetPreview, None)

class IGPTableViewImpl(_esriGeoprocessing.IGPTableViewImpl):
    _IID = uuid.UUID('65da2717-8fd5-488d-9bd3-8ef88a548be3')
    def get_OriginalDE(self):
        '''Method IGPTableViewImpl.get_OriginalDE

           OUTPUT
            DETable             : IDETable**'''
        return super(IGPTableViewImpl, self).get_OriginalDE()
    OriginalDE = property(get_OriginalDE, None, None)

class IMdElementDebug(_esriGeoprocessing.IMdElementDebug):
    _IID = uuid.UUID('6f52bdf6-2ba7-4509-80fe-e41abfb2767c')
    def Show(self):
        '''Method IMdElementDebug.Show'''
        return super(IMdElementDebug, self).Show()

class IMdDiagramPropertiesImpl(_esriGeoprocessing.IMdDiagramPropertiesImpl):
    _IID = uuid.UUID('3b27ddaf-b8d2-409f-9f43-c08ee3a38a37')
    def GetDisplayNodes(self):
        '''Method IMdDiagramPropertiesImpl.GetDisplayNodes

           OUTPUT
            ppNodes             : IArray**'''
        return super(IMdDiagramPropertiesImpl, self).GetDisplayNodes()
    def SetDisplayNodes(self, pNodes):
        '''Method IMdDiagramPropertiesImpl.SetDisplayNodes

           INPUT
            pNodes              : IArray*'''
        return super(IMdDiagramPropertiesImpl, self).SetDisplayNodes(pNodes)
    def GetDefaultDisplayNodes(self, defaultID):
        '''Method IMdDiagramPropertiesImpl.GetDefaultDisplayNodes

           INPUT
            defaultID           : long

           OUTPUT
            ppNodes             : IArray**'''
        return super(IMdDiagramPropertiesImpl, self).GetDefaultDisplayNodes(defaultID)
    def GetDisplayEdges(self):
        '''Method IMdDiagramPropertiesImpl.GetDisplayEdges

           OUTPUT
            ppEdges             : IArray**'''
        return super(IMdDiagramPropertiesImpl, self).GetDisplayEdges()
    def SetDisplayEdges(self, pEdges):
        '''Method IMdDiagramPropertiesImpl.SetDisplayEdges

           INPUT
            pEdges              : IArray*'''
        return super(IMdDiagramPropertiesImpl, self).SetDisplayEdges(pEdges)
    def GetDefaultDisplayEdges(self, defaultID):
        '''Method IMdDiagramPropertiesImpl.GetDefaultDisplayEdges

           INPUT
            defaultID           : long

           OUTPUT
            ppEdges             : IArray**'''
        return super(IMdDiagramPropertiesImpl, self).GetDefaultDisplayEdges(defaultID)
    def GetVersion(self):
        '''Method IMdDiagramPropertiesImpl.GetVersion

           OUTPUT
            pVersion            : long*'''
        return super(IMdDiagramPropertiesImpl, self).GetVersion()

class IToolboxWorkspaceImpl(_esriGeoprocessing.IToolboxWorkspaceImpl):
    _IID = uuid.UUID('3f933f16-5366-4ec4-9ef8-1ab8fef536ca')
    def RenameToolbox(self, oldName, newName):
        '''Method IToolboxWorkspaceImpl.RenameToolbox

           INPUTS
            oldName             : BSTR
            newName             : BSTR'''
        return super(IToolboxWorkspaceImpl, self).RenameToolbox(oldName, newName)
    def AlterToolboxAlias(self, ToolboxName, newAlias):
        '''Method IToolboxWorkspaceImpl.AlterToolboxAlias

           INPUTS
            ToolboxName         : BSTR
            newAlias            : BSTR'''
        return super(IToolboxWorkspaceImpl, self).AlterToolboxAlias(ToolboxName, newAlias)
    def AlterToolboxMetadata(self, ToolboxName, pMetadata):
        '''Method IToolboxWorkspaceImpl.AlterToolboxMetadata

           INPUTS
            ToolboxName         : BSTR
            pMetadata           : IPropertySet*'''
        return super(IToolboxWorkspaceImpl, self).AlterToolboxMetadata(ToolboxName, pMetadata)
    def AlterToolboxHelpInfo(self, ToolboxName, HelpFile, HelpContext):
        '''Method IToolboxWorkspaceImpl.AlterToolboxHelpInfo

           INPUTS
            ToolboxName         : BSTR
            HelpFile            : BSTR
            HelpContext         : long'''
        return super(IToolboxWorkspaceImpl, self).AlterToolboxHelpInfo(ToolboxName, HelpFile, HelpContext)
    def AlterToolboxDisplayName(self, ToolboxName, newDisplayName):
        '''Method IToolboxWorkspaceImpl.AlterToolboxDisplayName

           INPUTS
            ToolboxName         : BSTR
            newDisplayName      : BSTR'''
        return super(IToolboxWorkspaceImpl, self).AlterToolboxDisplayName(ToolboxName, newDisplayName)

class IGPServerTool(_esriGeoprocessing.IGPServerTool):
    _IID = uuid.UUID('19cdf313-8363-46dc-a356-3334c9b83ba1')

    def __init__(self, *args, **kw):
        super(IGPServerTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ToolName(self):
        '''Method IGPServerTool.get_ToolName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPServerTool, self).get_ToolName()
    def put_ToolName(self, Name):
        '''Method IGPServerTool.put_ToolName

           INPUT
            Name                : BSTR'''
        return super(IGPServerTool, self).put_ToolName(Name)
    def get_Machine(self):
        '''Method IGPServerTool.get_Machine

           OUTPUT
            Machine             : BSTR*'''
        return super(IGPServerTool, self).get_Machine()
    def put_Machine(self, Machine):
        '''Method IGPServerTool.put_Machine

           INPUT
            Machine             : BSTR'''
        return super(IGPServerTool, self).put_Machine(Machine)
    def get_URL(self):
        '''Method IGPServerTool.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IGPServerTool, self).get_URL()
    def put_URL(self, URL):
        '''Method IGPServerTool.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IGPServerTool, self).put_URL(URL)
    def get_UserName(self):
        '''Method IGPServerTool.get_UserName

           OUTPUT
            UserName            : BSTR*'''
        return super(IGPServerTool, self).get_UserName()
    def put_UserName(self, UserName):
        '''Method IGPServerTool.put_UserName

           INPUT
            UserName            : BSTR'''
        return super(IGPServerTool, self).put_UserName(UserName)
    def get_Password(self):
        '''Method IGPServerTool.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IGPServerTool, self).get_Password()
    def put_Password(self, Password):
        '''Method IGPServerTool.put_Password

           INPUT
            Password            : BSTR'''
        return super(IGPServerTool, self).put_Password(Password)
    def get_Server(self):
        '''Method IGPServerTool.get_Server

           OUTPUT
            Server              : BSTR*'''
        return super(IGPServerTool, self).get_Server()
    def put_Server(self, Server):
        '''Method IGPServerTool.put_Server

           INPUT
            Server              : BSTR'''
        return super(IGPServerTool, self).put_Server(Server)
    def InitProps(self):
        '''Method IGPServerTool.InitProps'''
        return super(IGPServerTool, self).InitProps()
    def get_Results(self):
        '''Method IGPServerTool.get_Results

           OUTPUT
            params              : IArray**'''
        return super(IGPServerTool, self).get_Results()
    def get_JobID(self):
        '''Method IGPServerTool.get_JobID

           OUTPUT
            JobID               : BSTR*'''
        return super(IGPServerTool, self).get_JobID()
    def put_JobID(self, JobID):
        '''Method IGPServerTool.put_JobID

           INPUT
            JobID               : BSTR'''
        return super(IGPServerTool, self).put_JobID(JobID)
    def get_Messages(self):
        '''Method IGPServerTool.get_Messages

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGPServerTool, self).get_Messages()
    def GetStatus(self):
        '''Method IGPServerTool.GetStatus

           OUTPUT
            Status              : esriJobStatus*'''
        return super(IGPServerTool, self).GetStatus()
    def CancelJob(self):
        '''Method IGPServerTool.CancelJob'''
        return super(IGPServerTool, self).CancelJob()
    def DeleteJob(self):
        '''Method IGPServerTool.DeleteJob'''
        return super(IGPServerTool, self).DeleteJob()
    def get_HasBeenSubmitted(self):
        '''Method IGPServerTool.get_HasBeenSubmitted

           OUTPUT
            pSubmitted          : VARIANT_BOOL*'''
        return super(IGPServerTool, self).get_HasBeenSubmitted()
    def get_HasBeenExecuted(self):
        '''Method IGPServerTool.get_HasBeenExecuted

           OUTPUT
            pExecuted           : VARIANT_BOOL*'''
        return super(IGPServerTool, self).get_HasBeenExecuted()
    def get_Synchronous(self):
        '''Method IGPServerTool.get_Synchronous

           OUTPUT
            pSynchronous        : VARIANT_BOOL*'''
        return super(IGPServerTool, self).get_Synchronous()
    def put_Synchronous(self, pSynchronous):
        '''Method IGPServerTool.put_Synchronous

           INPUT
            pSynchronous        : VARIANT_BOOL'''
        return super(IGPServerTool, self).put_Synchronous(pSynchronous)
    def GetMapImageURL(self, pParamIndexes, Height, Width, resolution):
        '''Method IGPServerTool.GetMapImageURL

           INPUTS
            pParamIndexes       : ILongArray*
            Height              : long
            Width               : long
            resolution          : long

           OUTPUT
            pURL                : BSTR*'''
        return super(IGPServerTool, self).GetMapImageURL(pParamIndexes, Height, Width, resolution)
    def GetMapServerLayer(self):
        '''Method IGPServerTool.GetMapServerLayer

           OUTPUT
            ppMapServerLayer    : IMapServerLayer**'''
        return super(IGPServerTool, self).GetMapServerLayer()
    def GetMapServerName(self):
        '''Method IGPServerTool.GetMapServerName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPServerTool, self).GetMapServerName()
    def GetInternalServerConnection(self):
        '''Method IGPServerTool.GetInternalServerConnection

           OUTPUTS
            ppServerConnection  : IUnknown**
            ppServer            : IUnknown**
            ppToolInfo          : IUnknown**'''
        return super(IGPServerTool, self).GetInternalServerConnection()
    def GetExtent(self):
        '''Method IGPServerTool.GetExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGPServerTool, self).GetExtent()
    HasBeenExecuted = property(get_HasBeenExecuted, None, None)
    HasBeenSubmitted = property(get_HasBeenSubmitted, None, None)
    JobID = property(get_JobID, put_JobID, None)
    Machine = property(get_Machine, put_Machine, None)
    Messages = property(get_Messages, None, None)
    Password = property(get_Password, put_Password, None)
    Results = property(get_Results, None, None)
    Server = property(get_Server, put_Server, None)
    Synchronous = property(get_Synchronous, put_Synchronous, None)
    ToolName = property(get_ToolName, put_ToolName, None)
    URL = property(get_URL, put_URL, None)
    UserName = property(get_UserName, put_UserName, None)

class IGPServerToolbox(_esriGeoprocessing.IGPServerToolbox):
    _IID = uuid.UUID('e0d80607-565a-456a-8180-a7d636fb2deb')

    def __init__(self, *args, **kw):
        super(IGPServerToolbox, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Machine(self):
        '''Method IGPServerToolbox.get_Machine

           OUTPUT
            Machine             : BSTR*'''
        return super(IGPServerToolbox, self).get_Machine()
    def put_Machine(self, Machine):
        '''Method IGPServerToolbox.put_Machine

           INPUT
            Machine             : BSTR'''
        return super(IGPServerToolbox, self).put_Machine(Machine)
    def get_URL(self):
        '''Method IGPServerToolbox.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IGPServerToolbox, self).get_URL()
    def put_URL(self, URL):
        '''Method IGPServerToolbox.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IGPServerToolbox, self).put_URL(URL)
    def get_UserName(self):
        '''Method IGPServerToolbox.get_UserName

           OUTPUT
            UserName            : BSTR*'''
        return super(IGPServerToolbox, self).get_UserName()
    def put_UserName(self, UserName):
        '''Method IGPServerToolbox.put_UserName

           INPUT
            UserName            : BSTR'''
        return super(IGPServerToolbox, self).put_UserName(UserName)
    def get_Password(self):
        '''Method IGPServerToolbox.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IGPServerToolbox, self).get_Password()
    def put_Password(self, Password):
        '''Method IGPServerToolbox.put_Password

           INPUT
            Password            : BSTR'''
        return super(IGPServerToolbox, self).put_Password(Password)
    def get_Server(self):
        '''Method IGPServerToolbox.get_Server

           OUTPUT
            Server              : BSTR*'''
        return super(IGPServerToolbox, self).get_Server()
    def put_Server(self, Server):
        '''Method IGPServerToolbox.put_Server

           INPUT
            Server              : BSTR'''
        return super(IGPServerToolbox, self).put_Server(Server)
    def InitProps(self):
        '''Method IGPServerToolbox.InitProps'''
        return super(IGPServerToolbox, self).InitProps()
    Machine = property(get_Machine, put_Machine, None)
    Password = property(get_Password, put_Password, None)
    Server = property(get_Server, put_Server, None)
    URL = property(get_URL, put_URL, None)
    UserName = property(get_UserName, put_UserName, None)

class IGPFileSystemToolbox(_esriGeoprocessing.IGPFileSystemToolbox):
    _IID = uuid.UUID('275b6884-8761-44da-8ebb-ad06a824dea6')
    def Create(self, Path):
        '''Method IGPFileSystemToolbox.Create

           INPUT
            Path                : BSTR'''
        return super(IGPFileSystemToolbox, self).Create(Path)
    def LoadFromFile(self, Path):
        '''Method IGPFileSystemToolbox.LoadFromFile

           INPUT
            Path                : BSTR'''
        return super(IGPFileSystemToolbox, self).LoadFromFile(Path)
    def SaveToFile(self, Path):
        '''Method IGPFileSystemToolbox.SaveToFile

           INPUT
            Path                : BSTR'''
        return super(IGPFileSystemToolbox, self).SaveToFile(Path)

class IGDBToolbox(_esriGeoprocessing.IGDBToolbox):
    _IID = uuid.UUID('6b9fb393-b69f-4451-bdef-cd28396b0be0')

    def __init__(self, *args, **kw):
        super(IGDBToolbox, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Table(self, _arg1):
        '''Method IGDBToolbox.putref_Table

           INPUT
            _arg1               : ITable*'''
        return super(IGDBToolbox, self).putref_Table(_arg1)
    Table = property(None, putref_Table, None)

class IGPToolboxNameImpl(_esriGeoprocessing.IGPToolboxNameImpl):
    _IID = uuid.UUID('6711aa59-bf6b-40ad-8242-f035643a0007')

    def __init__(self, *args, **kw):
        super(IGPToolboxNameImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def IsSystemToolbox(self):
        '''Method IGPToolboxNameImpl.IsSystemToolbox

           OUTPUT
            IsSystemToolbox     : VARIANT_BOOL*'''
        return super(IGPToolboxNameImpl, self).IsSystemToolbox()
    def put_DisplayName(self, pDisplayName):
        '''Method IGPToolboxNameImpl.put_DisplayName

           INPUT
            pDisplayName        : BSTR'''
        return super(IGPToolboxNameImpl, self).put_DisplayName(pDisplayName)
    def get_DisplayName(self):
        '''Method IGPToolboxNameImpl.get_DisplayName

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(IGPToolboxNameImpl, self).get_DisplayName()
    def IsValid(self):
        '''Method IGPToolboxNameImpl.IsValid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IGPToolboxNameImpl, self).IsValid()
    DisplayName = property(get_DisplayName, put_DisplayName, None)

class IGPToolImpl(_esriGeoprocessing.IGPToolImpl):
    _IID = uuid.UUID('76d5421f-6e16-4161-90fc-56a1e023e7e9')
    def get_MinimumProduct(self):
        '''Method IGPToolImpl.get_MinimumProduct

           OUTPUT
            product             : esriProductCode*'''
        return super(IGPToolImpl, self).get_MinimumProduct()
    def get_RequiredExtensions(self):
        '''Method IGPToolImpl.get_RequiredExtensions

           OUTPUT
            extensions          : ILongArray**'''
        return super(IGPToolImpl, self).get_RequiredExtensions()
    def GetParameterDescription(self, Name):
        '''Method IGPToolImpl.GetParameterDescription

           INPUT
            Name                : BSTR

           OUTPUT
            desc                : BSTR*'''
        return super(IGPToolImpl, self).GetParameterDescription(Name)
    def SetParameterDescription(self, Name, desc):
        '''Method IGPToolImpl.SetParameterDescription

           INPUTS
            Name                : BSTR
            desc                : BSTR'''
        return super(IGPToolImpl, self).SetParameterDescription(Name, desc)
    MinimumProduct = property(get_MinimumProduct, None, None)
    RequiredExtensions = property(get_RequiredExtensions, None, None)

class IGPTaskImpl(_esriGeoprocessing.IGPTaskImpl):
    _IID = uuid.UUID('20c3df8d-fd58-4949-a6f7-28884274691f')

    def __init__(self, *args, **kw):
        super(IGPTaskImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PackageLocation(self):
        '''Method IGPTaskImpl.get_PackageLocation

           OUTPUT
            location            : BSTR*'''
        return super(IGPTaskImpl, self).get_PackageLocation()
    def put_PackageLocation(self, location):
        '''Method IGPTaskImpl.put_PackageLocation

           INPUT
            location            : BSTR'''
        return super(IGPTaskImpl, self).put_PackageLocation(location)
    def put_Mode(self, _arg1):
        '''Method IGPTaskImpl.put_Mode

           INPUT
            _arg1               : long'''
        return super(IGPTaskImpl, self).put_Mode(_arg1)
    Mode = property(None, put_Mode, None)
    PackageLocation = property(get_PackageLocation, put_PackageLocation, None)

class IGPToolLicenseImpl(_esriGeoprocessing.IGPToolLicenseImpl):
    _IID = uuid.UUID('e3f4fe70-6796-49f9-9a89-6a6d96b54ab7')

    def __init__(self, *args, **kw):
        super(IGPToolLicenseImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SkipLicenseCheck(self, _arg1):
        '''Method IGPToolLicenseImpl.put_SkipLicenseCheck

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPToolLicenseImpl, self).put_SkipLicenseCheck(_arg1)
    SkipLicenseCheck = property(None, put_SkipLicenseCheck, None)

class IGPToolBackgroundImpl(_esriGeoprocessing.IGPToolBackgroundImpl):
    _IID = uuid.UUID('2ab653c6-5e5c-4403-b767-bfa7fc47840b')

    def __init__(self, *args, **kw):
        super(IGPToolBackgroundImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanRunInBackground(self):
        '''Method IGPToolBackgroundImpl.get_CanRunInBackground

           OUTPUT
            pCanRunInBackground : VARIANT_BOOL*'''
        return super(IGPToolBackgroundImpl, self).get_CanRunInBackground()
    def put_CanRunInBackground(self, pCanRunInBackground):
        '''Method IGPToolBackgroundImpl.put_CanRunInBackground

           INPUT
            pCanRunInBackground : VARIANT_BOOL'''
        return super(IGPToolBackgroundImpl, self).put_CanRunInBackground(pCanRunInBackground)
    CanRunInBackground = property(get_CanRunInBackground, put_CanRunInBackground, None)

class IGPToolLocalizeImpl(_esriGeoprocessing.IGPToolLocalizeImpl):
    _IID = uuid.UUID('45695a0c-87d8-43ae-8383-76b060169743')

    def __init__(self, *args, **kw):
        super(IGPToolLocalizeImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LocalizedToolInfo(self):
        '''Method IGPToolLocalizeImpl.get_LocalizedToolInfo

           OUTPUT
            toolInfo            : IGPToolInfo**'''
        return super(IGPToolLocalizeImpl, self).get_LocalizedToolInfo()
    def putref_LocalizedToolInfo(self, toolInfo):
        '''Method IGPToolLocalizeImpl.putref_LocalizedToolInfo

           INPUT
            toolInfo            : IGPToolInfo*'''
        return super(IGPToolLocalizeImpl, self).putref_LocalizedToolInfo(toolInfo)
    def get_LocalizedToolFile(self):
        '''Method IGPToolLocalizeImpl.get_LocalizedToolFile

           OUTPUT
            toolFile            : BSTR*'''
        return super(IGPToolLocalizeImpl, self).get_LocalizedToolFile()
    def put_LocalizedToolFile(self, toolFile):
        '''Method IGPToolLocalizeImpl.put_LocalizedToolFile

           INPUT
            toolFile            : BSTR'''
        return super(IGPToolLocalizeImpl, self).put_LocalizedToolFile(toolFile)
    LocalizedToolFile = property(get_LocalizedToolFile, put_LocalizedToolFile, None)
    LocalizedToolInfo = property(get_LocalizedToolInfo, putref_LocalizedToolInfo, None)

class IGPToolID(_esriGeoprocessing.IGPToolID):
    _IID = uuid.UUID('8b6a298f-bcf1-4f22-9ef7-c7ef93e3cddb')

    def __init__(self, *args, **kw):
        super(IGPToolID, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method IGPToolID.get_ID

           OUTPUT
            identifier          : long*'''
        return super(IGPToolID, self).get_ID()
    def put_ID(self, identifier):
        '''Method IGPToolID.put_ID

           INPUT
            identifier          : long'''
        return super(IGPToolID, self).put_ID(identifier)
    ID = property(get_ID, put_ID, None)

class IGPRecordSetImpl(_esriGeoprocessing.IGPRecordSetImpl):
    _IID = uuid.UUID('c9844898-587f-4ec4-9def-0e06403827c4')

    def __init__(self, *args, **kw):
        super(IGPRecordSetImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SchemaPathName(self):
        '''Method IGPRecordSetImpl.get_SchemaPathName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPRecordSetImpl, self).get_SchemaPathName()
    def put_SchemaPathName(self, Name):
        '''Method IGPRecordSetImpl.put_SchemaPathName

           INPUT
            Name                : BSTR'''
        return super(IGPRecordSetImpl, self).put_SchemaPathName(Name)
    SchemaPathName = property(get_SchemaPathName, put_SchemaPathName, None)

class IMdDiagramState(_esriGeoprocessing.IMdDiagramState):
    _IID = uuid.UUID('7b5b5beb-66cb-41b5-b787-6e938e5fd412')

    def __init__(self, *args, **kw):
        super(IMdDiagramState, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DiagramState(self):
        '''Method IMdDiagramState.get_DiagramState

           OUTPUT
            State               : IMemoryBlobStream**'''
        return super(IMdDiagramState, self).get_DiagramState()
    def putref_DiagramState(self, State):
        '''Method IMdDiagramState.putref_DiagramState

           INPUT
            State               : IMemoryBlobStream*'''
        return super(IMdDiagramState, self).putref_DiagramState(State)
    def GetDiagramCenter(self):
        '''Method IMdDiagramState.GetDiagramCenter

           OUTPUTS
            X                   : long*
            Y                   : long*'''
        return super(IMdDiagramState, self).GetDiagramCenter()
    def SetDiagramCenter(self, X, Y):
        '''Method IMdDiagramState.SetDiagramCenter

           INPUTS
            X                   : long
            Y                   : long'''
        return super(IMdDiagramState, self).SetDiagramCenter(X, Y)
    def get_ScaleFactor(self):
        '''Method IMdDiagramState.get_ScaleFactor

           OUTPUT
            factor              : double*'''
        return super(IMdDiagramState, self).get_ScaleFactor()
    def put_ScaleFactor(self, factor):
        '''Method IMdDiagramState.put_ScaleFactor

           INPUT
            factor              : double'''
        return super(IMdDiagramState, self).put_ScaleFactor(factor)
    def GetWindowPosition(self):
        '''Method IMdDiagramState.GetWindowPosition

           OUTPUTS
            X                   : long*
            Y                   : long*'''
        return super(IMdDiagramState, self).GetWindowPosition()
    def SetWindowPosition(self, X, Y):
        '''Method IMdDiagramState.SetWindowPosition

           INPUTS
            X                   : long
            Y                   : long'''
        return super(IMdDiagramState, self).SetWindowPosition(X, Y)
    def GetWindowSize(self):
        '''Method IMdDiagramState.GetWindowSize

           OUTPUTS
            Width               : long*
            Height              : long*'''
        return super(IMdDiagramState, self).GetWindowSize()
    def SetWindowSize(self, Width, Height):
        '''Method IMdDiagramState.SetWindowSize

           INPUTS
            Width               : long
            Height              : long'''
        return super(IMdDiagramState, self).SetWindowSize(Width, Height)
    def get_Path(self):
        '''Method IMdDiagramState.get_Path

           OUTPUT
            Path                : BSTR*'''
        return super(IMdDiagramState, self).get_Path()
    def put_Path(self, Path):
        '''Method IMdDiagramState.put_Path

           INPUT
            Path                : BSTR'''
        return super(IMdDiagramState, self).put_Path(Path)
    DiagramState = property(get_DiagramState, putref_DiagramState, None)
    Path = property(get_Path, put_Path, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)

class IThreadedTrackCancel(_esriGeoprocessing.IThreadedTrackCancel):
    _IID = uuid.UUID('aa1c936d-0ca5-480d-bad1-c0641b47bf61')
    def get_ProgressorShown(self):
        '''Method IThreadedTrackCancel.get_ProgressorShown

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IThreadedTrackCancel, self).get_ProgressorShown()
    ProgressorShown = property(get_ProgressorShown, None, None)

class IGeoProcessorWorker(_esriGeoprocessing.IGeoProcessorWorker):
    _IID = uuid.UUID('e8f484a0-4c46-4c1b-b1b2-dce4875f3d6f')
    def UpdateProgressPosition(self, threadPos, pStepProgressor):
        '''Method IGeoProcessorWorker.UpdateProgressPosition

           INPUTS
            threadPos           : long
            pStepProgressor     : IStepProgressor*'''
        return super(IGeoProcessorWorker, self).UpdateProgressPosition(threadPos, pStepProgressor)

class IGPScriptToolImpl(_esriGeoprocessing.IGPScriptToolImpl):
    _IID = uuid.UUID('558000f5-5b2b-43fb-bb02-9af71b40ebf5')

    def __init__(self, *args, **kw):
        super(IGPScriptToolImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RunDebugger(self):
        '''Method IGPScriptToolImpl.get_RunDebugger

           OUTPUT
            debugger            : VARIANT_BOOL*'''
        return super(IGPScriptToolImpl, self).get_RunDebugger()
    def put_RunDebugger(self, debugger):
        '''Method IGPScriptToolImpl.put_RunDebugger

           INPUT
            debugger            : VARIANT_BOOL'''
        return super(IGPScriptToolImpl, self).put_RunDebugger(debugger)
    def ImportScript(self, File, Password):
        '''Method IGPScriptToolImpl.ImportScript

           INPUTS
            File                : BSTR
            Password            : BSTR'''
        return super(IGPScriptToolImpl, self).ImportScript(File, Password)
    def ExportScript(self, File, Password, copyOnly):
        '''Method IGPScriptToolImpl.ExportScript

           INPUTS
            File                : BSTR
            Password            : BSTR
            copyOnly            : VARIANT_BOOL'''
        return super(IGPScriptToolImpl, self).ExportScript(File, Password, copyOnly)
    def HasImportedScript(self):
        '''Method IGPScriptToolImpl.HasImportedScript

           OUTPUT
            HasImportedScript   : VARIANT_BOOL*'''
        return super(IGPScriptToolImpl, self).HasImportedScript()
    def SetPassword(self, Password, newPassword):
        '''Method IGPScriptToolImpl.SetPassword

           INPUTS
            Password            : BSTR
            newPassword         : BSTR'''
        return super(IGPScriptToolImpl, self).SetPassword(Password, newPassword)
    def ValidPassword(self, Password):
        '''Method IGPScriptToolImpl.ValidPassword

           INPUT
            Password            : BSTR

           OUTPUT
            ValidPassword       : VARIANT_BOOL*'''
        return super(IGPScriptToolImpl, self).ValidPassword(Password)
    def get_Password(self):
        '''Method IGPScriptToolImpl.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IGPScriptToolImpl, self).get_Password()
    def get_EmbededScript(self):
        '''Method IGPScriptToolImpl.get_EmbededScript

           OUTPUT
            EmbededScript       : BSTR*'''
        return super(IGPScriptToolImpl, self).get_EmbededScript()
    def ParseScriptStrings(self, oldSourcePath, swizzle, pTrackCancel):
        '''Method IGPScriptToolImpl.ParseScriptStrings

           INPUTS
            oldSourcePath       : BSTR
            swizzle             : VARIANT_BOOL
            pTrackCancel        : ITrackCancel*

           OUTPUTS
            ppParsedStrings     : IArray**
            pScriptLocation     : BSTR*'''
        return super(IGPScriptToolImpl, self).ParseScriptStrings(oldSourcePath, swizzle, pTrackCancel)
    def ReplaceParsedScriptString(self, pParsedStrings, swizzle):
        '''Method IGPScriptToolImpl.ReplaceParsedScriptString

           INPUTS
            pParsedStrings      : IArray*
            swizzle             : VARIANT_BOOL'''
        return super(IGPScriptToolImpl, self).ReplaceParsedScriptString(pParsedStrings, swizzle)
    def TestScriptSyntax(self):
        '''Method IGPScriptToolImpl.TestScriptSyntax

           OUTPUT
            pSyntaxErrorMessage : BSTR*'''
        return super(IGPScriptToolImpl, self).TestScriptSyntax()
    EmbededScript = property(get_EmbededScript, None, None)
    Password = property(get_Password, None, None)
    RunDebugger = property(get_RunDebugger, put_RunDebugger, None)

class IGPDefaultNameListImpl(_esriGeoprocessing.IGPDefaultNameListImpl):
    _IID = uuid.UUID('5b5e33e4-5987-4e7b-8c53-47a04a53ce60')

    def __init__(self, *args, **kw):
        super(IGPDefaultNameListImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SubModel(self, SubModel):
        '''Method IGPDefaultNameListImpl.put_SubModel

           INPUT
            SubModel            : VARIANT_BOOL'''
        return super(IGPDefaultNameListImpl, self).put_SubModel(SubModel)
    def get_SubModel(self):
        '''Method IGPDefaultNameListImpl.get_SubModel

           OUTPUT
            SubModel            : VARIANT_BOOL*'''
        return super(IGPDefaultNameListImpl, self).get_SubModel()
    SubModel = property(get_SubModel, put_SubModel, None)

class IGPWrapper(_esriGeoprocessing.IGPWrapper):
    _IID = uuid.UUID('492ea087-6e37-49a3-b405-f5867b145a01')

    def __init__(self, *args, **kw):
        super(IGPWrapper, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Object(self, ppObject):
        '''Method IGPWrapper.putref_Object

           INPUT
            ppObject            : IUnknown*'''
        return super(IGPWrapper, self).putref_Object(ppObject)
    def get_Object(self):
        '''Method IGPWrapper.get_Object

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IGPWrapper, self).get_Object()
    Object = property(get_Object, putref_Object, None)

class IMdVariableImpl(_esriGeoprocessing.IMdVariableImpl):
    _IID = uuid.UUID('a11aa782-0e0c-4fd1-94dd-6d367a1ba256')

    def __init__(self, *args, **kw):
        super(IMdVariableImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConnectionType(self):
        '''Method IMdVariableImpl.get_ConnectionType

           OUTPUT
            ConnectionType      : esriMdConnectionType*'''
        return super(IMdVariableImpl, self).get_ConnectionType()
    def put_ConnectionType(self, ConnectionType):
        '''Method IMdVariableImpl.put_ConnectionType

           INPUT
            ConnectionType      : esriMdConnectionType'''
        return super(IMdVariableImpl, self).put_ConnectionType(ConnectionType)
    ConnectionType = property(get_ConnectionType, put_ConnectionType, None)

class IMdElementImpl(_esriGeoprocessing.IMdElementImpl):
    _IID = uuid.UUID('c0dc7db4-b8ab-456a-9045-ab8ca4e5416a')

    def __init__(self, *args, **kw):
        super(IMdElementImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ValidationIndex(self):
        '''Method IMdElementImpl.get_ValidationIndex

           OUTPUT
            Index               : long*'''
        return super(IMdElementImpl, self).get_ValidationIndex()
    def put_ValidationIndex(self, Index):
        '''Method IMdElementImpl.put_ValidationIndex

           INPUT
            Index               : long'''
        return super(IMdElementImpl, self).put_ValidationIndex(Index)
    ValidationIndex = property(get_ValidationIndex, put_ValidationIndex, None)

class IGPEnvironmentImpl2(_esriGeoprocessing.IGPEnvironmentImpl2):
    _IID = uuid.UUID('d7715b79-5150-4a70-8c0e-79a4ab5f69de')

    def __init__(self, *args, **kw):
        super(IGPEnvironmentImpl2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Altered(self):
        '''Method IGPEnvironmentImpl2.get_Altered

           OUTPUT
            Altered             : VARIANT_BOOL*'''
        return super(IGPEnvironmentImpl2, self).get_Altered()
    def put_Altered(self, Altered):
        '''Method IGPEnvironmentImpl2.put_Altered

           INPUT
            Altered             : VARIANT_BOOL'''
        return super(IGPEnvironmentImpl2, self).put_Altered(Altered)
    Altered = property(get_Altered, put_Altered, None)

class IGPModelToolImpl(_esriGeoprocessing.IGPModelToolImpl):
    _IID = uuid.UUID('beb915b8-01a2-4ffe-867e-67c85fff302e')

    def __init__(self, *args, **kw):
        super(IGPModelToolImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetDependentValue(self, Name):
        '''Method IGPModelToolImpl.GetDependentValue

           INPUT
            Name                : BSTR

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPModelToolImpl, self).GetDependentValue(Name)
    def CanAlterParameterType(self, Name):
        '''Method IGPModelToolImpl.CanAlterParameterType

           INPUT
            Name                : BSTR

           OUTPUT
            pCanAlter           : VARIANT_BOOL*'''
        return super(IGPModelToolImpl, self).CanAlterParameterType(Name)
    def get_AlteredDomains(self):
        '''Method IGPModelToolImpl.get_AlteredDomains

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IGPModelToolImpl, self).get_AlteredDomains()
    def GetAlteredDomain(self, pParameter):
        '''Method IGPModelToolImpl.GetAlteredDomain

           INPUT
            pParameter          : IGPParameter*

           OUTPUT
            ppDomain            : IGPDomain**'''
        return super(IGPModelToolImpl, self).GetAlteredDomain(pParameter)
    def SetAlteredDomain(self, pParameter, pDomain):
        '''Method IGPModelToolImpl.SetAlteredDomain

           INPUTS
            pParameter          : IGPParameter*
            pDomain             : IGPDomain*'''
        return super(IGPModelToolImpl, self).SetAlteredDomain(pParameter, pDomain)
    def CreateParameter(self, pVariable):
        '''Method IGPModelToolImpl.CreateParameter

           INPUT
            pVariable           : IGPVariable*

           OUTPUT
            ppParameter         : IGPParameter**'''
        return super(IGPModelToolImpl, self).CreateParameter(pVariable)
    def SetPassword(self, Password, newPassword):
        '''Method IGPModelToolImpl.SetPassword

           INPUTS
            Password            : BSTR
            newPassword         : BSTR'''
        return super(IGPModelToolImpl, self).SetPassword(Password, newPassword)
    def ValidPassword(self, Password):
        '''Method IGPModelToolImpl.ValidPassword

           INPUT
            Password            : BSTR

           OUTPUT
            ValidPassword       : VARIANT_BOOL*'''
        return super(IGPModelToolImpl, self).ValidPassword(Password)
    def get_Password(self):
        '''Method IGPModelToolImpl.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IGPModelToolImpl, self).get_Password()
    def put_ResolveAll(self, _arg1):
        '''Method IGPModelToolImpl.put_ResolveAll

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPModelToolImpl, self).put_ResolveAll(_arg1)
    AlteredDomains = property(get_AlteredDomains, None, None)
    Password = property(get_Password, None, None)
    ResolveAll = property(None, put_ResolveAll, None)

class IGPServerToolName(_esriGeoprocessing.IGPServerToolName):
    _IID = uuid.UUID('29a7e64e-c98c-47ac-a3a9-7dd63044005e')

    def __init__(self, *args, **kw):
        super(IGPServerToolName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ToolName(self):
        '''Method IGPServerToolName.get_ToolName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPServerToolName, self).get_ToolName()
    def put_ToolName(self, Name):
        '''Method IGPServerToolName.put_ToolName

           INPUT
            Name                : BSTR'''
        return super(IGPServerToolName, self).put_ToolName(Name)
    def get_Machine(self):
        '''Method IGPServerToolName.get_Machine

           OUTPUT
            Machine             : BSTR*'''
        return super(IGPServerToolName, self).get_Machine()
    def put_Machine(self, Machine):
        '''Method IGPServerToolName.put_Machine

           INPUT
            Machine             : BSTR'''
        return super(IGPServerToolName, self).put_Machine(Machine)
    def get_URL(self):
        '''Method IGPServerToolName.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IGPServerToolName, self).get_URL()
    def put_URL(self, URL):
        '''Method IGPServerToolName.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IGPServerToolName, self).put_URL(URL)
    def get_UserName(self):
        '''Method IGPServerToolName.get_UserName

           OUTPUT
            UserName            : BSTR*'''
        return super(IGPServerToolName, self).get_UserName()
    def put_UserName(self, UserName):
        '''Method IGPServerToolName.put_UserName

           INPUT
            UserName            : BSTR'''
        return super(IGPServerToolName, self).put_UserName(UserName)
    def get_Password(self):
        '''Method IGPServerToolName.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IGPServerToolName, self).get_Password()
    def put_Password(self, Password):
        '''Method IGPServerToolName.put_Password

           INPUT
            Password            : BSTR'''
        return super(IGPServerToolName, self).put_Password(Password)
    def get_Server(self):
        '''Method IGPServerToolName.get_Server

           OUTPUT
            Server              : BSTR*'''
        return super(IGPServerToolName, self).get_Server()
    def put_Server(self, Server):
        '''Method IGPServerToolName.put_Server

           INPUT
            Server              : BSTR'''
        return super(IGPServerToolName, self).put_Server(Server)
    def get_Synchronous(self):
        '''Method IGPServerToolName.get_Synchronous

           OUTPUT
            Synchronous         : VARIANT_BOOL*'''
        return super(IGPServerToolName, self).get_Synchronous()
    def put_Synchronous(self, Synchronous):
        '''Method IGPServerToolName.put_Synchronous

           INPUT
            Synchronous         : VARIANT_BOOL'''
        return super(IGPServerToolName, self).put_Synchronous(Synchronous)
    def get_JobID(self):
        '''Method IGPServerToolName.get_JobID

           OUTPUT
            JobID               : BSTR*'''
        return super(IGPServerToolName, self).get_JobID()
    def put_JobID(self, JobID):
        '''Method IGPServerToolName.put_JobID

           INPUT
            JobID               : BSTR'''
        return super(IGPServerToolName, self).put_JobID(JobID)
    JobID = property(get_JobID, put_JobID, None)
    Machine = property(get_Machine, put_Machine, None)
    Password = property(get_Password, put_Password, None)
    Server = property(get_Server, put_Server, None)
    Synchronous = property(get_Synchronous, put_Synchronous, None)
    ToolName = property(get_ToolName, put_ToolName, None)
    URL = property(get_URL, put_URL, None)
    UserName = property(get_UserName, put_UserName, None)

class IGPServerToolboxName(_esriGeoprocessing.IGPServerToolboxName):
    _IID = uuid.UUID('ad20c4d2-c97d-43cc-a123-5d870acc0cf0')

    def __init__(self, *args, **kw):
        super(IGPServerToolboxName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Machine(self):
        '''Method IGPServerToolboxName.get_Machine

           OUTPUT
            Machine             : BSTR*'''
        return super(IGPServerToolboxName, self).get_Machine()
    def put_Machine(self, Machine):
        '''Method IGPServerToolboxName.put_Machine

           INPUT
            Machine             : BSTR'''
        return super(IGPServerToolboxName, self).put_Machine(Machine)
    def get_URL(self):
        '''Method IGPServerToolboxName.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IGPServerToolboxName, self).get_URL()
    def put_URL(self, URL):
        '''Method IGPServerToolboxName.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IGPServerToolboxName, self).put_URL(URL)
    def get_UserName(self):
        '''Method IGPServerToolboxName.get_UserName

           OUTPUT
            UserName            : BSTR*'''
        return super(IGPServerToolboxName, self).get_UserName()
    def put_UserName(self, UserName):
        '''Method IGPServerToolboxName.put_UserName

           INPUT
            UserName            : BSTR'''
        return super(IGPServerToolboxName, self).put_UserName(UserName)
    def get_Password(self):
        '''Method IGPServerToolboxName.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IGPServerToolboxName, self).get_Password()
    def put_Password(self, Password):
        '''Method IGPServerToolboxName.put_Password

           INPUT
            Password            : BSTR'''
        return super(IGPServerToolboxName, self).put_Password(Password)
    def get_Server(self):
        '''Method IGPServerToolboxName.get_Server

           OUTPUT
            Server              : BSTR*'''
        return super(IGPServerToolboxName, self).get_Server()
    def put_Server(self, Server):
        '''Method IGPServerToolboxName.put_Server

           INPUT
            Server              : BSTR'''
        return super(IGPServerToolboxName, self).put_Server(Server)
    Machine = property(get_Machine, put_Machine, None)
    Password = property(get_Password, put_Password, None)
    Server = property(get_Server, put_Server, None)
    URL = property(get_URL, put_URL, None)
    UserName = property(get_UserName, put_UserName, None)

class IGPFunctionFactoryImpl(_esriGeoprocessing.IGPFunctionFactoryImpl):
    _IID = uuid.UUID('92bcb74c-a9d3-42bb-8d4e-d39acf119598')
    def GetFunctionCLSID(self, Name):
        '''Method IGPFunctionFactoryImpl.GetFunctionCLSID

           INPUT
            Name                : BSTR

           OUTPUT
            ppUID               : IUID**'''
        return super(IGPFunctionFactoryImpl, self).GetFunctionCLSID(Name)

class IBuildCoverageFeatureClassName(_esriGeoprocessing.IBuildCoverageFeatureClassName):
    _IID = uuid.UUID('5e58b11b-55f4-4b0f-a556-209d594b39ad')

    def __init__(self, *args, **kw):
        super(IBuildCoverageFeatureClassName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureClass(self):
        '''Method IBuildCoverageFeatureClassName.get_FeatureClass

           OUTPUT
            ppFeatureClass      : IFeatureClass**'''
        return super(IBuildCoverageFeatureClassName, self).get_FeatureClass()
    def put_FeatureClass(self, ppFeatureClass):
        '''Method IBuildCoverageFeatureClassName.put_FeatureClass

           INPUT
            ppFeatureClass      : IFeatureClass*'''
        return super(IBuildCoverageFeatureClassName, self).put_FeatureClass(ppFeatureClass)
    def get_Type(self):
        '''Method IBuildCoverageFeatureClassName.get_Type

           OUTPUT
            Type                : esriBuildCoverageFeatureClassType*'''
        return super(IBuildCoverageFeatureClassName, self).get_Type()
    def put_Type(self, Type):
        '''Method IBuildCoverageFeatureClassName.put_Type

           INPUT
            Type                : esriBuildCoverageFeatureClassType'''
        return super(IBuildCoverageFeatureClassName, self).put_Type(Type)
    def get_SubClassName(self):
        '''Method IBuildCoverageFeatureClassName.get_SubClassName

           OUTPUT
            Name                : BSTR*'''
        return super(IBuildCoverageFeatureClassName, self).get_SubClassName()
    def put_SubClassName(self, Name):
        '''Method IBuildCoverageFeatureClassName.put_SubClassName

           INPUT
            Name                : BSTR'''
        return super(IBuildCoverageFeatureClassName, self).put_SubClassName(Name)
    FeatureClass = property(get_FeatureClass, put_FeatureClass, None)
    SubClassName = property(get_SubClassName, put_SubClassName, None)
    Type = property(get_Type, put_Type, None)

class IBuildCoverageFeatureClassName2(_esriGeoprocessing.IBuildCoverageFeatureClassName2):
    _IID = uuid.UUID('3cbf5c0e-d596-445d-a220-61eb3f451597')

    def __init__(self, *args, **kw):
        super(IBuildCoverageFeatureClassName2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureClass(self):
        '''Method IBuildCoverageFeatureClassName2.get_FeatureClass

           OUTPUT
            ppFeatureClass      : IFeatureClass**'''
        return super(IBuildCoverageFeatureClassName2, self).get_FeatureClass()
    def put_FeatureClass(self, ppFeatureClass):
        '''Method IBuildCoverageFeatureClassName2.put_FeatureClass

           INPUT
            ppFeatureClass      : IFeatureClass*'''
        return super(IBuildCoverageFeatureClassName2, self).put_FeatureClass(ppFeatureClass)
    def get_Type(self):
        '''Method IBuildCoverageFeatureClassName2.get_Type

           OUTPUT
            Type                : esriBuildCoverageFeatureClassType*'''
        return super(IBuildCoverageFeatureClassName2, self).get_Type()
    def put_Type(self, Type):
        '''Method IBuildCoverageFeatureClassName2.put_Type

           INPUT
            Type                : esriBuildCoverageFeatureClassType'''
        return super(IBuildCoverageFeatureClassName2, self).put_Type(Type)
    def get_SubClassName(self):
        '''Method IBuildCoverageFeatureClassName2.get_SubClassName

           OUTPUT
            Name                : BSTR*'''
        return super(IBuildCoverageFeatureClassName2, self).get_SubClassName()
    def put_SubClassName(self, Name):
        '''Method IBuildCoverageFeatureClassName2.put_SubClassName

           INPUT
            Name                : BSTR'''
        return super(IBuildCoverageFeatureClassName2, self).put_SubClassName(Name)
    def get_DataElement(self):
        '''Method IBuildCoverageFeatureClassName2.get_DataElement

           OUTPUT
            DataElement         : IGPValue**'''
        return super(IBuildCoverageFeatureClassName2, self).get_DataElement()
    def putref_DataElement(self, DataElement):
        '''Method IBuildCoverageFeatureClassName2.putref_DataElement

           INPUT
            DataElement         : IGPValue*'''
        return super(IBuildCoverageFeatureClassName2, self).putref_DataElement(DataElement)
    def get_Layer(self):
        '''Method IBuildCoverageFeatureClassName2.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(IBuildCoverageFeatureClassName2, self).get_Layer()
    def putref_Layer(self, Layer):
        '''Method IBuildCoverageFeatureClassName2.putref_Layer

           INPUT
            Layer               : ILayer*'''
        return super(IBuildCoverageFeatureClassName2, self).putref_Layer(Layer)
    DataElement = property(get_DataElement, putref_DataElement, None)
    FeatureClass = property(get_FeatureClass, put_FeatureClass, None)
    Layer = property(get_Layer, putref_Layer, None)
    SubClassName = property(get_SubClassName, put_SubClassName, None)
    Type = property(get_Type, put_Type, None)

class IGPPythonScriptTool(_esriGeoprocessing.IGPPythonScriptTool):
    _IID = uuid.UUID('9be75c33-d789-4fd6-869d-2ee842750aaf')

    def __init__(self, *args, **kw):
        super(IGPPythonScriptTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PythonPathName(self):
        '''Method IGPPythonScriptTool.get_PythonPathName

           OUTPUT
            PathName            : BSTR*'''
        return super(IGPPythonScriptTool, self).get_PythonPathName()
    def put_PythonPathName(self, PathName):
        '''Method IGPPythonScriptTool.put_PythonPathName

           INPUT
            PathName            : BSTR'''
        return super(IGPPythonScriptTool, self).put_PythonPathName(PathName)
    def get_ShowCommandWindow(self):
        '''Method IGPPythonScriptTool.get_ShowCommandWindow

           OUTPUT
            showWindow          : VARIANT_BOOL*'''
        return super(IGPPythonScriptTool, self).get_ShowCommandWindow()
    def put_ShowCommandWindow(self, showWindow):
        '''Method IGPPythonScriptTool.put_ShowCommandWindow

           INPUT
            showWindow          : VARIANT_BOOL'''
        return super(IGPPythonScriptTool, self).put_ShowCommandWindow(showWindow)
    def get_SymbologyLayer(self, parameterName):
        '''Method IGPPythonScriptTool.get_SymbologyLayer

           INPUT
            parameterName       : BSTR

           OUTPUT
            Layer               : BSTR*'''
        return super(IGPPythonScriptTool, self).get_SymbologyLayer(parameterName)
    def put_SymbologyLayer(self, parameterName, Layer):
        '''Method IGPPythonScriptTool.put_SymbologyLayer

           INPUTS
            parameterName       : BSTR
            Layer               : BSTR'''
        return super(IGPPythonScriptTool, self).put_SymbologyLayer(parameterName, Layer)
    def put_IsValid(self, IsValid, _arg2):
        '''Method IGPPythonScriptTool.put_IsValid

           INPUTS
            IsValid             : VARIANT_BOOL
            _arg2               : BSTR'''
        return super(IGPPythonScriptTool, self).put_IsValid(IsValid, _arg2)
    def WhyNotValid(self):
        '''Method IGPPythonScriptTool.WhyNotValid

           OUTPUT
            pErrorMessage       : BSTR*'''
        return super(IGPPythonScriptTool, self).WhyNotValid()
    IsValid = property(None, put_IsValid, None)
    PythonPathName = property(get_PythonPathName, put_PythonPathName, None)
    ShowCommandWindow = property(get_ShowCommandWindow, put_ShowCommandWindow, None)
    SymbologyLayer = property(None, put_SymbologyLayer, None)
    SymbologyLayer = IndexProperty(get_SymbologyLayer, None)

class IGPFunctionImpl(_esriGeoprocessing.IGPFunctionImpl):
    _IID = uuid.UUID('32a03c19-d2bc-49b3-8714-f62d04d145d0')

    def __init__(self, *args, **kw):
        super(IGPFunctionImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ProductCode(self, ProductCode):
        '''Method IGPFunctionImpl.put_ProductCode

           INPUT
            ProductCode         : esriProductCode'''
        return super(IGPFunctionImpl, self).put_ProductCode(ProductCode)
    def get_ProductCode(self):
        '''Method IGPFunctionImpl.get_ProductCode

           OUTPUT
            ProductCode         : esriProductCode*'''
        return super(IGPFunctionImpl, self).get_ProductCode()
    ProductCode = property(get_ProductCode, put_ProductCode, None)

class ITransactionsObject(_esriGeoprocessing.ITransactionsObject):
    _IID = uuid.UUID('c89ff362-5ed6-4da1-8522-3b542ffca15b')
    def Commit(self):
        '''Method ITransactionsObject.Commit'''
        return super(ITransactionsObject, self).Commit()

class IGeoprocessingAppHelper(_esriGeoprocessing.IGeoprocessingAppHelper):
    _IID = uuid.UUID('74d41b1a-b896-4705-9dbe-0dd6b9ef163f')
    def UpdateTrackingAnalystRenderers(self, pFeatRenderer, nFields, pFields, pFromWS):
        '''Method IGeoprocessingAppHelper.UpdateTrackingAnalystRenderers

           INPUTS
            pFeatRenderer       : IFeatureRenderer*
            nFields             : long
            pFields             : IFields*
            pFromWS             : IWorkspace*'''
        return super(IGeoprocessingAppHelper, self).UpdateTrackingAnalystRenderers(pFeatRenderer, nFields, pFields, pFromWS)
    def CopySchematicDataset(self, pSourceDataset, targetDirPath):
        '''Method IGeoprocessingAppHelper.CopySchematicDataset

           INPUTS
            pSourceDataset      : IDataset*
            targetDirPath       : BSTR'''
        return super(IGeoprocessingAppHelper, self).CopySchematicDataset(pSourceDataset, targetDirPath)
    def IsInApp(self):
        '''Method IGeoprocessingAppHelper.IsInApp

           OUTPUT
            pInApp              : VARIANT_BOOL*'''
        return super(IGeoprocessingAppHelper, self).IsInApp()
    def GetSchematicLayerTemplate(self, pDataset):
        '''Method IGeoprocessingAppHelper.GetSchematicLayerTemplate

           INPUT
            pDataset            : IDataset*

           OUTPUT
            ppSchLayerTemplate  : ICompositeLayer**'''
        return super(IGeoprocessingAppHelper, self).GetSchematicLayerTemplate(pDataset)
    def PutSchematicLayerTemplate(self, pDataset, pSchLayerTemplate):
        '''Method IGeoprocessingAppHelper.PutSchematicLayerTemplate

           INPUTS
            pDataset            : IDataset*
            pSchLayerTemplate   : ICompositeLayer*'''
        return super(IGeoprocessingAppHelper, self).PutSchematicLayerTemplate(pDataset, pSchLayerTemplate)

class IGPUtilitiesImpl(_esriGeoprocessing.IGPUtilitiesImpl):
    _IID = uuid.UUID('8fa2f161-9bc9-42d8-b92a-909d89b7c03d')

    def __init__(self, *args, **kw):
        super(IGPUtilitiesImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DisconnectLayers(self, pLayer, mapOnly):
        '''Method IGPUtilitiesImpl.DisconnectLayers

           INPUTS
            pLayer              : ILayer*
            mapOnly             : VARIANT_BOOL

           OUTPUTS
            ppLayers            : IArray**
            ppSelSets           : IArray**'''
        return super(IGPUtilitiesImpl, self).DisconnectLayers(pLayer, mapOnly)
    def ReconnectLayers(self, pLayer, mapOnly, pLayers, pSelSets):
        '''Method IGPUtilitiesImpl.ReconnectLayers

           INPUTS
            pLayer              : ILayer*
            mapOnly             : VARIANT_BOOL
            pLayers             : IArray*
            pSelSets            : IArray*'''
        return super(IGPUtilitiesImpl, self).ReconnectLayers(pLayer, mapOnly, pLayers, pSelSets)
    def DisconnectTables(self, pTable, mapOnly):
        '''Method IGPUtilitiesImpl.DisconnectTables

           INPUTS
            pTable              : ITable*
            mapOnly             : VARIANT_BOOL

           OUTPUTS
            ppLayers            : IArray**
            ppSelSets           : IArray**'''
        return super(IGPUtilitiesImpl, self).DisconnectTables(pTable, mapOnly)
    def ReconnectTables(self, pTable, mapOnly, pLayers, pSelSets):
        '''Method IGPUtilitiesImpl.ReconnectTables

           INPUTS
            pTable              : ITable*
            mapOnly             : VARIANT_BOOL
            pLayers             : IArray*
            pSelSets            : IArray*'''
        return super(IGPUtilitiesImpl, self).ReconnectTables(pTable, mapOnly, pLayers, pSelSets)
    def SimpleCopy(self, pValue, outputPath):
        '''Method IGPUtilitiesImpl.SimpleCopy

           INPUTS
            pValue              : IGPValue*
            outputPath          : BSTR'''
        return super(IGPUtilitiesImpl, self).SimpleCopy(pValue, outputPath)
    def put_CheckSchemaLock(self, pCheckSchemaLock):
        '''Method IGPUtilitiesImpl.put_CheckSchemaLock

           INPUT
            pCheckSchemaLock    : VARIANT_BOOL'''
        return super(IGPUtilitiesImpl, self).put_CheckSchemaLock(pCheckSchemaLock)
    def get_CheckSchemaLock(self):
        '''Method IGPUtilitiesImpl.get_CheckSchemaLock

           OUTPUT
            pCheckSchemaLock    : VARIANT_BOOL*'''
        return super(IGPUtilitiesImpl, self).get_CheckSchemaLock()
    def DisconnectLayersByDataSource(self, catalogPath, mapOnly):
        '''Method IGPUtilitiesImpl.DisconnectLayersByDataSource

           INPUTS
            catalogPath         : BSTR
            mapOnly             : VARIANT_BOOL

           OUTPUTS
            ppLayers            : IArray**
            ppSelSets           : IArray**'''
        return super(IGPUtilitiesImpl, self).DisconnectLayersByDataSource(catalogPath, mapOnly)
    def ReconnectLayersByDataSource(self, catalogPath, mapOnly, pLayers, pSelSets):
        '''Method IGPUtilitiesImpl.ReconnectLayersByDataSource

           INPUTS
            catalogPath         : BSTR
            mapOnly             : VARIANT_BOOL
            pLayers             : IArray*
            pSelSets            : IArray*'''
        return super(IGPUtilitiesImpl, self).ReconnectLayersByDataSource(catalogPath, mapOnly, pLayers, pSelSets)
    def DisconnectTablesByDataSource(self, catalogPath, mapOnly, ppLayers, ppSelSets):
        '''Method IGPUtilitiesImpl.DisconnectTablesByDataSource

           INPUTS
            catalogPath         : BSTR
            mapOnly             : VARIANT_BOOL
            ppLayers            : IArray**
            ppSelSets           : IArray**'''
        return super(IGPUtilitiesImpl, self).DisconnectTablesByDataSource(catalogPath, mapOnly, ppLayers, ppSelSets)
    def ReconnectTablesByDataSource(self, catalogPath, mapOnly, pLayers, pSelSets):
        '''Method IGPUtilitiesImpl.ReconnectTablesByDataSource

           INPUTS
            catalogPath         : BSTR
            mapOnly             : VARIANT_BOOL
            pLayers             : IArray*
            pSelSets            : IArray*'''
        return super(IGPUtilitiesImpl, self).ReconnectTablesByDataSource(catalogPath, mapOnly, pLayers, pSelSets)
    def CreateSimpleFeatureClass(self, inPath, inGeometryType, pInEnv, pInGeoDataset, pEnvMgr, pNewFields):
        '''Method IGPUtilitiesImpl.CreateSimpleFeatureClass

           INPUTS
            inPath              : BSTR
            inGeometryType      : BSTR
            pInEnv              : IEnvelope*
            pInGeoDataset       : IGeoDataset*
            pEnvMgr             : IGPEnvironmentManager*
            pNewFields          : IFields*

           OUTPUT
            ppFC                : IFeatureClass**'''
        return super(IGPUtilitiesImpl, self).CreateSimpleFeatureClass(inPath, inGeometryType, pInEnv, pInGeoDataset, pEnvMgr, pNewFields)
    def CreateSpatialIndex(self, pGPValue):
        '''Method IGPUtilitiesImpl.CreateSpatialIndex

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPUtilitiesImpl, self).CreateSpatialIndex(pGPValue)
    def GetAllMapLayers(self):
        '''Method IGPUtilitiesImpl.GetAllMapLayers

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IGPUtilitiesImpl, self).GetAllMapLayers()
    def GetAllMapTables(self):
        '''Method IGPUtilitiesImpl.GetAllMapTables

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IGPUtilitiesImpl, self).GetAllMapTables()
    def UpdateTableWindow(self, pInObj):
        '''Method IGPUtilitiesImpl.UpdateTableWindow

           INPUT
            pInObj              : IUnknown*'''
        return super(IGPUtilitiesImpl, self).UpdateTableWindow(pInObj)
    def PreventRedrawTableWindow(self, pInObj, redraw):
        '''Method IGPUtilitiesImpl.PreventRedrawTableWindow

           INPUTS
            pInObj              : IUnknown*
            redraw              : VARIANT_BOOL'''
        return super(IGPUtilitiesImpl, self).PreventRedrawTableWindow(pInObj, redraw)
    def LockLayersByDataSource(self, catalogPath, pLockedObjects):
        '''Method IGPUtilitiesImpl.LockLayersByDataSource

           INPUTS
            catalogPath         : BSTR
            pLockedObjects      : IArray*'''
        return super(IGPUtilitiesImpl, self).LockLayersByDataSource(catalogPath, pLockedObjects)
    def LockTablesByDataSource(self, catalogPath, pLockedObjects):
        '''Method IGPUtilitiesImpl.LockTablesByDataSource

           INPUTS
            catalogPath         : BSTR
            pLockedObjects      : IArray*'''
        return super(IGPUtilitiesImpl, self).LockTablesByDataSource(catalogPath, pLockedObjects)
    def SetIgnoreToolLayers(self, bIgnore):
        '''Method IGPUtilitiesImpl.SetIgnoreToolLayers

           INPUT
            bIgnore             : VARIANT_BOOL'''
        return super(IGPUtilitiesImpl, self).SetIgnoreToolLayers(bIgnore)
    def RemoveFromMapByDataSource(self, catalogPath):
        '''Method IGPUtilitiesImpl.RemoveFromMapByDataSource

           INPUT
            catalogPath         : BSTR'''
        return super(IGPUtilitiesImpl, self).RemoveFromMapByDataSource(catalogPath)
    def SetLockedObjects(self, pLockedObjects):
        '''Method IGPUtilitiesImpl.SetLockedObjects

           INPUT
            pLockedObjects      : IArray*'''
        return super(IGPUtilitiesImpl, self).SetLockedObjects(pLockedObjects)
    def FindLockedObject(self, pGPValue):
        '''Method IGPUtilitiesImpl.FindLockedObject

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            ppLockedObject      : IUnknown**'''
        return super(IGPUtilitiesImpl, self).FindLockedObject(pGPValue)
    def FindLockedObjectByName(self, Name):
        '''Method IGPUtilitiesImpl.FindLockedObjectByName

           INPUT
            Name                : BSTR

           OUTPUTS
            ppLockedObject      : IUnknown**
            ppValueObject       : IGPValue**'''
        return super(IGPUtilitiesImpl, self).FindLockedObjectByName(Name)
    def SaveLayerEx(self, catalogPath, pLayer, version):
        '''Method IGPUtilitiesImpl.SaveLayerEx

           INPUTS
            catalogPath         : BSTR
            pLayer              : ILayer*
            version             : esriArcGISVersion'''
        return super(IGPUtilitiesImpl, self).SaveLayerEx(catalogPath, pLayer, version)
    def AddToMapExEx(self, pGPValue, Name, temporary, pUnkRenderer, Visible, reconnectOnly):
        '''Method IGPUtilitiesImpl.AddToMapExEx

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*
            Visible             : VARIANT_BOOL
            reconnectOnly       : VARIANT_BOOL'''
        return super(IGPUtilitiesImpl, self).AddToMapExEx(pGPValue, Name, temporary, pUnkRenderer, Visible, reconnectOnly)
    def DecodeRasterDETable(self, pValue):
        '''Method IGPUtilitiesImpl.DecodeRasterDETable

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGPUtilitiesImpl, self).DecodeRasterDETable(pValue)
    def RasterGetFields(self, pValue):
        '''Method IGPUtilitiesImpl.RasterGetFields

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppFields            : IFields**'''
        return super(IGPUtilitiesImpl, self).RasterGetFields(pValue)
    def FindRasterField(self, pGPValue, Name):
        '''Method IGPUtilitiesImpl.FindRasterField

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR

           OUTPUT
            ppField             : IField**'''
        return super(IGPUtilitiesImpl, self).FindRasterField(pGPValue, Name)
    def GetDEFeatureClassesFromDEGeometricNetwork(self, pDEGN):
        '''Method IGPUtilitiesImpl.GetDEFeatureClassesFromDEGeometricNetwork

           INPUT
            pDEGN               : IDEGeometricNetwork*

           OUTPUT
            ppDEFCs             : IDataElements**'''
        return super(IGPUtilitiesImpl, self).GetDEFeatureClassesFromDEGeometricNetwork(pDEGN)
    def GetSourceDatasetPath(self, pDataLayer):
        '''Method IGPUtilitiesImpl.GetSourceDatasetPath

           INPUT
            pDataLayer          : IDataLayer*

           OUTPUT
            pPath               : BSTR*'''
        return super(IGPUtilitiesImpl, self).GetSourceDatasetPath(pDataLayer)
    def FindMapLayerEx(self, pLayer):
        '''Method IGPUtilitiesImpl.FindMapLayerEx

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGPUtilitiesImpl, self).FindMapLayerEx(pLayer)
    def FindMapLayerByDataSource(self, dataSourcePath):
        '''Method IGPUtilitiesImpl.FindMapLayerByDataSource

           INPUT
            dataSourcePath      : BSTR

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilitiesImpl, self).FindMapLayerByDataSource(dataSourcePath)
    def SearchCompositeLayerByDataSource(self, dataSourcePath, parentPath, pLayer):
        '''Method IGPUtilitiesImpl.SearchCompositeLayerByDataSource

           INPUTS
            dataSourcePath      : BSTR
            parentPath          : BSTR
            pLayer              : ILayer*

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilitiesImpl, self).SearchCompositeLayerByDataSource(dataSourcePath, parentPath, pLayer)
    def CreateRecordSetParameterValue(self, paramDefault, pDataType):
        '''Method IGPUtilitiesImpl.CreateRecordSetParameterValue

           INPUTS
            paramDefault        : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IGPUtilitiesImpl, self).CreateRecordSetParameterValue(paramDefault, pDataType)
    def FindMapLayer3(self, Name, interfaceIID):
        '''Method IGPUtilitiesImpl.FindMapLayer3

           INPUTS
            Name                : BSTR
            interfaceIID        : GUID

           OUTPUTS
            ppLayer             : ILayer**
            ppGPLayer           : IGPLayer**'''
        return super(IGPUtilitiesImpl, self).FindMapLayer3(Name, interfaceIID)
    def FindSubLayer(self, pGroupLayer, inGroupLayerName, LayerName, WhereClause, nSelected, pUnkLayer):
        '''Method IGPUtilitiesImpl.FindSubLayer

           INPUTS
            pGroupLayer         : ILayer*
            inGroupLayerName    : BSTR
            LayerName           : BSTR
            WhereClause         : BSTR
            nSelected           : long
            pUnkLayer           : IUnknown*

           OUTPUT
            groupLayerName      : BSTR*'''
        return super(IGPUtilitiesImpl, self).FindSubLayer(pGroupLayer, inGroupLayerName, LayerName, WhereClause, nSelected, pUnkLayer)
    def get_ByReferencePackaging(self):
        '''Method IGPUtilitiesImpl.get_ByReferencePackaging

           OUTPUT
            pByRef              : VARIANT_BOOL*'''
        return super(IGPUtilitiesImpl, self).get_ByReferencePackaging()
    def put_ByReferencePackaging(self, pByRef):
        '''Method IGPUtilitiesImpl.put_ByReferencePackaging

           INPUT
            pByRef              : VARIANT_BOOL'''
        return super(IGPUtilitiesImpl, self).put_ByReferencePackaging(pByRef)
    def ValidateExistsFDS(self, pGPValue):
        '''Method IGPUtilitiesImpl.ValidateExistsFDS

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(IGPUtilitiesImpl, self).ValidateExistsFDS(pGPValue)
    ByReferencePackaging = property(get_ByReferencePackaging, put_ByReferencePackaging, None)
    CheckSchemaLock = property(get_CheckSchemaLock, put_CheckSchemaLock, None)

class IGPSAGeoDataTypeName(_esriGeoprocessing.IGPSAGeoDataTypeName):
    _IID = uuid.UUID('8ef09a31-5613-4246-b46e-8bc4e5027d61')

    def __init__(self, *args, **kw):
        super(IGPSAGeoDataTypeName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Domain(self):
        '''Method IGPSAGeoDataTypeName.get_Domain

           OUTPUT
            ppDomain            : IGPSAGeoDataDomain**'''
        return super(IGPSAGeoDataTypeName, self).get_Domain()
    def putref_Domain(self, ppDomain):
        '''Method IGPSAGeoDataTypeName.putref_Domain

           INPUT
            ppDomain            : IGPSAGeoDataDomain*'''
        return super(IGPSAGeoDataTypeName, self).putref_Domain(ppDomain)
    Domain = property(get_Domain, putref_Domain, None)

class IGPRasterUtil(_esriGeoprocessing.IGPRasterUtil):
    _IID = uuid.UUID('21607d20-7084-4d37-8ec9-f9033c796f48')
    def IsRasterData(self, DEGeoDataset):
        '''Method IGPRasterUtil.IsRasterData

           INPUT
            DEGeoDataset        : IDEGeoDataset*

           OUTPUT
            IsRasterData        : VARIANT_BOOL*'''
        return super(IGPRasterUtil, self).IsRasterData(DEGeoDataset)
    def OpenRasterWorkspace(self, wrkPath):
        '''Method IGPRasterUtil.OpenRasterWorkspace

           INPUT
            wrkPath             : BSTR

           OUTPUT
            ppWorkspace         : IWorkspace**'''
        return super(IGPRasterUtil, self).OpenRasterWorkspace(wrkPath)
    def MakeTable(self, DETable):
        '''Method IGPRasterUtil.MakeTable

           INPUT
            DETable             : IDETable*

           OUTPUT
            Table               : ITable**'''
        return super(IGPRasterUtil, self).MakeTable(DETable)
    def MakeGeoDataset(self, DEGeoDataset):
        '''Method IGPRasterUtil.MakeGeoDataset

           INPUT
            DEGeoDataset        : IDEGeoDataset*

           OUTPUT
            GeoDataset          : IGeoDataset**'''
        return super(IGPRasterUtil, self).MakeGeoDataset(DEGeoDataset)
    def MakeRasterDataset(self, DERasterDataset):
        '''Method IGPRasterUtil.MakeRasterDataset

           INPUT
            DERasterDataset     : IDERasterDataset*

           OUTPUT
            RasterDataset       : IRasterDataset**'''
        return super(IGPRasterUtil, self).MakeRasterDataset(DERasterDataset)
    def MakeRasterBand(self, DERasterBand):
        '''Method IGPRasterUtil.MakeRasterBand

           INPUT
            DERasterBand        : IDERasterBand*

           OUTPUT
            RasterBand          : IRasterBand**'''
        return super(IGPRasterUtil, self).MakeRasterBand(DERasterBand)
    def MakeFeatureClass(self, DEFeatureClass):
        '''Method IGPRasterUtil.MakeFeatureClass

           INPUT
            DEFeatureClass      : IDEFeatureClass*

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IGPRasterUtil, self).MakeFeatureClass(DEFeatureClass)
    def MakeDescriptor(self, pIn, bsFieldName, WhereClause):
        '''Method IGPRasterUtil.MakeDescriptor

           INPUTS
            pIn                 : IDEGeoDataset*
            bsFieldName         : BSTR
            WhereClause         : BSTR

           OUTPUT
            ppOut               : IGeoDataset**'''
        return super(IGPRasterUtil, self).MakeDescriptor(pIn, bsFieldName, WhereClause)
    def MakeRasterDescriptor(self, GPRasterLayer, bsFieldName, WhereClause):
        '''Method IGPRasterUtil.MakeRasterDescriptor

           INPUTS
            GPRasterLayer       : IDEGeoDataset*
            bsFieldName         : BSTR
            WhereClause         : BSTR

           OUTPUT
            RasterDescriptor    : IRasterDescriptor**'''
        return super(IGPRasterUtil, self).MakeRasterDescriptor(GPRasterLayer, bsFieldName, WhereClause)
    def MakeFeatureClassDescriptor(self, GPFeatureLayer, bsFieldName, WhereClause):
        '''Method IGPRasterUtil.MakeFeatureClassDescriptor

           INPUTS
            GPFeatureLayer      : IDEGeoDataset*
            bsFieldName         : BSTR
            WhereClause         : BSTR

           OUTPUT
            FCDescriptor        : IFeatureClassDescriptor**'''
        return super(IGPRasterUtil, self).MakeFeatureClassDescriptor(GPFeatureLayer, bsFieldName, WhereClause)
    def MakeRasterLayer(self, GPRasterLayer):
        '''Method IGPRasterUtil.MakeRasterLayer

           INPUT
            GPRasterLayer       : IGPRasterLayer*

           OUTPUT
            RasterLayer         : IRasterLayer**'''
        return super(IGPRasterUtil, self).MakeRasterLayer(GPRasterLayer)
    def OpenRasterLayerFromString(self, NameString):
        '''Method IGPRasterUtil.OpenRasterLayerFromString

           INPUT
            NameString          : BSTR

           OUTPUT
            ppRasterLayer       : IRasterLayer**'''
        return super(IGPRasterUtil, self).OpenRasterLayerFromString(NameString)
    def GetDETable(self, DEGeoDataset):
        '''Method IGPRasterUtil.GetDETable

           INPUT
            DEGeoDataset        : IGPValue*

           OUTPUT
            DETable             : IDETable**'''
        return super(IGPRasterUtil, self).GetDETable(DEGeoDataset)
    def MakeDERasterBand(self, NameString):
        '''Method IGPRasterUtil.MakeDERasterBand

           INPUT
            NameString          : BSTR

           OUTPUT
            DERasterBand        : IDERasterBand**'''
        return super(IGPRasterUtil, self).MakeDERasterBand(NameString)
    def GetResampleEnum(self, Name):
        '''Method IGPRasterUtil.GetResampleEnum

           INPUT
            Name                : BSTR

           OUTPUT
            pOut                : esriGeoAnalysisResampleEnum*'''
        return super(IGPRasterUtil, self).GetResampleEnum(Name)
    def GetMosaicEnum(self, Name):
        '''Method IGPRasterUtil.GetMosaicEnum

           INPUT
            Name                : BSTR

           OUTPUT
            pOut                : rstMosaicOperatorType*'''
        return super(IGPRasterUtil, self).GetMosaicEnum(Name)
    def GetTransformEnum(self, Name):
        '''Method IGPRasterUtil.GetTransformEnum

           INPUT
            Name                : BSTR

           OUTPUT
            pOut                : esriGeoTransTypeEnum*'''
        return super(IGPRasterUtil, self).GetTransformEnum(Name)
    def ParseRasterDatasetName(self, NameString):
        '''Method IGPRasterUtil.ParseRasterDatasetName

           INPUT
            NameString          : BSTR

           OUTPUT
            pOut                : BSTR*'''
        return super(IGPRasterUtil, self).ParseRasterDatasetName(NameString)
    def TestIntegerType(self, GeoDataset):
        '''Method IGPRasterUtil.TestIntegerType

           INPUT
            GeoDataset          : IGeoDataset*

           OUTPUT
            bInteger            : VARIANT_BOOL*'''
        return super(IGPRasterUtil, self).TestIntegerType(GeoDataset)
    def GetRasterDataCellSize(self, pDEGeoDataset, pOutSpatialRef):
        '''Method IGPRasterUtil.GetRasterDataCellSize

           INPUTS
            pDEGeoDataset       : IDEGeoDataset*
            pOutSpatialRef      : ISpatialReference*

           OUTPUT
            pCellSize           : double*'''
        return super(IGPRasterUtil, self).GetRasterDataCellSize(pDEGeoDataset, pOutSpatialRef)
    def GetGeoDatasetExtent(self, pDEGeoDataset, pOutSpatialRef):
        '''Method IGPRasterUtil.GetGeoDatasetExtent

           INPUTS
            pDEGeoDataset       : IDEGeoDataset*
            pOutSpatialRef      : ISpatialReference*

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGPRasterUtil, self).GetGeoDatasetExtent(pDEGeoDataset, pOutSpatialRef)
    def GetRaster(self, pValue):
        '''Method IGPRasterUtil.GetRaster

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppOut               : IRaster**'''
        return super(IGPRasterUtil, self).GetRaster(pValue)
    def GetDatasetFromLocation(self, bsLocation):
        '''Method IGPRasterUtil.GetDatasetFromLocation

           INPUT
            bsLocation          : BSTR

           OUTPUT
            ppOut               : IDataset**'''
        return super(IGPRasterUtil, self).GetDatasetFromLocation(bsLocation)
    def GetLongPathname(self, shortName):
        '''Method IGPRasterUtil.GetLongPathname

           INPUT
            shortName           : BSTR

           OUTPUT
            longName            : BSTR*'''
        return super(IGPRasterUtil, self).GetLongPathname(shortName)
    def GetGeoSourceExtent(self, geodata, pOutSpatialRef):
        '''Method IGPRasterUtil.GetGeoSourceExtent

           INPUTS
            geodata             : IUnknown*
            pOutSpatialRef      : ISpatialReference*

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGPRasterUtil, self).GetGeoSourceExtent(geodata, pOutSpatialRef)
    def CreateErrorMessage(self, errorCode, ID):
        '''Method IGPRasterUtil.CreateErrorMessage

           INPUTS
            errorCode           : HRESULT
            ID                  : long

           OUTPUT
            ppMessage           : IGPMessage**'''
        return super(IGPRasterUtil, self).CreateErrorMessage(errorCode, ID)
    def CreateErrorMessage1Arg(self, errorCode, ID, arg1):
        '''Method IGPRasterUtil.CreateErrorMessage1Arg

           INPUTS
            errorCode           : HRESULT
            ID                  : long
            arg1                : BSTR

           OUTPUT
            ppMessage           : IGPMessage**'''
        return super(IGPRasterUtil, self).CreateErrorMessage1Arg(errorCode, ID, arg1)
    def CreateSetAsTextError(self, pGPValue):
        '''Method IGPRasterUtil.CreateSetAsTextError

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            ppMessage           : IGPMessage**'''
        return super(IGPRasterUtil, self).CreateSetAsTextError(pGPValue)
    def SnapExtentLL(self, pExtent, pSnapRaster, pOutSpatialReference):
        '''Method IGPRasterUtil.SnapExtentLL

           INPUTS
            pExtent             : IEnvelope*
            pSnapRaster         : IDEGeoDataset*
            pOutSpatialReference: ISpatialReference*

           OUTPUT
            bAlteredLL          : VARIANT_BOOL*'''
        return super(IGPRasterUtil, self).SnapExtentLL(pExtent, pSnapRaster, pOutSpatialReference)
    def CreateOutputEnvironmentManager(self, pInEnvMgr, pInRasterGDSs):
        '''Method IGPRasterUtil.CreateOutputEnvironmentManager

           INPUTS
            pInEnvMgr           : IGPEnvironmentManager*
            pInRasterGDSs       : IArray*

           OUTPUTS
            ppOutEnvMgr         : IGPEnvironmentManager**
            ppMessage           : IGPMessage**'''
        return super(IGPRasterUtil, self).CreateOutputEnvironmentManager(pInEnvMgr, pInRasterGDSs)
    def SaveRasterDataset(self, pInRasterGDS, pOutRDSName, bDeleteInput, pEnvMgr):
        '''Method IGPRasterUtil.SaveRasterDataset

           INPUTS
            pInRasterGDS        : IGeoDataset*
            pOutRDSName         : IRasterDatasetName*
            bDeleteInput        : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUTS
            ppOutRDS            : IRasterDataset**
            ppMessage           : IGPMessage**'''
        return super(IGPRasterUtil, self).SaveRasterDataset(pInRasterGDS, pOutRDSName, bDeleteInput, pEnvMgr)
    def GetRasterDataCellSizeXY(self, pDEGeoDataset, pOutSpatialRef):
        '''Method IGPRasterUtil.GetRasterDataCellSizeXY

           INPUTS
            pDEGeoDataset       : IDEGeoDataset*
            pOutSpatialRef      : ISpatialReference*

           OUTPUTS
            pCellSizeX          : double*
            pCellSizeY          : double*'''
        return super(IGPRasterUtil, self).GetRasterDataCellSizeXY(pDEGeoDataset, pOutSpatialRef)
    def CreateErrorMessage2Arg(self, errorCode, ID, arg1, arg2):
        '''Method IGPRasterUtil.CreateErrorMessage2Arg

           INPUTS
            errorCode           : HRESULT
            ID                  : long
            arg1                : BSTR
            arg2                : BSTR

           OUTPUT
            ppMessage           : IGPMessage**'''
        return super(IGPRasterUtil, self).CreateErrorMessage2Arg(errorCode, ID, arg1, arg2)

class IGPCompositeDataTypeName(_esriGeoprocessing.IGPCompositeDataTypeName):
    _IID = uuid.UUID('2cccaf28-2929-4d92-a9de-ac38ebf8b6f6')
    def get_Count(self):
        '''Method IGPCompositeDataTypeName.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPCompositeDataTypeName, self).get_Count()
    def get_DataTypeName(self, Index):
        '''Method IGPCompositeDataTypeName.get_DataTypeName

           INPUT
            Index               : long

           OUTPUT
            ppName              : IGPDataTypeName**'''
        return super(IGPCompositeDataTypeName, self).get_DataTypeName(Index)
    def AddDataTypeName(self, pName):
        '''Method IGPCompositeDataTypeName.AddDataTypeName

           INPUT
            pName               : IGPDataTypeName*'''
        return super(IGPCompositeDataTypeName, self).AddDataTypeName(pName)
    def RemoveDataTypeName(self, Index):
        '''Method IGPCompositeDataTypeName.RemoveDataTypeName

           INPUT
            Index               : long'''
        return super(IGPCompositeDataTypeName, self).RemoveDataTypeName(Index)
    Count = property(get_Count, None, None)
    DataTypeName = IndexProperty(get_DataTypeName, None)

class IGPValueTableTypeName(_esriGeoprocessing.IGPValueTableTypeName):
    _IID = uuid.UUID('7e158672-f277-489e-937b-4a9cc851bdc3')
    def get_Count(self):
        '''Method IGPValueTableTypeName.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPValueTableTypeName, self).get_Count()
    def get_DataTypeName(self, Index):
        '''Method IGPValueTableTypeName.get_DataTypeName

           INPUT
            Index               : long

           OUTPUT
            ppDataTypeName      : IGPDataTypeName**'''
        return super(IGPValueTableTypeName, self).get_DataTypeName(Index)
    def get_Width(self, Index):
        '''Method IGPValueTableTypeName.get_Width

           INPUT
            Index               : long

           OUTPUT
            pWidth              : long*'''
        return super(IGPValueTableTypeName, self).get_Width(Index)
    def get_DisplayName(self, Index):
        '''Method IGPValueTableTypeName.get_DisplayName

           INPUT
            Index               : long

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(IGPValueTableTypeName, self).get_DisplayName(Index)
    def AddDataTypeName(self, pDataTypeName, DisplayName, Width, CLSID):
        '''Method IGPValueTableTypeName.AddDataTypeName

           INPUTS
            pDataTypeName       : IGPDataTypeName*
            DisplayName         : BSTR
            Width               : long
            CLSID               : IUID*'''
        return super(IGPValueTableTypeName, self).AddDataTypeName(pDataTypeName, DisplayName, Width, CLSID)
    def RemoveDataTypeName(self, Index):
        '''Method IGPValueTableTypeName.RemoveDataTypeName

           INPUT
            Index               : long'''
        return super(IGPValueTableTypeName, self).RemoveDataTypeName(Index)
    def get_ControlCLSID(self, Index):
        '''Method IGPValueTableTypeName.get_ControlCLSID

           INPUT
            Index               : long

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPValueTableTypeName, self).get_ControlCLSID(Index)
    Count = property(get_Count, None, None)
    ControlCLSID = IndexProperty(get_ControlCLSID, None)
    DataTypeName = IndexProperty(get_DataTypeName, None)
    DisplayName = IndexProperty(get_DisplayName, None)
    Width = IndexProperty(get_Width, None)

class IGPValueTableTypeNameProperty(_esriGeoprocessing.IGPValueTableTypeNameProperty):
    _IID = uuid.UUID('6ea000d1-b649-420e-b698-d72b0a9c7f79')

    def __init__(self, *args, **kw):
        super(IGPValueTableTypeNameProperty, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Width(self):
        '''Method IGPValueTableTypeNameProperty.get_Width

           OUTPUT
            Width               : long*'''
        return super(IGPValueTableTypeNameProperty, self).get_Width()
    def put_Width(self, Width):
        '''Method IGPValueTableTypeNameProperty.put_Width

           INPUT
            Width               : long'''
        return super(IGPValueTableTypeNameProperty, self).put_Width(Width)
    def get_DataTypeName(self):
        '''Method IGPValueTableTypeNameProperty.get_DataTypeName

           OUTPUT
            ppDataTypeName      : IGPDataTypeName**'''
        return super(IGPValueTableTypeNameProperty, self).get_DataTypeName()
    def putref_DataTypeName(self, ppDataTypeName):
        '''Method IGPValueTableTypeNameProperty.putref_DataTypeName

           INPUT
            ppDataTypeName      : IGPDataTypeName*'''
        return super(IGPValueTableTypeNameProperty, self).putref_DataTypeName(ppDataTypeName)
    def put_DisplayName(self, pDisplayName):
        '''Method IGPValueTableTypeNameProperty.put_DisplayName

           INPUT
            pDisplayName        : BSTR'''
        return super(IGPValueTableTypeNameProperty, self).put_DisplayName(pDisplayName)
    def get_DisplayName(self):
        '''Method IGPValueTableTypeNameProperty.get_DisplayName

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(IGPValueTableTypeNameProperty, self).get_DisplayName()
    def putref_ControlCLSID(self, CLSID):
        '''Method IGPValueTableTypeNameProperty.putref_ControlCLSID

           INPUT
            CLSID               : IUID*'''
        return super(IGPValueTableTypeNameProperty, self).putref_ControlCLSID(CLSID)
    def get_ControlCLSID(self):
        '''Method IGPValueTableTypeNameProperty.get_ControlCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPValueTableTypeNameProperty, self).get_ControlCLSID()
    ControlCLSID = property(get_ControlCLSID, putref_ControlCLSID, None)
    DataTypeName = property(get_DataTypeName, putref_DataTypeName, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    Width = property(get_Width, put_Width, None)

class IGPGxFilter(_esriGeoprocessing.IGPGxFilter):
    _IID = uuid.UUID('a1536bea-70c3-4721-899c-cae8ae4682ac')

    def __init__(self, *args, **kw):
        super(IGPGxFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ChooseDomain(self):
        '''Method IGPGxFilter.get_ChooseDomain

           OUTPUT
            ppDomain            : IGPDomain**'''
        return super(IGPGxFilter, self).get_ChooseDomain()
    def putref_ChooseDomain(self, ppDomain):
        '''Method IGPGxFilter.putref_ChooseDomain

           INPUT
            ppDomain            : IGPDomain*'''
        return super(IGPGxFilter, self).putref_ChooseDomain(ppDomain)
    def get_DisplayDomain(self):
        '''Method IGPGxFilter.get_DisplayDomain

           OUTPUT
            ppDomain            : IGPDomain**'''
        return super(IGPGxFilter, self).get_DisplayDomain()
    def putref_DisplayDomain(self, ppDomain):
        '''Method IGPGxFilter.putref_DisplayDomain

           INPUT
            ppDomain            : IGPDomain*'''
        return super(IGPGxFilter, self).putref_DisplayDomain(ppDomain)
    def put_Name(self, _arg1):
        '''Method IGPGxFilter.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IGPGxFilter, self).put_Name(_arg1)
    def put_Description(self, _arg1):
        '''Method IGPGxFilter.put_Description

           INPUT
            _arg1               : BSTR'''
        return super(IGPGxFilter, self).put_Description(_arg1)
    ChooseDomain = property(get_ChooseDomain, putref_ChooseDomain, None)
    Description = property(None, put_Description, None)
    DisplayDomain = property(get_DisplayDomain, putref_DisplayDomain, None)
    Name = property(None, put_Name, None)

class IDEUtilitiesImpl(_esriGeoprocessing.IDEUtilitiesImpl):
    _IID = uuid.UUID('0e32b973-ec2d-4856-a9b4-98f50f6263d6')

    def __init__(self, *args, **kw):
        super(IDEUtilitiesImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def RefreshParentFromCatalogPath(self, catalogPath, pGxCatalog):
        '''Method IDEUtilitiesImpl.RefreshParentFromCatalogPath

           INPUTS
            catalogPath         : BSTR
            pGxCatalog          : IUnknown*'''
        return super(IDEUtilitiesImpl, self).RefreshParentFromCatalogPath(catalogPath, pGxCatalog)
    def GetDatasetCatalogPath(self, dataset):
        '''Method IDEUtilitiesImpl.GetDatasetCatalogPath

           INPUT
            dataset             : IDataset*

           OUTPUT
            catalogPath         : BSTR*'''
        return super(IDEUtilitiesImpl, self).GetDatasetCatalogPath(dataset)
    def GetNameObjectCatalogPath(self, Name):
        '''Method IDEUtilitiesImpl.GetNameObjectCatalogPath

           INPUT
            Name                : IName*

           OUTPUT
            catalogPath         : BSTR*'''
        return super(IDEUtilitiesImpl, self).GetNameObjectCatalogPath(Name)
    def GetNameObjectFromCatalog(self, locationMoniker, pGxCatalog, pDataType):
        '''Method IDEUtilitiesImpl.GetNameObjectFromCatalog

           INPUTS
            locationMoniker     : BSTR
            pGxCatalog          : IUnknown*
            pDataType           : IGPDataType*

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilitiesImpl, self).GetNameObjectFromCatalog(locationMoniker, pGxCatalog, pDataType)
    def CreateParentFromCatalogPath(self, catalogPath):
        '''Method IDEUtilitiesImpl.CreateParentFromCatalogPath

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilitiesImpl, self).CreateParentFromCatalogPath(catalogPath)
    def GetGxObjectFromCatalog(self, locationMoniker, pGxCatalog, pDataType):
        '''Method IDEUtilitiesImpl.GetGxObjectFromCatalog

           INPUTS
            locationMoniker     : BSTR
            pGxCatalog          : IUnknown*
            pDataType           : IGPDataType*

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IDEUtilitiesImpl, self).GetGxObjectFromCatalog(locationMoniker, pGxCatalog, pDataType)
    def get_StrictDataTypeCheck(self, bCheck):
        '''Method IDEUtilitiesImpl.get_StrictDataTypeCheck

           INPUT
            bCheck              : VARIANT_BOOL*'''
        return super(IDEUtilitiesImpl, self).get_StrictDataTypeCheck(bCheck)
    def putref_VariableManager(self, ppVariableManager):
        '''Method IDEUtilitiesImpl.putref_VariableManager

           INPUT
            ppVariableManager   : IGPVariableManager*'''
        return super(IDEUtilitiesImpl, self).putref_VariableManager(ppVariableManager)
    def get_VariableManager(self):
        '''Method IDEUtilitiesImpl.get_VariableManager

           OUTPUT
            ppVariableManager   : IGPVariableManager**'''
        return super(IDEUtilitiesImpl, self).get_VariableManager()
    def ExistsPath(self, catalogPath, pDataType):
        '''Method IDEUtilitiesImpl.ExistsPath

           INPUTS
            catalogPath         : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(IDEUtilitiesImpl, self).ExistsPath(catalogPath, pDataType)
    def ParseNamesFromWorkspace(self, pWorkspace, datasetType, pathDataset, pathBase):
        '''Method IDEUtilitiesImpl.ParseNamesFromWorkspace

           INPUTS
            pWorkspace          : IWorkspace*
            datasetType         : esriDatasetType
            pathDataset         : BSTR
            pathBase            : BSTR

           OUTPUT
            ppNames             : IArray**'''
        return super(IDEUtilitiesImpl, self).ParseNamesFromWorkspace(pWorkspace, datasetType, pathDataset, pathBase)
    def SaveWorkspace(self):
        '''Method IDEUtilitiesImpl.SaveWorkspace'''
        return super(IDEUtilitiesImpl, self).SaveWorkspace()
    def RestoreWorkspace(self):
        '''Method IDEUtilitiesImpl.RestoreWorkspace'''
        return super(IDEUtilitiesImpl, self).RestoreWorkspace()
    def ReleaseInternals(self, Level):
        '''Method IDEUtilitiesImpl.ReleaseInternals

           INPUT
            Level               : long'''
        return super(IDEUtilitiesImpl, self).ReleaseInternals(Level)
    def ClearWorkspaceCache(self):
        '''Method IDEUtilitiesImpl.ClearWorkspaceCache'''
        return super(IDEUtilitiesImpl, self).ClearWorkspaceCache()
    def AddWorkspaceCache(self, workspacepath, pWorkspace):
        '''Method IDEUtilitiesImpl.AddWorkspaceCache

           INPUTS
            workspacepath       : BSTR
            pWorkspace          : IWorkspace*'''
        return super(IDEUtilitiesImpl, self).AddWorkspaceCache(workspacepath, pWorkspace)
    def ReturnWorkspaceCache(self, workspacepath):
        '''Method IDEUtilitiesImpl.ReturnWorkspaceCache

           INPUT
            workspacepath       : BSTR

           OUTPUT
            ppWorkspace         : IWorkspace**'''
        return super(IDEUtilitiesImpl, self).ReturnWorkspaceCache(workspacepath)
    def RemoveWorkspaceCache(self, pWorkspace):
        '''Method IDEUtilitiesImpl.RemoveWorkspaceCache

           INPUT
            pWorkspace          : IWorkspace*'''
        return super(IDEUtilitiesImpl, self).RemoveWorkspaceCache(pWorkspace)
    def RemoveWorkspaceCacheFromLocation(self, workspacepath):
        '''Method IDEUtilitiesImpl.RemoveWorkspaceCacheFromLocation

           INPUT
            workspacepath       : BSTR'''
        return super(IDEUtilitiesImpl, self).RemoveWorkspaceCacheFromLocation(workspacepath)
    def CreateFeatureClassName(self, catalogPath):
        '''Method IDEUtilitiesImpl.CreateFeatureClassName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilitiesImpl, self).CreateFeatureClassName(catalogPath)
    def CreateRasterDatasetName(self, catalogPath):
        '''Method IDEUtilitiesImpl.CreateRasterDatasetName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilitiesImpl, self).CreateRasterDatasetName(catalogPath)
    def CreateRasterCatalogName(self, catalogPath):
        '''Method IDEUtilitiesImpl.CreateRasterCatalogName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilitiesImpl, self).CreateRasterCatalogName(catalogPath)
    def CreateTableName(self, catalogPath):
        '''Method IDEUtilitiesImpl.CreateTableName

           INPUT
            catalogPath         : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IDEUtilitiesImpl, self).CreateTableName(catalogPath)
    def WorkspaceFactorySchemaLocking(self, enableLocking):
        '''Method IDEUtilitiesImpl.WorkspaceFactorySchemaLocking

           INPUT
            enableLocking       : VARIANT_BOOL'''
        return super(IDEUtilitiesImpl, self).WorkspaceFactorySchemaLocking(enableLocking)
    def putref_NativeRasterSpatialReference(self, ppSR):
        '''Method IDEUtilitiesImpl.putref_NativeRasterSpatialReference

           INPUT
            ppSR                : ISpatialReference*'''
        return super(IDEUtilitiesImpl, self).putref_NativeRasterSpatialReference(ppSR)
    def get_NativeRasterSpatialReference(self):
        '''Method IDEUtilitiesImpl.get_NativeRasterSpatialReference

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IDEUtilitiesImpl, self).get_NativeRasterSpatialReference()
    def FileSystemToVirtualPath(self, inPath):
        '''Method IDEUtilitiesImpl.FileSystemToVirtualPath

           INPUT
            inPath              : BSTR

           OUTPUT
            outPath             : BSTR*'''
        return super(IDEUtilitiesImpl, self).FileSystemToVirtualPath(inPath)
    def VirtualToFileSystemPath(self, inPath):
        '''Method IDEUtilitiesImpl.VirtualToFileSystemPath

           INPUT
            inPath              : BSTR

           OUTPUT
            outPath             : BSTR*'''
        return super(IDEUtilitiesImpl, self).VirtualToFileSystemPath(inPath)
    def SetScriptfilePath(self, inPath):
        '''Method IDEUtilitiesImpl.SetScriptfilePath

           INPUT
            inPath              : BSTR'''
        return super(IDEUtilitiesImpl, self).SetScriptfilePath(inPath)
    def put_PackageWorkspace(self, pPath):
        '''Method IDEUtilitiesImpl.put_PackageWorkspace

           INPUT
            pPath               : BSTR'''
        return super(IDEUtilitiesImpl, self).put_PackageWorkspace(pPath)
    def get_PackageWorkspace(self):
        '''Method IDEUtilitiesImpl.get_PackageWorkspace

           OUTPUT
            pPath               : BSTR*'''
        return super(IDEUtilitiesImpl, self).get_PackageWorkspace()
    NativeRasterSpatialReference = property(get_NativeRasterSpatialReference, putref_NativeRasterSpatialReference, None)
    PackageWorkspace = property(get_PackageWorkspace, put_PackageWorkspace, None)
    VariableManager = property(get_VariableManager, putref_VariableManager, None)

class IGPEncryptedString(_esriGeoprocessing.IGPEncryptedString):
    _IID = uuid.UUID('66e4160b-f440-41b3-a1ee-d0ab600f7e59')

    def __init__(self, *args, **kw):
        super(IGPEncryptedString, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DecryptedValue(self):
        '''Method IGPEncryptedString.get_DecryptedValue

           OUTPUT
            Value               : BSTR*'''
        return super(IGPEncryptedString, self).get_DecryptedValue()
    def put_DecryptedValue(self, Value):
        '''Method IGPEncryptedString.put_DecryptedValue

           INPUT
            Value               : BSTR'''
        return super(IGPEncryptedString, self).put_DecryptedValue(Value)
    def get_EncryptedValue(self):
        '''Method IGPEncryptedString.get_EncryptedValue

           OUTPUT
            Value               : BSTR*'''
        return super(IGPEncryptedString, self).get_EncryptedValue()
    def put_EncryptedValue(self, Value):
        '''Method IGPEncryptedString.put_EncryptedValue

           INPUT
            Value               : BSTR'''
        return super(IGPEncryptedString, self).put_EncryptedValue(Value)
    DecryptedValue = property(get_DecryptedValue, put_DecryptedValue, None)
    EncryptedValue = property(get_EncryptedValue, put_EncryptedValue, None)

class IGPFieldInfo4(_esriGeoprocessing.IGPFieldInfo4):
    _IID = uuid.UUID('fd38c71b-3fc1-40a8-8213-164857bcdf45')
    def GetRemappedOID(self, Index):
        '''Method IGPFieldInfo4.GetRemappedOID

           INPUT
            Index               : long

           OUTPUT
            remappedOID         : VARIANT_BOOL*'''
        return super(IGPFieldInfo4, self).GetRemappedOID(Index)
    def SetRemappedOID(self, Index, remappedOID):
        '''Method IGPFieldInfo4.SetRemappedOID

           INPUTS
            Index               : long
            remappedOID         : VARIANT_BOOL'''
        return super(IGPFieldInfo4, self).SetRemappedOID(Index, remappedOID)

class IGpDispatchImpl(_esriGeoprocessing.IGpDispatchImpl):
    _IID = uuid.UUID('b3753107-7ee1-4642-bf5e-ea7ad1c5641c')
    def CreateParameterValue(self, text, pDataType, Direction):
        '''Method IGpDispatchImpl.CreateParameterValue

           INPUTS
            text                : BSTR
            pDataType           : IGPDataType*
            Direction           : esriGPParameterDirection

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGpDispatchImpl, self).CreateParameterValue(text, pDataType, Direction)
    def DecodeDETable(self, pValue):
        '''Method IGpDispatchImpl.DecodeDETable

           INPUT
            pValue              : IGPValue*

           OUTPUT
            ppDETable           : IDETable**'''
        return super(IGpDispatchImpl, self).DecodeDETable(pValue)
    def GetNameObjectFromLocation(self, text):
        '''Method IGpDispatchImpl.GetNameObjectFromLocation

           INPUT
            text                : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IGpDispatchImpl, self).GetNameObjectFromLocation(text)

class IGpDispatchObjectImpl(_esriGeoprocessing.IGpDispatchObjectImpl):
    _IID = uuid.UUID('e3f0c890-377d-4046-bae2-94d3db7c9d31')
    def SetGpDispatch(self, pObj):
        '''Method IGpDispatchObjectImpl.SetGpDispatch

           INPUT
            pObj                : IUnknown*'''
        return super(IGpDispatchObjectImpl, self).SetGpDispatch(pObj)

class IGPFieldMapImpl(_esriGeoprocessing.IGPFieldMapImpl):
    _IID = uuid.UUID('8105eb2a-ad8f-425d-a8d0-a2e5642bbea3')
    def SwitchFields(self, pos1, pos2):
        '''Method IGPFieldMapImpl.SwitchFields

           INPUTS
            pos1                : long
            pos2                : long'''
        return super(IGPFieldMapImpl, self).SwitchFields(pos1, pos2)

class IGPRandomNumberGeneratorImpl(_esriGeoprocessing.IGPRandomNumberGeneratorImpl):
    _IID = uuid.UUID('ccaa381c-1c60-4843-ac82-206defe1588b')
    def CreateRandomPoints(self, pGeometry, cPoints, inhibitionDistance):
        '''Method IGPRandomNumberGeneratorImpl.CreateRandomPoints

           INPUTS
            pGeometry           : IGeometry*
            cPoints             : long
            inhibitionDistance  : double

           OUTPUTS
            vPoints             : VARIANT*
            pcPoints            : long*'''
        return super(IGPRandomNumberGeneratorImpl, self).CreateRandomPoints(pGeometry, cPoints, inhibitionDistance)
    def GetDistributionInfo(self, distribution):
        '''Method IGPRandomNumberGeneratorImpl.GetDistributionInfo

           INPUT
            distribution        : BSTR

           OUTPUTS
            Type                : esriRandomDistributionType*
            arguments           : double*
            resultIsLong        : VARIANT_BOOL*'''
        return super(IGPRandomNumberGeneratorImpl, self).GetDistributionInfo(distribution)
    def GetMinMaxValue(self, Type, arguments):
        '''Method IGPRandomNumberGeneratorImpl.GetMinMaxValue

           INPUTS
            Type                : esriRandomDistributionType
            arguments           : double*

           OUTPUTS
            minValue            : double*
            maxValue            : double*'''
        return super(IGPRandomNumberGeneratorImpl, self).GetMinMaxValue(Type, arguments)

class IGPFieldMappingImpl(_esriGeoprocessing.IGPFieldMappingImpl):
    _IID = uuid.UUID('e25b7d77-3c90-4e04-8602-67a2fe88454c')

    def __init__(self, *args, **kw):
        super(IGPFieldMappingImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Reset(self):
        '''Method IGPFieldMappingImpl.Reset'''
        return super(IGPFieldMappingImpl, self).Reset()
    def Cleanup(self):
        '''Method IGPFieldMappingImpl.Cleanup'''
        return super(IGPFieldMappingImpl, self).Cleanup()
    def UnAddedFields(self, FieldMap):
        '''Method IGPFieldMappingImpl.UnAddedFields

           INPUT
            FieldMap            : IGPFieldMap*

           OUTPUT
            unAddedFieldMap     : IGPFieldMap**'''
        return super(IGPFieldMappingImpl, self).UnAddedFields(FieldMap)
    def get_InternalTables(self):
        '''Method IGPFieldMappingImpl.get_InternalTables

           OUTPUT
            Tables              : IArray**'''
        return super(IGPFieldMappingImpl, self).get_InternalTables()
    def putref_InternalTables(self, Tables):
        '''Method IGPFieldMappingImpl.putref_InternalTables

           INPUT
            Tables              : IArray*'''
        return super(IGPFieldMappingImpl, self).putref_InternalTables(Tables)
    def get_LockedSchema(self):
        '''Method IGPFieldMappingImpl.get_LockedSchema

           OUTPUT
            locked              : VARIANT_BOOL*'''
        return super(IGPFieldMappingImpl, self).get_LockedSchema()
    def put_LockedSchema(self, locked):
        '''Method IGPFieldMappingImpl.put_LockedSchema

           INPUT
            locked              : VARIANT_BOOL'''
        return super(IGPFieldMappingImpl, self).put_LockedSchema(locked)
    def get_OneToOne(self):
        '''Method IGPFieldMappingImpl.get_OneToOne

           OUTPUT
            OneToOne            : VARIANT_BOOL*'''
        return super(IGPFieldMappingImpl, self).get_OneToOne()
    def put_OneToOne(self, OneToOne):
        '''Method IGPFieldMappingImpl.put_OneToOne

           INPUT
            OneToOne            : VARIANT_BOOL'''
        return super(IGPFieldMappingImpl, self).put_OneToOne(OneToOne)
    def get_OutputTable(self):
        '''Method IGPFieldMappingImpl.get_OutputTable

           OUTPUT
            outputDETable       : IDETable**'''
        return super(IGPFieldMappingImpl, self).get_OutputTable()
    def putref_OutputTable(self, outputDETable):
        '''Method IGPFieldMappingImpl.putref_OutputTable

           INPUT
            outputDETable       : IDETable*'''
        return super(IGPFieldMappingImpl, self).putref_OutputTable(outputDETable)
    def get_QualifiedFieldNames(self):
        '''Method IGPFieldMappingImpl.get_QualifiedFieldNames

           OUTPUT
            QualifiedFieldNames : VARIANT_BOOL*'''
        return super(IGPFieldMappingImpl, self).get_QualifiedFieldNames()
    def put_QualifiedFieldNames(self, QualifiedFieldNames):
        '''Method IGPFieldMappingImpl.put_QualifiedFieldNames

           INPUT
            QualifiedFieldNames : VARIANT_BOOL'''
        return super(IGPFieldMappingImpl, self).put_QualifiedFieldNames(QualifiedFieldNames)
    InternalTables = property(get_InternalTables, putref_InternalTables, None)
    LockedSchema = property(get_LockedSchema, put_LockedSchema, None)
    OneToOne = property(get_OneToOne, put_OneToOne, None)
    OutputTable = property(get_OutputTable, putref_OutputTable, None)
    QualifiedFieldNames = property(get_QualifiedFieldNames, put_QualifiedFieldNames, None)

class IGeoProcessorSettingsImpl(_esriGeoprocessing.IGeoProcessorSettingsImpl):
    _IID = uuid.UUID('c473d846-d3a0-470a-8fe0-9325e84ed731')

    def __init__(self, *args, **kw):
        super(IGeoProcessorSettingsImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ScriptDebugger(self, scriptDebuggerPath):
        '''Method IGeoProcessorSettingsImpl.put_ScriptDebugger

           INPUT
            scriptDebuggerPath  : BSTR'''
        return super(IGeoProcessorSettingsImpl, self).put_ScriptDebugger(scriptDebuggerPath)
    def get_ScriptDebugger(self):
        '''Method IGeoProcessorSettingsImpl.get_ScriptDebugger

           OUTPUT
            scriptDebuggerPath  : BSTR*'''
        return super(IGeoProcessorSettingsImpl, self).get_ScriptDebugger()
    def put_ScriptEditor(self, scriptEditorPath):
        '''Method IGeoProcessorSettingsImpl.put_ScriptEditor

           INPUT
            scriptEditorPath    : BSTR'''
        return super(IGeoProcessorSettingsImpl, self).put_ScriptEditor(scriptEditorPath)
    def get_ScriptEditor(self):
        '''Method IGeoProcessorSettingsImpl.get_ScriptEditor

           OUTPUT
            scriptEditorPath    : BSTR*'''
        return super(IGeoProcessorSettingsImpl, self).get_ScriptEditor()
    def put_RunInBackground(self, RunInBackground):
        '''Method IGeoProcessorSettingsImpl.put_RunInBackground

           INPUT
            RunInBackground     : VARIANT_BOOL'''
        return super(IGeoProcessorSettingsImpl, self).put_RunInBackground(RunInBackground)
    def get_RunInBackground(self):
        '''Method IGeoProcessorSettingsImpl.get_RunInBackground

           OUTPUT
            RunInBackground     : VARIANT_BOOL*'''
        return super(IGeoProcessorSettingsImpl, self).get_RunInBackground()
    def put_AlertDuration(self, AlertDuration):
        '''Method IGeoProcessorSettingsImpl.put_AlertDuration

           INPUT
            AlertDuration       : long'''
        return super(IGeoProcessorSettingsImpl, self).put_AlertDuration(AlertDuration)
    def get_AlertDuration(self):
        '''Method IGeoProcessorSettingsImpl.get_AlertDuration

           OUTPUT
            AlertDuration       : long*'''
        return super(IGeoProcessorSettingsImpl, self).get_AlertDuration()
    def put_KeepPopupIfError(self, KeepPopupIfError):
        '''Method IGeoProcessorSettingsImpl.put_KeepPopupIfError

           INPUT
            KeepPopupIfError    : VARIANT_BOOL'''
        return super(IGeoProcessorSettingsImpl, self).put_KeepPopupIfError(KeepPopupIfError)
    def get_KeepPopupIfError(self):
        '''Method IGeoProcessorSettingsImpl.get_KeepPopupIfError

           OUTPUT
            KeepPopupIfError    : VARIANT_BOOL*'''
        return super(IGeoProcessorSettingsImpl, self).get_KeepPopupIfError()
    AlertDuration = property(get_AlertDuration, put_AlertDuration, None)
    KeepPopupIfError = property(get_KeepPopupIfError, put_KeepPopupIfError, None)
    RunInBackground = property(get_RunInBackground, put_RunInBackground, None)
    ScriptDebugger = property(get_ScriptDebugger, put_ScriptDebugger, None)
    ScriptEditor = property(get_ScriptEditor, put_ScriptEditor, None)

class IGPIterator(_esriGeoprocessing.IGPIterator):
    _IID = uuid.UUID('fba15032-52af-45e1-88cc-7b2677d8d5ee')
    def Continue(self):
        '''Method IGPIterator.Continue

           OUTPUT
            pContinue           : VARIANT_BOOL*'''
        return super(IGPIterator, self).Continue()
    def Clear(self):
        '''Method IGPIterator.Clear'''
        return super(IGPIterator, self).Clear()

class IGPLayerEditTemplateManagerImpl(_esriGeoprocessing.IGPLayerEditTemplateManagerImpl):
    _IID = uuid.UUID('be0ab78c-5f19-4ddf-a8b1-210773ad2b69')

    def __init__(self, *args, **kw):
        super(IGPLayerEditTemplateManagerImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_EditTemplateManager(self, ppEditTemplateManager):
        '''Method IGPLayerEditTemplateManagerImpl.putref_EditTemplateManager

           INPUT
            ppEditTemplateManager: IEditTemplateManager*'''
        return super(IGPLayerEditTemplateManagerImpl, self).putref_EditTemplateManager(ppEditTemplateManager)
    def get_EditTemplateManager(self):
        '''Method IGPLayerEditTemplateManagerImpl.get_EditTemplateManager

           OUTPUT
            ppEditTemplateManager: IEditTemplateManager**'''
        return super(IGPLayerEditTemplateManagerImpl, self).get_EditTemplateManager()
    EditTemplateManager = property(get_EditTemplateManager, putref_EditTemplateManager, None)

class IGPInMemoryToolbox(_esriGeoprocessing.IGPInMemoryToolbox):
    _IID = uuid.UUID('dc8dfadf-9825-4a2f-a220-0f046719c299')
    def Init(self, pFactory):
        '''Method IGPInMemoryToolbox.Init

           INPUT
            pFactory            : IGPFunctionFactory*'''
        return super(IGPInMemoryToolbox, self).Init(pFactory)

class IGPPythonToolbox(_esriGeoprocessing.IGPPythonToolbox):
    _IID = uuid.UUID('f35be5a8-b82e-4620-835d-325deabaaabe')
    def Init(self, pToolboxProps):
        '''Method IGPPythonToolbox.Init

           INPUT
            pToolboxProps       : IPropertySet*'''
        return super(IGPPythonToolbox, self).Init(pToolboxProps)
    def LoadFromFile(self, Path):
        '''Method IGPPythonToolbox.LoadFromFile

           INPUT
            Path                : BSTR'''
        return super(IGPPythonToolbox, self).LoadFromFile(Path)

class IGPPythonToolboxName(_esriGeoprocessing.IGPPythonToolboxName):
    _IID = uuid.UUID('37fb92fb-7124-4a6f-b17f-34f06f40ee72')

    def __init__(self, *args, **kw):
        super(IGPPythonToolboxName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, toolboxPath):
        '''Method IGPPythonToolboxName.Init

           INPUT
            toolboxPath         : BSTR'''
        return super(IGPPythonToolboxName, self).Init(toolboxPath)
    def put_PathName(self, _arg1):
        '''Method IGPPythonToolboxName.put_PathName

           INPUT
            _arg1               : BSTR'''
        return super(IGPPythonToolboxName, self).put_PathName(_arg1)
    PathName = property(None, put_PathName, None)

class IGPDataTable(_esriGeoprocessing.IGPDataTable):
    _IID = uuid.UUID('31fa8f30-a35f-4bc6-b1f6-7a5a72964ac7')

    def __init__(self, *args, **kw):
        super(IGPDataTable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ColumnCount(self):
        '''Method IGPDataTable.get_ColumnCount

           OUTPUT
            Count               : long*'''
        return super(IGPDataTable, self).get_ColumnCount()
    def get_RecordCount(self):
        '''Method IGPDataTable.get_RecordCount

           OUTPUT
            Count               : long*'''
        return super(IGPDataTable, self).get_RecordCount()
    def GetValue(self, row, col):
        '''Method IGPDataTable.GetValue

           INPUTS
            row                 : long
            col                 : long

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGPDataTable, self).GetValue(row, col)
    def SetValue(self, row, col, ppValue):
        '''Method IGPDataTable.SetValue

           INPUTS
            row                 : long
            col                 : long
            ppValue             : IGPValue*'''
        return super(IGPDataTable, self).SetValue(row, col, ppValue)
    def put_Metadata(self, Value):
        '''Method IGPDataTable.put_Metadata

           INPUT
            Value               : VARIANT'''
        return super(IGPDataTable, self).put_Metadata(Value)
    def get_Metadata(self):
        '''Method IGPDataTable.get_Metadata

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPDataTable, self).get_Metadata()
    def put_AlwaysReset(self, pbAlwaysReset):
        '''Method IGPDataTable.put_AlwaysReset

           INPUT
            pbAlwaysReset       : VARIANT_BOOL'''
        return super(IGPDataTable, self).put_AlwaysReset(pbAlwaysReset)
    def get_AlwaysReset(self):
        '''Method IGPDataTable.get_AlwaysReset

           OUTPUT
            pbAlwaysReset       : VARIANT_BOOL*'''
        return super(IGPDataTable, self).get_AlwaysReset()
    AlwaysReset = property(get_AlwaysReset, put_AlwaysReset, None)
    ColumnCount = property(get_ColumnCount, None, None)
    Metadata = property(get_Metadata, put_Metadata, None)
    RecordCount = property(get_RecordCount, None, None)

class IGPGraphDataTable(_esriGeoprocessing.IGPGraphDataTable):
    _IID = uuid.UUID('0edbe8d9-8f10-4478-a200-b64c503e3812')
    def FindParameterInfo(self, iRecord, pGraph):
        '''Method IGPGraphDataTable.FindParameterInfo

           INPUTS
            iRecord             : long
            pGraph              : IDataGraphBase*

           OUTPUT
            ppParamInfo         : IParameterInfo**'''
        return super(IGPGraphDataTable, self).FindParameterInfo(iRecord, pGraph)

class IGPGraph(_esriGeoprocessing.IGPGraph):
    _IID = uuid.UUID('6e202d1c-8741-4c6a-90f9-e483f1983db7')

    def __init__(self, *args, **kw):
        super(IGPGraph, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NameString(self):
        '''Method IGPGraph.get_NameString

           OUTPUT
            pNamestring         : BSTR*'''
        return super(IGPGraph, self).get_NameString()
    def put_NameString(self, pNamestring):
        '''Method IGPGraph.put_NameString

           INPUT
            pNamestring         : BSTR'''
        return super(IGPGraph, self).put_NameString(pNamestring)
    def get_GraphDataTable(self):
        '''Method IGPGraph.get_GraphDataTable

           OUTPUT
            ppGraphDataTable    : IGPGraphDataTable**'''
        return super(IGPGraph, self).get_GraphDataTable()
    def putref_GraphDataTable(self, ppGraphDataTable):
        '''Method IGPGraph.putref_GraphDataTable

           INPUT
            ppGraphDataTable    : IGPGraphDataTable*'''
        return super(IGPGraph, self).putref_GraphDataTable(ppGraphDataTable)
    def get_DataElement(self):
        '''Method IGPGraph.get_DataElement

           OUTPUT
            ppDataElement       : IDataElement**'''
        return super(IGPGraph, self).get_DataElement()
    def putref_DataElement(self, ppDataElement):
        '''Method IGPGraph.putref_DataElement

           INPUT
            ppDataElement       : IDataElement*'''
        return super(IGPGraph, self).putref_DataElement(ppDataElement)
    DataElement = property(get_DataElement, putref_DataElement, None)
    GraphDataTable = property(get_GraphDataTable, putref_GraphDataTable, None)
    NameString = property(get_NameString, put_NameString, None)

class IGPGraphUtilities(_esriGeoprocessing.IGPGraphUtilities):
    _IID = uuid.UUID('7507b8e3-cbd0-4d02-b5e1-96c314d0dee1')
    def MakeGPGraph(self, Name):
        '''Method IGPGraphUtilities.MakeGPGraph

           INPUT
            Name                : BSTR

           OUTPUT
            ppGPGraph           : IGPGraph**'''
        return super(IGPGraphUtilities, self).MakeGPGraph(Name)
    def MakeGPGraphFromGraph(self, pGraphBase):
        '''Method IGPGraphUtilities.MakeGPGraphFromGraph

           INPUT
            pGraphBase          : IDataGraphBase*

           OUTPUT
            ppGPGraph           : IGPGraph**'''
        return super(IGPGraphUtilities, self).MakeGPGraphFromGraph(pGraphBase)
    def MakeGraphDataTable(self, pDataTableSrc):
        '''Method IGPGraphUtilities.MakeGraphDataTable

           INPUT
            pDataTableSrc       : IGPValue*

           OUTPUT
            ppGraphDataTable    : IGPGraphDataTable**'''
        return super(IGPGraphUtilities, self).MakeGraphDataTable(pDataTableSrc)
    def MakeGraphMetadata(self, pMetadataSrc):
        '''Method IGPGraphUtilities.MakeGraphMetadata

           INPUT
            pMetadataSrc        : IGPValue*

           OUTPUT
            pMetadata           : VARIANT*'''
        return super(IGPGraphUtilities, self).MakeGraphMetadata(pMetadataSrc)
    def GraphMetadataToGraph(self, Metadata):
        '''Method IGPGraphUtilities.GraphMetadataToGraph

           INPUT
            Metadata            : VARIANT

           OUTPUT
            ppGraph             : IDataGraphBase**'''
        return super(IGPGraphUtilities, self).GraphMetadataToGraph(Metadata)
    def GraphToGraphMetadata(self, pGraph):
        '''Method IGPGraphUtilities.GraphToGraphMetadata

           INPUT
            pGraph              : IDataGraphBase*

           OUTPUT
            pMetadata           : VARIANT*'''
        return super(IGPGraphUtilities, self).GraphToGraphMetadata(pGraph)
    def AddInternalGraph(self, pGraph):
        '''Method IGPGraphUtilities.AddInternalGraph

           INPUT
            pGraph              : IDataGraphBase*'''
        return super(IGPGraphUtilities, self).AddInternalGraph(pGraph)
    def AddInternalGraph2(self, pGraph, pGPGraph):
        '''Method IGPGraphUtilities.AddInternalGraph2

           INPUTS
            pGraph              : IDataGraphBase*
            pGPGraph            : IGPGraph*'''
        return super(IGPGraphUtilities, self).AddInternalGraph2(pGraph, pGPGraph)
    def RemoveInternalGraph(self, pGraphName):
        '''Method IGPGraphUtilities.RemoveInternalGraph

           INPUT
            pGraphName          : BSTR'''
        return super(IGPGraphUtilities, self).RemoveInternalGraph(pGraphName)
    def RemoveInternalGraphEx(self, pGraph):
        '''Method IGPGraphUtilities.RemoveInternalGraphEx

           INPUT
            pGraph              : IDataGraphBase*'''
        return super(IGPGraphUtilities, self).RemoveInternalGraphEx(pGraph)
    def GetGPGraphs(self):
        '''Method IGPGraphUtilities.GetGPGraphs

           OUTPUT
            ppValues            : IEnumGPValue**'''
        return super(IGPGraphUtilities, self).GetGPGraphs()
    def FindGraph(self, text):
        '''Method IGPGraphUtilities.FindGraph

           INPUT
            text                : BSTR

           OUTPUTS
            ppGraphBase         : IDataGraphBase**
            ppGPGraph           : IGPGraph**'''
        return super(IGPGraphUtilities, self).FindGraph(text)
    def GenerateOutputGraphName(self, pEnvMgr, functionname, outputFileBaseLimit, pInputValue, pOutputParam):
        '''Method IGPGraphUtilities.GenerateOutputGraphName

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            functionname        : BSTR
            outputFileBaseLimit : long
            pInputValue         : IGPValue*
            pOutputParam        : IGPParameter*

           OUTPUTS
            pGraphName          : BSTR*
            ppOutputValue       : IGPValue**'''
        return super(IGPGraphUtilities, self).GenerateOutputGraphName(pEnvMgr, functionname, outputFileBaseLimit, pInputValue, pOutputParam)

class IGPMosaicDatasetUtilities(_esriGeoprocessing.IGPMosaicDatasetUtilities):
    _IID = uuid.UUID('761a2ed3-fd79-4d87-befe-73a372ed1628')
    def ConstructManagedMosaicDatasetParameter(self):
        '''Method IGPMosaicDatasetUtilities.ConstructManagedMosaicDatasetParameter

           OUTPUT
            ppMosaicDatasetParameter: IGPParameterEdit**'''
        return super(IGPMosaicDatasetUtilities, self).ConstructManagedMosaicDatasetParameter()
    def ConstructTableViewParameter(self):
        '''Method IGPMosaicDatasetUtilities.ConstructTableViewParameter

           OUTPUT
            ppTableViewParameter: IGPParameterEdit**'''
        return super(IGPMosaicDatasetUtilities, self).ConstructTableViewParameter()
    def ConstructFeatureLayerParameter(self):
        '''Method IGPMosaicDatasetUtilities.ConstructFeatureLayerParameter

           OUTPUT
            ppTableViewParameter: IGPParameterEdit**'''
        return super(IGPMosaicDatasetUtilities, self).ConstructFeatureLayerParameter()
    def DecodeMosaicDatasetParameter(self, pGPValue):
        '''Method IGPMosaicDatasetUtilities.DecodeMosaicDatasetParameter

           INPUT
            pGPValue            : IGPValue*

           OUTPUTS
            ppMosaicDataset     : IMosaicDataset**
            ppSelectionSet      : ISelectionSet**'''
        return super(IGPMosaicDatasetUtilities, self).DecodeMosaicDatasetParameter(pGPValue)
    def ConstructRasterTypeDataSourceParameter(self):
        '''Method IGPMosaicDatasetUtilities.ConstructRasterTypeDataSourceParameter

           OUTPUT
            ppRasterTypeDataSourceParameter: IGPParameterEdit**'''
        return super(IGPMosaicDatasetUtilities, self).ConstructRasterTypeDataSourceParameter()
    def DecodeRasterTypeDataSourceParameter(self, pGPValue):
        '''Method IGPMosaicDatasetUtilities.DecodeRasterTypeDataSourceParameter

           INPUT
            pGPValue            : IGPValue*

           OUTPUTS
            pSource             : VARIANT*
            ppSelectionSet      : ISelectionSet**'''
        return super(IGPMosaicDatasetUtilities, self).DecodeRasterTypeDataSourceParameter(pGPValue)
    def ConstructRasterTypeParameter(self):
        '''Method IGPMosaicDatasetUtilities.ConstructRasterTypeParameter

           OUTPUT
            ppRasterTypeParameter: IGPParameterEdit**'''
        return super(IGPMosaicDatasetUtilities, self).ConstructRasterTypeParameter()
    def DecodeRasterTypeParameter(self, pGPValue):
        '''Method IGPMosaicDatasetUtilities.DecodeRasterTypeParameter

           INPUT
            pGPValue            : IGPValue*

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IGPMosaicDatasetUtilities, self).DecodeRasterTypeParameter(pGPValue)

class ILocalFunctionRasterEnv(_esriGeoprocessing.ILocalFunctionRasterEnv):
    _IID = uuid.UUID('433835c5-87a1-4f6a-872f-2e853b9c76cb')
    def GetOutputEnv(self, pValues, pEnvMgr):
        '''Method ILocalFunctionRasterEnv.GetOutputEnv

           INPUTS
            pValues             : IArray*
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUTS
            ppMessages          : IGPMessages**
            ppOutputEnv         : IRasterAnalysisEnvironment**'''
        return super(ILocalFunctionRasterEnv, self).GetOutputEnv(pValues, pEnvMgr)

class IJobResult(_esriGeoprocessing.IJobResult):
    _IID = uuid.UUID('ef4bca90-278f-4a4e-ac0f-d334e7f2634f')

    def __init__(self, *args, **kw):
        super(IJobResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_JobID(self):
        '''Method IJobResult.get_JobID

           OUTPUT
            JobID               : BSTR*'''
        return super(IJobResult, self).get_JobID()
    def put_JobID(self, JobID):
        '''Method IJobResult.put_JobID

           INPUT
            JobID               : BSTR'''
        return super(IJobResult, self).put_JobID(JobID)
    def get_Status(self):
        '''Method IJobResult.get_Status

           OUTPUT
            Status              : esriJobStatus*'''
        return super(IJobResult, self).get_Status()
    def put_Status(self, Status):
        '''Method IJobResult.put_Status

           INPUT
            Status              : esriJobStatus'''
        return super(IJobResult, self).put_Status(Status)
    def get_Messages(self):
        '''Method IJobResult.get_Messages

           OUTPUT
            ppMessages          : IJobMessages**'''
        return super(IJobResult, self).get_Messages()
    def putref_Messages(self, ppMessages):
        '''Method IJobResult.putref_Messages

           INPUT
            ppMessages          : IJobMessages*'''
        return super(IJobResult, self).putref_Messages(ppMessages)
    JobID = property(get_JobID, put_JobID, None)
    Messages = property(get_Messages, putref_Messages, None)
    Status = property(get_Status, put_Status, None)

class IGPParseStringImpl(_esriGeoprocessing.IGPParseStringImpl):
    _IID = uuid.UUID('e774abfb-5035-42a2-a712-76c1c9becbd9')
    def NextDoubleQuoteToken(self):
        '''Method IGPParseStringImpl.NextDoubleQuoteToken

           OUTPUT
            token               : BSTR*'''
        return super(IGPParseStringImpl, self).NextDoubleQuoteToken()

class IGPPythonScriptParseRecord(_esriGeoprocessing.IGPPythonScriptParseRecord):
    _IID = uuid.UUID('b0544dd2-8e0e-4e98-b1c1-47bd32eb2fbc')

    def __init__(self, *args, **kw):
        super(IGPPythonScriptParseRecord, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TextValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_TextValue

           INPUT
            Value               : BSTR'''
        return super(IGPPythonScriptParseRecord, self).put_TextValue(Value)
    def get_TextValue(self):
        '''Method IGPPythonScriptParseRecord.get_TextValue

           OUTPUT
            Value               : BSTR*'''
        return super(IGPPythonScriptParseRecord, self).get_TextValue()
    def put_TextValueLength(self, Value):
        '''Method IGPPythonScriptParseRecord.put_TextValueLength

           INPUT
            Value               : long'''
        return super(IGPPythonScriptParseRecord, self).put_TextValueLength(Value)
    def get_TextValueLength(self):
        '''Method IGPPythonScriptParseRecord.get_TextValueLength

           OUTPUT
            Value               : long*'''
        return super(IGPPythonScriptParseRecord, self).get_TextValueLength()
    def put_NewTextValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_NewTextValue

           INPUT
            Value               : BSTR'''
        return super(IGPPythonScriptParseRecord, self).put_NewTextValue(Value)
    def get_NewTextValue(self):
        '''Method IGPPythonScriptParseRecord.get_NewTextValue

           OUTPUT
            Value               : BSTR*'''
        return super(IGPPythonScriptParseRecord, self).get_NewTextValue()
    def put_TextWorkspace(self, Value):
        '''Method IGPPythonScriptParseRecord.put_TextWorkspace

           INPUT
            Value               : BSTR'''
        return super(IGPPythonScriptParseRecord, self).put_TextWorkspace(Value)
    def get_TextWorkspace(self):
        '''Method IGPPythonScriptParseRecord.get_TextWorkspace

           OUTPUT
            Value               : BSTR*'''
        return super(IGPPythonScriptParseRecord, self).get_TextWorkspace()
    def put_TextScratch(self, Value):
        '''Method IGPPythonScriptParseRecord.put_TextScratch

           INPUT
            Value               : BSTR'''
        return super(IGPPythonScriptParseRecord, self).put_TextScratch(Value)
    def get_TextScratch(self):
        '''Method IGPPythonScriptParseRecord.get_TextScratch

           OUTPUT
            Value               : BSTR*'''
        return super(IGPPythonScriptParseRecord, self).get_TextScratch()
    def put_LineNumberValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_LineNumberValue

           INPUT
            Value               : long'''
        return super(IGPPythonScriptParseRecord, self).put_LineNumberValue(Value)
    def get_LineNumberValue(self):
        '''Method IGPPythonScriptParseRecord.get_LineNumberValue

           OUTPUT
            Value               : long*'''
        return super(IGPPythonScriptParseRecord, self).get_LineNumberValue()
    def put_ColumnNumberValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_ColumnNumberValue

           INPUT
            Value               : long'''
        return super(IGPPythonScriptParseRecord, self).put_ColumnNumberValue(Value)
    def get_ColumnNumberValue(self):
        '''Method IGPPythonScriptParseRecord.get_ColumnNumberValue

           OUTPUT
            Value               : long*'''
        return super(IGPPythonScriptParseRecord, self).get_ColumnNumberValue()
    def put_EndLineNumberValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_EndLineNumberValue

           INPUT
            Value               : long'''
        return super(IGPPythonScriptParseRecord, self).put_EndLineNumberValue(Value)
    def get_EndLineNumberValue(self):
        '''Method IGPPythonScriptParseRecord.get_EndLineNumberValue

           OUTPUT
            Value               : long*'''
        return super(IGPPythonScriptParseRecord, self).get_EndLineNumberValue()
    def put_EndColumnNumberValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_EndColumnNumberValue

           INPUT
            Value               : long'''
        return super(IGPPythonScriptParseRecord, self).put_EndColumnNumberValue(Value)
    def get_EndColumnNumberValue(self):
        '''Method IGPPythonScriptParseRecord.get_EndColumnNumberValue

           OUTPUT
            Value               : long*'''
        return super(IGPPythonScriptParseRecord, self).get_EndColumnNumberValue()
    def put_IsWorkspaceValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsWorkspaceValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsWorkspaceValue(Value)
    def get_IsWorkspaceValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsWorkspaceValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsWorkspaceValue()
    def put_IsScratchWorkspaceValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsScratchWorkspaceValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsScratchWorkspaceValue(Value)
    def get_IsScratchWorkspaceValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsScratchWorkspaceValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsScratchWorkspaceValue()
    def put_IsToolboxValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsToolboxValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsToolboxValue(Value)
    def get_IsToolboxValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsToolboxValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsToolboxValue()
    def put_IsToolValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsToolValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsToolValue(Value)
    def get_IsToolValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsToolValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsToolValue()
    def put_IsMethodValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsMethodValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsMethodValue(Value)
    def get_IsMethodValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsMethodValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsMethodValue()
    def put_IsOutputValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsOutputValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsOutputValue(Value)
    def get_IsOutputValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsOutputValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsOutputValue()
    def put_IsWithinToolValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsWithinToolValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsWithinToolValue(Value)
    def get_IsWithinToolValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsWithinToolValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsWithinToolValue()
    def put_ImportedScriptValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_ImportedScriptValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_ImportedScriptValue(Value)
    def get_ImportedScriptValue(self):
        '''Method IGPPythonScriptParseRecord.get_ImportedScriptValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_ImportedScriptValue()
    def putref_DataType(self, ppDataType):
        '''Method IGPPythonScriptParseRecord.putref_DataType

           INPUT
            ppDataType          : IGPDataType*'''
        return super(IGPPythonScriptParseRecord, self).putref_DataType(ppDataType)
    def get_DataType(self):
        '''Method IGPPythonScriptParseRecord.get_DataType

           OUTPUT
            ppDataType          : IGPDataType**'''
        return super(IGPPythonScriptParseRecord, self).get_DataType()
    def put_NewVariableValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_NewVariableValue

           INPUT
            Value               : BSTR'''
        return super(IGPPythonScriptParseRecord, self).put_NewVariableValue(Value)
    def get_NewVariableValue(self):
        '''Method IGPPythonScriptParseRecord.get_NewVariableValue

           OUTPUT
            Value               : BSTR*'''
        return super(IGPPythonScriptParseRecord, self).get_NewVariableValue()
    def put_OldVariableValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_OldVariableValue

           INPUT
            Value               : BSTR'''
        return super(IGPPythonScriptParseRecord, self).put_OldVariableValue(Value)
    def get_OldVariableValue(self):
        '''Method IGPPythonScriptParseRecord.get_OldVariableValue

           OUTPUT
            Value               : BSTR*'''
        return super(IGPPythonScriptParseRecord, self).get_OldVariableValue()
    def put_IsCalcFieldValue(self, Value):
        '''Method IGPPythonScriptParseRecord.put_IsCalcFieldValue

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGPPythonScriptParseRecord, self).put_IsCalcFieldValue(Value)
    def get_IsCalcFieldValue(self):
        '''Method IGPPythonScriptParseRecord.get_IsCalcFieldValue

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGPPythonScriptParseRecord, self).get_IsCalcFieldValue()
    ColumnNumberValue = property(get_ColumnNumberValue, put_ColumnNumberValue, None)
    DataType = property(get_DataType, putref_DataType, None)
    EndColumnNumberValue = property(get_EndColumnNumberValue, put_EndColumnNumberValue, None)
    EndLineNumberValue = property(get_EndLineNumberValue, put_EndLineNumberValue, None)
    ImportedScriptValue = property(get_ImportedScriptValue, put_ImportedScriptValue, None)
    IsCalcFieldValue = property(get_IsCalcFieldValue, put_IsCalcFieldValue, None)
    IsMethodValue = property(get_IsMethodValue, put_IsMethodValue, None)
    IsOutputValue = property(get_IsOutputValue, put_IsOutputValue, None)
    IsScratchWorkspaceValue = property(get_IsScratchWorkspaceValue, put_IsScratchWorkspaceValue, None)
    IsToolValue = property(get_IsToolValue, put_IsToolValue, None)
    IsToolboxValue = property(get_IsToolboxValue, put_IsToolboxValue, None)
    IsWithinToolValue = property(get_IsWithinToolValue, put_IsWithinToolValue, None)
    IsWorkspaceValue = property(get_IsWorkspaceValue, put_IsWorkspaceValue, None)
    LineNumberValue = property(get_LineNumberValue, put_LineNumberValue, None)
    NewTextValue = property(get_NewTextValue, put_NewTextValue, None)
    NewVariableValue = property(get_NewVariableValue, put_NewVariableValue, None)
    OldVariableValue = property(get_OldVariableValue, put_OldVariableValue, None)
    TextScratch = property(get_TextScratch, put_TextScratch, None)
    TextValue = property(get_TextValue, put_TextValue, None)
    TextValueLength = property(get_TextValueLength, put_TextValueLength, None)
    TextWorkspace = property(get_TextWorkspace, put_TextWorkspace, None)

class IGPExportWebMapExtensionImpl(_esriGeoprocessing.IGPExportWebMapExtensionImpl):
    _IID = uuid.UUID('e6842100-bc1c-4f44-9690-25ea099d4608')
    def PutServerConnections(self, pServerConnections):
        '''Method IGPExportWebMapExtensionImpl.PutServerConnections

           INPUT
            pServerConnections  : IArray*'''
        return super(IGPExportWebMapExtensionImpl, self).PutServerConnections(pServerConnections)
    def GetServerConnections(self):
        '''Method IGPExportWebMapExtensionImpl.GetServerConnections

           OUTPUT
            ppServerConnections : IArray**'''
        return super(IGPExportWebMapExtensionImpl, self).GetServerConnections()

class IGPSAGeoDataType(_esriGeoprocessing.IGPSAGeoDataType):
    _IID = uuid.UUID('4ce720e4-8f20-4f20-97e8-88f73539c4dc')

    def __init__(self, *args, **kw):
        super(IGPSAGeoDataType, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Domain(self):
        '''Method IGPSAGeoDataType.get_Domain

           OUTPUT
            ppDomain            : IGPSAGeoDataDomain**'''
        return super(IGPSAGeoDataType, self).get_Domain()
    def putref_Domain(self, ppDomain):
        '''Method IGPSAGeoDataType.putref_Domain

           INPUT
            ppDomain            : IGPSAGeoDataDomain*'''
        return super(IGPSAGeoDataType, self).putref_Domain(ppDomain)
    Domain = property(get_Domain, putref_Domain, None)

class IGPRasterFormulated(_esriGeoprocessing.IGPRasterFormulated):
    _IID = uuid.UUID('b81ba228-6c79-4a69-bb30-ba35bcd9e710')
    def Create(self, Type, Value):
        '''Method IGPRasterFormulated.Create

           INPUTS
            Type                : esriRasterDistributionEnum
            Value               : VARIANT*'''
        return super(IGPRasterFormulated, self).Create(Type, Value)
    def get_BandCount(self):
        '''Method IGPRasterFormulated.get_BandCount

           OUTPUT
            BandCount           : long*'''
        return super(IGPRasterFormulated, self).get_BandCount()
    def get_Type(self):
        '''Method IGPRasterFormulated.get_Type

           OUTPUT
            Type                : esriRasterDistributionEnum*'''
        return super(IGPRasterFormulated, self).get_Type()
    def get_IsInteger(self):
        '''Method IGPRasterFormulated.get_IsInteger

           OUTPUT
            IsInteger           : VARIANT_BOOL*'''
        return super(IGPRasterFormulated, self).get_IsInteger()
    def get_Value(self):
        '''Method IGPRasterFormulated.get_Value

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPRasterFormulated, self).get_Value()
    def MakeDERasterDataset(self, PathName, CellSize, Extent):
        '''Method IGPRasterFormulated.MakeDERasterDataset

           INPUTS
            PathName            : BSTR
            CellSize            : double
            Extent              : IEnvelope*

           OUTPUT
            outRasterDataset    : IDERasterDataset**'''
        return super(IGPRasterFormulated, self).MakeDERasterDataset(PathName, CellSize, Extent)
    BandCount = property(get_BandCount, None, None)
    IsInteger = property(get_IsInteger, None, None)
    Type = property(get_Type, None, None)
    Value = property(get_Value, None, None)

class IGPRAFieldDomain(_esriGeoprocessing.IGPRAFieldDomain):
    _IID = uuid.UUID('2f135584-7063-4772-9f1c-144461876d2a')

    def __init__(self, *args, **kw):
        super(IGPRAFieldDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DependValue(self, _arg1):
        '''Method IGPRAFieldDomain.putref_DependValue

           INPUT
            _arg1               : IGPValue*'''
        return super(IGPRAFieldDomain, self).putref_DependValue(_arg1)
    DependValue = property(None, putref_DependValue, None)

class IGPAnalysisCellSizeType(_esriGeoprocessing.IGPAnalysisCellSizeType):
    _IID = uuid.UUID('9c1cc19e-910a-49bf-b74b-38896d343b0d')

    def __init__(self, *args, **kw):
        super(IGPAnalysisCellSizeType, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Domain(self):
        '''Method IGPAnalysisCellSizeType.get_Domain

           OUTPUT
            ppDomain            : IGPSAGeoDataDomain**'''
        return super(IGPAnalysisCellSizeType, self).get_Domain()
    def putref_Domain(self, ppDomain):
        '''Method IGPAnalysisCellSizeType.putref_Domain

           INPUT
            ppDomain            : IGPSAGeoDataDomain*'''
        return super(IGPAnalysisCellSizeType, self).putref_Domain(ppDomain)
    Domain = property(get_Domain, putref_Domain, None)

class IMapCacheTileManager(_esriGeoprocessing.IMapCacheTileManager):
    _IID = uuid.UUID('c1261b98-e523-4644-987f-c36bea9d81f9')

    def __init__(self, *args, **kw):
        super(IMapCacheTileManager, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Host(self):
        '''Method IMapCacheTileManager.get_Host

           OUTPUT
            pHost               : BSTR*'''
        return super(IMapCacheTileManager, self).get_Host()
    def put_Host(self, pHost):
        '''Method IMapCacheTileManager.put_Host

           INPUT
            pHost               : BSTR'''
        return super(IMapCacheTileManager, self).put_Host(pHost)
    def get_Service(self):
        '''Method IMapCacheTileManager.get_Service

           OUTPUT
            pService            : BSTR*'''
        return super(IMapCacheTileManager, self).get_Service()
    def put_Service(self, pService):
        '''Method IMapCacheTileManager.put_Service

           INPUT
            pService            : BSTR'''
        return super(IMapCacheTileManager, self).put_Service(pService)
    def get_Dataframe(self):
        '''Method IMapCacheTileManager.get_Dataframe

           OUTPUT
            pDataframe          : BSTR*'''
        return super(IMapCacheTileManager, self).get_Dataframe()
    def put_Dataframe(self, pDataframe):
        '''Method IMapCacheTileManager.put_Dataframe

           INPUT
            pDataframe          : BSTR'''
        return super(IMapCacheTileManager, self).put_Dataframe(pDataframe)
    def EnableLocalCaching(self, localCaching):
        '''Method IMapCacheTileManager.EnableLocalCaching

           INPUT
            localCaching        : VARIANT_BOOL'''
        return super(IMapCacheTileManager, self).EnableLocalCaching(localCaching)
    def Manage(self, LayerName, pLevels, pGeometry, Mode, numThreads, pTrackCancel, pGPMessages):
        '''Method IMapCacheTileManager.Manage

           INPUTS
            LayerName           : BSTR
            pLevels             : ILongArray*
            pGeometry           : IGeometry*
            Mode                : esriMapCacheUpdateMode
            numThreads          : long
            pTrackCancel        : ITrackCancel*
            pGPMessages         : IGPMessages*'''
        return super(IMapCacheTileManager, self).Manage(LayerName, pLevels, pGeometry, Mode, numThreads, pTrackCancel, pGPMessages)
    Dataframe = property(get_Dataframe, put_Dataframe, None)
    Host = property(get_Host, put_Host, None)
    Service = property(get_Service, put_Service, None)

class IMapCacheTileManagerJobResultHandler(_esriGeoprocessing.IMapCacheTileManagerJobResultHandler):
    _IID = uuid.UUID('a83cd34f-ed50-4bf2-b75b-b4d5efa5da62')
    def GetFeatureClassWorkspacePath(self):
        '''Method IMapCacheTileManagerJobResultHandler.GetFeatureClassWorkspacePath

           OUTPUT
            pWorkspace          : BSTR*'''
        return super(IMapCacheTileManagerJobResultHandler, self).GetFeatureClassWorkspacePath()
    def SetFeatureClassWorkspacePath(self, Workspace):
        '''Method IMapCacheTileManagerJobResultHandler.SetFeatureClassWorkspacePath

           INPUT
            Workspace           : BSTR'''
        return super(IMapCacheTileManagerJobResultHandler, self).SetFeatureClassWorkspacePath(Workspace)
    def GetMessages(self):
        '''Method IMapCacheTileManagerJobResultHandler.GetMessages

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IMapCacheTileManagerJobResultHandler, self).GetMessages()
    def SetMessages(self, pMessages):
        '''Method IMapCacheTileManagerJobResultHandler.SetMessages

           INPUT
            pMessages           : IGPMessages*'''
        return super(IMapCacheTileManagerJobResultHandler, self).SetMessages(pMessages)

class IMapCacheTileManagerJob(_esriGeoprocessing.IMapCacheTileManagerJob):
    _IID = uuid.UUID('eb216031-0392-44f8-a4d7-6ff97bb0bf01')

    def __init__(self, *args, **kw):
        super(IMapCacheTileManagerJob, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SetTileRangeX(self, tileXMin, tileXMax):
        '''Method IMapCacheTileManagerJob.SetTileRangeX

           INPUTS
            tileXMin            : long
            tileXMax            : long'''
        return super(IMapCacheTileManagerJob, self).SetTileRangeX(tileXMin, tileXMax)
    def SetTileRangeY(self, tileYMin, tileYMax):
        '''Method IMapCacheTileManagerJob.SetTileRangeY

           INPUTS
            tileYMin            : long
            tileYMax            : long'''
        return super(IMapCacheTileManagerJob, self).SetTileRangeY(tileYMin, tileYMax)
    def GetTileRangeX(self):
        '''Method IMapCacheTileManagerJob.GetTileRangeX

           OUTPUTS
            pTileXMin           : long*
            pTileXMax           : long*'''
        return super(IMapCacheTileManagerJob, self).GetTileRangeX()
    def GetTileRangeY(self):
        '''Method IMapCacheTileManagerJob.GetTileRangeY

           OUTPUTS
            pTileYMin           : long*
            pTileYMax           : long*'''
        return super(IMapCacheTileManagerJob, self).GetTileRangeY()
    def put_Level(self, pLevel):
        '''Method IMapCacheTileManagerJob.put_Level

           INPUT
            pLevel              : long'''
        return super(IMapCacheTileManagerJob, self).put_Level(pLevel)
    def get_Level(self):
        '''Method IMapCacheTileManagerJob.get_Level

           OUTPUT
            pLevel              : long*'''
        return super(IMapCacheTileManagerJob, self).get_Level()
    def get_TileManagerMode(self):
        '''Method IMapCacheTileManagerJob.get_TileManagerMode

           OUTPUT
            pMode               : esriMapCacheUpdateMode*'''
        return super(IMapCacheTileManagerJob, self).get_TileManagerMode()
    def put_TileManagerMode(self, pMode):
        '''Method IMapCacheTileManagerJob.put_TileManagerMode

           INPUT
            pMode               : esriMapCacheUpdateMode'''
        return super(IMapCacheTileManagerJob, self).put_TileManagerMode(pMode)
    def get_Dataframe(self):
        '''Method IMapCacheTileManagerJob.get_Dataframe

           OUTPUT
            pDataframe          : BSTR*'''
        return super(IMapCacheTileManagerJob, self).get_Dataframe()
    def put_Dataframe(self, pDataframe):
        '''Method IMapCacheTileManagerJob.put_Dataframe

           INPUT
            pDataframe          : BSTR'''
        return super(IMapCacheTileManagerJob, self).put_Dataframe(pDataframe)
    def get_LayerName(self):
        '''Method IMapCacheTileManagerJob.get_LayerName

           OUTPUT
            pLayerName          : BSTR*'''
        return super(IMapCacheTileManagerJob, self).get_LayerName()
    def put_LayerName(self, pLayerName):
        '''Method IMapCacheTileManagerJob.put_LayerName

           INPUT
            pLayerName          : BSTR'''
        return super(IMapCacheTileManagerJob, self).put_LayerName(pLayerName)
    def EnableLocalCaching(self, localCaching):
        '''Method IMapCacheTileManagerJob.EnableLocalCaching

           INPUT
            localCaching        : VARIANT_BOOL'''
        return super(IMapCacheTileManagerJob, self).EnableLocalCaching(localCaching)
    def get_CacheExtent(self):
        '''Method IMapCacheTileManagerJob.get_CacheExtent

           OUTPUT
            ppCacheExtent       : IEnvelope**'''
        return super(IMapCacheTileManagerJob, self).get_CacheExtent()
    def putref_CacheExtent(self, ppCacheExtent):
        '''Method IMapCacheTileManagerJob.putref_CacheExtent

           INPUT
            ppCacheExtent       : IEnvelope*'''
        return super(IMapCacheTileManagerJob, self).putref_CacheExtent(ppCacheExtent)
    def get_ClipGeometry(self):
        '''Method IMapCacheTileManagerJob.get_ClipGeometry

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(IMapCacheTileManagerJob, self).get_ClipGeometry()
    def putref_ClipGeometry(self, ppGeometry):
        '''Method IMapCacheTileManagerJob.putref_ClipGeometry

           INPUT
            ppGeometry          : IGeometry*'''
        return super(IMapCacheTileManagerJob, self).putref_ClipGeometry(ppGeometry)
    CacheExtent = property(get_CacheExtent, putref_CacheExtent, None)
    ClipGeometry = property(get_ClipGeometry, putref_ClipGeometry, None)
    Dataframe = property(get_Dataframe, put_Dataframe, None)
    LayerName = property(get_LayerName, put_LayerName, None)
    Level = property(get_Level, put_Level, None)
    TileManagerMode = property(get_TileManagerMode, put_TileManagerMode, None)

class IGPRasterGDBEnvCompression(_esriGeoprocessing.IGPRasterGDBEnvCompression):
    _IID = uuid.UUID('ed8e191f-4a97-4d3c-9cd3-c66bfd1db20c')

    def __init__(self, *args, **kw):
        super(IGPRasterGDBEnvCompression, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CompressionType(self):
        '''Method IGPRasterGDBEnvCompression.get_CompressionType

           OUTPUT
            compType            : esriRasterGDBCompressionEnum*'''
        return super(IGPRasterGDBEnvCompression, self).get_CompressionType()
    def put_CompressionType(self, compType):
        '''Method IGPRasterGDBEnvCompression.put_CompressionType

           INPUT
            compType            : esriRasterGDBCompressionEnum'''
        return super(IGPRasterGDBEnvCompression, self).put_CompressionType(compType)
    def get_CompressionQuality(self):
        '''Method IGPRasterGDBEnvCompression.get_CompressionQuality

           OUTPUT
            Value               : long*'''
        return super(IGPRasterGDBEnvCompression, self).get_CompressionQuality()
    def put_CompressionQuality(self, Value):
        '''Method IGPRasterGDBEnvCompression.put_CompressionQuality

           INPUT
            Value               : long'''
        return super(IGPRasterGDBEnvCompression, self).put_CompressionQuality(Value)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)

class IGPRasterGDBEnvPyramid(_esriGeoprocessing.IGPRasterGDBEnvPyramid):
    _IID = uuid.UUID('e85ac7e8-39ff-4eec-ad54-edbee850f2ca')

    def __init__(self, *args, **kw):
        super(IGPRasterGDBEnvPyramid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CreatePyramids(self):
        '''Method IGPRasterGDBEnvPyramid.get_CreatePyramids

           OUTPUT
            bCreate             : VARIANT_BOOL*'''
        return super(IGPRasterGDBEnvPyramid, self).get_CreatePyramids()
    def put_CreatePyramids(self, bCreate):
        '''Method IGPRasterGDBEnvPyramid.put_CreatePyramids

           INPUT
            bCreate             : VARIANT_BOOL'''
        return super(IGPRasterGDBEnvPyramid, self).put_CreatePyramids(bCreate)
    def get_PyramidLevels(self):
        '''Method IGPRasterGDBEnvPyramid.get_PyramidLevels

           OUTPUT
            levels              : long*'''
        return super(IGPRasterGDBEnvPyramid, self).get_PyramidLevels()
    def put_PyramidLevels(self, levels):
        '''Method IGPRasterGDBEnvPyramid.put_PyramidLevels

           INPUT
            levels              : long'''
        return super(IGPRasterGDBEnvPyramid, self).put_PyramidLevels(levels)
    def get_ResampleMethod(self):
        '''Method IGPRasterGDBEnvPyramid.get_ResampleMethod

           OUTPUT
            Method              : esriGeoAnalysisResampleEnum*'''
        return super(IGPRasterGDBEnvPyramid, self).get_ResampleMethod()
    def put_ResampleMethod(self, Method):
        '''Method IGPRasterGDBEnvPyramid.put_ResampleMethod

           INPUT
            Method              : esriGeoAnalysisResampleEnum'''
        return super(IGPRasterGDBEnvPyramid, self).put_ResampleMethod(Method)
    CreatePyramids = property(get_CreatePyramids, put_CreatePyramids, None)
    PyramidLevels = property(get_PyramidLevels, put_PyramidLevels, None)
    ResampleMethod = property(get_ResampleMethod, put_ResampleMethod, None)

class IGPRasterGDBEnvPyramid2(_esriGeoprocessing.IGPRasterGDBEnvPyramid2):
    _IID = uuid.UUID('6afa775e-f7db-4b9e-a0a2-dc362a61f521')

    def __init__(self, *args, **kw):
        super(IGPRasterGDBEnvPyramid2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PyramidCompressionType(self):
        '''Method IGPRasterGDBEnvPyramid2.get_PyramidCompressionType

           OUTPUT
            compType            : esriRasterCompressionType*'''
        return super(IGPRasterGDBEnvPyramid2, self).get_PyramidCompressionType()
    def put_PyramidCompressionType(self, compType):
        '''Method IGPRasterGDBEnvPyramid2.put_PyramidCompressionType

           INPUT
            compType            : esriRasterCompressionType'''
        return super(IGPRasterGDBEnvPyramid2, self).put_PyramidCompressionType(compType)
    def get_PyramidCompressionQuality(self):
        '''Method IGPRasterGDBEnvPyramid2.get_PyramidCompressionQuality

           OUTPUT
            Value               : long*'''
        return super(IGPRasterGDBEnvPyramid2, self).get_PyramidCompressionQuality()
    def put_PyramidCompressionQuality(self, Value):
        '''Method IGPRasterGDBEnvPyramid2.put_PyramidCompressionQuality

           INPUT
            Value               : long'''
        return super(IGPRasterGDBEnvPyramid2, self).put_PyramidCompressionQuality(Value)
    def get_CreatePyramids(self):
        '''Method IGPRasterGDBEnvPyramid.get_CreatePyramids (from IGPRasterGDBEnvPyramid)

           OUTPUT
            bCreate             : VARIANT_BOOL*'''
        return super(IGPRasterGDBEnvPyramid2, self).get_CreatePyramids()
    def put_CreatePyramids(self, bCreate):
        '''Method IGPRasterGDBEnvPyramid.put_CreatePyramids (from IGPRasterGDBEnvPyramid)

           INPUT
            bCreate             : VARIANT_BOOL'''
        return super(IGPRasterGDBEnvPyramid2, self).put_CreatePyramids(bCreate)
    def get_PyramidLevels(self):
        '''Method IGPRasterGDBEnvPyramid.get_PyramidLevels (from IGPRasterGDBEnvPyramid)

           OUTPUT
            levels              : long*'''
        return super(IGPRasterGDBEnvPyramid2, self).get_PyramidLevels()
    def put_PyramidLevels(self, levels):
        '''Method IGPRasterGDBEnvPyramid.put_PyramidLevels (from IGPRasterGDBEnvPyramid)

           INPUT
            levels              : long'''
        return super(IGPRasterGDBEnvPyramid2, self).put_PyramidLevels(levels)
    def get_ResampleMethod(self):
        '''Method IGPRasterGDBEnvPyramid.get_ResampleMethod (from IGPRasterGDBEnvPyramid)

           OUTPUT
            Method              : esriGeoAnalysisResampleEnum*'''
        return super(IGPRasterGDBEnvPyramid2, self).get_ResampleMethod()
    def put_ResampleMethod(self, Method):
        '''Method IGPRasterGDBEnvPyramid.put_ResampleMethod (from IGPRasterGDBEnvPyramid)

           INPUT
            Method              : esriGeoAnalysisResampleEnum'''
        return super(IGPRasterGDBEnvPyramid2, self).put_ResampleMethod(Method)
    CreatePyramids = property(get_CreatePyramids, put_CreatePyramids, None)
    PyramidCompressionQuality = property(get_PyramidCompressionQuality, put_PyramidCompressionQuality, None)
    PyramidCompressionType = property(get_PyramidCompressionType, put_PyramidCompressionType, None)
    PyramidLevels = property(get_PyramidLevels, put_PyramidLevels, None)
    ResampleMethod = property(get_ResampleMethod, put_ResampleMethod, None)

class IGPRasterGDBEnvPyramid3(_esriGeoprocessing.IGPRasterGDBEnvPyramid3):
    _IID = uuid.UUID('fe2ea27f-aee7-45a2-83d8-90fc84a279a8')

    def __init__(self, *args, **kw):
        super(IGPRasterGDBEnvPyramid3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PyramidSkipFirst(self):
        '''Method IGPRasterGDBEnvPyramid3.get_PyramidSkipFirst

           OUTPUT
            bSkip               : VARIANT_BOOL*'''
        return super(IGPRasterGDBEnvPyramid3, self).get_PyramidSkipFirst()
    def put_PyramidSkipFirst(self, bSkip):
        '''Method IGPRasterGDBEnvPyramid3.put_PyramidSkipFirst

           INPUT
            bSkip               : VARIANT_BOOL'''
        return super(IGPRasterGDBEnvPyramid3, self).put_PyramidSkipFirst(bSkip)
    def get_PyramidCompressionType(self):
        '''Method IGPRasterGDBEnvPyramid2.get_PyramidCompressionType (from IGPRasterGDBEnvPyramid2)

           OUTPUT
            compType            : esriRasterCompressionType*'''
        return super(IGPRasterGDBEnvPyramid3, self).get_PyramidCompressionType()
    def put_PyramidCompressionType(self, compType):
        '''Method IGPRasterGDBEnvPyramid2.put_PyramidCompressionType (from IGPRasterGDBEnvPyramid2)

           INPUT
            compType            : esriRasterCompressionType'''
        return super(IGPRasterGDBEnvPyramid3, self).put_PyramidCompressionType(compType)
    def get_PyramidCompressionQuality(self):
        '''Method IGPRasterGDBEnvPyramid2.get_PyramidCompressionQuality (from IGPRasterGDBEnvPyramid2)

           OUTPUT
            Value               : long*'''
        return super(IGPRasterGDBEnvPyramid3, self).get_PyramidCompressionQuality()
    def put_PyramidCompressionQuality(self, Value):
        '''Method IGPRasterGDBEnvPyramid2.put_PyramidCompressionQuality (from IGPRasterGDBEnvPyramid2)

           INPUT
            Value               : long'''
        return super(IGPRasterGDBEnvPyramid3, self).put_PyramidCompressionQuality(Value)
    def get_CreatePyramids(self):
        '''Method IGPRasterGDBEnvPyramid.get_CreatePyramids (from IGPRasterGDBEnvPyramid)

           OUTPUT
            bCreate             : VARIANT_BOOL*'''
        return super(IGPRasterGDBEnvPyramid3, self).get_CreatePyramids()
    def put_CreatePyramids(self, bCreate):
        '''Method IGPRasterGDBEnvPyramid.put_CreatePyramids (from IGPRasterGDBEnvPyramid)

           INPUT
            bCreate             : VARIANT_BOOL'''
        return super(IGPRasterGDBEnvPyramid3, self).put_CreatePyramids(bCreate)
    def get_PyramidLevels(self):
        '''Method IGPRasterGDBEnvPyramid.get_PyramidLevels (from IGPRasterGDBEnvPyramid)

           OUTPUT
            levels              : long*'''
        return super(IGPRasterGDBEnvPyramid3, self).get_PyramidLevels()
    def put_PyramidLevels(self, levels):
        '''Method IGPRasterGDBEnvPyramid.put_PyramidLevels (from IGPRasterGDBEnvPyramid)

           INPUT
            levels              : long'''
        return super(IGPRasterGDBEnvPyramid3, self).put_PyramidLevels(levels)
    def get_ResampleMethod(self):
        '''Method IGPRasterGDBEnvPyramid.get_ResampleMethod (from IGPRasterGDBEnvPyramid)

           OUTPUT
            Method              : esriGeoAnalysisResampleEnum*'''
        return super(IGPRasterGDBEnvPyramid3, self).get_ResampleMethod()
    def put_ResampleMethod(self, Method):
        '''Method IGPRasterGDBEnvPyramid.put_ResampleMethod (from IGPRasterGDBEnvPyramid)

           INPUT
            Method              : esriGeoAnalysisResampleEnum'''
        return super(IGPRasterGDBEnvPyramid3, self).put_ResampleMethod(Method)
    CreatePyramids = property(get_CreatePyramids, put_CreatePyramids, None)
    PyramidCompressionQuality = property(get_PyramidCompressionQuality, put_PyramidCompressionQuality, None)
    PyramidCompressionType = property(get_PyramidCompressionType, put_PyramidCompressionType, None)
    PyramidLevels = property(get_PyramidLevels, put_PyramidLevels, None)
    PyramidSkipFirst = property(get_PyramidSkipFirst, put_PyramidSkipFirst, None)
    ResampleMethod = property(get_ResampleMethod, put_ResampleMethod, None)

class IGPRasterGDBEnvStatistics(_esriGeoprocessing.IGPRasterGDBEnvStatistics):
    _IID = uuid.UUID('ac442d72-92f7-44a7-8675-6ffe8c651228')

    def __init__(self, *args, **kw):
        super(IGPRasterGDBEnvStatistics, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CalculateStatistics(self):
        '''Method IGPRasterGDBEnvStatistics.get_CalculateStatistics

           OUTPUT
            bCalculate          : VARIANT_BOOL*'''
        return super(IGPRasterGDBEnvStatistics, self).get_CalculateStatistics()
    def put_CalculateStatistics(self, bCalculate):
        '''Method IGPRasterGDBEnvStatistics.put_CalculateStatistics

           INPUT
            bCalculate          : VARIANT_BOOL'''
        return super(IGPRasterGDBEnvStatistics, self).put_CalculateStatistics(bCalculate)
    def get_XSkipFactor(self):
        '''Method IGPRasterGDBEnvStatistics.get_XSkipFactor

           OUTPUT
            skipFactor          : long*'''
        return super(IGPRasterGDBEnvStatistics, self).get_XSkipFactor()
    def put_XSkipFactor(self, skipFactor):
        '''Method IGPRasterGDBEnvStatistics.put_XSkipFactor

           INPUT
            skipFactor          : long'''
        return super(IGPRasterGDBEnvStatistics, self).put_XSkipFactor(skipFactor)
    def get_YSkipFactor(self):
        '''Method IGPRasterGDBEnvStatistics.get_YSkipFactor

           OUTPUT
            skipFactor          : long*'''
        return super(IGPRasterGDBEnvStatistics, self).get_YSkipFactor()
    def put_YSkipFactor(self, skipFactor):
        '''Method IGPRasterGDBEnvStatistics.put_YSkipFactor

           INPUT
            skipFactor          : long'''
        return super(IGPRasterGDBEnvStatistics, self).put_YSkipFactor(skipFactor)
    def get_IgnoreValue(self):
        '''Method IGPRasterGDBEnvStatistics.get_IgnoreValue

           OUTPUT
            IgnoreValue         : BSTR*'''
        return super(IGPRasterGDBEnvStatistics, self).get_IgnoreValue()
    def put_IgnoreValue(self, IgnoreValue):
        '''Method IGPRasterGDBEnvStatistics.put_IgnoreValue

           INPUT
            IgnoreValue         : BSTR'''
        return super(IGPRasterGDBEnvStatistics, self).put_IgnoreValue(IgnoreValue)
    CalculateStatistics = property(get_CalculateStatistics, put_CalculateStatistics, None)
    IgnoreValue = property(get_IgnoreValue, put_IgnoreValue, None)
    XSkipFactor = property(get_XSkipFactor, put_XSkipFactor, None)
    YSkipFactor = property(get_YSkipFactor, put_YSkipFactor, None)

class IGPRasterGDBEnvTileSize(_esriGeoprocessing.IGPRasterGDBEnvTileSize):
    _IID = uuid.UUID('1870ec97-d71c-464e-9e3d-dad6f97417c9')

    def __init__(self, *args, **kw):
        super(IGPRasterGDBEnvTileSize, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TileWidth(self):
        '''Method IGPRasterGDBEnvTileSize.get_TileWidth

           OUTPUT
            Width               : long*'''
        return super(IGPRasterGDBEnvTileSize, self).get_TileWidth()
    def put_TileWidth(self, Width):
        '''Method IGPRasterGDBEnvTileSize.put_TileWidth

           INPUT
            Width               : long'''
        return super(IGPRasterGDBEnvTileSize, self).put_TileWidth(Width)
    def get_TileHeight(self):
        '''Method IGPRasterGDBEnvTileSize.get_TileHeight

           OUTPUT
            Height              : long*'''
        return super(IGPRasterGDBEnvTileSize, self).get_TileHeight()
    def put_TileHeight(self, Height):
        '''Method IGPRasterGDBEnvTileSize.put_TileHeight

           INPUT
            Height              : long'''
        return super(IGPRasterGDBEnvTileSize, self).put_TileHeight(Height)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)

class IGPRasterEnvStorageDefAdvanced(_esriGeoprocessing.IGPRasterEnvStorageDefAdvanced):
    _IID = uuid.UUID('77dfc4eb-7ffa-4d81-ae70-5a9b3ebf026e')

    def __init__(self, *args, **kw):
        super(IGPRasterEnvStorageDefAdvanced, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CreationOptions(self, options):
        '''Method IGPRasterEnvStorageDefAdvanced.put_CreationOptions

           INPUT
            options             : BSTR'''
        return super(IGPRasterEnvStorageDefAdvanced, self).put_CreationOptions(options)
    def get_CreationOptions(self):
        '''Method IGPRasterEnvStorageDefAdvanced.get_CreationOptions

           OUTPUT
            options             : BSTR*'''
        return super(IGPRasterEnvStorageDefAdvanced, self).get_CreationOptions()
    CreationOptions = property(get_CreationOptions, put_CreationOptions, None)

class IGPFunctionPS(_esriGeoprocessing.IGPFunctionPS):
    _IID = uuid.UUID('b6f72216-6f41-4622-b6b2-e3dc9969e6fc')

    def __init__(self, *args, **kw):
        super(IGPFunctionPS, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_HelpContextID(self, _arg1):
        '''Method IGPFunctionPS.put_HelpContextID

           INPUT
            _arg1               : BSTR'''
        return super(IGPFunctionPS, self).put_HelpContextID(_arg1)
    def put_MetadataFileName(self, _arg1):
        '''Method IGPFunctionPS.put_MetadataFileName

           INPUT
            _arg1               : BSTR'''
        return super(IGPFunctionPS, self).put_MetadataFileName(_arg1)
    def put_HelpCategory(self, _arg1):
        '''Method IGPFunctionPS.put_HelpCategory

           INPUT
            _arg1               : long'''
        return super(IGPFunctionPS, self).put_HelpCategory(_arg1)
    HelpCategory = property(None, put_HelpCategory, None)
    HelpContextID = property(None, put_HelpContextID, None)
    MetadataFileName = property(None, put_MetadataFileName, None)

class IGPRasterFormulatedPS(_esriGeoprocessing.IGPRasterFormulatedPS):
    _IID = uuid.UUID('b1afe378-c308-4cc8-8ad2-9e0cab9f7880')
    def get_Raster(self):
        '''Method IGPRasterFormulatedPS.get_Raster

           OUTPUT
            Raster              : IRaster**'''
        return super(IGPRasterFormulatedPS, self).get_Raster()
    Raster = property(get_Raster, None, None)

class IGPAnalysisCellSizePS(_esriGeoprocessing.IGPAnalysisCellSizePS):
    _IID = uuid.UUID('5773ee6f-3b0b-45ba-8b47-e9b8b60c7693')
    def GetCellSize(self):
        '''Method IGPAnalysisCellSizePS.GetCellSize

           OUTPUTS
            cellSizeValue       : double*
            cellSizeRaster      : BSTR*'''
        return super(IGPAnalysisCellSizePS, self).GetCellSize()
    def SetCellSize(self, CellSize):
        '''Method IGPAnalysisCellSizePS.SetCellSize

           INPUT
            CellSize            : VARIANT*'''
        return super(IGPAnalysisCellSizePS, self).SetCellSize(CellSize)

class IGPSAGeoDataBase(_esriGeoprocessing.IGPSAGeoDataBase):
    _IID = uuid.UUID('56d740ab-3122-458c-8665-9d8551914163')
    def Exists(self):
        '''Method IGPSAGeoDataBase.Exists

           OUTPUTS
            ppNotExist          : IDataElement**
            Exists              : VARIANT_BOOL*'''
        return super(IGPSAGeoDataBase, self).Exists()
    def NotExists(self):
        '''Method IGPSAGeoDataBase.NotExists

           OUTPUTS
            ppExist             : IDataElement**
            NotExists           : VARIANT_BOOL*'''
        return super(IGPSAGeoDataBase, self).NotExists()

class IGPSAValueTablePS(_esriGeoprocessing.IGPSAValueTablePS):
    _IID = uuid.UUID('a69f815a-8003-4701-8a2a-5b8ae7dd3586')
    def IsGeoData(self):
        '''Method IGPSAValueTablePS.IsGeoData

           OUTPUT
            bGeo                : VARIANT_BOOL*'''
        return super(IGPSAValueTablePS, self).IsGeoData()
    def GetDefaultOutputPathname(self):
        '''Method IGPSAValueTablePS.GetDefaultOutputPathname

           OUTPUT
            Path                : BSTR*'''
        return super(IGPSAValueTablePS, self).GetDefaultOutputPathname()

class IGPSAGeoValueTablePS(_esriGeoprocessing.IGPSAGeoValueTablePS):
    _IID = uuid.UUID('96ddf146-0309-4ed5-9064-db88a40a3e03')

    def __init__(self, *args, **kw):
        super(IGPSAGeoValueTablePS, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ExtentType(self, Type):
        '''Method IGPSAGeoValueTablePS.put_ExtentType

           INPUT
            Type                : esriRasterEnvSettingEnum'''
        return super(IGPSAGeoValueTablePS, self).put_ExtentType(Type)
    def get_ExtentType(self):
        '''Method IGPSAGeoValueTablePS.get_ExtentType

           OUTPUT
            Type                : esriRasterEnvSettingEnum*'''
        return super(IGPSAGeoValueTablePS, self).get_ExtentType()
    def get_DEGeoDatasetArray(self):
        '''Method IGPSAGeoValueTablePS.get_DEGeoDatasetArray

           OUTPUT
            ppOut               : IArray**'''
        return super(IGPSAGeoValueTablePS, self).get_DEGeoDatasetArray()
    DEGeoDatasetArray = property(get_DEGeoDatasetArray, None, None)
    ExtentType = property(get_ExtentType, put_ExtentType, None)

class IGPRasterValueTablePS(_esriGeoprocessing.IGPRasterValueTablePS):
    _IID = uuid.UUID('e5e1cb4d-cd2d-4c3f-ad66-2d4f4b7a536b')

    def __init__(self, *args, **kw):
        super(IGPRasterValueTablePS, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CellSizeType(self, Type):
        '''Method IGPRasterValueTablePS.put_CellSizeType

           INPUT
            Type                : esriRasterEnvSettingEnum'''
        return super(IGPRasterValueTablePS, self).put_CellSizeType(Type)
    def get_CellSizeType(self):
        '''Method IGPRasterValueTablePS.get_CellSizeType

           OUTPUT
            Type                : esriRasterEnvSettingEnum*'''
        return super(IGPRasterValueTablePS, self).get_CellSizeType()
    def GetCellSize(self, pOutSpRef):
        '''Method IGPRasterValueTablePS.GetCellSize

           INPUT
            pOutSpRef           : ISpatialReference*

           OUTPUT
            CellSize            : double*'''
        return super(IGPRasterValueTablePS, self).GetCellSize(pOutSpRef)
    CellSizeType = property(get_CellSizeType, put_CellSizeType, None)

class IGPRepresentationLayerDomain(_esriGeoprocessing.IGPRepresentationLayerDomain):
    _IID = uuid.UUID('d077b637-868a-4ac0-9f8e-1a3308560c92')
    def get_Count(self):
        '''Method IGPRepresentationLayerDomain.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPRepresentationLayerDomain, self).get_Count()
    def get_Type(self, Index):
        '''Method IGPRepresentationLayerDomain.get_Type

           INPUT
            Index               : long

           OUTPUT
            pType               : esriGeometryType*'''
        return super(IGPRepresentationLayerDomain, self).get_Type(Index)
    def AddType(self, Type):
        '''Method IGPRepresentationLayerDomain.AddType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPRepresentationLayerDomain, self).AddType(Type)
    def DeleteType(self, Type):
        '''Method IGPRepresentationLayerDomain.DeleteType

           INPUT
            Type                : esriGeometryType'''
        return super(IGPRepresentationLayerDomain, self).DeleteType(Type)
    Count = property(get_Count, None, None)
    Type = IndexProperty(get_Type, None)

class IGeocompare(_esriGeoprocessing.IGeocompare):
    _IID = uuid.UUID('0559330e-bdc1-41d2-850a-fd5dfe38326f')
    def ResetCompareStatus(self):
        '''Method IGeocompare.ResetCompareStatus'''
        return super(IGeocompare, self).ResetCompareStatus()
    def get_CompareStatus(self):
        '''Method IGeocompare.get_CompareStatus

           OUTPUT
            Status              : HRESULT*'''
        return super(IGeocompare, self).get_CompareStatus()
    CompareStatus = property(get_CompareStatus, None, None)

class IGeocompareResult(_esriGeoprocessing.IGeocompareResult):
    _IID = uuid.UUID('23bf4357-4370-4a2e-a740-d034b1a4a0dd')

    def __init__(self, *args, **kw):
        super(IGeocompareResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Reset(self):
        '''Method IGeocompareResult.Reset'''
        return super(IGeocompareResult, self).Reset()
    def put_CompareFunctionName(self, pStr):
        '''Method IGeocompareResult.put_CompareFunctionName

           INPUT
            pStr                : BSTR'''
        return super(IGeocompareResult, self).put_CompareFunctionName(pStr)
    def get_CompareFunctionName(self):
        '''Method IGeocompareResult.get_CompareFunctionName

           OUTPUT
            pStr                : BSTR*'''
        return super(IGeocompareResult, self).get_CompareFunctionName()
    def put_StatusDescription(self, pStr):
        '''Method IGeocompareResult.put_StatusDescription

           INPUT
            pStr                : BSTR'''
        return super(IGeocompareResult, self).put_StatusDescription(pStr)
    def get_StatusDescription(self):
        '''Method IGeocompareResult.get_StatusDescription

           OUTPUT
            pStr                : BSTR*'''
        return super(IGeocompareResult, self).get_StatusDescription()
    def put_Status(self, pStat):
        '''Method IGeocompareResult.put_Status

           INPUT
            pStat               : HRESULT'''
        return super(IGeocompareResult, self).put_Status(pStat)
    def get_Status(self):
        '''Method IGeocompareResult.get_Status

           OUTPUT
            pStat               : HRESULT*'''
        return super(IGeocompareResult, self).get_Status()
    CompareFunctionName = property(get_CompareFunctionName, put_CompareFunctionName, None)
    Status = property(get_Status, put_Status, None)
    StatusDescription = property(get_StatusDescription, put_StatusDescription, None)

class IGeocompareReport(_esriGeoprocessing.IGeocompareReport):
    _IID = uuid.UUID('66543e11-510a-4616-afe8-b067efdf070b')

    def __init__(self, *args, **kw):
        super(IGeocompareReport, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Reset(self):
        '''Method IGeocompareReport.Reset'''
        return super(IGeocompareReport, self).Reset()
    def AppendResultsFromReport(self, pOtherReport):
        '''Method IGeocompareReport.AppendResultsFromReport

           INPUT
            pOtherReport        : IGeocompareReport*'''
        return super(IGeocompareReport, self).AppendResultsFromReport(pOtherReport)
    def put_MaxSize(self, pMaxSize):
        '''Method IGeocompareReport.put_MaxSize

           INPUT
            pMaxSize            : long'''
        return super(IGeocompareReport, self).put_MaxSize(pMaxSize)
    def get_MaxSize(self):
        '''Method IGeocompareReport.get_MaxSize

           OUTPUT
            pMaxSize            : long*'''
        return super(IGeocompareReport, self).get_MaxSize()
    def get_HasError(self):
        '''Method IGeocompareReport.get_HasError

           OUTPUT
            pBool               : VARIANT_BOOL*'''
        return super(IGeocompareReport, self).get_HasError()
    def get_AsString(self):
        '''Method IGeocompareReport.get_AsString

           OUTPUT
            pReport             : BSTR*'''
        return super(IGeocompareReport, self).get_AsString()
    def get_Count(self):
        '''Method IGeocompareReport.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGeocompareReport, self).get_Count()
    def putref_AppendGeocompareResult(self, _arg1):
        '''Method IGeocompareReport.putref_AppendGeocompareResult

           INPUT
            _arg1               : IGeocompareResult*'''
        return super(IGeocompareReport, self).putref_AppendGeocompareResult(_arg1)
    def get_GeocompareResult(self, iVal):
        '''Method IGeocompareReport.get_GeocompareResult

           INPUT
            iVal                : long

           OUTPUT
            ppGeocompareResult  : IGeocompareResult**'''
        return super(IGeocompareReport, self).get_GeocompareResult(iVal)
    AppendGeocompareResult = property(None, putref_AppendGeocompareResult, None)
    AsString = property(get_AsString, None, None)
    Count = property(get_Count, None, None)
    HasError = property(get_HasError, None, None)
    MaxSize = property(get_MaxSize, put_MaxSize, None)
    GeocompareResult = IndexProperty(get_GeocompareResult, None)

class IFeatureClassGeocompare(_esriGeoprocessing.IFeatureClassGeocompare):
    _IID = uuid.UUID('d595b92f-59ab-4799-9f6d-a941ae6419d7')

    def __init__(self, *args, **kw):
        super(IFeatureClassGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FeatureClassA(self, ppFeatureClass):
        '''Method IFeatureClassGeocompare.putref_FeatureClassA

           INPUT
            ppFeatureClass      : IFeatureClass*'''
        return super(IFeatureClassGeocompare, self).putref_FeatureClassA(ppFeatureClass)
    def get_FeatureClassA(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassA

           OUTPUT
            ppFeatureClass      : IFeatureClass**'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassA()
    def putref_FeatureClassB(self, ppFeatureClass):
        '''Method IFeatureClassGeocompare.putref_FeatureClassB

           INPUT
            ppFeatureClass      : IFeatureClass*'''
        return super(IFeatureClassGeocompare, self).putref_FeatureClassB(ppFeatureClass)
    def get_FeatureClassB(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassB

           OUTPUT
            ppFeatureClass      : IFeatureClass**'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassB()
    def put_FeatureClassQueryFilterA(self, ppQueryFilter):
        '''Method IFeatureClassGeocompare.put_FeatureClassQueryFilterA

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassQueryFilterA(ppQueryFilter)
    def get_FeatureClassQueryFilterA(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassQueryFilterA

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassQueryFilterA()
    def put_FeatureClassQueryFilterB(self, ppQueryFilter):
        '''Method IFeatureClassGeocompare.put_FeatureClassQueryFilterB

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassQueryFilterB(ppQueryFilter)
    def get_FeatureClassQueryFilterB(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassQueryFilterB

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassQueryFilterB()
    def put_FeatureClassSortFieldsA(self, pSortFields):
        '''Method IFeatureClassGeocompare.put_FeatureClassSortFieldsA

           INPUT
            pSortFields         : BSTR'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassSortFieldsA(pSortFields)
    def get_FeatureClassSortFieldsA(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassSortFieldsA

           OUTPUT
            pSortFields         : BSTR*'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassSortFieldsA()
    def put_FeatureClassSortFieldsB(self, pSortFields):
        '''Method IFeatureClassGeocompare.put_FeatureClassSortFieldsB

           INPUT
            pSortFields         : BSTR'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassSortFieldsB(pSortFields)
    def get_FeatureClassSortFieldsB(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassSortFieldsB

           OUTPUT
            pSortFields         : BSTR*'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassSortFieldsB()
    def put_FeatureClassIgnoreFields(self, pIgnoreFields):
        '''Method IFeatureClassGeocompare.put_FeatureClassIgnoreFields

           INPUT
            pIgnoreFields       : BSTR'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassIgnoreFields(pIgnoreFields)
    def get_FeatureClassIgnoreFields(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassIgnoreFields

           OUTPUT
            pIgnoreFields       : BSTR*'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassIgnoreFields()
    def put_FeatureClassCompareOptions(self, pCompareOptions):
        '''Method IFeatureClassGeocompare.put_FeatureClassCompareOptions

           INPUT
            pCompareOptions     : BSTR'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassCompareOptions(pCompareOptions)
    def get_FeatureClassCompareOptions(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassCompareOptions

           OUTPUT
            pCompareOptions     : BSTR*'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassCompareOptions()
    def put_FeatureClassAttributeCompareTolerances(self, pCompareTolerances):
        '''Method IFeatureClassGeocompare.put_FeatureClassAttributeCompareTolerances

           INPUT
            pCompareTolerances  : BSTR'''
        return super(IFeatureClassGeocompare, self).put_FeatureClassAttributeCompareTolerances(pCompareTolerances)
    def get_FeatureClassAttributeCompareTolerances(self):
        '''Method IFeatureClassGeocompare.get_FeatureClassAttributeCompareTolerances

           OUTPUT
            pCompareTolerances  : BSTR*'''
        return super(IFeatureClassGeocompare, self).get_FeatureClassAttributeCompareTolerances()
    def GeocompareFeatureClasses(self, pReport, bContinueComparisions):
        '''Method IFeatureClassGeocompare.GeocompareFeatureClasses

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(IFeatureClassGeocompare, self).GeocompareFeatureClasses(pReport, bContinueComparisions)
    def GeocompareFeatures(self, pReport, bContinueComparisions):
        '''Method IFeatureClassGeocompare.GeocompareFeatures

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(IFeatureClassGeocompare, self).GeocompareFeatures(pReport, bContinueComparisions)
    def GeocompareFeatureClassFields(self, pReport):
        '''Method IFeatureClassGeocompare.GeocompareFeatureClassFields

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IFeatureClassGeocompare, self).GeocompareFeatureClassFields(pReport)
    def GeocompareShapeType(self, pReport):
        '''Method IFeatureClassGeocompare.GeocompareShapeType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IFeatureClassGeocompare, self).GeocompareShapeType(pReport)
    def GeocompareFeatureType(self, pReport):
        '''Method IFeatureClassGeocompare.GeocompareFeatureType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IFeatureClassGeocompare, self).GeocompareFeatureType(pReport)
    def GeocompareFeatureCount(self, pReport):
        '''Method IFeatureClassGeocompare.GeocompareFeatureCount

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IFeatureClassGeocompare, self).GeocompareFeatureCount(pReport)
    def GeocompareFeatureExtent(self, pReport):
        '''Method IFeatureClassGeocompare.GeocompareFeatureExtent

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IFeatureClassGeocompare, self).GeocompareFeatureExtent(pReport)
    FeatureClassA = property(get_FeatureClassA, putref_FeatureClassA, None)
    FeatureClassAttributeCompareTolerances = property(get_FeatureClassAttributeCompareTolerances, put_FeatureClassAttributeCompareTolerances, None)
    FeatureClassB = property(get_FeatureClassB, putref_FeatureClassB, None)
    FeatureClassCompareOptions = property(get_FeatureClassCompareOptions, put_FeatureClassCompareOptions, None)
    FeatureClassIgnoreFields = property(get_FeatureClassIgnoreFields, put_FeatureClassIgnoreFields, None)
    FeatureClassQueryFilterA = property(get_FeatureClassQueryFilterA, put_FeatureClassQueryFilterA, None)
    FeatureClassQueryFilterB = property(get_FeatureClassQueryFilterB, put_FeatureClassQueryFilterB, None)
    FeatureClassSortFieldsA = property(get_FeatureClassSortFieldsA, put_FeatureClassSortFieldsA, None)
    FeatureClassSortFieldsB = property(get_FeatureClassSortFieldsB, put_FeatureClassSortFieldsB, None)

class ITableGeocompare(_esriGeoprocessing.ITableGeocompare):
    _IID = uuid.UUID('3854a5f5-8e7a-479c-a3ea-066b2664ec99')

    def __init__(self, *args, **kw):
        super(ITableGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_TableA(self, ppTable):
        '''Method ITableGeocompare.putref_TableA

           INPUT
            ppTable             : ITable*'''
        return super(ITableGeocompare, self).putref_TableA(ppTable)
    def get_TableA(self):
        '''Method ITableGeocompare.get_TableA

           OUTPUT
            ppTable             : ITable**'''
        return super(ITableGeocompare, self).get_TableA()
    def putref_TableB(self, ppTable):
        '''Method ITableGeocompare.putref_TableB

           INPUT
            ppTable             : ITable*'''
        return super(ITableGeocompare, self).putref_TableB(ppTable)
    def get_TableB(self):
        '''Method ITableGeocompare.get_TableB

           OUTPUT
            ppTable             : ITable**'''
        return super(ITableGeocompare, self).get_TableB()
    def put_TableQueryFilterA(self, ppQueryFilter):
        '''Method ITableGeocompare.put_TableQueryFilterA

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(ITableGeocompare, self).put_TableQueryFilterA(ppQueryFilter)
    def get_TableQueryFilterA(self):
        '''Method ITableGeocompare.get_TableQueryFilterA

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(ITableGeocompare, self).get_TableQueryFilterA()
    def put_TableQueryFilterB(self, ppQueryFilter):
        '''Method ITableGeocompare.put_TableQueryFilterB

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(ITableGeocompare, self).put_TableQueryFilterB(ppQueryFilter)
    def get_TableQueryFilterB(self):
        '''Method ITableGeocompare.get_TableQueryFilterB

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(ITableGeocompare, self).get_TableQueryFilterB()
    def put_TableSortFieldsA(self, pSortFields):
        '''Method ITableGeocompare.put_TableSortFieldsA

           INPUT
            pSortFields         : BSTR'''
        return super(ITableGeocompare, self).put_TableSortFieldsA(pSortFields)
    def get_TableSortFieldsA(self):
        '''Method ITableGeocompare.get_TableSortFieldsA

           OUTPUT
            pSortFields         : BSTR*'''
        return super(ITableGeocompare, self).get_TableSortFieldsA()
    def put_TableSortFieldsB(self, pSortFields):
        '''Method ITableGeocompare.put_TableSortFieldsB

           INPUT
            pSortFields         : BSTR'''
        return super(ITableGeocompare, self).put_TableSortFieldsB(pSortFields)
    def get_TableSortFieldsB(self):
        '''Method ITableGeocompare.get_TableSortFieldsB

           OUTPUT
            pSortFields         : BSTR*'''
        return super(ITableGeocompare, self).get_TableSortFieldsB()
    def put_TableIgnoreFields(self, pIgnoreFields):
        '''Method ITableGeocompare.put_TableIgnoreFields

           INPUT
            pIgnoreFields       : BSTR'''
        return super(ITableGeocompare, self).put_TableIgnoreFields(pIgnoreFields)
    def get_TableIgnoreFields(self):
        '''Method ITableGeocompare.get_TableIgnoreFields

           OUTPUT
            pIgnoreFields       : BSTR*'''
        return super(ITableGeocompare, self).get_TableIgnoreFields()
    def put_TableCompareOptions(self, pCompareOptions):
        '''Method ITableGeocompare.put_TableCompareOptions

           INPUT
            pCompareOptions     : BSTR'''
        return super(ITableGeocompare, self).put_TableCompareOptions(pCompareOptions)
    def get_TableCompareOptions(self):
        '''Method ITableGeocompare.get_TableCompareOptions

           OUTPUT
            pCompareOptions     : BSTR*'''
        return super(ITableGeocompare, self).get_TableCompareOptions()
    def put_TableAttributeCompareTolerances(self, pCompareTolerances):
        '''Method ITableGeocompare.put_TableAttributeCompareTolerances

           INPUT
            pCompareTolerances  : BSTR'''
        return super(ITableGeocompare, self).put_TableAttributeCompareTolerances(pCompareTolerances)
    def get_TableAttributeCompareTolerances(self):
        '''Method ITableGeocompare.get_TableAttributeCompareTolerances

           OUTPUT
            pCompareTolerances  : BSTR*'''
        return super(ITableGeocompare, self).get_TableAttributeCompareTolerances()
    def GeocompareTables(self, pReport, bContinueComparisons):
        '''Method ITableGeocompare.GeocompareTables

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(ITableGeocompare, self).GeocompareTables(pReport, bContinueComparisons)
    def GeocompareTableRows(self, pReport, bContinueComparisions):
        '''Method ITableGeocompare.GeocompareTableRows

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(ITableGeocompare, self).GeocompareTableRows(pReport, bContinueComparisions)
    def GeocompareTableFields(self, pReport):
        '''Method ITableGeocompare.GeocompareTableFields

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ITableGeocompare, self).GeocompareTableFields(pReport)
    def GeocompareFieldCount(self, pReport):
        '''Method ITableGeocompare.GeocompareFieldCount

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ITableGeocompare, self).GeocompareFieldCount(pReport)
    def GeocompareRowCount(self, pReport):
        '''Method ITableGeocompare.GeocompareRowCount

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ITableGeocompare, self).GeocompareRowCount(pReport)
    TableA = property(get_TableA, putref_TableA, None)
    TableAttributeCompareTolerances = property(get_TableAttributeCompareTolerances, put_TableAttributeCompareTolerances, None)
    TableB = property(get_TableB, putref_TableB, None)
    TableCompareOptions = property(get_TableCompareOptions, put_TableCompareOptions, None)
    TableIgnoreFields = property(get_TableIgnoreFields, put_TableIgnoreFields, None)
    TableQueryFilterA = property(get_TableQueryFilterA, put_TableQueryFilterA, None)
    TableQueryFilterB = property(get_TableQueryFilterB, put_TableQueryFilterB, None)
    TableSortFieldsA = property(get_TableSortFieldsA, put_TableSortFieldsA, None)
    TableSortFieldsB = property(get_TableSortFieldsB, put_TableSortFieldsB, None)

class IFieldGeocompare(_esriGeoprocessing.IFieldGeocompare):
    _IID = uuid.UUID('4d8ab2a5-7fcb-4002-a680-be3ba1dceb03')

    def __init__(self, *args, **kw):
        super(IFieldGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FieldA(self, ppField):
        '''Method IFieldGeocompare.putref_FieldA

           INPUT
            ppField             : IField*'''
        return super(IFieldGeocompare, self).putref_FieldA(ppField)
    def get_FieldA(self):
        '''Method IFieldGeocompare.get_FieldA

           OUTPUT
            ppField             : IField**'''
        return super(IFieldGeocompare, self).get_FieldA()
    def putref_FieldB(self, ppField):
        '''Method IFieldGeocompare.putref_FieldB

           INPUT
            ppField             : IField*'''
        return super(IFieldGeocompare, self).putref_FieldB(ppField)
    def get_FieldB(self):
        '''Method IFieldGeocompare.get_FieldB

           OUTPUT
            ppField             : IField**'''
        return super(IFieldGeocompare, self).get_FieldB()
    def GeocompareFields(self, pReport):
        '''Method IFieldGeocompare.GeocompareFields

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IFieldGeocompare, self).GeocompareFields(pReport)
    FieldA = property(get_FieldA, putref_FieldA, None)
    FieldB = property(get_FieldB, putref_FieldB, None)

class IRelationshipClassGeocompare(_esriGeoprocessing.IRelationshipClassGeocompare):
    _IID = uuid.UUID('3b4613e9-6398-433a-ab2d-aaccc9d6d42b')

    def __init__(self, *args, **kw):
        super(IRelationshipClassGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RelationshipClassA(self, ppRelationshipClass):
        '''Method IRelationshipClassGeocompare.putref_RelationshipClassA

           INPUT
            ppRelationshipClass : IRelationshipClass*'''
        return super(IRelationshipClassGeocompare, self).putref_RelationshipClassA(ppRelationshipClass)
    def get_RelationshipClassA(self):
        '''Method IRelationshipClassGeocompare.get_RelationshipClassA

           OUTPUT
            ppRelationshipClass : IRelationshipClass**'''
        return super(IRelationshipClassGeocompare, self).get_RelationshipClassA()
    def putref_RelationshipClassB(self, ppRelationshipClass):
        '''Method IRelationshipClassGeocompare.putref_RelationshipClassB

           INPUT
            ppRelationshipClass : IRelationshipClass*'''
        return super(IRelationshipClassGeocompare, self).putref_RelationshipClassB(ppRelationshipClass)
    def get_RelationshipClassB(self):
        '''Method IRelationshipClassGeocompare.get_RelationshipClassB

           OUTPUT
            ppRelationshipClass : IRelationshipClass**'''
        return super(IRelationshipClassGeocompare, self).get_RelationshipClassB()
    def GeocompareRelationshipClasses(self, pReport):
        '''Method IRelationshipClassGeocompare.GeocompareRelationshipClasses

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRelationshipClassGeocompare, self).GeocompareRelationshipClasses(pReport)
    RelationshipClassA = property(get_RelationshipClassA, putref_RelationshipClassA, None)
    RelationshipClassB = property(get_RelationshipClassB, putref_RelationshipClassB, None)

class ISubtypesGeocompare(_esriGeoprocessing.ISubtypesGeocompare):
    _IID = uuid.UUID('adfd74f3-37d0-4844-a609-01fc5dd4b584')

    def __init__(self, *args, **kw):
        super(ISubtypesGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SubtypesA(self, ppSubtypes):
        '''Method ISubtypesGeocompare.putref_SubtypesA

           INPUT
            ppSubtypes          : ISubtypes*'''
        return super(ISubtypesGeocompare, self).putref_SubtypesA(ppSubtypes)
    def get_SubtypesA(self):
        '''Method ISubtypesGeocompare.get_SubtypesA

           OUTPUT
            ppSubtypes          : ISubtypes**'''
        return super(ISubtypesGeocompare, self).get_SubtypesA()
    def putref_SubtypesB(self, ppSubtypes):
        '''Method ISubtypesGeocompare.putref_SubtypesB

           INPUT
            ppSubtypes          : ISubtypes*'''
        return super(ISubtypesGeocompare, self).putref_SubtypesB(ppSubtypes)
    def get_SubtypesB(self):
        '''Method ISubtypesGeocompare.get_SubtypesB

           OUTPUT
            ppSubtypes          : ISubtypes**'''
        return super(ISubtypesGeocompare, self).get_SubtypesB()
    def GeocompareSubtypes(self, pReport):
        '''Method ISubtypesGeocompare.GeocompareSubtypes

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISubtypesGeocompare, self).GeocompareSubtypes(pReport)
    SubtypesA = property(get_SubtypesA, putref_SubtypesA, None)
    SubtypesB = property(get_SubtypesB, putref_SubtypesB, None)

class ISpatialReferenceGeocompare(_esriGeoprocessing.ISpatialReferenceGeocompare):
    _IID = uuid.UUID('d4950f0c-da60-4b51-8018-91cf1985b3b8')

    def __init__(self, *args, **kw):
        super(ISpatialReferenceGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SpatialReferenceA(self, ppSpatialReference):
        '''Method ISpatialReferenceGeocompare.putref_SpatialReferenceA

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(ISpatialReferenceGeocompare, self).putref_SpatialReferenceA(ppSpatialReference)
    def get_SpatialReferenceA(self):
        '''Method ISpatialReferenceGeocompare.get_SpatialReferenceA

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(ISpatialReferenceGeocompare, self).get_SpatialReferenceA()
    def putref_SpatialReferenceB(self, ppSpatialReference):
        '''Method ISpatialReferenceGeocompare.putref_SpatialReferenceB

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(ISpatialReferenceGeocompare, self).putref_SpatialReferenceB(ppSpatialReference)
    def get_SpatialReferenceB(self):
        '''Method ISpatialReferenceGeocompare.get_SpatialReferenceB

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(ISpatialReferenceGeocompare, self).get_SpatialReferenceB()
    def GeocompareSpatialReferences(self, pReport):
        '''Method ISpatialReferenceGeocompare.GeocompareSpatialReferences

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISpatialReferenceGeocompare, self).GeocompareSpatialReferences(pReport)
    SpatialReferenceA = property(get_SpatialReferenceA, putref_SpatialReferenceA, None)
    SpatialReferenceB = property(get_SpatialReferenceB, putref_SpatialReferenceB, None)

class IGeometryGeocompare(_esriGeoprocessing.IGeometryGeocompare):
    _IID = uuid.UUID('89736b42-9aee-4772-82ab-33ff564761b6')

    def __init__(self, *args, **kw):
        super(IGeometryGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_GeometryA(self, ppGeometry):
        '''Method IGeometryGeocompare.putref_GeometryA

           INPUT
            ppGeometry          : IGeometry*'''
        return super(IGeometryGeocompare, self).putref_GeometryA(ppGeometry)
    def get_GeometryA(self):
        '''Method IGeometryGeocompare.get_GeometryA

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(IGeometryGeocompare, self).get_GeometryA()
    def putref_GeometryB(self, ppGeometry):
        '''Method IGeometryGeocompare.putref_GeometryB

           INPUT
            ppGeometry          : IGeometry*'''
        return super(IGeometryGeocompare, self).putref_GeometryB(ppGeometry)
    def get_GeometryB(self):
        '''Method IGeometryGeocompare.get_GeometryB

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(IGeometryGeocompare, self).get_GeometryB()
    def put_GeometryXYCompareTolerance(self, pTolerance):
        '''Method IGeometryGeocompare.put_GeometryXYCompareTolerance

           INPUT
            pTolerance          : double'''
        return super(IGeometryGeocompare, self).put_GeometryXYCompareTolerance(pTolerance)
    def get_GeometryXYCompareTolerance(self):
        '''Method IGeometryGeocompare.get_GeometryXYCompareTolerance

           OUTPUT
            pTolerance          : double*'''
        return super(IGeometryGeocompare, self).get_GeometryXYCompareTolerance()
    def put_GeometryMCompareTolerance(self, pTolerance):
        '''Method IGeometryGeocompare.put_GeometryMCompareTolerance

           INPUT
            pTolerance          : double'''
        return super(IGeometryGeocompare, self).put_GeometryMCompareTolerance(pTolerance)
    def get_GeometryMCompareTolerance(self):
        '''Method IGeometryGeocompare.get_GeometryMCompareTolerance

           OUTPUT
            pTolerance          : double*'''
        return super(IGeometryGeocompare, self).get_GeometryMCompareTolerance()
    def put_GeometryZCompareTolerance(self, pTolerance):
        '''Method IGeometryGeocompare.put_GeometryZCompareTolerance

           INPUT
            pTolerance          : double'''
        return super(IGeometryGeocompare, self).put_GeometryZCompareTolerance(pTolerance)
    def get_GeometryZCompareTolerance(self):
        '''Method IGeometryGeocompare.get_GeometryZCompareTolerance

           OUTPUT
            pTolerance          : double*'''
        return super(IGeometryGeocompare, self).get_GeometryZCompareTolerance()
    def GeometryCompare(self, pReport):
        '''Method IGeometryGeocompare.GeometryCompare

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IGeometryGeocompare, self).GeometryCompare(pReport)
    GeometryA = property(get_GeometryA, putref_GeometryA, None)
    GeometryB = property(get_GeometryB, putref_GeometryB, None)
    GeometryMCompareTolerance = property(get_GeometryMCompareTolerance, put_GeometryMCompareTolerance, None)
    GeometryXYCompareTolerance = property(get_GeometryXYCompareTolerance, put_GeometryXYCompareTolerance, None)
    GeometryZCompareTolerance = property(get_GeometryZCompareTolerance, put_GeometryZCompareTolerance, None)

class IRasterDatasetGeocompare(_esriGeoprocessing.IRasterDatasetGeocompare):
    _IID = uuid.UUID('caf5b084-970b-4976-b75d-bc680deed0f8')

    def __init__(self, *args, **kw):
        super(IRasterDatasetGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RasterDatasetA(self, ppRasterDataset):
        '''Method IRasterDatasetGeocompare.putref_RasterDatasetA

           INPUT
            ppRasterDataset     : IRasterDataset*'''
        return super(IRasterDatasetGeocompare, self).putref_RasterDatasetA(ppRasterDataset)
    def get_RasterDatasetA(self):
        '''Method IRasterDatasetGeocompare.get_RasterDatasetA

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterDatasetGeocompare, self).get_RasterDatasetA()
    def putref_RasterDatasetB(self, ppRasterDataset):
        '''Method IRasterDatasetGeocompare.putref_RasterDatasetB

           INPUT
            ppRasterDataset     : IRasterDataset*'''
        return super(IRasterDatasetGeocompare, self).putref_RasterDatasetB(ppRasterDataset)
    def get_RasterDatasetB(self):
        '''Method IRasterDatasetGeocompare.get_RasterDatasetB

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterDatasetGeocompare, self).get_RasterDatasetB()
    def put_RdsCompareOptions(self, compareOptions):
        '''Method IRasterDatasetGeocompare.put_RdsCompareOptions

           INPUT
            compareOptions      : BSTR'''
        return super(IRasterDatasetGeocompare, self).put_RdsCompareOptions(compareOptions)
    def get_RdsCompareOptions(self):
        '''Method IRasterDatasetGeocompare.get_RdsCompareOptions

           OUTPUT
            compareOptions      : BSTR*'''
        return super(IRasterDatasetGeocompare, self).get_RdsCompareOptions()
    def GeocompareRasterDataset(self, pReport, bContinueComparisions):
        '''Method IRasterDatasetGeocompare.GeocompareRasterDataset

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).GeocompareRasterDataset(pReport, bContinueComparisions)
    def RasterDataset(self, pReport, bContinueComparisons):
        '''Method IRasterDatasetGeocompare.RasterDataset

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).RasterDataset(pReport, bContinueComparisons)
    def RasterBand(self, pReport, bContinueComparisons):
        '''Method IRasterDatasetGeocompare.RasterBand

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).RasterBand(pReport, bContinueComparisons)
    def RasterColormap(self, pReport, bContinueComparisons):
        '''Method IRasterDatasetGeocompare.RasterColormap

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).RasterColormap(pReport, bContinueComparisons)
    def RasterStatistics(self, pReport, bContinueComparisons):
        '''Method IRasterDatasetGeocompare.RasterStatistics

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).RasterStatistics(pReport, bContinueComparisons)
    def RdsRasterProps(self, pReport, bContinueComparisons):
        '''Method IRasterDatasetGeocompare.RdsRasterProps

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).RdsRasterProps(pReport, bContinueComparisons)
    def RdsPixelBlock(self, pReport, bContinueComparisons):
        '''Method IRasterDatasetGeocompare.RdsPixelBlock

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterDatasetGeocompare, self).RdsPixelBlock(pReport, bContinueComparisons)
    def DatasetCompressionType(self, pReport):
        '''Method IRasterDatasetGeocompare.DatasetCompressionType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).DatasetCompressionType(pReport)
    def DatasetBlockHeight(self, pReport):
        '''Method IRasterDatasetGeocompare.DatasetBlockHeight

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).DatasetBlockHeight(pReport)
    def DatasetBlockWidth(self, pReport):
        '''Method IRasterDatasetGeocompare.DatasetBlockWidth

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).DatasetBlockWidth(pReport)
    def RdsBandCollectionCount(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsBandCollectionCount

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsBandCollectionCount(pReport)
    def PyramidPresent(self, pReport):
        '''Method IRasterDatasetGeocompare.PyramidPresent

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).PyramidPresent(pReport)
    def BandAttributeTable(self, pReport):
        '''Method IRasterDatasetGeocompare.BandAttributeTable

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).BandAttributeTable(pReport)
    def BandName(self, pReport):
        '''Method IRasterDatasetGeocompare.BandName

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).BandName(pReport)
    def ColormapColors(self, pReport):
        '''Method IRasterDatasetGeocompare.ColormapColors

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).ColormapColors(pReport)
    def StatisticsIgnoredValues(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsIgnoredValues

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsIgnoredValues(pReport)
    def StatisticsIsValid(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsIsValid

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsIsValid(pReport)
    def StatisticsMaximum(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsMaximum

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsMaximum(pReport)
    def StatisticsMean(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsMean

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsMean(pReport)
    def StatisticsMedian(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsMedian

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsMedian(pReport)
    def StatisticsMinimum(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsMinimum

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsMinimum(pReport)
    def StatisticsMode(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsMode

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsMode(pReport)
    def StatisticsSkipFactorX(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsSkipFactorX

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsSkipFactorX(pReport)
    def StatisticsSkipFactorY(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsSkipFactorY

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsSkipFactorY(pReport)
    def StatisticsStandardDeviation(self, pReport):
        '''Method IRasterDatasetGeocompare.StatisticsStandardDeviation

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).StatisticsStandardDeviation(pReport)
    def RdsPropsExtent(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPropsExtent

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPropsExtent(pReport)
    def RdsPropsHeight(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPropsHeight

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPropsHeight(pReport)
    def RdsPropsNoDataValue(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPropsNoDataValue

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPropsNoDataValue(pReport)
    def RdsPropsPixelType(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPropsPixelType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPropsPixelType(pReport)
    def RdsPropsSpatialReference(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPropsSpatialReference

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPropsSpatialReference(pReport)
    def RdsPropsWidth(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPropsWidth

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPropsWidth(pReport)
    def RdsPixelBlockNoDataMask(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPixelBlockNoDataMask

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPixelBlockNoDataMask(pReport)
    def RdsPixelBlockPixelData(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsPixelBlockPixelData

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsPixelBlockPixelData(pReport)
    def RdsMetaData(self, pReport):
        '''Method IRasterDatasetGeocompare.RdsMetaData

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterDatasetGeocompare, self).RdsMetaData(pReport)
    def put_RdsIgnoreFields(self, pIgnoreFields):
        '''Method IRasterDatasetGeocompare.put_RdsIgnoreFields

           INPUT
            pIgnoreFields       : BSTR'''
        return super(IRasterDatasetGeocompare, self).put_RdsIgnoreFields(pIgnoreFields)
    def get_RdsIgnoreFields(self):
        '''Method IRasterDatasetGeocompare.get_RdsIgnoreFields

           OUTPUT
            pIgnoreFields       : BSTR*'''
        return super(IRasterDatasetGeocompare, self).get_RdsIgnoreFields()
    def put_RdsAttributeCompareTolerances(self, pCompareTolerances):
        '''Method IRasterDatasetGeocompare.put_RdsAttributeCompareTolerances

           INPUT
            pCompareTolerances  : BSTR'''
        return super(IRasterDatasetGeocompare, self).put_RdsAttributeCompareTolerances(pCompareTolerances)
    def get_RdsAttributeCompareTolerances(self):
        '''Method IRasterDatasetGeocompare.get_RdsAttributeCompareTolerances

           OUTPUT
            pCompareTolerances  : BSTR*'''
        return super(IRasterDatasetGeocompare, self).get_RdsAttributeCompareTolerances()
    def put_RdsSpecifiedCompareTolerances(self, pSpecifiedTolerances):
        '''Method IRasterDatasetGeocompare.put_RdsSpecifiedCompareTolerances

           INPUT
            pSpecifiedTolerances: BSTR'''
        return super(IRasterDatasetGeocompare, self).put_RdsSpecifiedCompareTolerances(pSpecifiedTolerances)
    def get_RdsSpecifiedCompareTolerances(self):
        '''Method IRasterDatasetGeocompare.get_RdsSpecifiedCompareTolerances

           OUTPUT
            pSpecifiedTolerances: BSTR*'''
        return super(IRasterDatasetGeocompare, self).get_RdsSpecifiedCompareTolerances()
    RasterDatasetA = property(get_RasterDatasetA, putref_RasterDatasetA, None)
    RasterDatasetB = property(get_RasterDatasetB, putref_RasterDatasetB, None)
    RdsAttributeCompareTolerances = property(get_RdsAttributeCompareTolerances, put_RdsAttributeCompareTolerances, None)
    RdsCompareOptions = property(get_RdsCompareOptions, put_RdsCompareOptions, None)
    RdsIgnoreFields = property(get_RdsIgnoreFields, put_RdsIgnoreFields, None)
    RdsSpecifiedCompareTolerances = property(get_RdsSpecifiedCompareTolerances, put_RdsSpecifiedCompareTolerances, None)

class IRasterGeocompare(_esriGeoprocessing.IRasterGeocompare):
    _IID = uuid.UUID('71e3bcff-cdd0-434a-b961-42c5a086b4cf')

    def __init__(self, *args, **kw):
        super(IRasterGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RasterA(self, ppRaster):
        '''Method IRasterGeocompare.putref_RasterA

           INPUT
            ppRaster            : IRaster*'''
        return super(IRasterGeocompare, self).putref_RasterA(ppRaster)
    def get_RasterA(self):
        '''Method IRasterGeocompare.get_RasterA

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRasterGeocompare, self).get_RasterA()
    def putref_RasterB(self, ppRaster):
        '''Method IRasterGeocompare.putref_RasterB

           INPUT
            ppRaster            : IRaster*'''
        return super(IRasterGeocompare, self).putref_RasterB(ppRaster)
    def get_RasterB(self):
        '''Method IRasterGeocompare.get_RasterB

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRasterGeocompare, self).get_RasterB()
    def put_RasterCompareOptions(self, compareOptions):
        '''Method IRasterGeocompare.put_RasterCompareOptions

           INPUT
            compareOptions      : BSTR'''
        return super(IRasterGeocompare, self).put_RasterCompareOptions(compareOptions)
    def get_RasterCompareOptions(self):
        '''Method IRasterGeocompare.get_RasterCompareOptions

           OUTPUT
            compareOptions      : BSTR*'''
        return super(IRasterGeocompare, self).get_RasterCompareOptions()
    def GeocompareRaster(self, pReport, bContinueComparisons):
        '''Method IRasterGeocompare.GeocompareRaster

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterGeocompare, self).GeocompareRaster(pReport, bContinueComparisons)
    def RasRasterProps(self, pReport, bContinueComparisons):
        '''Method IRasterGeocompare.RasRasterProps

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterGeocompare, self).RasRasterProps(pReport, bContinueComparisons)
    def RasPixelBlock(self, pReport, bContinueComparisons):
        '''Method IRasterGeocompare.RasPixelBlock

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterGeocompare, self).RasPixelBlock(pReport, bContinueComparisons)
    def RasBandCollectionCount(self, pReport):
        '''Method IRasterGeocompare.RasBandCollectionCount

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasBandCollectionCount(pReport)
    def RasPropsExtent(self, pReport):
        '''Method IRasterGeocompare.RasPropsExtent

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPropsExtent(pReport)
    def RasPropsHeight(self, pReport):
        '''Method IRasterGeocompare.RasPropsHeight

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPropsHeight(pReport)
    def RasPropsNoDataValue(self, pReport):
        '''Method IRasterGeocompare.RasPropsNoDataValue

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPropsNoDataValue(pReport)
    def RasPropsPixelType(self, pReport):
        '''Method IRasterGeocompare.RasPropsPixelType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPropsPixelType(pReport)
    def RasPropsSpatialReference(self, pReport):
        '''Method IRasterGeocompare.RasPropsSpatialReference

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPropsSpatialReference(pReport)
    def RasPropsWidth(self, pReport):
        '''Method IRasterGeocompare.RasPropsWidth

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPropsWidth(pReport)
    def RasPixelBlockNoDataMask(self, pReport):
        '''Method IRasterGeocompare.RasPixelBlockNoDataMask

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPixelBlockNoDataMask(pReport)
    def RasPixelBlockPixelData(self, pReport):
        '''Method IRasterGeocompare.RasPixelBlockPixelData

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterGeocompare, self).RasPixelBlockPixelData(pReport)
    def put_RasSpecifiedCompareTolerances(self, pSpecifiedTolerances):
        '''Method IRasterGeocompare.put_RasSpecifiedCompareTolerances

           INPUT
            pSpecifiedTolerances: BSTR'''
        return super(IRasterGeocompare, self).put_RasSpecifiedCompareTolerances(pSpecifiedTolerances)
    def get_RasSpecifiedCompareTolerances(self):
        '''Method IRasterGeocompare.get_RasSpecifiedCompareTolerances

           OUTPUT
            pSpecifiedTolerances: BSTR*'''
        return super(IRasterGeocompare, self).get_RasSpecifiedCompareTolerances()
    RasSpecifiedCompareTolerances = property(get_RasSpecifiedCompareTolerances, put_RasSpecifiedCompareTolerances, None)
    RasterA = property(get_RasterA, putref_RasterA, None)
    RasterB = property(get_RasterB, putref_RasterB, None)
    RasterCompareOptions = property(get_RasterCompareOptions, put_RasterCompareOptions, None)

class IRasterCatalogGeocompare(_esriGeoprocessing.IRasterCatalogGeocompare):
    _IID = uuid.UUID('4b909c34-ccee-4b26-bf7a-f1434fe1cb37')

    def __init__(self, *args, **kw):
        super(IRasterCatalogGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RasterCatalogA(self, ppRasterCatalog):
        '''Method IRasterCatalogGeocompare.putref_RasterCatalogA

           INPUT
            ppRasterCatalog     : IRasterCatalog*'''
        return super(IRasterCatalogGeocompare, self).putref_RasterCatalogA(ppRasterCatalog)
    def get_RasterCatalogA(self):
        '''Method IRasterCatalogGeocompare.get_RasterCatalogA

           OUTPUT
            ppRasterCatalog     : IRasterCatalog**'''
        return super(IRasterCatalogGeocompare, self).get_RasterCatalogA()
    def putref_RasterCatalogB(self, ppRasterCatalog):
        '''Method IRasterCatalogGeocompare.putref_RasterCatalogB

           INPUT
            ppRasterCatalog     : IRasterCatalog*'''
        return super(IRasterCatalogGeocompare, self).putref_RasterCatalogB(ppRasterCatalog)
    def get_RasterCatalogB(self):
        '''Method IRasterCatalogGeocompare.get_RasterCatalogB

           OUTPUT
            ppRasterCatalog     : IRasterCatalog**'''
        return super(IRasterCatalogGeocompare, self).get_RasterCatalogB()
    def put_RasterCatalogCompareOptions(self, compareOptions):
        '''Method IRasterCatalogGeocompare.put_RasterCatalogCompareOptions

           INPUT
            compareOptions      : BSTR'''
        return super(IRasterCatalogGeocompare, self).put_RasterCatalogCompareOptions(compareOptions)
    def get_RasterCatalogCompareOptions(self):
        '''Method IRasterCatalogGeocompare.get_RasterCatalogCompareOptions

           OUTPUT
            compareOptions      : BSTR*'''
        return super(IRasterCatalogGeocompare, self).get_RasterCatalogCompareOptions()
    def put_RasterCatalogIgnoreFields(self, pIgnoreFields):
        '''Method IRasterCatalogGeocompare.put_RasterCatalogIgnoreFields

           INPUT
            pIgnoreFields       : BSTR'''
        return super(IRasterCatalogGeocompare, self).put_RasterCatalogIgnoreFields(pIgnoreFields)
    def get_RasterCatalogIgnoreFields(self):
        '''Method IRasterCatalogGeocompare.get_RasterCatalogIgnoreFields

           OUTPUT
            pIgnoreFields       : BSTR*'''
        return super(IRasterCatalogGeocompare, self).get_RasterCatalogIgnoreFields()
    def put_RasterCatalogAttributeCompareTolerances(self, pCompareTolerances):
        '''Method IRasterCatalogGeocompare.put_RasterCatalogAttributeCompareTolerances

           INPUT
            pCompareTolerances  : BSTR'''
        return super(IRasterCatalogGeocompare, self).put_RasterCatalogAttributeCompareTolerances(pCompareTolerances)
    def get_RasterCatalogAttributeCompareTolerances(self):
        '''Method IRasterCatalogGeocompare.get_RasterCatalogAttributeCompareTolerances

           OUTPUT
            pCompareTolerances  : BSTR*'''
        return super(IRasterCatalogGeocompare, self).get_RasterCatalogAttributeCompareTolerances()
    def GeocompareRasterCatalog(self, pReport, bContinueComparisions):
        '''Method IRasterCatalogGeocompare.GeocompareRasterCatalog

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(IRasterCatalogGeocompare, self).GeocompareRasterCatalog(pReport, bContinueComparisions)
    def FeatureClass(self, pReport, bContinueComparisons):
        '''Method IRasterCatalogGeocompare.FeatureClass

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(IRasterCatalogGeocompare, self).FeatureClass(pReport, bContinueComparisons)
    def RasterDefIsManaged(self, pReport):
        '''Method IRasterCatalogGeocompare.RasterDefIsManaged

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterCatalogGeocompare, self).RasterDefIsManaged(pReport)
    def RasterSpatialReference(self, pReport):
        '''Method IRasterCatalogGeocompare.RasterSpatialReference

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterCatalogGeocompare, self).RasterSpatialReference(pReport)
    def FeatureRowCount(self, pReport):
        '''Method IRasterCatalogGeocompare.FeatureRowCount

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterCatalogGeocompare, self).FeatureRowCount(pReport)
    def FeatureSpatialReference(self, pReport):
        '''Method IRasterCatalogGeocompare.FeatureSpatialReference

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterCatalogGeocompare, self).FeatureSpatialReference(pReport)
    def RasterCatalogSchema(self, pReport):
        '''Method IRasterCatalogGeocompare.RasterCatalogSchema

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterCatalogGeocompare, self).RasterCatalogSchema(pReport)
    def RasterCatalogAttributes(self, pReport):
        '''Method IRasterCatalogGeocompare.RasterCatalogAttributes

           INPUT
            pReport             : IGeocompareReport*'''
        return super(IRasterCatalogGeocompare, self).RasterCatalogAttributes(pReport)
    RasterCatalogA = property(get_RasterCatalogA, putref_RasterCatalogA, None)
    RasterCatalogAttributeCompareTolerances = property(get_RasterCatalogAttributeCompareTolerances, put_RasterCatalogAttributeCompareTolerances, None)
    RasterCatalogB = property(get_RasterCatalogB, putref_RasterCatalogB, None)
    RasterCatalogCompareOptions = property(get_RasterCatalogCompareOptions, put_RasterCatalogCompareOptions, None)
    RasterCatalogIgnoreFields = property(get_RasterCatalogIgnoreFields, put_RasterCatalogIgnoreFields, None)

class IMosaicDatasetGeocompare(_esriGeoprocessing.IMosaicDatasetGeocompare):
    _IID = uuid.UUID('519fdba5-5753-4271-b5d3-a4469ce8ff6d')

    def __init__(self, *args, **kw):
        super(IMosaicDatasetGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_MosaicDatasetA(self, ppMosaicDataset):
        '''Method IMosaicDatasetGeocompare.putref_MosaicDatasetA

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(IMosaicDatasetGeocompare, self).putref_MosaicDatasetA(ppMosaicDataset)
    def get_MosaicDatasetA(self):
        '''Method IMosaicDatasetGeocompare.get_MosaicDatasetA

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IMosaicDatasetGeocompare, self).get_MosaicDatasetA()
    def putref_MosaicDatasetB(self, ppMosaicDataset):
        '''Method IMosaicDatasetGeocompare.putref_MosaicDatasetB

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(IMosaicDatasetGeocompare, self).putref_MosaicDatasetB(ppMosaicDataset)
    def get_MosaicDatasetB(self):
        '''Method IMosaicDatasetGeocompare.get_MosaicDatasetB

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IMosaicDatasetGeocompare, self).get_MosaicDatasetB()
    def put_AMDCompareOptions(self, compareOptions):
        '''Method IMosaicDatasetGeocompare.put_AMDCompareOptions

           INPUT
            compareOptions      : BSTR'''
        return super(IMosaicDatasetGeocompare, self).put_AMDCompareOptions(compareOptions)
    def get_AMDCompareOptions(self):
        '''Method IMosaicDatasetGeocompare.get_AMDCompareOptions

           OUTPUT
            compareOptions      : BSTR*'''
        return super(IMosaicDatasetGeocompare, self).get_AMDCompareOptions()
    def GeocompareMosaicDatasetAttributes(self, pReport, bContinueComparisions):
        '''Method IMosaicDatasetGeocompare.GeocompareMosaicDatasetAttributes

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(IMosaicDatasetGeocompare, self).GeocompareMosaicDatasetAttributes(pReport, bContinueComparisions)
    AMDCompareOptions = property(get_AMDCompareOptions, put_AMDCompareOptions, None)
    MosaicDatasetA = property(get_MosaicDatasetA, putref_MosaicDatasetA, None)
    MosaicDatasetB = property(get_MosaicDatasetB, putref_MosaicDatasetB, None)

class ISDERasterDatasetGeocompare(_esriGeoprocessing.ISDERasterDatasetGeocompare):
    _IID = uuid.UUID('e570be71-2e03-4dc8-ac40-58525cb6e308')

    def __init__(self, *args, **kw):
        super(ISDERasterDatasetGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SDERasterDatasetA(self, ppSDERasterDataset):
        '''Method ISDERasterDatasetGeocompare.putref_SDERasterDatasetA

           INPUT
            ppSDERasterDataset  : IRasterDataset*'''
        return super(ISDERasterDatasetGeocompare, self).putref_SDERasterDatasetA(ppSDERasterDataset)
    def get_SDERasterDatasetA(self):
        '''Method ISDERasterDatasetGeocompare.get_SDERasterDatasetA

           OUTPUT
            ppSDERasterDataset  : IRasterDataset**'''
        return super(ISDERasterDatasetGeocompare, self).get_SDERasterDatasetA()
    def putref_SDERasterDatasetB(self, ppSDERasterDataset):
        '''Method ISDERasterDatasetGeocompare.putref_SDERasterDatasetB

           INPUT
            ppSDERasterDataset  : IRasterDataset*'''
        return super(ISDERasterDatasetGeocompare, self).putref_SDERasterDatasetB(ppSDERasterDataset)
    def get_SDERasterDatasetB(self):
        '''Method ISDERasterDatasetGeocompare.get_SDERasterDatasetB

           OUTPUT
            ppSDERasterDataset  : IRasterDataset**'''
        return super(ISDERasterDatasetGeocompare, self).get_SDERasterDatasetB()
    def put_SDERdsCompareOptions(self, compareOptions):
        '''Method ISDERasterDatasetGeocompare.put_SDERdsCompareOptions

           INPUT
            compareOptions      : BSTR'''
        return super(ISDERasterDatasetGeocompare, self).put_SDERdsCompareOptions(compareOptions)
    def get_SDERdsCompareOptions(self):
        '''Method ISDERasterDatasetGeocompare.get_SDERdsCompareOptions

           OUTPUT
            compareOptions      : BSTR*'''
        return super(ISDERasterDatasetGeocompare, self).get_SDERdsCompareOptions()
    def GeocompareSDERasterDataset(self, pReport, bContinueComparisons):
        '''Method ISDERasterDatasetGeocompare.GeocompareSDERasterDataset

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisons: VARIANT_BOOL'''
        return super(ISDERasterDatasetGeocompare, self).GeocompareSDERasterDataset(pReport, bContinueComparisons)
    def RasterStorageDefCellSize(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefCellSize

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefCellSize(pReport)
    def RasterStorageDefCompressionQuality(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefCompressionQuality

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefCompressionQuality(pReport)
    def RasterStorageDefCompressionType(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefCompressionType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefCompressionType(pReport)
    def RasterStorageDefOrigin(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefOrigin

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefOrigin(pReport)
    def RasterStorageDefPyramidLevel(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefPyramidLevel

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefPyramidLevel(pReport)
    def RasterStorageDefPyramidResampleType(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefPyramidResampleType

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefPyramidResampleType(pReport)
    def RasterStorageDefTileHeight(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefTileHeight

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefTileHeight(pReport)
    def RasterStorageDefTileWidth(self, pReport):
        '''Method ISDERasterDatasetGeocompare.RasterStorageDefTileWidth

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ISDERasterDatasetGeocompare, self).RasterStorageDefTileWidth(pReport)
    SDERasterDatasetA = property(get_SDERasterDatasetA, putref_SDERasterDatasetA, None)
    SDERasterDatasetB = property(get_SDERasterDatasetB, putref_SDERasterDatasetB, None)
    SDERdsCompareOptions = property(get_SDERdsCompareOptions, put_SDERdsCompareOptions, None)

class IFileGeocompare(_esriGeoprocessing.IFileGeocompare):
    _IID = uuid.UUID('1d4ab23c-31aa-46f9-9819-d90ac78ffff7')

    def __init__(self, *args, **kw):
        super(IFileGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FileNameA(self, pFileName):
        '''Method IFileGeocompare.put_FileNameA

           INPUT
            pFileName           : BSTR'''
        return super(IFileGeocompare, self).put_FileNameA(pFileName)
    def get_FileNameA(self):
        '''Method IFileGeocompare.get_FileNameA

           OUTPUT
            pFileName           : BSTR*'''
        return super(IFileGeocompare, self).get_FileNameA()
    def put_FileNameB(self, pFileName):
        '''Method IFileGeocompare.put_FileNameB

           INPUT
            pFileName           : BSTR'''
        return super(IFileGeocompare, self).put_FileNameB(pFileName)
    def get_FileNameB(self):
        '''Method IFileGeocompare.get_FileNameB

           OUTPUT
            pFileName           : BSTR*'''
        return super(IFileGeocompare, self).get_FileNameB()
    def put_FileCompareOptions(self, pCompareOptions):
        '''Method IFileGeocompare.put_FileCompareOptions

           INPUT
            pCompareOptions     : BSTR'''
        return super(IFileGeocompare, self).put_FileCompareOptions(pCompareOptions)
    def get_FileCompareOptions(self):
        '''Method IFileGeocompare.get_FileCompareOptions

           OUTPUT
            pCompareOptions     : BSTR*'''
        return super(IFileGeocompare, self).get_FileCompareOptions()
    def GeocompareFiles(self, pReport, bContinueComparisions):
        '''Method IFileGeocompare.GeocompareFiles

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(IFileGeocompare, self).GeocompareFiles(pReport, bContinueComparisions)
    FileCompareOptions = property(get_FileCompareOptions, put_FileCompareOptions, None)
    FileNameA = property(get_FileNameA, put_FileNameA, None)
    FileNameB = property(get_FileNameB, put_FileNameB, None)

class ITinGeocompare(_esriGeoprocessing.ITinGeocompare):
    _IID = uuid.UUID('85f3e456-55d6-4a8d-9fbf-da53040f6cf1')

    def __init__(self, *args, **kw):
        super(ITinGeocompare, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_TinA(self, ppTin):
        '''Method ITinGeocompare.putref_TinA

           INPUT
            ppTin               : ITin*'''
        return super(ITinGeocompare, self).putref_TinA(ppTin)
    def get_TinA(self):
        '''Method ITinGeocompare.get_TinA

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinGeocompare, self).get_TinA()
    def putref_TinB(self, ppTin):
        '''Method ITinGeocompare.putref_TinB

           INPUT
            ppTin               : ITin*'''
        return super(ITinGeocompare, self).putref_TinB(ppTin)
    def get_TinB(self):
        '''Method ITinGeocompare.get_TinB

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinGeocompare, self).get_TinB()
    def put_TinCompareOptions(self, pCompareOptions):
        '''Method ITinGeocompare.put_TinCompareOptions

           INPUT
            pCompareOptions     : BSTR'''
        return super(ITinGeocompare, self).put_TinCompareOptions(pCompareOptions)
    def get_TinCompareOptions(self):
        '''Method ITinGeocompare.get_TinCompareOptions

           OUTPUT
            pCompareOptions     : BSTR*'''
        return super(ITinGeocompare, self).get_TinCompareOptions()
    def GeocompareTins(self, pReport, bContinueComparisions):
        '''Method ITinGeocompare.GeocompareTins

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(ITinGeocompare, self).GeocompareTins(pReport, bContinueComparisions)
    def GeocompareTinGeometry(self, pReport, bContinueComparisions):
        '''Method ITinGeocompare.GeocompareTinGeometry

           INPUTS
            pReport             : IGeocompareReport*
            bContinueComparisions: VARIANT_BOOL'''
        return super(ITinGeocompare, self).GeocompareTinGeometry(pReport, bContinueComparisions)
    def GeocompareTinProperties(self, pReport):
        '''Method ITinGeocompare.GeocompareTinProperties

           INPUT
            pReport             : IGeocompareReport*'''
        return super(ITinGeocompare, self).GeocompareTinProperties(pReport)
    TinA = property(get_TinA, putref_TinA, None)
    TinB = property(get_TinB, putref_TinB, None)
    TinCompareOptions = property(get_TinCompareOptions, put_TinCompareOptions, None)

class IGPValues(_esriGeoprocessing.IGPValues):
    _IID = uuid.UUID('8705c67f-8519-49c4-abe3-a4783d45d947')
    def get_Count(self):
        '''Method IGPValues.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPValues, self).get_Count()
    def get_Element(self, Index):
        '''Method IGPValues.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IGPValues, self).get_Element(Index)
    def Add(self, pGPValue):
        '''Method IGPValues.Add

           INPUT
            pGPValue            : IGPValue*'''
        return super(IGPValues, self).Add(pGPValue)
    def Insert(self, Index, pGPValue):
        '''Method IGPValues.Insert

           INPUTS
            Index               : long
            pGPValue            : IGPValue*'''
        return super(IGPValues, self).Insert(Index, pGPValue)
    def Remove(self, Index):
        '''Method IGPValues.Remove

           INPUT
            Index               : long'''
        return super(IGPValues, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGPValues.RemoveAll'''
        return super(IGPValues, self).RemoveAll()
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGPToolInfo2(_esriGeoprocessing.IGPToolInfo2):
    _IID = uuid.UUID('b77f9feb-2937-4bd0-b4a7-0e1d3f6317d8')

    def __init__(self, *args, **kw):
        super(IGPToolInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Description(self):
        '''Method IGPToolInfo2.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IGPToolInfo2, self).get_Description()
    def put_Description(self, Description):
        '''Method IGPToolInfo2.put_Description

           INPUT
            Description         : BSTR'''
        return super(IGPToolInfo2, self).put_Description(Description)
    Description = property(get_Description, put_Description, None)

class IGPToolInfos(_esriGeoprocessing.IGPToolInfos):
    _IID = uuid.UUID('7b12c4c1-4717-4b73-960d-2f394419d461')
    def get_Count(self):
        '''Method IGPToolInfos.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IGPToolInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IGPToolInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppInfo              : IGPToolInfo**'''
        return super(IGPToolInfos, self).get_Element(Index)
    def Add(self, pInfo):
        '''Method IGPToolInfos.Add

           INPUT
            pInfo               : IGPToolInfo*'''
        return super(IGPToolInfos, self).Add(pInfo)
    def Insert(self, Index, pInfo):
        '''Method IGPToolInfos.Insert

           INPUTS
            Index               : long
            pInfo               : IGPToolInfo*'''
        return super(IGPToolInfos, self).Insert(Index, pInfo)
    def Remove(self, Index):
        '''Method IGPToolInfos.Remove

           INPUT
            Index               : long'''
        return super(IGPToolInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGPToolInfos.RemoveAll'''
        return super(IGPToolInfos, self).RemoveAll()
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGPResult(_esriGeoprocessing.IGPResult):
    _IID = uuid.UUID('e848af8a-5b8b-45f5-b4b1-e3a0d4adb365')

    def __init__(self, *args, **kw):
        super(IGPResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Values(self):
        '''Method IGPResult.get_Values

           OUTPUT
            ppValues            : IGPValues**'''
        return super(IGPResult, self).get_Values()
    def putref_Values(self, ppValues):
        '''Method IGPResult.putref_Values

           INPUT
            ppValues            : IGPValues*'''
        return super(IGPResult, self).putref_Values(ppValues)
    def get_Messages(self):
        '''Method IGPResult.get_Messages

           OUTPUT
            ppMessages          : IJobMessages**'''
        return super(IGPResult, self).get_Messages()
    def putref_Messages(self, ppMessages):
        '''Method IGPResult.putref_Messages

           INPUT
            ppMessages          : IJobMessages*'''
        return super(IGPResult, self).putref_Messages(ppMessages)
    Messages = property(get_Messages, putref_Messages, None)
    Values = property(get_Values, putref_Values, None)

class IGPResultOptions(_esriGeoprocessing.IGPResultOptions):
    _IID = uuid.UUID('4ce28af5-6030-469c-bd35-6a6d096b4409')

    def __init__(self, *args, **kw):
        super(IGPResultOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DensifyFeatures(self):
        '''Method IGPResultOptions.get_DensifyFeatures

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IGPResultOptions, self).get_DensifyFeatures()
    def put_DensifyFeatures(self, pVal):
        '''Method IGPResultOptions.put_DensifyFeatures

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IGPResultOptions, self).put_DensifyFeatures(pVal)
    def get_TransportType(self):
        '''Method IGPResultOptions.get_TransportType

           OUTPUT
            TransportType       : esriGDSTransportType*'''
        return super(IGPResultOptions, self).get_TransportType()
    def put_TransportType(self, TransportType):
        '''Method IGPResultOptions.put_TransportType

           INPUT
            TransportType       : esriGDSTransportType'''
        return super(IGPResultOptions, self).put_TransportType(TransportType)
    DensifyFeatures = property(get_DensifyFeatures, put_DensifyFeatures, None)
    TransportType = property(get_TransportType, put_TransportType, None)

class IGPResultOptions2(_esriGeoprocessing.IGPResultOptions2):
    _IID = uuid.UUID('25842766-41a0-43c7-8718-5e74e20b562e')

    def __init__(self, *args, **kw):
        super(IGPResultOptions2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DensifyFeatures(self):
        '''Method IGPResultOptions2.get_DensifyFeatures

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IGPResultOptions2, self).get_DensifyFeatures()
    def put_DensifyFeatures(self, pVal):
        '''Method IGPResultOptions2.put_DensifyFeatures

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IGPResultOptions2, self).put_DensifyFeatures(pVal)
    def get_TransportType(self):
        '''Method IGPResultOptions2.get_TransportType

           OUTPUT
            TransportType       : esriGDSTransportType*'''
        return super(IGPResultOptions2, self).get_TransportType()
    def put_TransportType(self, TransportType):
        '''Method IGPResultOptions2.put_TransportType

           INPUT
            TransportType       : esriGDSTransportType'''
        return super(IGPResultOptions2, self).put_TransportType(TransportType)
    def get_SpatialReference(self):
        '''Method IGPResultOptions2.get_SpatialReference

           OUTPUT
            ppSpRef             : ISpatialReference**'''
        return super(IGPResultOptions2, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpRef):
        '''Method IGPResultOptions2.putref_SpatialReference

           INPUT
            ppSpRef             : ISpatialReference*'''
        return super(IGPResultOptions2, self).putref_SpatialReference(ppSpRef)
    def get_Format(self):
        '''Method IGPResultOptions2.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IGPResultOptions2, self).get_Format()
    def put_Format(self, Format):
        '''Method IGPResultOptions2.put_Format

           INPUT
            Format              : BSTR'''
        return super(IGPResultOptions2, self).put_Format(Format)
    def get_FormatProperties(self):
        '''Method IGPResultOptions2.get_FormatProperties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IGPResultOptions2, self).get_FormatProperties()
    def putref_FormatProperties(self, ppProperties):
        '''Method IGPResultOptions2.putref_FormatProperties

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IGPResultOptions2, self).putref_FormatProperties(ppProperties)
    DensifyFeatures = property(get_DensifyFeatures, put_DensifyFeatures, None)
    Format = property(get_Format, put_Format, None)
    FormatProperties = property(get_FormatProperties, putref_FormatProperties, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TransportType = property(get_TransportType, put_TransportType, None)

class IGPServer(_esriGeoprocessing.IGPServer):
    _IID = uuid.UUID('234f4a93-8516-4247-914c-57c59f1d3f5f')
    def GetToolNames(self):
        '''Method IGPServer.GetToolNames

           OUTPUT
            names               : IStringArray**'''
        return super(IGPServer, self).GetToolNames()
    def GetToolInfos(self):
        '''Method IGPServer.GetToolInfos

           OUTPUT
            infos               : IGPToolInfos**'''
        return super(IGPServer, self).GetToolInfos()
    def GetToolInfo(self, ToolName):
        '''Method IGPServer.GetToolInfo

           INPUT
            ToolName            : BSTR

           OUTPUT
            info                : IGPToolInfo**'''
        return super(IGPServer, self).GetToolInfo(ToolName)
    def GetTaskNames(self):
        '''Method IGPServer.GetTaskNames

           OUTPUT
            names               : IStringArray**'''
        return super(IGPServer, self).GetTaskNames()
    def GetTaskInfos(self):
        '''Method IGPServer.GetTaskInfos

           OUTPUT
            infos               : IGPToolInfos**'''
        return super(IGPServer, self).GetTaskInfos()
    def GetResultMapServerName(self):
        '''Method IGPServer.GetResultMapServerName

           OUTPUT
            mapServerName       : BSTR*'''
        return super(IGPServer, self).GetResultMapServerName()
    def Execute(self, ToolName, Values, pOptions):
        '''Method IGPServer.Execute

           INPUTS
            ToolName            : BSTR
            Values              : IGPValues*
            pOptions            : IGPResultOptions*

           OUTPUT
            ppResult            : IGPResult**'''
        return super(IGPServer, self).Execute(ToolName, Values, pOptions)
    def SubmitJob(self, ToolName, Values):
        '''Method IGPServer.SubmitJob

           INPUTS
            ToolName            : BSTR
            Values              : IGPValues*

           OUTPUT
            JobID               : BSTR*'''
        return super(IGPServer, self).SubmitJob(ToolName, Values)
    def GetJobStatus(self, JobID):
        '''Method IGPServer.GetJobStatus

           INPUT
            JobID               : BSTR

           OUTPUT
            Status              : esriJobStatus*'''
        return super(IGPServer, self).GetJobStatus(JobID)
    def GetJobMessages(self, JobID):
        '''Method IGPServer.GetJobMessages

           INPUT
            JobID               : BSTR

           OUTPUT
            Messages            : IJobMessages**'''
        return super(IGPServer, self).GetJobMessages(JobID)
    def GetJobResult(self, JobID, ParameterNames, pOptions):
        '''Method IGPServer.GetJobResult

           INPUTS
            JobID               : BSTR
            ParameterNames      : IStringArray*
            pOptions            : IGPResultOptions*

           OUTPUT
            ppResult            : IGPResult**'''
        return super(IGPServer, self).GetJobResult(JobID, ParameterNames, pOptions)
    def CancelJob(self, JobID):
        '''Method IGPServer.CancelJob

           INPUT
            JobID               : BSTR'''
        return super(IGPServer, self).CancelJob(JobID)
    def GetExecutionType(self):
        '''Method IGPServer.GetExecutionType

           OUTPUT
            Type                : esriExecutionType*'''
        return super(IGPServer, self).GetExecutionType()
    def GetResultWorkspace(self, JobID, TransportType):
        '''Method IGPServer.GetResultWorkspace

           INPUTS
            JobID               : BSTR
            TransportType       : esriGDSTransportType

           OUTPUT
            ppResultWorkspace   : IGDSData**'''
        return super(IGPServer, self).GetResultWorkspace(JobID, TransportType)

class IGPServer2(_esriGeoprocessing.IGPServer2):
    _IID = uuid.UUID('27909bc6-7ad1-4f5a-8e90-1bb8b95a569f')
    def GetToolNames(self):
        '''Method IGPServer2.GetToolNames

           OUTPUT
            names               : IStringArray**'''
        return super(IGPServer2, self).GetToolNames()
    def GetToolInfos(self):
        '''Method IGPServer2.GetToolInfos

           OUTPUT
            infos               : IGPToolInfos**'''
        return super(IGPServer2, self).GetToolInfos()
    def GetToolInfo(self, ToolName):
        '''Method IGPServer2.GetToolInfo

           INPUT
            ToolName            : BSTR

           OUTPUT
            info                : IGPToolInfo**'''
        return super(IGPServer2, self).GetToolInfo(ToolName)
    def GetTaskNames(self):
        '''Method IGPServer2.GetTaskNames

           OUTPUT
            names               : IStringArray**'''
        return super(IGPServer2, self).GetTaskNames()
    def GetTaskInfos(self):
        '''Method IGPServer2.GetTaskInfos

           OUTPUT
            infos               : IGPToolInfos**'''
        return super(IGPServer2, self).GetTaskInfos()
    def GetResultMapServerName(self):
        '''Method IGPServer2.GetResultMapServerName

           OUTPUT
            mapServerName       : BSTR*'''
        return super(IGPServer2, self).GetResultMapServerName()
    def Execute(self, ToolName, Values, options, envValues):
        '''Method IGPServer2.Execute

           INPUTS
            ToolName            : BSTR
            Values              : IGPValues*
            options             : IGPResultOptions*
            envValues           : IPropertySet*

           OUTPUT
            result              : IGPResult**'''
        return super(IGPServer2, self).Execute(ToolName, Values, options, envValues)
    def SubmitJob(self, ToolName, Values, options, envValues):
        '''Method IGPServer2.SubmitJob

           INPUTS
            ToolName            : BSTR
            Values              : IGPValues*
            options             : IGPResultOptions*
            envValues           : IPropertySet*

           OUTPUT
            JobID               : BSTR*'''
        return super(IGPServer2, self).SubmitJob(ToolName, Values, options, envValues)
    def GetJobStatus(self, JobID):
        '''Method IGPServer2.GetJobStatus

           INPUT
            JobID               : BSTR

           OUTPUT
            Status              : esriJobStatus*'''
        return super(IGPServer2, self).GetJobStatus(JobID)
    def GetJobMessages(self, JobID):
        '''Method IGPServer2.GetJobMessages

           INPUT
            JobID               : BSTR

           OUTPUT
            Messages            : IJobMessages**'''
        return super(IGPServer2, self).GetJobMessages(JobID)
    def GetJobResult(self, JobID, ParameterNames, pOptions):
        '''Method IGPServer2.GetJobResult

           INPUTS
            JobID               : BSTR
            ParameterNames      : IStringArray*
            pOptions            : IGPResultOptions*

           OUTPUT
            ppResult            : IGPResult**'''
        return super(IGPServer2, self).GetJobResult(JobID, ParameterNames, pOptions)
    def CancelJob(self, JobID):
        '''Method IGPServer2.CancelJob

           INPUT
            JobID               : BSTR'''
        return super(IGPServer2, self).CancelJob(JobID)
    def GetExecutionType(self):
        '''Method IGPServer2.GetExecutionType

           OUTPUT
            Type                : esriExecutionType*'''
        return super(IGPServer2, self).GetExecutionType()
    def GetResultWorkspace(self, JobID, TransportType):
        '''Method IGPServer2.GetResultWorkspace

           INPUTS
            JobID               : BSTR
            TransportType       : esriGDSTransportType

           OUTPUT
            ppResultWorkspace   : IGDSData**'''
        return super(IGPServer2, self).GetResultWorkspace(JobID, TransportType)
    def GetJobToolName(self, JobID):
        '''Method IGPServer2.GetJobToolName

           INPUT
            JobID               : BSTR

           OUTPUT
            Name                : BSTR*'''
        return super(IGPServer2, self).GetJobToolName(JobID)
    def GetJobInputValues(self, JobID, ParameterNames):
        '''Method IGPServer2.GetJobInputValues

           INPUTS
            JobID               : BSTR
            ParameterNames      : IStringArray*

           OUTPUT
            Values              : IGPValues**'''
        return super(IGPServer2, self).GetJobInputValues(JobID, ParameterNames)
    def GetJobResultOptions(self, JobID):
        '''Method IGPServer2.GetJobResultOptions

           INPUT
            JobID               : BSTR

           OUTPUT
            options             : IGPResultOptions**'''
        return super(IGPServer2, self).GetJobResultOptions(JobID)
    def GetJobEnvironmentValues(self, JobID):
        '''Method IGPServer2.GetJobEnvironmentValues

           INPUT
            JobID               : BSTR

           OUTPUT
            envValues           : IPropertySet**'''
        return super(IGPServer2, self).GetJobEnvironmentValues(JobID)
    def GetJobResultMapExtent(self, JobID):
        '''Method IGPServer2.GetJobResultMapExtent

           INPUT
            JobID               : BSTR

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGPServer2, self).GetJobResultMapExtent(JobID)

class IGPJobServerExe(_esriGeoprocessing.IGPJobServerExe):
    _IID = uuid.UUID('54220de4-3782-4d8a-b231-9bd7bc61b802')
    def HandleBinaryRequest(self, request, pTrackCancel):
        '''Method IGPJobServerExe.HandleBinaryRequest

           INPUTS
            request             : SAFEARRAY**
            pTrackCancel        : ITrackCancel*

           OUTPUT
            response            : SAFEARRAY**'''
        return super(IGPJobServerExe, self).HandleBinaryRequest(request, pTrackCancel)

class IGPServerSync(_esriGeoprocessing.IGPServerSync):
    _IID = uuid.UUID('5c93d0cc-aed8-4517-bdff-de416025fb57')
    def GetToolNames(self):
        '''Method IGPServerSync.GetToolNames

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IGPServerSync, self).GetToolNames()
    def GetToolInfo(self, ToolName):
        '''Method IGPServerSync.GetToolInfo

           INPUT
            ToolName            : BSTR

           OUTPUT
            ppInfo              : IGPToolInfo**'''
        return super(IGPServerSync, self).GetToolInfo(ToolName)
    def GetToolInfos(self):
        '''Method IGPServerSync.GetToolInfos

           OUTPUT
            ppInfos             : IGPToolInfos**'''
        return super(IGPServerSync, self).GetToolInfos()
    def Execute(self, ToolName, pValues, pOptions, pEnvValues):
        '''Method IGPServerSync.Execute

           INPUTS
            ToolName            : BSTR
            pValues             : IGPValues*
            pOptions            : IGPResultOptions*
            pEnvValues          : IPropertySet*

           OUTPUT
            ppResult            : IGPResult**'''
        return super(IGPServerSync, self).Execute(ToolName, pValues, pOptions, pEnvValues)

class IGPServerTrackCancel(_esriGeoprocessing.IGPServerTrackCancel):
    _IID = uuid.UUID('e4212b92-2537-4489-83a9-a53ede41ca8e')
    def Init(self, pJobTracker):
        '''Method IGPServerTrackCancel.Init

           INPUT
            pJobTracker         : IUnknown*'''
        return super(IGPServerTrackCancel, self).Init(pJobTracker)
    def GetJobMessages(self):
        '''Method IGPServerTrackCancel.GetJobMessages

           OUTPUT
            ppMessages          : IJobMessages**'''
        return super(IGPServerTrackCancel, self).GetJobMessages()

class IGPServerTrackCancel2(_esriGeoprocessing.IGPServerTrackCancel2):
    _IID = uuid.UUID('979f4c54-02ae-4e8d-a808-62a428e95789')

    def __init__(self, *args, **kw):
        super(IGPServerTrackCancel2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MessageLevel(self):
        '''Method IGPServerTrackCancel2.get_MessageLevel

           OUTPUT
            MessageLevel        : esriJobMessageType*'''
        return super(IGPServerTrackCancel2, self).get_MessageLevel()
    def put_MessageLevel(self, MessageLevel):
        '''Method IGPServerTrackCancel2.put_MessageLevel

           INPUT
            MessageLevel        : esriJobMessageType'''
        return super(IGPServerTrackCancel2, self).put_MessageLevel(MessageLevel)
    def Init(self, pJobTracker):
        '''Method IGPServerTrackCancel.Init (from IGPServerTrackCancel)

           INPUT
            pJobTracker         : IUnknown*'''
        return super(IGPServerTrackCancel2, self).Init(pJobTracker)
    def GetJobMessages(self):
        '''Method IGPServerTrackCancel.GetJobMessages (from IGPServerTrackCancel)

           OUTPUT
            ppMessages          : IJobMessages**'''
        return super(IGPServerTrackCancel2, self).GetJobMessages()
    MessageLevel = property(get_MessageLevel, put_MessageLevel, None)

class IGPServerExecute(_esriGeoprocessing.IGPServerExecute):
    _IID = uuid.UUID('96e7b3cc-3d42-40ad-9044-8f69f23dbdca')
    def Execute(self):
        '''Method IGPServerExecute.Execute'''
        return super(IGPServerExecute, self).Execute()
    def Shutdown(self):
        '''Method IGPServerExecute.Shutdown'''
        return super(IGPServerExecute, self).Shutdown()

class IGPServerDir(_esriGeoprocessing.IGPServerDir):
    _IID = uuid.UUID('98972648-a9a5-4e27-a00d-4907bbe0d514')
    def ExecuteDirectory(self, Path):
        '''Method IGPServerDir.ExecuteDirectory

           INPUT
            Path                : BSTR'''
        return super(IGPServerDir, self).ExecuteDirectory(Path)

class ILogUsage(_esriGeoprocessing.ILogUsage):
    _IID = uuid.UUID('7aab4665-406b-45cb-bcca-44dd4b8b2cbc')

    def __init__(self, *args, **kw):
        super(ILogUsage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UsageMeteringEnabled(self):
        '''Method ILogUsage.get_UsageMeteringEnabled

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(ILogUsage, self).get_UsageMeteringEnabled()
    def put_UsageMeteringEnabled(self, Enabled):
        '''Method ILogUsage.put_UsageMeteringEnabled

           INPUT
            Enabled             : VARIANT_BOOL'''
        return super(ILogUsage, self).put_UsageMeteringEnabled(Enabled)
    def get_TaskName(self):
        '''Method ILogUsage.get_TaskName

           OUTPUT
            TaskName            : BSTR*'''
        return super(ILogUsage, self).get_TaskName()
    def get_NumberOfObjects(self):
        '''Method ILogUsage.get_NumberOfObjects

           OUTPUT
            objects             : long*'''
        return super(ILogUsage, self).get_NumberOfObjects()
    def get_CostUnits(self):
        '''Method ILogUsage.get_CostUnits

           OUTPUT
            Units               : double*'''
        return super(ILogUsage, self).get_CostUnits()
    def LogUsageMetering(self, code, TaskName, numObjects, Units):
        '''Method ILogUsage.LogUsageMetering

           INPUTS
            code                : long
            TaskName            : BSTR
            numObjects          : long
            Units               : double'''
        return super(ILogUsage, self).LogUsageMetering(code, TaskName, numObjects, Units)
    CostUnits = property(get_CostUnits, None, None)
    NumberOfObjects = property(get_NumberOfObjects, None, None)
    TaskName = property(get_TaskName, None, None)
    UsageMeteringEnabled = property(get_UsageMeteringEnabled, put_UsageMeteringEnabled, None)

class IWPSServer(_esriGeoprocessing.IWPSServer):
    _IID = uuid.UUID('dc684999-07ef-44bd-84eb-b9f103000c1d')
    def GetData(self, httpVerb, request):
        '''Method IWPSServer.GetData

           INPUTS
            httpVerb            : esriWPSHttpVerb
            request             : BSTR

           OUTPUT
            responseUrl         : BSTR*'''
        return super(IWPSServer, self).GetData(httpVerb, request)
    def SetParameter(self, Name, Value):
        '''Method IWPSServer.SetParameter

           INPUTS
            Name                : BSTR
            Value               : BSTR'''
        return super(IWPSServer, self).SetParameter(Name, Value)

class IDBGridMask(_esriGeoprocessing.IDBGridMask):
    _IID = uuid.UUID('3e609f93-6737-44c5-8f70-8e3d2e70bc20')

    def __init__(self, *args, **kw):
        super(IDBGridMask, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MaskType(self):
        '''Method IDBGridMask.get_MaskType

           OUTPUT
            __MIDL__IDBGridMask0000: esriGMMaskType*'''
        return super(IDBGridMask, self).get_MaskType()
    def put_MaskType(self, __MIDL__IDBGridMask0000):
        '''Method IDBGridMask.put_MaskType

           INPUT
            __MIDL__IDBGridMask0000: esriGMMaskType'''
        return super(IDBGridMask, self).put_MaskType(__MIDL__IDBGridMask0000)
    def get_Width(self):
        '''Method IDBGridMask.get_Width

           OUTPUT
            __MIDL__IDBGridMask0002: double*'''
        return super(IDBGridMask, self).get_Width()
    def put_Width(self, __MIDL__IDBGridMask0002):
        '''Method IDBGridMask.put_Width

           INPUT
            __MIDL__IDBGridMask0002: double'''
        return super(IDBGridMask, self).put_Width(__MIDL__IDBGridMask0002)
    def get_Units(self):
        '''Method IDBGridMask.get_Units

           OUTPUT
            __MIDL__IDBGridMask0004: esriUnits*'''
        return super(IDBGridMask, self).get_Units()
    def put_Units(self, __MIDL__IDBGridMask0004):
        '''Method IDBGridMask.put_Units

           INPUT
            __MIDL__IDBGridMask0004: esriUnits'''
        return super(IDBGridMask, self).put_Units(__MIDL__IDBGridMask0004)
    def get_RepresentationRule(self):
        '''Method IDBGridMask.get_RepresentationRule

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IDBGridMask, self).get_RepresentationRule()
    def putref_RepresentationRule(self, repRule):
        '''Method IDBGridMask.putref_RepresentationRule

           INPUT
            repRule             : IRepresentationRule*'''
        return super(IDBGridMask, self).putref_RepresentationRule(repRule)
    MaskType = property(get_MaskType, put_MaskType, None)
    RepresentationRule = property(get_RepresentationRule, putref_RepresentationRule, None)
    Units = property(get_Units, put_Units, None)
    Width = property(get_Width, put_Width, None)

class ICoordinateSystemRecordSet(_esriGeoprocessing.ICoordinateSystemRecordSet):
    _IID = uuid.UUID('212aeb35-8422-496c-9ba2-518802392c7e')

    def __init__(self, *args, **kw):
        super(ICoordinateSystemRecordSet, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ICoordinateSystemRecordSet.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ICoordinateSystemRecordSet, self).get_Name()
    def put_Name(self, Name):
        '''Method ICoordinateSystemRecordSet.put_Name

           INPUT
            Name                : BSTR'''
        return super(ICoordinateSystemRecordSet, self).put_Name(Name)
    def get_ZoneFieldName(self):
        '''Method ICoordinateSystemRecordSet.get_ZoneFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ICoordinateSystemRecordSet, self).get_ZoneFieldName()
    def put_ZoneFieldName(self, FieldName):
        '''Method ICoordinateSystemRecordSet.put_ZoneFieldName

           INPUT
            FieldName           : BSTR'''
        return super(ICoordinateSystemRecordSet, self).put_ZoneFieldName(FieldName)
    def get_SpatialReferenceFieldName(self):
        '''Method ICoordinateSystemRecordSet.get_SpatialReferenceFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ICoordinateSystemRecordSet, self).get_SpatialReferenceFieldName()
    def put_SpatialReferenceFieldName(self, FieldName):
        '''Method ICoordinateSystemRecordSet.put_SpatialReferenceFieldName

           INPUT
            FieldName           : BSTR'''
        return super(ICoordinateSystemRecordSet, self).put_SpatialReferenceFieldName(FieldName)
    def get_Fields(self):
        '''Method ICoordinateSystemRecordSet.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(ICoordinateSystemRecordSet, self).get_Fields()
    def get_FeatureCursor(self, recycling):
        '''Method ICoordinateSystemRecordSet.get_FeatureCursor

           INPUT
            recycling           : VARIANT_BOOL

           OUTPUT
            cursor              : IFeatureCursor**'''
        return super(ICoordinateSystemRecordSet, self).get_FeatureCursor(recycling)
    def get_FeatureClass(self):
        '''Method ICoordinateSystemRecordSet.get_FeatureClass

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(ICoordinateSystemRecordSet, self).get_FeatureClass()
    def get_QueryFilter(self):
        '''Method ICoordinateSystemRecordSet.get_QueryFilter

           OUTPUT
            QueryFilter         : IQueryFilter**'''
        return super(ICoordinateSystemRecordSet, self).get_QueryFilter()
    def get_SelectionRule(self):
        '''Method ICoordinateSystemRecordSet.get_SelectionRule

           OUTPUT
            rule                : esriGMZoneSelectionRule*'''
        return super(ICoordinateSystemRecordSet, self).get_SelectionRule()
    def put_SelectionRule(self, rule):
        '''Method ICoordinateSystemRecordSet.put_SelectionRule

           INPUT
            rule                : esriGMZoneSelectionRule'''
        return super(ICoordinateSystemRecordSet, self).put_SelectionRule(rule)
    def get_Ordinal(self):
        '''Method ICoordinateSystemRecordSet.get_Ordinal

           OUTPUT
            Ordinal             : long*'''
        return super(ICoordinateSystemRecordSet, self).get_Ordinal()
    def put_Ordinal(self, Ordinal):
        '''Method ICoordinateSystemRecordSet.put_Ordinal

           INPUT
            Ordinal             : long'''
        return super(ICoordinateSystemRecordSet, self).put_Ordinal(Ordinal)
    def Init(self, FeatureClass, query, ZoneFieldName, SpatialReferenceFieldName):
        '''Method ICoordinateSystemRecordSet.Init

           INPUTS
            FeatureClass        : IFeatureClass*
            query               : IQueryFilter*
            ZoneFieldName       : BSTR
            SpatialReferenceFieldName: BSTR'''
        return super(ICoordinateSystemRecordSet, self).Init(FeatureClass, query, ZoneFieldName, SpatialReferenceFieldName)
    def Find(self, areaOfInterest):
        '''Method ICoordinateSystemRecordSet.Find

           INPUT
            areaOfInterest      : IPolygon*

           OUTPUTS
            zone                : IPolygon**
            coordSys            : ISpatialReference**'''
        return super(ICoordinateSystemRecordSet, self).Find(areaOfInterest)
    def Export(self, Workspace):
        '''Method ICoordinateSystemRecordSet.Export

           INPUT
            Workspace           : IWorkspace*

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(ICoordinateSystemRecordSet, self).Export(Workspace)
    FeatureClass = property(get_FeatureClass, None, None)
    Fields = property(get_Fields, None, None)
    Name = property(get_Name, put_Name, None)
    Ordinal = property(get_Ordinal, put_Ordinal, None)
    QueryFilter = property(get_QueryFilter, None, None)
    SelectionRule = property(get_SelectionRule, put_SelectionRule, None)
    SpatialReferenceFieldName = property(get_SpatialReferenceFieldName, put_SpatialReferenceFieldName, None)
    ZoneFieldName = property(get_ZoneFieldName, put_ZoneFieldName, None)
    FeatureCursor = IndexProperty(get_FeatureCursor, None)

class ICoordinateSystemZones(_esriGeoprocessing.ICoordinateSystemZones):
    _IID = uuid.UUID('b4cfcc63-f3dc-447d-ab72-53423fcf79cd')
    def get_Count(self):
        '''Method ICoordinateSystemZones.get_Count

           OUTPUT
            Count               : long*'''
        return super(ICoordinateSystemZones, self).get_Count()
    def get_Item(self, Index):
        '''Method ICoordinateSystemZones.get_Item

           INPUT
            Index               : long

           OUTPUT
            RecordSet           : ICoordinateSystemRecordSet**'''
        return super(ICoordinateSystemZones, self).get_Item(Index)
    def Add(self, RecordSet):
        '''Method ICoordinateSystemZones.Add

           INPUT
            RecordSet           : ICoordinateSystemRecordSet*

           OUTPUT
            newIndex            : long*'''
        return super(ICoordinateSystemZones, self).Add(RecordSet)
    def Remove(self, Index):
        '''Method ICoordinateSystemZones.Remove

           INPUT
            Index               : long'''
        return super(ICoordinateSystemZones, self).Remove(Index)
    def Find(self, Name):
        '''Method ICoordinateSystemZones.Find

           INPUT
            Name                : BSTR

           OUTPUT
            RecordSet           : ICoordinateSystemRecordSet**'''
        return super(ICoordinateSystemZones, self).Find(Name)
    Count = property(get_Count, None, None)
    Item = IndexProperty(get_Item, None)

class ISpatialReferenceCalculator(_esriGeoprocessing.ISpatialReferenceCalculator):
    _IID = uuid.UUID('971a39d2-aeba-4dbf-8405-8281b71829a6')

    def __init__(self, *args, **kw):
        super(ISpatialReferenceCalculator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Method(self):
        '''Method ISpatialReferenceCalculator.get_Method

           OUTPUT
            Method              : esriGMCoordinateSystemMethod*'''
        return super(ISpatialReferenceCalculator, self).get_Method()
    def put_Method(self, Method):
        '''Method ISpatialReferenceCalculator.put_Method

           INPUT
            Method              : esriGMCoordinateSystemMethod'''
        return super(ISpatialReferenceCalculator, self).put_Method(Method)
    def get_BaseValue(self):
        '''Method ISpatialReferenceCalculator.get_BaseValue

           OUTPUT
            spatRef             : ISpatialReference**'''
        return super(ISpatialReferenceCalculator, self).get_BaseValue()
    def put_BaseValue(self, spatRef):
        '''Method ISpatialReferenceCalculator.put_BaseValue

           INPUT
            spatRef             : ISpatialReference*'''
        return super(ISpatialReferenceCalculator, self).put_BaseValue(spatRef)
    def get_CoordinateSystemRecordSet(self):
        '''Method ISpatialReferenceCalculator.get_CoordinateSystemRecordSet

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialReferenceCalculator, self).get_CoordinateSystemRecordSet()
    def put_CoordinateSystemRecordSet(self, Name):
        '''Method ISpatialReferenceCalculator.put_CoordinateSystemRecordSet

           INPUT
            Name                : BSTR'''
        return super(ISpatialReferenceCalculator, self).put_CoordinateSystemRecordSet(Name)
    def get_Ordinal(self):
        '''Method ISpatialReferenceCalculator.get_Ordinal

           OUTPUT
            Ordinal             : long*'''
        return super(ISpatialReferenceCalculator, self).get_Ordinal()
    def put_Ordinal(self, Ordinal):
        '''Method ISpatialReferenceCalculator.put_Ordinal

           INPUT
            Ordinal             : long'''
        return super(ISpatialReferenceCalculator, self).put_Ordinal(Ordinal)
    def Calculate(self, areaOfInterest, zones):
        '''Method ISpatialReferenceCalculator.Calculate

           INPUTS
            areaOfInterest      : IPolygon*
            zones               : ICoordinateSystemZones*

           OUTPUT
            spatRef             : ISpatialReference**'''
        return super(ISpatialReferenceCalculator, self).Calculate(areaOfInterest, zones)
    BaseValue = property(get_BaseValue, put_BaseValue, None)
    CoordinateSystemRecordSet = property(get_CoordinateSystemRecordSet, put_CoordinateSystemRecordSet, None)
    Method = property(get_Method, put_Method, None)
    Ordinal = property(get_Ordinal, put_Ordinal, None)

class IDBGridPattern(_esriGeoprocessing.IDBGridPattern):
    _IID = uuid.UUID('bbd63ceb-5d0e-4b58-8127-1001d683fe7c')

    def __init__(self, *args, **kw):
        super(IDBGridPattern, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Interval(self):
        '''Method IDBGridPattern.get_Interval

           OUTPUT
            Interval            : double*'''
        return super(IDBGridPattern, self).get_Interval()
    def put_Interval(self, Interval):
        '''Method IDBGridPattern.put_Interval

           INPUT
            Interval            : double'''
        return super(IDBGridPattern, self).put_Interval(Interval)
    def get_IntervalType(self):
        '''Method IDBGridPattern.get_IntervalType

           OUTPUT
            intType             : esriGMIntervalType*'''
        return super(IDBGridPattern, self).get_IntervalType()
    def put_IntervalType(self, intType):
        '''Method IDBGridPattern.put_IntervalType

           INPUT
            intType             : esriGMIntervalType'''
        return super(IDBGridPattern, self).put_IntervalType(intType)
    def get_Units(self):
        '''Method IDBGridPattern.get_Units

           OUTPUT
            Units               : esriGMDistanceType*'''
        return super(IDBGridPattern, self).get_Units()
    def put_Units(self, Units):
        '''Method IDBGridPattern.put_Units

           INPUT
            Units               : esriGMDistanceType'''
        return super(IDBGridPattern, self).put_Units(Units)
    def get_Start(self):
        '''Method IDBGridPattern.get_Start

           OUTPUT
            Start               : double*'''
        return super(IDBGridPattern, self).get_Start()
    def put_Start(self, Start):
        '''Method IDBGridPattern.put_Start

           INPUT
            Start               : double'''
        return super(IDBGridPattern, self).put_Start(Start)
    def get_StartType(self):
        '''Method IDBGridPattern.get_StartType

           OUTPUT
            StartType           : esriGMStartType*'''
        return super(IDBGridPattern, self).get_StartType()
    def put_StartType(self, StartType):
        '''Method IDBGridPattern.put_StartType

           INPUT
            StartType           : esriGMStartType'''
        return super(IDBGridPattern, self).put_StartType(StartType)
    def get_Stop(self):
        '''Method IDBGridPattern.get_Stop

           OUTPUT
            Stop                : double*'''
        return super(IDBGridPattern, self).get_Stop()
    def put_Stop(self, Stop):
        '''Method IDBGridPattern.put_Stop

           INPUT
            Stop                : double'''
        return super(IDBGridPattern, self).put_Stop(Stop)
    def get_Gap(self):
        '''Method IDBGridPattern.get_Gap

           OUTPUT
            Gap                 : double*'''
        return super(IDBGridPattern, self).get_Gap()
    def put_Gap(self, Gap):
        '''Method IDBGridPattern.put_Gap

           INPUT
            Gap                 : double'''
        return super(IDBGridPattern, self).put_Gap(Gap)
    def get_Repetitions(self):
        '''Method IDBGridPattern.get_Repetitions

           OUTPUT
            reps                : long*'''
        return super(IDBGridPattern, self).get_Repetitions()
    def put_Repetitions(self, reps):
        '''Method IDBGridPattern.put_Repetitions

           INPUT
            reps                : long'''
        return super(IDBGridPattern, self).put_Repetitions(reps)
    def get_RepetitionsType(self):
        '''Method IDBGridPattern.get_RepetitionsType

           OUTPUT
            repType             : esriGMRepetitionType*'''
        return super(IDBGridPattern, self).get_RepetitionsType()
    def put_RepetitionsType(self, repType):
        '''Method IDBGridPattern.put_RepetitionsType

           INPUT
            repType             : esriGMRepetitionType'''
        return super(IDBGridPattern, self).put_RepetitionsType(repType)
    Gap = property(get_Gap, put_Gap, None)
    Interval = property(get_Interval, put_Interval, None)
    IntervalType = property(get_IntervalType, put_IntervalType, None)
    Repetitions = property(get_Repetitions, put_Repetitions, None)
    RepetitionsType = property(get_RepetitionsType, put_RepetitionsType, None)
    Start = property(get_Start, put_Start, None)
    StartType = property(get_StartType, put_StartType, None)
    Stop = property(get_Stop, put_Stop, None)
    Units = property(get_Units, put_Units, None)

class IDBGridAnnoGroup(_esriGeoprocessing.IDBGridAnnoGroup):
    _IID = uuid.UUID('62083bc3-ac8d-4815-b615-951b10848a2b')

    def __init__(self, *args, **kw):
        super(IDBGridAnnoGroup, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AnnoGroupID(self):
        '''Method IDBGridAnnoGroup.get_AnnoGroupID

           OUTPUT
            ID                  : long*'''
        return super(IDBGridAnnoGroup, self).get_AnnoGroupID()
    def put_AnnoGroupID(self, ID):
        '''Method IDBGridAnnoGroup.put_AnnoGroupID

           INPUT
            ID                  : long'''
        return super(IDBGridAnnoGroup, self).put_AnnoGroupID(ID)
    def get_Enabled(self):
        '''Method IDBGridAnnoGroup.get_Enabled

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(IDBGridAnnoGroup, self).get_Enabled()
    def put_Enabled(self, Enabled):
        '''Method IDBGridAnnoGroup.put_Enabled

           INPUT
            Enabled             : VARIANT_BOOL'''
        return super(IDBGridAnnoGroup, self).put_Enabled(Enabled)
    def get_Prefix(self):
        '''Method IDBGridAnnoGroup.get_Prefix

           OUTPUT
            Prefix              : BSTR*'''
        return super(IDBGridAnnoGroup, self).get_Prefix()
    def put_Prefix(self, Prefix):
        '''Method IDBGridAnnoGroup.put_Prefix

           INPUT
            Prefix              : BSTR'''
        return super(IDBGridAnnoGroup, self).put_Prefix(Prefix)
    def get_ShowLeadingZero(self):
        '''Method IDBGridAnnoGroup.get_ShowLeadingZero

           OUTPUT
            showLeading         : VARIANT_BOOL*'''
        return super(IDBGridAnnoGroup, self).get_ShowLeadingZero()
    def put_ShowLeadingZero(self, showLeading):
        '''Method IDBGridAnnoGroup.put_ShowLeadingZero

           INPUT
            showLeading         : VARIANT_BOOL'''
        return super(IDBGridAnnoGroup, self).put_ShowLeadingZero(showLeading)
    def get_ShowZeroValues(self):
        '''Method IDBGridAnnoGroup.get_ShowZeroValues

           OUTPUT
            showZero            : VARIANT_BOOL*'''
        return super(IDBGridAnnoGroup, self).get_ShowZeroValues()
    def put_ShowZeroValues(self, showZero):
        '''Method IDBGridAnnoGroup.put_ShowZeroValues

           INPUT
            showZero            : VARIANT_BOOL'''
        return super(IDBGridAnnoGroup, self).put_ShowZeroValues(showZero)
    def get_Suffix(self):
        '''Method IDBGridAnnoGroup.get_Suffix

           OUTPUT
            Suffix              : BSTR*'''
        return super(IDBGridAnnoGroup, self).get_Suffix()
    def put_Suffix(self, Suffix):
        '''Method IDBGridAnnoGroup.put_Suffix

           INPUT
            Suffix              : BSTR'''
        return super(IDBGridAnnoGroup, self).put_Suffix(Suffix)
    def get_TextSymbol(self):
        '''Method IDBGridAnnoGroup.get_TextSymbol

           OUTPUT
            ppTextSymbol        : ITextSymbol**'''
        return super(IDBGridAnnoGroup, self).get_TextSymbol()
    def putref_TextSymbol(self, ppTextSymbol):
        '''Method IDBGridAnnoGroup.putref_TextSymbol

           INPUT
            ppTextSymbol        : ITextSymbol*'''
        return super(IDBGridAnnoGroup, self).putref_TextSymbol(ppTextSymbol)
    def get_FontName(self):
        '''Method IDBGridAnnoGroup.get_FontName

           OUTPUT
            FontName            : BSTR*'''
        return super(IDBGridAnnoGroup, self).get_FontName()
    AnnoGroupID = property(get_AnnoGroupID, put_AnnoGroupID, None)
    Enabled = property(get_Enabled, put_Enabled, None)
    FontName = property(get_FontName, None, None)
    Prefix = property(get_Prefix, put_Prefix, None)
    ShowLeadingZero = property(get_ShowLeadingZero, put_ShowLeadingZero, None)
    ShowZeroValues = property(get_ShowZeroValues, put_ShowZeroValues, None)
    Suffix = property(get_Suffix, put_Suffix, None)
    TextSymbol = property(get_TextSymbol, putref_TextSymbol, None)

class IDBGridAnno(_esriGeoprocessing.IDBGridAnno):
    _IID = uuid.UUID('b1b158b1-7cc1-4515-9aa4-858c55eab9b2')

    def __init__(self, *args, **kw):
        super(IDBGridAnno, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AnnotateXY(self):
        '''Method IDBGridAnno.get_AnnotateXY

           OUTPUT
            annotate            : esriGMAnnotateXY*'''
        return super(IDBGridAnno, self).get_AnnotateXY()
    def put_AnnotateXY(self, annotate):
        '''Method IDBGridAnno.put_AnnotateXY

           INPUT
            annotate            : esriGMAnnotateXY'''
        return super(IDBGridAnno, self).put_AnnotateXY(annotate)
    def get_AnnotationID(self):
        '''Method IDBGridAnno.get_AnnotationID

           OUTPUT
            ID                  : long*'''
        return super(IDBGridAnno, self).get_AnnotationID()
    def put_AnnotationID(self, ID):
        '''Method IDBGridAnno.put_AnnotationID

           INPUT
            ID                  : long'''
        return super(IDBGridAnno, self).put_AnnotationID(ID)
    def get_Count(self):
        '''Method IDBGridAnno.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDBGridAnno, self).get_Count()
    def put_Count(self, Count):
        '''Method IDBGridAnno.put_Count

           INPUT
            Count               : long'''
        return super(IDBGridAnno, self).put_Count(Count)
    def get_Delimiter(self):
        '''Method IDBGridAnno.get_Delimiter

           OUTPUT
            delim               : BSTR*'''
        return super(IDBGridAnno, self).get_Delimiter()
    def put_Delimiter(self, delim):
        '''Method IDBGridAnno.put_Delimiter

           INPUT
            delim               : BSTR'''
        return super(IDBGridAnno, self).put_Delimiter(delim)
    def get_ExclusionList(self):
        '''Method IDBGridAnno.get_ExclusionList

           OUTPUT
            excl                : BSTR*'''
        return super(IDBGridAnno, self).get_ExclusionList()
    def put_ExclusionList(self, excl):
        '''Method IDBGridAnno.put_ExclusionList

           INPUT
            excl                : BSTR'''
        return super(IDBGridAnno, self).put_ExclusionList(excl)
    def get_Format(self):
        '''Method IDBGridAnno.get_Format

           OUTPUT
            Format              : esriGMAnnoFormat*'''
        return super(IDBGridAnno, self).get_Format()
    def put_Format(self, Format):
        '''Method IDBGridAnno.put_Format

           INPUT
            Format              : esriGMAnnoFormat'''
        return super(IDBGridAnno, self).put_Format(Format)
    def get_FormatType(self):
        '''Method IDBGridAnno.get_FormatType

           OUTPUT
            FormatType          : esriGMAnnoFormatType*'''
        return super(IDBGridAnno, self).get_FormatType()
    def put_FormatType(self, FormatType):
        '''Method IDBGridAnno.put_FormatType

           INPUT
            FormatType          : esriGMAnnoFormatType'''
        return super(IDBGridAnno, self).put_FormatType(FormatType)
    def get_Groups(self):
        '''Method IDBGridAnno.get_Groups

           OUTPUT
            ppGroups            : IArray**'''
        return super(IDBGridAnno, self).get_Groups()
    def putref_Groups(self, ppGroups):
        '''Method IDBGridAnno.putref_Groups

           INPUT
            ppGroups            : IArray*'''
        return super(IDBGridAnno, self).putref_Groups(ppGroups)
    def get_Interval(self):
        '''Method IDBGridAnno.get_Interval

           OUTPUT
            Interval            : long*'''
        return super(IDBGridAnno, self).get_Interval()
    def put_Interval(self, Interval):
        '''Method IDBGridAnno.put_Interval

           INPUT
            Interval            : long'''
        return super(IDBGridAnno, self).put_Interval(Interval)
    def get_OffsetUnits(self):
        '''Method IDBGridAnno.get_OffsetUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IDBGridAnno, self).get_OffsetUnits()
    def put_OffsetUnits(self, Units):
        '''Method IDBGridAnno.put_OffsetUnits

           INPUT
            Units               : esriUnits'''
        return super(IDBGridAnno, self).put_OffsetUnits(Units)
    def get_OffsetX(self):
        '''Method IDBGridAnno.get_OffsetX

           OUTPUT
            OffsetX             : double*'''
        return super(IDBGridAnno, self).get_OffsetX()
    def put_OffsetX(self, OffsetX):
        '''Method IDBGridAnno.put_OffsetX

           INPUT
            OffsetX             : double'''
        return super(IDBGridAnno, self).put_OffsetX(OffsetX)
    def get_OffsetY(self):
        '''Method IDBGridAnno.get_OffsetY

           OUTPUT
            OffsetY             : double*'''
        return super(IDBGridAnno, self).get_OffsetY()
    def put_OffsetY(self, OffsetY):
        '''Method IDBGridAnno.put_OffsetY

           INPUT
            OffsetY             : double'''
        return super(IDBGridAnno, self).put_OffsetY(OffsetY)
    def get_Prefix(self):
        '''Method IDBGridAnno.get_Prefix

           OUTPUT
            Prefix              : BSTR*'''
        return super(IDBGridAnno, self).get_Prefix()
    def put_Prefix(self, Prefix):
        '''Method IDBGridAnno.put_Prefix

           INPUT
            Prefix              : BSTR'''
        return super(IDBGridAnno, self).put_Prefix(Prefix)
    def get_PrefixTextSymbol(self):
        '''Method IDBGridAnno.get_PrefixTextSymbol

           OUTPUT
            ppTextSymbol        : ITextSymbol**'''
        return super(IDBGridAnno, self).get_PrefixTextSymbol()
    def putref_PrefixTextSymbol(self, ppTextSymbol):
        '''Method IDBGridAnno.putref_PrefixTextSymbol

           INPUT
            ppTextSymbol        : ITextSymbol*'''
        return super(IDBGridAnno, self).putref_PrefixTextSymbol(ppTextSymbol)
    def get_PrefixFontName(self):
        '''Method IDBGridAnno.get_PrefixFontName

           OUTPUT
            FontName            : BSTR*'''
        return super(IDBGridAnno, self).get_PrefixFontName()
    def get_RotateToDataFrame(self):
        '''Method IDBGridAnno.get_RotateToDataFrame

           OUTPUT
            rotate              : VARIANT_BOOL*'''
        return super(IDBGridAnno, self).get_RotateToDataFrame()
    def put_RotateToDataFrame(self, rotate):
        '''Method IDBGridAnno.put_RotateToDataFrame

           INPUT
            rotate              : VARIANT_BOOL'''
        return super(IDBGridAnno, self).put_RotateToDataFrame(rotate)
    def get_RotateToParentComponent(self):
        '''Method IDBGridAnno.get_RotateToParentComponent

           OUTPUT
            rotate              : VARIANT_BOOL*'''
        return super(IDBGridAnno, self).get_RotateToParentComponent()
    def put_RotateToParentComponent(self, rotate):
        '''Method IDBGridAnno.put_RotateToParentComponent

           INPUT
            rotate              : VARIANT_BOOL'''
        return super(IDBGridAnno, self).put_RotateToParentComponent(rotate)
    def get_SignificantDigits(self):
        '''Method IDBGridAnno.get_SignificantDigits

           OUTPUT
            digits              : long*'''
        return super(IDBGridAnno, self).get_SignificantDigits()
    def put_SignificantDigits(self, digits):
        '''Method IDBGridAnno.put_SignificantDigits

           INPUT
            digits              : long'''
        return super(IDBGridAnno, self).put_SignificantDigits(digits)
    def get_StartValue(self):
        '''Method IDBGridAnno.get_StartValue

           OUTPUT
            val                 : BSTR*'''
        return super(IDBGridAnno, self).get_StartValue()
    def put_StartValue(self, val):
        '''Method IDBGridAnno.put_StartValue

           INPUT
            val                 : BSTR'''
        return super(IDBGridAnno, self).put_StartValue(val)
    def get_Suffix(self):
        '''Method IDBGridAnno.get_Suffix

           OUTPUT
            Suffix              : BSTR*'''
        return super(IDBGridAnno, self).get_Suffix()
    def put_Suffix(self, Suffix):
        '''Method IDBGridAnno.put_Suffix

           INPUT
            Suffix              : BSTR'''
        return super(IDBGridAnno, self).put_Suffix(Suffix)
    def get_SuffixTextSymbol(self):
        '''Method IDBGridAnno.get_SuffixTextSymbol

           OUTPUT
            ppTextSymbol        : ITextSymbol**'''
        return super(IDBGridAnno, self).get_SuffixTextSymbol()
    def putref_SuffixTextSymbol(self, ppTextSymbol):
        '''Method IDBGridAnno.putref_SuffixTextSymbol

           INPUT
            ppTextSymbol        : ITextSymbol*'''
        return super(IDBGridAnno, self).putref_SuffixTextSymbol(ppTextSymbol)
    def get_SuffixFontName(self):
        '''Method IDBGridAnno.get_SuffixFontName

           OUTPUT
            FontName            : BSTR*'''
        return super(IDBGridAnno, self).get_SuffixFontName()
    def get_UseAbsoluteValue(self):
        '''Method IDBGridAnno.get_UseAbsoluteValue

           OUTPUT
            absolute            : VARIANT_BOOL*'''
        return super(IDBGridAnno, self).get_UseAbsoluteValue()
    def put_UseAbsoluteValue(self, absolute):
        '''Method IDBGridAnno.put_UseAbsoluteValue

           INPUT
            absolute            : VARIANT_BOOL'''
        return super(IDBGridAnno, self).put_UseAbsoluteValue(absolute)
    def get_UseCapitalLetters(self):
        '''Method IDBGridAnno.get_UseCapitalLetters

           OUTPUT
            caps                : VARIANT_BOOL*'''
        return super(IDBGridAnno, self).get_UseCapitalLetters()
    def put_UseCapitalLetters(self, caps):
        '''Method IDBGridAnno.put_UseCapitalLetters

           INPUT
            caps                : VARIANT_BOOL'''
        return super(IDBGridAnno, self).put_UseCapitalLetters(caps)
    def get_Weight(self):
        '''Method IDBGridAnno.get_Weight

           OUTPUT
            Weight              : long*'''
        return super(IDBGridAnno, self).get_Weight()
    def put_Weight(self, Weight):
        '''Method IDBGridAnno.put_Weight

           INPUT
            Weight              : long'''
        return super(IDBGridAnno, self).put_Weight(Weight)
    def AddGroup(self, group):
        '''Method IDBGridAnno.AddGroup

           INPUT
            group               : IDBGridAnnoGroup*'''
        return super(IDBGridAnno, self).AddGroup(group)
    AnnotateXY = property(get_AnnotateXY, put_AnnotateXY, None)
    AnnotationID = property(get_AnnotationID, put_AnnotationID, None)
    Count = property(get_Count, put_Count, None)
    Delimiter = property(get_Delimiter, put_Delimiter, None)
    ExclusionList = property(get_ExclusionList, put_ExclusionList, None)
    Format = property(get_Format, put_Format, None)
    FormatType = property(get_FormatType, put_FormatType, None)
    Groups = property(get_Groups, putref_Groups, None)
    Interval = property(get_Interval, put_Interval, None)
    OffsetUnits = property(get_OffsetUnits, put_OffsetUnits, None)
    OffsetX = property(get_OffsetX, put_OffsetX, None)
    OffsetY = property(get_OffsetY, put_OffsetY, None)
    Prefix = property(get_Prefix, put_Prefix, None)
    PrefixFontName = property(get_PrefixFontName, None, None)
    PrefixTextSymbol = property(get_PrefixTextSymbol, putref_PrefixTextSymbol, None)
    RotateToDataFrame = property(get_RotateToDataFrame, put_RotateToDataFrame, None)
    RotateToParentComponent = property(get_RotateToParentComponent, put_RotateToParentComponent, None)
    SignificantDigits = property(get_SignificantDigits, put_SignificantDigits, None)
    StartValue = property(get_StartValue, put_StartValue, None)
    Suffix = property(get_Suffix, put_Suffix, None)
    SuffixFontName = property(get_SuffixFontName, None, None)
    SuffixTextSymbol = property(get_SuffixTextSymbol, putref_SuffixTextSymbol, None)
    UseAbsoluteValue = property(get_UseAbsoluteValue, put_UseAbsoluteValue, None)
    UseCapitalLetters = property(get_UseCapitalLetters, put_UseCapitalLetters, None)
    Weight = property(get_Weight, put_Weight, None)

class IDBGridEndPoint(_esriGeoprocessing.IDBGridEndPoint):
    _IID = uuid.UUID('1fcc44f7-b48e-4995-9164-65a004d2a015')

    def __init__(self, *args, **kw):
        super(IDBGridEndPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EndPointID(self):
        '''Method IDBGridEndPoint.get_EndPointID

           OUTPUT
            ID                  : long*'''
        return super(IDBGridEndPoint, self).get_EndPointID()
    def put_EndPointID(self, ID):
        '''Method IDBGridEndPoint.put_EndPointID

           INPUT
            ID                  : long'''
        return super(IDBGridEndPoint, self).put_EndPointID(ID)
    def get_Anno(self):
        '''Method IDBGridEndPoint.get_Anno

           OUTPUT
            ppDBGridAnno        : IDBGridAnno**'''
        return super(IDBGridEndPoint, self).get_Anno()
    def putref_Anno(self, ppDBGridAnno):
        '''Method IDBGridEndPoint.putref_Anno

           INPUT
            ppDBGridAnno        : IDBGridAnno*'''
        return super(IDBGridEndPoint, self).putref_Anno(ppDBGridAnno)
    def get_Position(self):
        '''Method IDBGridEndPoint.get_Position

           OUTPUT
            pos                 : esriGMEndPointPosition*'''
        return super(IDBGridEndPoint, self).get_Position()
    def put_Position(self, pos):
        '''Method IDBGridEndPoint.put_Position

           INPUT
            pos                 : esriGMEndPointPosition'''
        return super(IDBGridEndPoint, self).put_Position(pos)
    def get_LineSelection(self):
        '''Method IDBGridEndPoint.get_LineSelection

           OUTPUT
            sel                 : esriGMEndPointSelection*'''
        return super(IDBGridEndPoint, self).get_LineSelection()
    def put_LineSelection(self, sel):
        '''Method IDBGridEndPoint.put_LineSelection

           INPUT
            sel                 : esriGMEndPointSelection'''
        return super(IDBGridEndPoint, self).put_LineSelection(sel)
    def get_RepresentationRule(self):
        '''Method IDBGridEndPoint.get_RepresentationRule

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IDBGridEndPoint, self).get_RepresentationRule()
    def putref_RepresentationRule(self, repRule):
        '''Method IDBGridEndPoint.putref_RepresentationRule

           INPUT
            repRule             : IRepresentationRule*'''
        return super(IDBGridEndPoint, self).putref_RepresentationRule(repRule)
    Anno = property(get_Anno, putref_Anno, None)
    EndPointID = property(get_EndPointID, put_EndPointID, None)
    LineSelection = property(get_LineSelection, put_LineSelection, None)
    Position = property(get_Position, put_Position, None)
    RepresentationRule = property(get_RepresentationRule, putref_RepresentationRule, None)

class IDBGridTick(_esriGeoprocessing.IDBGridTick):
    _IID = uuid.UUID('c21b3df9-2c1e-48de-b1ce-a7214306b650')

    def __init__(self, *args, **kw):
        super(IDBGridTick, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EndPoints(self):
        '''Method IDBGridTick.get_EndPoints

           OUTPUT
            ppEndPoints         : IArray**'''
        return super(IDBGridTick, self).get_EndPoints()
    def get_AncillaryCoordinateSystem(self):
        '''Method IDBGridTick.get_AncillaryCoordinateSystem

           OUTPUT
            gridSR              : ISpatialReferenceCalculator**'''
        return super(IDBGridTick, self).get_AncillaryCoordinateSystem()
    def putref_AncillaryCoordinateSystem(self, gridSR):
        '''Method IDBGridTick.putref_AncillaryCoordinateSystem

           INPUT
            gridSR              : ISpatialReferenceCalculator*'''
        return super(IDBGridTick, self).putref_AncillaryCoordinateSystem(gridSR)
    def get_Pattern(self):
        '''Method IDBGridTick.get_Pattern

           OUTPUT
            Pattern             : IDBGridPattern**'''
        return super(IDBGridTick, self).get_Pattern()
    def put_Pattern(self, Pattern):
        '''Method IDBGridTick.put_Pattern

           INPUT
            Pattern             : IDBGridPattern*'''
        return super(IDBGridTick, self).put_Pattern(Pattern)
    def get_Angle(self):
        '''Method IDBGridTick.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IDBGridTick, self).get_Angle()
    def put_Angle(self, Angle):
        '''Method IDBGridTick.put_Angle

           INPUT
            Angle               : double'''
        return super(IDBGridTick, self).put_Angle(Angle)
    def get_AngleType(self):
        '''Method IDBGridTick.get_AngleType

           OUTPUT
            AngleType           : esriGMAngleType*'''
        return super(IDBGridTick, self).get_AngleType()
    def put_AngleType(self, AngleType):
        '''Method IDBGridTick.put_AngleType

           INPUT
            AngleType           : esriGMAngleType'''
        return super(IDBGridTick, self).put_AngleType(AngleType)
    def get_Corner(self):
        '''Method IDBGridTick.get_Corner

           OUTPUT
            Corner              : esriGMTickType*'''
        return super(IDBGridTick, self).get_Corner()
    def put_Corner(self, Corner):
        '''Method IDBGridTick.put_Corner

           INPUT
            Corner              : esriGMTickType'''
        return super(IDBGridTick, self).put_Corner(Corner)
    def get_CornerType(self):
        '''Method IDBGridTick.get_CornerType

           OUTPUT
            CornerType          : esriGMTickCornerType*'''
        return super(IDBGridTick, self).get_CornerType()
    def put_CornerType(self, CornerType):
        '''Method IDBGridTick.put_CornerType

           INPUT
            CornerType          : esriGMTickCornerType'''
        return super(IDBGridTick, self).put_CornerType(CornerType)
    def get_Direction(self):
        '''Method IDBGridTick.get_Direction

           OUTPUT
            dir                 : esriGMTickDirection*'''
        return super(IDBGridTick, self).get_Direction()
    def put_Direction(self, dir):
        '''Method IDBGridTick.put_Direction

           INPUT
            dir                 : esriGMTickDirection'''
        return super(IDBGridTick, self).put_Direction(dir)
    def get_TickID(self):
        '''Method IDBGridTick.get_TickID

           OUTPUT
            ID                  : long*'''
        return super(IDBGridTick, self).get_TickID()
    def put_TickID(self, ID):
        '''Method IDBGridTick.put_TickID

           INPUT
            ID                  : long'''
        return super(IDBGridTick, self).put_TickID(ID)
    def get_Length(self):
        '''Method IDBGridTick.get_Length

           OUTPUT
            len                 : double*'''
        return super(IDBGridTick, self).get_Length()
    def put_Length(self, len):
        '''Method IDBGridTick.put_Length

           INPUT
            len                 : double'''
        return super(IDBGridTick, self).put_Length(len)
    def get_LengthUnits(self):
        '''Method IDBGridTick.get_LengthUnits

           OUTPUT
            Units               : esriGMDistanceType*'''
        return super(IDBGridTick, self).get_LengthUnits()
    def put_LengthUnits(self, Units):
        '''Method IDBGridTick.put_LengthUnits

           INPUT
            Units               : esriGMDistanceType'''
        return super(IDBGridTick, self).put_LengthUnits(Units)
    def get_Offset(self):
        '''Method IDBGridTick.get_Offset

           OUTPUT
            Offset              : double*'''
        return super(IDBGridTick, self).get_Offset()
    def put_Offset(self, Offset):
        '''Method IDBGridTick.put_Offset

           INPUT
            Offset              : double'''
        return super(IDBGridTick, self).put_Offset(Offset)
    def get_OffsetUnits(self):
        '''Method IDBGridTick.get_OffsetUnits

           OUTPUT
            Units               : esriGMDistanceType*'''
        return super(IDBGridTick, self).get_OffsetUnits()
    def put_OffsetUnits(self, Units):
        '''Method IDBGridTick.put_OffsetUnits

           INPUT
            Units               : esriGMDistanceType'''
        return super(IDBGridTick, self).put_OffsetUnits(Units)
    def get_Orientation(self):
        '''Method IDBGridTick.get_Orientation

           OUTPUT
            orient              : esriGMOrientation*'''
        return super(IDBGridTick, self).get_Orientation()
    def put_Orientation(self, orient):
        '''Method IDBGridTick.put_Orientation

           INPUT
            orient              : esriGMOrientation'''
        return super(IDBGridTick, self).put_Orientation(orient)
    def get_RepresentationRule(self):
        '''Method IDBGridTick.get_RepresentationRule

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IDBGridTick, self).get_RepresentationRule()
    def putref_RepresentationRule(self, repRule):
        '''Method IDBGridTick.putref_RepresentationRule

           INPUT
            repRule             : IRepresentationRule*'''
        return super(IDBGridTick, self).putref_RepresentationRule(repRule)
    def AddEndPoint(self, endPoint):
        '''Method IDBGridTick.AddEndPoint

           INPUT
            endPoint            : IDBGridEndPoint*'''
        return super(IDBGridTick, self).AddEndPoint(endPoint)
    AncillaryCoordinateSystem = property(get_AncillaryCoordinateSystem, putref_AncillaryCoordinateSystem, None)
    Angle = property(get_Angle, put_Angle, None)
    AngleType = property(get_AngleType, put_AngleType, None)
    Corner = property(get_Corner, put_Corner, None)
    CornerType = property(get_CornerType, put_CornerType, None)
    Direction = property(get_Direction, put_Direction, None)
    EndPoints = property(get_EndPoints, None, None)
    Length = property(get_Length, put_Length, None)
    LengthUnits = property(get_LengthUnits, put_LengthUnits, None)
    Offset = property(get_Offset, put_Offset, None)
    OffsetUnits = property(get_OffsetUnits, put_OffsetUnits, None)
    Orientation = property(get_Orientation, put_Orientation, None)
    Pattern = property(get_Pattern, put_Pattern, None)
    RepresentationRule = property(get_RepresentationRule, putref_RepresentationRule, None)
    TickID = property(get_TickID, put_TickID, None)

class IDBGridLine(_esriGeoprocessing.IDBGridLine):
    _IID = uuid.UUID('b6cc4390-c80c-45f9-b62d-9c5b3266dc61')

    def __init__(self, *args, **kw):
        super(IDBGridLine, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EndPoints(self):
        '''Method IDBGridLine.get_EndPoints

           OUTPUT
            ppEndPoints         : IArray**'''
        return super(IDBGridLine, self).get_EndPoints()
    def get_Ticks(self):
        '''Method IDBGridLine.get_Ticks

           OUTPUT
            ppTicks             : IArray**'''
        return super(IDBGridLine, self).get_Ticks()
    def get_AncillaryCoordinateSystem(self):
        '''Method IDBGridLine.get_AncillaryCoordinateSystem

           OUTPUT
            gridSR              : ISpatialReferenceCalculator**'''
        return super(IDBGridLine, self).get_AncillaryCoordinateSystem()
    def putref_AncillaryCoordinateSystem(self, gridSR):
        '''Method IDBGridLine.putref_AncillaryCoordinateSystem

           INPUT
            gridSR              : ISpatialReferenceCalculator*'''
        return super(IDBGridLine, self).putref_AncillaryCoordinateSystem(gridSR)
    def get_Pattern(self):
        '''Method IDBGridLine.get_Pattern

           OUTPUT
            Pattern             : IDBGridPattern**'''
        return super(IDBGridLine, self).get_Pattern()
    def put_Pattern(self, Pattern):
        '''Method IDBGridLine.put_Pattern

           INPUT
            Pattern             : IDBGridPattern*'''
        return super(IDBGridLine, self).put_Pattern(Pattern)
    def get_LineID(self):
        '''Method IDBGridLine.get_LineID

           OUTPUT
            ID                  : long*'''
        return super(IDBGridLine, self).get_LineID()
    def put_LineID(self, ID):
        '''Method IDBGridLine.put_LineID

           INPUT
            ID                  : long'''
        return super(IDBGridLine, self).put_LineID(ID)
    def get_Orientation(self):
        '''Method IDBGridLine.get_Orientation

           OUTPUT
            orient              : esriGMOrientation*'''
        return super(IDBGridLine, self).get_Orientation()
    def put_Orientation(self, orient):
        '''Method IDBGridLine.put_Orientation

           INPUT
            orient              : esriGMOrientation'''
        return super(IDBGridLine, self).put_Orientation(orient)
    def get_RepresentationRule(self):
        '''Method IDBGridLine.get_RepresentationRule

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IDBGridLine, self).get_RepresentationRule()
    def putref_RepresentationRule(self, repRule):
        '''Method IDBGridLine.putref_RepresentationRule

           INPUT
            repRule             : IRepresentationRule*'''
        return super(IDBGridLine, self).putref_RepresentationRule(repRule)
    def AddEndPoint(self, endPoint):
        '''Method IDBGridLine.AddEndPoint

           INPUT
            endPoint            : IDBGridEndPoint*'''
        return super(IDBGridLine, self).AddEndPoint(endPoint)
    def AddTick(self, tick):
        '''Method IDBGridLine.AddTick

           INPUT
            tick                : IDBGridTick*'''
        return super(IDBGridLine, self).AddTick(tick)
    AncillaryCoordinateSystem = property(get_AncillaryCoordinateSystem, putref_AncillaryCoordinateSystem, None)
    EndPoints = property(get_EndPoints, None, None)
    LineID = property(get_LineID, put_LineID, None)
    Orientation = property(get_Orientation, put_Orientation, None)
    Pattern = property(get_Pattern, put_Pattern, None)
    RepresentationRule = property(get_RepresentationRule, putref_RepresentationRule, None)
    Ticks = property(get_Ticks, None, None)

class IDBGridPoint(_esriGeoprocessing.IDBGridPoint):
    _IID = uuid.UUID('71cc3d3d-6726-407d-a258-3129df85d001')

    def __init__(self, *args, **kw):
        super(IDBGridPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Anno(self):
        '''Method IDBGridPoint.get_Anno

           OUTPUT
            ppDBGridAnno        : IDBGridAnno**'''
        return super(IDBGridPoint, self).get_Anno()
    def putref_Anno(self, ppDBGridAnno):
        '''Method IDBGridPoint.putref_Anno

           INPUT
            ppDBGridAnno        : IDBGridAnno*'''
        return super(IDBGridPoint, self).putref_Anno(ppDBGridAnno)
    def get_AncillaryCoordinateSystem(self):
        '''Method IDBGridPoint.get_AncillaryCoordinateSystem

           OUTPUT
            gridSR              : ISpatialReferenceCalculator**'''
        return super(IDBGridPoint, self).get_AncillaryCoordinateSystem()
    def putref_AncillaryCoordinateSystem(self, gridSR):
        '''Method IDBGridPoint.putref_AncillaryCoordinateSystem

           INPUT
            gridSR              : ISpatialReferenceCalculator*'''
        return super(IDBGridPoint, self).putref_AncillaryCoordinateSystem(gridSR)
    def get_PatternX(self):
        '''Method IDBGridPoint.get_PatternX

           OUTPUT
            Pattern             : IDBGridPattern**'''
        return super(IDBGridPoint, self).get_PatternX()
    def put_PatternX(self, Pattern):
        '''Method IDBGridPoint.put_PatternX

           INPUT
            Pattern             : IDBGridPattern*'''
        return super(IDBGridPoint, self).put_PatternX(Pattern)
    def get_PatternY(self):
        '''Method IDBGridPoint.get_PatternY

           OUTPUT
            Pattern             : IDBGridPattern**'''
        return super(IDBGridPoint, self).get_PatternY()
    def put_PatternY(self, Pattern):
        '''Method IDBGridPoint.put_PatternY

           INPUT
            Pattern             : IDBGridPattern*'''
        return super(IDBGridPoint, self).put_PatternY(Pattern)
    def get_Angle(self):
        '''Method IDBGridPoint.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IDBGridPoint, self).get_Angle()
    def put_Angle(self, Angle):
        '''Method IDBGridPoint.put_Angle

           INPUT
            Angle               : double'''
        return super(IDBGridPoint, self).put_Angle(Angle)
    def get_AngleType(self):
        '''Method IDBGridPoint.get_AngleType

           OUTPUT
            AngleType           : esriGMAngleType*'''
        return super(IDBGridPoint, self).get_AngleType()
    def put_AngleType(self, AngleType):
        '''Method IDBGridPoint.put_AngleType

           INPUT
            AngleType           : esriGMAngleType'''
        return super(IDBGridPoint, self).put_AngleType(AngleType)
    def get_PointID(self):
        '''Method IDBGridPoint.get_PointID

           OUTPUT
            ID                  : long*'''
        return super(IDBGridPoint, self).get_PointID()
    def put_PointID(self, ID):
        '''Method IDBGridPoint.put_PointID

           INPUT
            ID                  : long'''
        return super(IDBGridPoint, self).put_PointID(ID)
    def get_RepresentationRule(self):
        '''Method IDBGridPoint.get_RepresentationRule

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IDBGridPoint, self).get_RepresentationRule()
    def putref_RepresentationRule(self, repRule):
        '''Method IDBGridPoint.putref_RepresentationRule

           INPUT
            repRule             : IRepresentationRule*'''
        return super(IDBGridPoint, self).putref_RepresentationRule(repRule)
    AncillaryCoordinateSystem = property(get_AncillaryCoordinateSystem, putref_AncillaryCoordinateSystem, None)
    Angle = property(get_Angle, put_Angle, None)
    AngleType = property(get_AngleType, put_AngleType, None)
    Anno = property(get_Anno, putref_Anno, None)
    PatternX = property(get_PatternX, put_PatternX, None)
    PatternY = property(get_PatternY, put_PatternY, None)
    PointID = property(get_PointID, put_PointID, None)
    RepresentationRule = property(get_RepresentationRule, putref_RepresentationRule, None)

class IDBGridSegment(_esriGeoprocessing.IDBGridSegment):
    _IID = uuid.UUID('9ba2ff0f-29b4-435f-b2de-2eaa62f70506')

    def __init__(self, *args, **kw):
        super(IDBGridSegment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EndPoints(self):
        '''Method IDBGridSegment.get_EndPoints

           OUTPUT
            ppGridEndPoints     : IArray**'''
        return super(IDBGridSegment, self).get_EndPoints()
    def get_Ticks(self):
        '''Method IDBGridSegment.get_Ticks

           OUTPUT
            ppGridTicks         : IArray**'''
        return super(IDBGridSegment, self).get_Ticks()
    def get_IsSection(self):
        '''Method IDBGridSegment.get_IsSection

           OUTPUT
            section             : VARIANT_BOOL*'''
        return super(IDBGridSegment, self).get_IsSection()
    def put_IsSection(self, section):
        '''Method IDBGridSegment.put_IsSection

           INPUT
            section             : VARIANT_BOOL'''
        return super(IDBGridSegment, self).put_IsSection(section)
    def get_ZoneBoundary(self):
        '''Method IDBGridSegment.get_ZoneBoundary

           OUTPUT
            ZoneBoundary        : VARIANT_BOOL*'''
        return super(IDBGridSegment, self).get_ZoneBoundary()
    def put_ZoneBoundary(self, ZoneBoundary):
        '''Method IDBGridSegment.put_ZoneBoundary

           INPUT
            ZoneBoundary        : VARIANT_BOOL'''
        return super(IDBGridSegment, self).put_ZoneBoundary(ZoneBoundary)
    def get_IsSharedChild(self):
        '''Method IDBGridSegment.get_IsSharedChild

           OUTPUT
            shared              : VARIANT_BOOL*'''
        return super(IDBGridSegment, self).get_IsSharedChild()
    def put_IsSharedChild(self, shared):
        '''Method IDBGridSegment.put_IsSharedChild

           INPUT
            shared              : VARIANT_BOOL'''
        return super(IDBGridSegment, self).put_IsSharedChild(shared)
    def get_SectionLength(self):
        '''Method IDBGridSegment.get_SectionLength

           OUTPUT
            len                 : double*'''
        return super(IDBGridSegment, self).get_SectionLength()
    def put_SectionLength(self, len):
        '''Method IDBGridSegment.put_SectionLength

           INPUT
            len                 : double'''
        return super(IDBGridSegment, self).put_SectionLength(len)
    def get_SectionLengthUnits(self):
        '''Method IDBGridSegment.get_SectionLengthUnits

           OUTPUT
            lenUnits            : esriGMDistanceType*'''
        return super(IDBGridSegment, self).get_SectionLengthUnits()
    def put_SectionLengthUnits(self, lenUnits):
        '''Method IDBGridSegment.put_SectionLengthUnits

           INPUT
            lenUnits            : esriGMDistanceType'''
        return super(IDBGridSegment, self).put_SectionLengthUnits(lenUnits)
    def get_SectionOffset(self):
        '''Method IDBGridSegment.get_SectionOffset

           OUTPUT
            Offset              : double*'''
        return super(IDBGridSegment, self).get_SectionOffset()
    def put_SectionOffset(self, Offset):
        '''Method IDBGridSegment.put_SectionOffset

           INPUT
            Offset              : double'''
        return super(IDBGridSegment, self).put_SectionOffset(Offset)
    def get_SectionOffsetUnits(self):
        '''Method IDBGridSegment.get_SectionOffsetUnits

           OUTPUT
            OffsetUnits         : esriGMDistanceType*'''
        return super(IDBGridSegment, self).get_SectionOffsetUnits()
    def put_SectionOffsetUnits(self, OffsetUnits):
        '''Method IDBGridSegment.put_SectionOffsetUnits

           INPUT
            OffsetUnits         : esriGMDistanceType'''
        return super(IDBGridSegment, self).put_SectionOffsetUnits(OffsetUnits)
    def get_SectionOrigin(self):
        '''Method IDBGridSegment.get_SectionOrigin

           OUTPUT
            origin              : esriGMSectionOrigin*'''
        return super(IDBGridSegment, self).get_SectionOrigin()
    def put_SectionOrigin(self, origin):
        '''Method IDBGridSegment.put_SectionOrigin

           INPUT
            origin              : esriGMSectionOrigin'''
        return super(IDBGridSegment, self).put_SectionOrigin(origin)
    def get_AncillaryCoordinateSystem(self):
        '''Method IDBGridSegment.get_AncillaryCoordinateSystem

           OUTPUT
            gridSR              : ISpatialReferenceCalculator**'''
        return super(IDBGridSegment, self).get_AncillaryCoordinateSystem()
    def putref_AncillaryCoordinateSystem(self, gridSR):
        '''Method IDBGridSegment.putref_AncillaryCoordinateSystem

           INPUT
            gridSR              : ISpatialReferenceCalculator*'''
        return super(IDBGridSegment, self).putref_AncillaryCoordinateSystem(gridSR)
    def get_Pattern(self):
        '''Method IDBGridSegment.get_Pattern

           OUTPUT
            Pattern             : IDBGridPattern**'''
        return super(IDBGridSegment, self).get_Pattern()
    def put_Pattern(self, Pattern):
        '''Method IDBGridSegment.put_Pattern

           INPUT
            Pattern             : IDBGridPattern*'''
        return super(IDBGridSegment, self).put_Pattern(Pattern)
    def get_RepresentationRule(self):
        '''Method IDBGridSegment.get_RepresentationRule

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IDBGridSegment, self).get_RepresentationRule()
    def putref_RepresentationRule(self, repRule):
        '''Method IDBGridSegment.putref_RepresentationRule

           INPUT
            repRule             : IRepresentationRule*'''
        return super(IDBGridSegment, self).putref_RepresentationRule(repRule)
    def get_Orientation(self):
        '''Method IDBGridSegment.get_Orientation

           OUTPUT
            orient              : esriGMOrientation*'''
        return super(IDBGridSegment, self).get_Orientation()
    def put_Orientation(self, orient):
        '''Method IDBGridSegment.put_Orientation

           INPUT
            orient              : esriGMOrientation'''
        return super(IDBGridSegment, self).put_Orientation(orient)
    def get_SegmentType(self):
        '''Method IDBGridSegment.get_SegmentType

           OUTPUT
            Type                : esriGMSegmentType*'''
        return super(IDBGridSegment, self).get_SegmentType()
    def put_SegmentType(self, Type):
        '''Method IDBGridSegment.put_SegmentType

           INPUT
            Type                : esriGMSegmentType'''
        return super(IDBGridSegment, self).put_SegmentType(Type)
    def get_SharedChildren(self):
        '''Method IDBGridSegment.get_SharedChildren

           OUTPUT
            ppChildren          : ILongArray**'''
        return super(IDBGridSegment, self).get_SharedChildren()
    def putref_SharedChildren(self, ppChildren):
        '''Method IDBGridSegment.putref_SharedChildren

           INPUT
            ppChildren          : ILongArray*'''
        return super(IDBGridSegment, self).putref_SharedChildren(ppChildren)
    def AddEndPoint(self, endPoint):
        '''Method IDBGridSegment.AddEndPoint

           INPUT
            endPoint            : IDBGridEndPoint*'''
        return super(IDBGridSegment, self).AddEndPoint(endPoint)
    def AddTick(self, tick):
        '''Method IDBGridSegment.AddTick

           INPUT
            tick                : IDBGridTick*'''
        return super(IDBGridSegment, self).AddTick(tick)
    def AddSharedChild(self, child):
        '''Method IDBGridSegment.AddSharedChild

           INPUT
            child               : long'''
        return super(IDBGridSegment, self).AddSharedChild(child)
    def get_AngleRangeMin(self):
        '''Method IDBGridSegment.get_AngleRangeMin

           OUTPUT
            Angle               : double*'''
        return super(IDBGridSegment, self).get_AngleRangeMin()
    def put_AngleRangeMin(self, Angle):
        '''Method IDBGridSegment.put_AngleRangeMin

           INPUT
            Angle               : double'''
        return super(IDBGridSegment, self).put_AngleRangeMin(Angle)
    def get_AngleRangeMax(self):
        '''Method IDBGridSegment.get_AngleRangeMax

           OUTPUT
            Angle               : double*'''
        return super(IDBGridSegment, self).get_AngleRangeMax()
    def put_AngleRangeMax(self, Angle):
        '''Method IDBGridSegment.put_AngleRangeMax

           INPUT
            Angle               : double'''
        return super(IDBGridSegment, self).put_AngleRangeMax(Angle)
    AncillaryCoordinateSystem = property(get_AncillaryCoordinateSystem, putref_AncillaryCoordinateSystem, None)
    AngleRangeMax = property(get_AngleRangeMax, put_AngleRangeMax, None)
    AngleRangeMin = property(get_AngleRangeMin, put_AngleRangeMin, None)
    EndPoints = property(get_EndPoints, None, None)
    IsSection = property(get_IsSection, put_IsSection, None)
    IsSharedChild = property(get_IsSharedChild, put_IsSharedChild, None)
    Orientation = property(get_Orientation, put_Orientation, None)
    Pattern = property(get_Pattern, put_Pattern, None)
    RepresentationRule = property(get_RepresentationRule, putref_RepresentationRule, None)
    SectionLength = property(get_SectionLength, put_SectionLength, None)
    SectionLengthUnits = property(get_SectionLengthUnits, put_SectionLengthUnits, None)
    SectionOffset = property(get_SectionOffset, put_SectionOffset, None)
    SectionOffsetUnits = property(get_SectionOffsetUnits, put_SectionOffsetUnits, None)
    SectionOrigin = property(get_SectionOrigin, put_SectionOrigin, None)
    SegmentType = property(get_SegmentType, put_SegmentType, None)
    SharedChildren = property(get_SharedChildren, putref_SharedChildren, None)
    Ticks = property(get_Ticks, None, None)
    ZoneBoundary = property(get_ZoneBoundary, put_ZoneBoundary, None)

class IDBGridNeatline(_esriGeoprocessing.IDBGridNeatline):
    _IID = uuid.UUID('cb3fa937-8da2-447a-92a7-7ec5868890f9')

    def __init__(self, *args, **kw):
        super(IDBGridNeatline, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Gridlines(self):
        '''Method IDBGridNeatline.get_Gridlines

           OUTPUT
            __MIDL__IDBGridNeatline0000: IArray**'''
        return super(IDBGridNeatline, self).get_Gridlines()
    def get_Points(self):
        '''Method IDBGridNeatline.get_Points

           OUTPUT
            __MIDL__IDBGridNeatline0001: IArray**'''
        return super(IDBGridNeatline, self).get_Points()
    def get_Segments(self):
        '''Method IDBGridNeatline.get_Segments

           OUTPUT
            __MIDL__IDBGridNeatline0002: IArray**'''
        return super(IDBGridNeatline, self).get_Segments()
    def get_Densification(self):
        '''Method IDBGridNeatline.get_Densification

           OUTPUT
            densificationType   : esriGMNeatlineDensificationType*'''
        return super(IDBGridNeatline, self).get_Densification()
    def put_Densification(self, densificationType):
        '''Method IDBGridNeatline.put_Densification

           INPUT
            densificationType   : esriGMNeatlineDensificationType'''
        return super(IDBGridNeatline, self).put_Densification(densificationType)
    def get_Offset(self):
        '''Method IDBGridNeatline.get_Offset

           OUTPUT
            __MIDL__IDBGridNeatline0003: double*'''
        return super(IDBGridNeatline, self).get_Offset()
    def put_Offset(self, __MIDL__IDBGridNeatline0003):
        '''Method IDBGridNeatline.put_Offset

           INPUT
            __MIDL__IDBGridNeatline0003: double'''
        return super(IDBGridNeatline, self).put_Offset(__MIDL__IDBGridNeatline0003)
    def get_OffsetConnectSegments(self):
        '''Method IDBGridNeatline.get_OffsetConnectSegments

           OUTPUT
            __MIDL__IDBGridNeatline0005: esriGMNeatlineType*'''
        return super(IDBGridNeatline, self).get_OffsetConnectSegments()
    def put_OffsetConnectSegments(self, __MIDL__IDBGridNeatline0005):
        '''Method IDBGridNeatline.put_OffsetConnectSegments

           INPUT
            __MIDL__IDBGridNeatline0005: esriGMNeatlineType'''
        return super(IDBGridNeatline, self).put_OffsetConnectSegments(__MIDL__IDBGridNeatline0005)
    def get_OffsetUnits(self):
        '''Method IDBGridNeatline.get_OffsetUnits

           OUTPUT
            __MIDL__IDBGridNeatline0007: esriUnits*'''
        return super(IDBGridNeatline, self).get_OffsetUnits()
    def put_OffsetUnits(self, __MIDL__IDBGridNeatline0007):
        '''Method IDBGridNeatline.put_OffsetUnits

           INPUT
            __MIDL__IDBGridNeatline0007: esriUnits'''
        return super(IDBGridNeatline, self).put_OffsetUnits(__MIDL__IDBGridNeatline0007)
    def get_Setting(self):
        '''Method IDBGridNeatline.get_Setting

           OUTPUT
            __MIDL__IDBGridNeatline0009: esriGMNeatlineSetting*'''
        return super(IDBGridNeatline, self).get_Setting()
    def put_Setting(self, __MIDL__IDBGridNeatline0009):
        '''Method IDBGridNeatline.put_Setting

           INPUT
            __MIDL__IDBGridNeatline0009: esriGMNeatlineSetting'''
        return super(IDBGridNeatline, self).put_Setting(__MIDL__IDBGridNeatline0009)
    def get_Clipping(self):
        '''Method IDBGridNeatline.get_Clipping

           OUTPUT
            Clipping            : VARIANT_BOOL*'''
        return super(IDBGridNeatline, self).get_Clipping()
    def put_Clipping(self, Clipping):
        '''Method IDBGridNeatline.put_Clipping

           INPUT
            Clipping            : VARIANT_BOOL'''
        return super(IDBGridNeatline, self).put_Clipping(Clipping)
    def get_CoordinateSystemRecordSet(self):
        '''Method IDBGridNeatline.get_CoordinateSystemRecordSet

           OUTPUT
            recordSetName       : BSTR*'''
        return super(IDBGridNeatline, self).get_CoordinateSystemRecordSet()
    def put_CoordinateSystemRecordSet(self, recordSetName):
        '''Method IDBGridNeatline.put_CoordinateSystemRecordSet

           INPUT
            recordSetName       : BSTR'''
        return super(IDBGridNeatline, self).put_CoordinateSystemRecordSet(recordSetName)
    def get_Ordinal(self):
        '''Method IDBGridNeatline.get_Ordinal

           OUTPUT
            Ordinal             : long*'''
        return super(IDBGridNeatline, self).get_Ordinal()
    def put_Ordinal(self, Ordinal):
        '''Method IDBGridNeatline.put_Ordinal

           INPUT
            Ordinal             : long'''
        return super(IDBGridNeatline, self).put_Ordinal(Ordinal)
    def AddGridline(self, gridLine):
        '''Method IDBGridNeatline.AddGridline

           INPUT
            gridLine            : IDBGridLine*'''
        return super(IDBGridNeatline, self).AddGridline(gridLine)
    def AddPoint(self, Point):
        '''Method IDBGridNeatline.AddPoint

           INPUT
            Point               : IDBGridPoint*'''
        return super(IDBGridNeatline, self).AddPoint(Point)
    def AddSegment(self, segment):
        '''Method IDBGridNeatline.AddSegment

           INPUT
            segment             : IDBGridSegment*'''
        return super(IDBGridNeatline, self).AddSegment(segment)
    def get_AssignSegmentByAngleRange(self):
        '''Method IDBGridNeatline.get_AssignSegmentByAngleRange

           OUTPUT
            assigning           : VARIANT_BOOL*'''
        return super(IDBGridNeatline, self).get_AssignSegmentByAngleRange()
    def put_AssignSegmentByAngleRange(self, assigning):
        '''Method IDBGridNeatline.put_AssignSegmentByAngleRange

           INPUT
            assigning           : VARIANT_BOOL'''
        return super(IDBGridNeatline, self).put_AssignSegmentByAngleRange(assigning)
    AssignSegmentByAngleRange = property(get_AssignSegmentByAngleRange, put_AssignSegmentByAngleRange, None)
    Clipping = property(get_Clipping, put_Clipping, None)
    CoordinateSystemRecordSet = property(get_CoordinateSystemRecordSet, put_CoordinateSystemRecordSet, None)
    Densification = property(get_Densification, put_Densification, None)
    Gridlines = property(get_Gridlines, None, None)
    Offset = property(get_Offset, put_Offset, None)
    OffsetConnectSegments = property(get_OffsetConnectSegments, put_OffsetConnectSegments, None)
    OffsetUnits = property(get_OffsetUnits, put_OffsetUnits, None)
    Ordinal = property(get_Ordinal, put_Ordinal, None)
    Points = property(get_Points, None, None)
    Segments = property(get_Segments, None, None)
    Setting = property(get_Setting, put_Setting, None)

class IDBGrid(_esriGeoprocessing.IDBGrid):
    _IID = uuid.UUID('d2c41a73-5d74-4a7e-a30d-3de3a135df26')

    def __init__(self, *args, **kw):
        super(IDBGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClipNeatline(self):
        '''Method IDBGrid.get_ClipNeatline

           OUTPUT
            __MIDL__IDBGrid0000 : BSTR*'''
        return super(IDBGrid, self).get_ClipNeatline()
    def put_ClipNeatline(self, __MIDL__IDBGrid0000):
        '''Method IDBGrid.put_ClipNeatline

           INPUT
            __MIDL__IDBGrid0000 : BSTR'''
        return super(IDBGrid, self).put_ClipNeatline(__MIDL__IDBGrid0000)
    def get_XYTolerance(self):
        '''Method IDBGrid.get_XYTolerance

           OUTPUT
            __MIDL__IDBGrid0002 : double*'''
        return super(IDBGrid, self).get_XYTolerance()
    def put_XYTolerance(self, __MIDL__IDBGrid0002):
        '''Method IDBGrid.put_XYTolerance

           INPUT
            __MIDL__IDBGrid0002 : double'''
        return super(IDBGrid, self).put_XYTolerance(__MIDL__IDBGrid0002)
    def get_AutoSetAOIOrigin(self):
        '''Method IDBGrid.get_AutoSetAOIOrigin

           OUTPUT
            autoSet             : VARIANT_BOOL*'''
        return super(IDBGrid, self).get_AutoSetAOIOrigin()
    def put_AutoSetAOIOrigin(self, autoSet):
        '''Method IDBGrid.put_AutoSetAOIOrigin

           INPUT
            autoSet             : VARIANT_BOOL'''
        return super(IDBGrid, self).put_AutoSetAOIOrigin(autoSet)
    def get_Crosses180(self):
        '''Method IDBGrid.get_Crosses180

           OUTPUT
            __MIDL__IDBGrid0004 : VARIANT_BOOL*'''
        return super(IDBGrid, self).get_Crosses180()
    def put_Crosses180(self, __MIDL__IDBGrid0004):
        '''Method IDBGrid.put_Crosses180

           INPUT
            __MIDL__IDBGrid0004 : VARIANT_BOOL'''
        return super(IDBGrid, self).put_Crosses180(__MIDL__IDBGrid0004)
    def get_DatabaseString(self):
        '''Method IDBGrid.get_DatabaseString

           OUTPUT
            __MIDL__IDBGrid0006 : BSTR*'''
        return super(IDBGrid, self).get_DatabaseString()
    def put_DatabaseString(self, __MIDL__IDBGrid0006):
        '''Method IDBGrid.put_DatabaseString

           INPUT
            __MIDL__IDBGrid0006 : BSTR'''
        return super(IDBGrid, self).put_DatabaseString(__MIDL__IDBGrid0006)
    def get_DataFrameRotation(self):
        '''Method IDBGrid.get_DataFrameRotation

           OUTPUT
            __MIDL__IDBGrid0008 : double*'''
        return super(IDBGrid, self).get_DataFrameRotation()
    def put_DataFrameRotation(self, __MIDL__IDBGrid0008):
        '''Method IDBGrid.put_DataFrameRotation

           INPUT
            __MIDL__IDBGrid0008 : double'''
        return super(IDBGrid, self).put_DataFrameRotation(__MIDL__IDBGrid0008)
    def get_RotationType(self):
        '''Method IDBGrid.get_RotationType

           OUTPUT
            RotationType        : esriGMRotationType*'''
        return super(IDBGrid, self).get_RotationType()
    def put_RotationType(self, RotationType):
        '''Method IDBGrid.put_RotationType

           INPUT
            RotationType        : esriGMRotationType'''
        return super(IDBGrid, self).put_RotationType(RotationType)
    def get_Description(self):
        '''Method IDBGrid.get_Description

           OUTPUT
            __MIDL__IDBGrid0010 : BSTR*'''
        return super(IDBGrid, self).get_Description()
    def put_Description(self, __MIDL__IDBGrid0010):
        '''Method IDBGrid.put_Description

           INPUT
            __MIDL__IDBGrid0010 : BSTR'''
        return super(IDBGrid, self).put_Description(__MIDL__IDBGrid0010)
    def get_FeatureClassString(self):
        '''Method IDBGrid.get_FeatureClassString

           OUTPUT
            __MIDL__IDBGrid0012 : BSTR*'''
        return super(IDBGrid, self).get_FeatureClassString()
    def put_FeatureClassString(self, __MIDL__IDBGrid0012):
        '''Method IDBGrid.put_FeatureClassString

           INPUT
            __MIDL__IDBGrid0012 : BSTR'''
        return super(IDBGrid, self).put_FeatureClassString(__MIDL__IDBGrid0012)
    def get_FeatureDatasetString(self):
        '''Method IDBGrid.get_FeatureDatasetString

           OUTPUT
            __MIDL__IDBGrid0014 : BSTR*'''
        return super(IDBGrid, self).get_FeatureDatasetString()
    def put_FeatureDatasetString(self, __MIDL__IDBGrid0014):
        '''Method IDBGrid.put_FeatureDatasetString

           INPUT
            __MIDL__IDBGrid0014 : BSTR'''
        return super(IDBGrid, self).put_FeatureDatasetString(__MIDL__IDBGrid0014)
    def get_Area(self):
        '''Method IDBGrid.get_Area

           OUTPUT
            __MIDL__IDBGrid0016 : double*'''
        return super(IDBGrid, self).get_Area()
    def put_Area(self, __MIDL__IDBGrid0016):
        '''Method IDBGrid.put_Area

           INPUT
            __MIDL__IDBGrid0016 : double'''
        return super(IDBGrid, self).put_Area(__MIDL__IDBGrid0016)
    def get_Mask(self):
        '''Method IDBGrid.get_Mask

           OUTPUT
            __MIDL__IDBGrid0018 : IDBGridMask**'''
        return super(IDBGrid, self).get_Mask()
    def putref_Mask(self, __MIDL__IDBGrid0018):
        '''Method IDBGrid.putref_Mask

           INPUT
            __MIDL__IDBGrid0018 : IDBGridMask*'''
        return super(IDBGrid, self).putref_Mask(__MIDL__IDBGrid0018)
    def get_Neatlines(self):
        '''Method IDBGrid.get_Neatlines

           OUTPUT
            __MIDL__IDBGrid0020 : IArray**'''
        return super(IDBGrid, self).get_Neatlines()
    def get_GridType(self):
        '''Method IDBGrid.get_GridType

           OUTPUT
            __MIDL__IDBGrid0021 : BSTR*'''
        return super(IDBGrid, self).get_GridType()
    def put_GridType(self, __MIDL__IDBGrid0021):
        '''Method IDBGrid.put_GridType

           INPUT
            __MIDL__IDBGrid0021 : BSTR'''
        return super(IDBGrid, self).put_GridType(__MIDL__IDBGrid0021)
    def get_HasGeometry(self):
        '''Method IDBGrid.get_HasGeometry

           OUTPUT
            __MIDL__IDBGrid0023 : VARIANT_BOOL*'''
        return super(IDBGrid, self).get_HasGeometry()
    def put_HasGeometry(self, __MIDL__IDBGrid0023):
        '''Method IDBGrid.put_HasGeometry

           INPUT
            __MIDL__IDBGrid0023 : VARIANT_BOOL'''
        return super(IDBGrid, self).put_HasGeometry(__MIDL__IDBGrid0023)
    def get_PrimaryCoordinateSystem(self):
        '''Method IDBGrid.get_PrimaryCoordinateSystem

           OUTPUT
            gridSR              : ISpatialReferenceCalculator**'''
        return super(IDBGrid, self).get_PrimaryCoordinateSystem()
    def putref_PrimaryCoordinateSystem(self, gridSR):
        '''Method IDBGrid.putref_PrimaryCoordinateSystem

           INPUT
            gridSR              : ISpatialReferenceCalculator*'''
        return super(IDBGrid, self).putref_PrimaryCoordinateSystem(gridSR)
    def get_ReferenceScale(self):
        '''Method IDBGrid.get_ReferenceScale

           OUTPUT
            __MIDL__IDBGrid0025 : double*'''
        return super(IDBGrid, self).get_ReferenceScale()
    def put_ReferenceScale(self, __MIDL__IDBGrid0025):
        '''Method IDBGrid.put_ReferenceScale

           INPUT
            __MIDL__IDBGrid0025 : double'''
        return super(IDBGrid, self).put_ReferenceScale(__MIDL__IDBGrid0025)
    def get_ReferenceScaleType(self):
        '''Method IDBGrid.get_ReferenceScaleType

           OUTPUT
            refScaleType        : esriGMReferenceScaleType*'''
        return super(IDBGrid, self).get_ReferenceScaleType()
    def put_ReferenceScaleType(self, refScaleType):
        '''Method IDBGrid.put_ReferenceScaleType

           INPUT
            refScaleType        : esriGMReferenceScaleType'''
        return super(IDBGrid, self).put_ReferenceScaleType(refScaleType)
    def get_RepresentationSuffix(self):
        '''Method IDBGrid.get_RepresentationSuffix

           OUTPUT
            Suffix              : BSTR*'''
        return super(IDBGrid, self).get_RepresentationSuffix()
    def put_RepresentationSuffix(self, Suffix):
        '''Method IDBGrid.put_RepresentationSuffix

           INPUT
            Suffix              : BSTR'''
        return super(IDBGrid, self).put_RepresentationSuffix(Suffix)
    def get_RuleIDFieldName(self):
        '''Method IDBGrid.get_RuleIDFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IDBGrid, self).get_RuleIDFieldName()
    def put_RuleIDFieldName(self, Name):
        '''Method IDBGrid.put_RuleIDFieldName

           INPUT
            Name                : BSTR'''
        return super(IDBGrid, self).put_RuleIDFieldName(Name)
    def get_OverrideFieldName(self):
        '''Method IDBGrid.get_OverrideFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IDBGrid, self).get_OverrideFieldName()
    def put_OverrideFieldName(self, Name):
        '''Method IDBGrid.put_OverrideFieldName

           INPUT
            Name                : BSTR'''
        return super(IDBGrid, self).put_OverrideFieldName(Name)
    def get_RequireShapeOverride(self):
        '''Method IDBGrid.get_RequireShapeOverride

           OUTPUT
            require             : VARIANT_BOOL*'''
        return super(IDBGrid, self).get_RequireShapeOverride()
    def put_RequireShapeOverride(self, require):
        '''Method IDBGrid.put_RequireShapeOverride

           INPUT
            require             : VARIANT_BOOL'''
        return super(IDBGrid, self).put_RequireShapeOverride(require)
    def AddNeatline(self, neatline):
        '''Method IDBGrid.AddNeatline

           INPUT
            neatline            : IDBGridNeatline*'''
        return super(IDBGrid, self).AddNeatline(neatline)
    def ReplaceCoordinateSystem(self, findSR, replaceSR, gridAOI):
        '''Method IDBGrid.ReplaceCoordinateSystem

           INPUTS
            findSR              : ISpatialReference*
            replaceSR           : ISpatialReference*
            gridAOI             : IPolygon*

           OUTPUT
            replaceCount        : long*'''
        return super(IDBGrid, self).ReplaceCoordinateSystem(findSR, replaceSR, gridAOI)
    Area = property(get_Area, put_Area, None)
    AutoSetAOIOrigin = property(get_AutoSetAOIOrigin, put_AutoSetAOIOrigin, None)
    ClipNeatline = property(get_ClipNeatline, put_ClipNeatline, None)
    Crosses180 = property(get_Crosses180, put_Crosses180, None)
    DataFrameRotation = property(get_DataFrameRotation, put_DataFrameRotation, None)
    DatabaseString = property(get_DatabaseString, put_DatabaseString, None)
    Description = property(get_Description, put_Description, None)
    FeatureClassString = property(get_FeatureClassString, put_FeatureClassString, None)
    FeatureDatasetString = property(get_FeatureDatasetString, put_FeatureDatasetString, None)
    GridType = property(get_GridType, put_GridType, None)
    HasGeometry = property(get_HasGeometry, put_HasGeometry, None)
    Mask = property(get_Mask, putref_Mask, None)
    Neatlines = property(get_Neatlines, None, None)
    OverrideFieldName = property(get_OverrideFieldName, put_OverrideFieldName, None)
    PrimaryCoordinateSystem = property(get_PrimaryCoordinateSystem, putref_PrimaryCoordinateSystem, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    ReferenceScaleType = property(get_ReferenceScaleType, put_ReferenceScaleType, None)
    RepresentationSuffix = property(get_RepresentationSuffix, put_RepresentationSuffix, None)
    RequireShapeOverride = property(get_RequireShapeOverride, put_RequireShapeOverride, None)
    RotationType = property(get_RotationType, put_RotationType, None)
    RuleIDFieldName = property(get_RuleIDFieldName, put_RuleIDFieldName, None)
    XYTolerance = property(get_XYTolerance, put_XYTolerance, None)

class IDBGridMessages(_esriGeoprocessing.IDBGridMessages):
    _IID = uuid.UUID('f839882a-fef1-415d-947a-a660609cca0f')

    def __init__(self, *args, **kw):
        super(IDBGridMessages, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def AddAbort(self, msg):
        '''Method IDBGridMessages.AddAbort

           INPUT
            msg                 : BSTR'''
        return super(IDBGridMessages, self).AddAbort(msg)
    def AddMessage(self, msg):
        '''Method IDBGridMessages.AddMessage

           INPUT
            msg                 : BSTR'''
        return super(IDBGridMessages, self).AddMessage(msg)
    def AddWarning(self, msg):
        '''Method IDBGridMessages.AddWarning

           INPUT
            msg                 : BSTR'''
        return super(IDBGridMessages, self).AddWarning(msg)
    def AddError(self, errorCode, msg):
        '''Method IDBGridMessages.AddError

           INPUTS
            errorCode           : long
            msg                 : BSTR'''
        return super(IDBGridMessages, self).AddError(errorCode, msg)
    def Add(self, msg):
        '''Method IDBGridMessages.Add

           INPUT
            msg                 : IGPMessage*'''
        return super(IDBGridMessages, self).Add(msg)
    def Clear(self):
        '''Method IDBGridMessages.Clear'''
        return super(IDBGridMessages, self).Clear()
    def get_Count(self):
        '''Method IDBGridMessages.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDBGridMessages, self).get_Count()
    def get_MaxSeverity(self):
        '''Method IDBGridMessages.get_MaxSeverity

           OUTPUT
            severity            : esriGMMessageSeverity*'''
        return super(IDBGridMessages, self).get_MaxSeverity()
    def put_GPMessages(self, msgs):
        '''Method IDBGridMessages.put_GPMessages

           INPUT
            msgs                : IGPMessages*'''
        return super(IDBGridMessages, self).put_GPMessages(msgs)
    def get_GPMessages(self):
        '''Method IDBGridMessages.get_GPMessages

           OUTPUT
            msgs                : IGPMessages**'''
        return super(IDBGridMessages, self).get_GPMessages()
    def put_TrackCancel(self, pTrackCancel):
        '''Method IDBGridMessages.put_TrackCancel

           INPUT
            pTrackCancel        : ITrackCancel*'''
        return super(IDBGridMessages, self).put_TrackCancel(pTrackCancel)
    def get_TrackCancel(self):
        '''Method IDBGridMessages.get_TrackCancel

           OUTPUT
            pTrackCancel        : ITrackCancel**'''
        return super(IDBGridMessages, self).get_TrackCancel()
    Count = property(get_Count, None, None)
    GPMessages = property(get_GPMessages, put_GPMessages, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    TrackCancel = property(get_TrackCancel, put_TrackCancel, None)

class IDBGridUtilities(_esriGeoprocessing.IDBGridUtilities):
    _IID = uuid.UUID('9353e32e-b342-4a52-ac9a-33603664d0b0')
    def CalculateUTMZone(self, geom):
        '''Method IDBGridUtilities.CalculateUTMZone

           INPUT
            geom                : IGeometry*

           OUTPUT
            outputCS            : IProjectedCoordinateSystem**'''
        return super(IDBGridUtilities, self).CalculateUTMZone(geom)
    def QueryProjectionParams(self, geom, parallelOffsets):
        '''Method IDBGridUtilities.QueryProjectionParams

           INPUTS
            geom                : IGeometry*
            parallelOffsets     : double

           OUTPUTS
            CentralMeridian     : double*
            CentralParallel     : double*
            stdParallel1        : double*
            stdParallel2        : double*'''
        return super(IDBGridUtilities, self).QueryProjectionParams(geom, parallelOffsets)
    def CalculateCentralMeridianAndParallels(self, geom, parallelOffsets, useExistingParallels):
        '''Method IDBGridUtilities.CalculateCentralMeridianAndParallels

           INPUTS
            geom                : IGeometry*
            parallelOffsets     : double
            useExistingParallels: VARIANT_BOOL

           OUTPUT
            outputCS            : IProjectedCoordinateSystem**'''
        return super(IDBGridUtilities, self).CalculateCentralMeridianAndParallels(geom, parallelOffsets, useExistingParallels)
    def LoadGridFromXML(self, Path):
        '''Method IDBGridUtilities.LoadGridFromXML

           INPUT
            Path                : BSTR

           OUTPUT
            Grid                : IDBGrid**'''
        return super(IDBGridUtilities, self).LoadGridFromXML(Path)
    def LoadGridFromStream(self, stream):
        '''Method IDBGridUtilities.LoadGridFromStream

           INPUT
            stream              : IObjectStream*

           OUTPUT
            Grid                : IDBGrid**'''
        return super(IDBGridUtilities, self).LoadGridFromStream(stream)
    def SaveGridToXML(self, Grid, Path):
        '''Method IDBGridUtilities.SaveGridToXML

           INPUTS
            Grid                : IDBGrid*
            Path                : BSTR'''
        return super(IDBGridUtilities, self).SaveGridToXML(Grid, Path)
    def IsGridDataset(self, gridDataset):
        '''Method IDBGridUtilities.IsGridDataset

           INPUT
            gridDataset         : IFeatureDataset*

           OUTPUT
            IsGridDataset       : VARIANT_BOOL*'''
        return super(IDBGridUtilities, self).IsGridDataset(gridDataset)
    def IsGridManagerDataset(self, gridDataset):
        '''Method IDBGridUtilities.IsGridManagerDataset

           INPUT
            gridDataset         : IFeatureDataset*

           OUTPUT
            isGMDataset         : VARIANT_BOOL*'''
        return super(IDBGridUtilities, self).IsGridManagerDataset(gridDataset)
    def CreateGroupLayer(self, gridDataset, gridGlobalID):
        '''Method IDBGridUtilities.CreateGroupLayer

           INPUTS
            gridDataset         : IFeatureDataset*
            gridGlobalID        : BSTR

           OUTPUT
            groupLayer          : IGroupLayer**'''
        return super(IDBGridUtilities, self).CreateGroupLayer(gridDataset, gridGlobalID)
    def GetGridFromDataset(self, gridDataset, gridGlobalID):
        '''Method IDBGridUtilities.GetGridFromDataset

           INPUTS
            gridDataset         : IFeatureDataset*
            gridGlobalID        : BSTR

           OUTPUT
            DBGrid              : IDBGrid**'''
        return super(IDBGridUtilities, self).GetGridFromDataset(gridDataset, gridGlobalID)
    def DeleteGrid(self, gridDataset, gridGlobalID, TrackCancel):
        '''Method IDBGridUtilities.DeleteGrid

           INPUTS
            gridDataset         : IFeatureDataset*
            gridGlobalID        : BSTR
            TrackCancel         : ITrackCancel*'''
        return super(IDBGridUtilities, self).DeleteGrid(gridDataset, gridGlobalID, TrackCancel)
    def GetGridFeatureClass(self, gridDataset):
        '''Method IDBGridUtilities.GetGridFeatureClass

           INPUT
            gridDataset         : IFeatureDataset*

           OUTPUT
            ppFC                : IFeatureClass**'''
        return super(IDBGridUtilities, self).GetGridFeatureClass(gridDataset)
    def ConfigureLayout(self, layout, focusMap, gridDefinition, gridLayer):
        '''Method IDBGridUtilities.ConfigureLayout

           INPUTS
            layout              : IPageLayout*
            focusMap            : IMap*
            gridDefinition      : IDBGrid*
            gridLayer           : IGroupLayer*'''
        return super(IDBGridUtilities, self).ConfigureLayout(layout, focusMap, gridDefinition, gridLayer)
    def FitMapFrame(self, mapFrame, AOI, Scale, spatRef, rotationInDegrees, zoomContainer):
        '''Method IDBGridUtilities.FitMapFrame

           INPUTS
            mapFrame            : IMapFrame*
            AOI                 : IPolygon*
            Scale               : double
            spatRef             : ISpatialReference*
            rotationInDegrees   : double
            zoomContainer       : VARIANT_BOOL'''
        return super(IDBGridUtilities, self).FitMapFrame(mapFrame, AOI, Scale, spatRef, rotationInDegrees, zoomContainer)
    def GetUniqueCoordinateSystems(self, Grid, AOI, ancillaryOnly):
        '''Method IDBGridUtilities.GetUniqueCoordinateSystems

           INPUTS
            Grid                : IDBGrid*
            AOI                 : IPolygon*
            ancillaryOnly       : VARIANT_BOOL

           OUTPUT
            spatRefs            : IArray**'''
        return super(IDBGridUtilities, self).GetUniqueCoordinateSystems(Grid, AOI, ancillaryOnly)
    def HasSingleDatum(self, FeatureDataset, Grid, AOI):
        '''Method IDBGridUtilities.HasSingleDatum

           INPUTS
            FeatureDataset      : IFeatureDataset*
            Grid                : IDBGrid*
            AOI                 : IPolygon*

           OUTPUT
            hasSingle           : VARIANT_BOOL*'''
        return super(IDBGridUtilities, self).HasSingleDatum(FeatureDataset, Grid, AOI)
    def CalculateNearestUTMZone(self, geom):
        '''Method IDBGridUtilities.CalculateNearestUTMZone

           INPUT
            geom                : IGeometry*

           OUTPUT
            outputCS            : IProjectedCoordinateSystem**'''
        return super(IDBGridUtilities, self).CalculateNearestUTMZone(geom)

class IMdModel(_esriGeoprocessing.IMdModel):
    _IID = uuid.UUID('dfaf9812-6b7b-4ac2-ad6b-bbdef1ede0e6')

    def __init__(self, *args, **kw):
        super(IMdModel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMdModel.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMdModel, self).get_Name()
    def put_Name(self, Name):
        '''Method IMdModel.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMdModel, self).put_Name(Name)
    def AddElement(self, Element):
        '''Method IMdModel.AddElement

           INPUT
            Element             : IMdElement*'''
        return super(IMdModel, self).AddElement(Element)
    def AddElements(self, Elements):
        '''Method IMdModel.AddElements

           INPUT
            Elements            : IArray*'''
        return super(IMdModel, self).AddElements(Elements)
    def GetElement(self, Name):
        '''Method IMdModel.GetElement

           INPUT
            Name                : BSTR

           OUTPUT
            Element             : IMdElement**'''
        return super(IMdModel, self).GetElement(Name)
    def GetElementByID(self, identifier):
        '''Method IMdModel.GetElementByID

           INPUT
            identifier          : long

           OUTPUT
            Element             : IMdElement**'''
        return super(IMdModel, self).GetElementByID(identifier)
    def GetElements(self):
        '''Method IMdModel.GetElements

           OUTPUT
            Elements            : IEnumMdElement**'''
        return super(IMdModel, self).GetElements()
    def GetVariables(self):
        '''Method IMdModel.GetVariables

           OUTPUT
            variable            : IEnumMdVariable**'''
        return super(IMdModel, self).GetVariables()
    def GetProcesses(self):
        '''Method IMdModel.GetProcesses

           OUTPUT
            processes           : IEnumMdProcess**'''
        return super(IMdModel, self).GetProcesses()
    def DeleteElement(self, Element):
        '''Method IMdModel.DeleteElement

           INPUT
            Element             : IMdElement*'''
        return super(IMdModel, self).DeleteElement(Element)
    def Empty(self):
        '''Method IMdModel.Empty'''
        return super(IMdModel, self).Empty()
    def Validate(self, Reset, pEnvMgr):
        '''Method IMdModel.Validate

           INPUTS
            Reset               : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IMdModel, self).Validate(Reset, pEnvMgr)
    def Execute(self, TrackCancel, Reset, pEnvMgr, Messages, stopOnFirstFailure):
        '''Method IMdModel.Execute

           INPUTS
            TrackCancel         : ITrackCancel*
            Reset               : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*
            stopOnFirstFailure  : VARIANT_BOOL'''
        return super(IMdModel, self).Execute(TrackCancel, Reset, pEnvMgr, Messages, stopOnFirstFailure)
    def ExecuteProcess(self, pMdProcess, TrackCancel, Reset, pEnvMgr, Messages, stopOnFirstFailure):
        '''Method IMdModel.ExecuteProcess

           INPUTS
            pMdProcess          : IMdProcess*
            TrackCancel         : ITrackCancel*
            Reset               : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*
            stopOnFirstFailure  : VARIANT_BOOL'''
        return super(IMdModel, self).ExecuteProcess(pMdProcess, TrackCancel, Reset, pEnvMgr, Messages, stopOnFirstFailure)
    def SortElements(self):
        '''Method IMdModel.SortElements

           OUTPUT
            ppElements          : IEnumMdElement**'''
        return super(IMdModel, self).SortElements()
    def TraceDependents(self, pMdElement, Direction, depth):
        '''Method IMdModel.TraceDependents

           INPUTS
            pMdElement          : IMdElement*
            Direction           : esriMdDirection
            depth               : long

           OUTPUT
            ppElements          : IEnumMdElement**'''
        return super(IMdModel, self).TraceDependents(pMdElement, Direction, depth)
    def FindDependents(self, pMdElement, Direction, ConnectionType):
        '''Method IMdModel.FindDependents

           INPUTS
            pMdElement          : IMdElement*
            Direction           : esriMdDirection
            ConnectionType      : esriMdConnectionType

           OUTPUT
            ppElements          : IEnumMdElement**'''
        return super(IMdModel, self).FindDependents(pMdElement, Direction, ConnectionType)
    def MergeElements(self, pElements):
        '''Method IMdModel.MergeElements

           INPUT
            pElements           : IEnumMdElement*'''
        return super(IMdModel, self).MergeElements(pElements)
    def VerifyUniqueElementName(self, Name):
        '''Method IMdModel.VerifyUniqueElementName

           INPUT
            Name                : BSTR

           OUTPUT
            pUnique             : VARIANT_BOOL*'''
        return super(IMdModel, self).VerifyUniqueElementName(Name)
    def CanAddElement(self, pElement):
        '''Method IMdModel.CanAddElement

           INPUT
            pElement            : IMdElement*

           OUTPUT
            pCanAdd             : VARIANT_BOOL*'''
        return super(IMdModel, self).CanAddElement(pElement)
    def get_EnvironmentManager(self):
        '''Method IMdModel.get_EnvironmentManager

           OUTPUT
            ppEnvMgr            : IGPEnvironmentManager**'''
        return super(IMdModel, self).get_EnvironmentManager()
    def putref_EnvironmentManager(self, ppEnvMgr):
        '''Method IMdModel.putref_EnvironmentManager

           INPUT
            ppEnvMgr            : IGPEnvironmentManager*'''
        return super(IMdModel, self).putref_EnvironmentManager(ppEnvMgr)
    def IsValid(self):
        '''Method IMdModel.IsValid

           OUTPUT
            IsValid             : VARIANT_BOOL*'''
        return super(IMdModel, self).IsValid()
    def IsLicensed(self):
        '''Method IMdModel.IsLicensed

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IMdModel, self).IsLicensed()
    def DisconnectElements(self, pFromElement, pToElement, ConnectionType):
        '''Method IMdModel.DisconnectElements

           INPUTS
            pFromElement        : IMdElement*
            pToElement          : IMdElement*
            ConnectionType      : esriMdConnectionType'''
        return super(IMdModel, self).DisconnectElements(pFromElement, pToElement, ConnectionType)
    def CreateUniqueElementName(self, Name):
        '''Method IMdModel.CreateUniqueElementName

           INPUT
            Name                : BSTR

           OUTPUT
            pName               : BSTR*'''
        return super(IMdModel, self).CreateUniqueElementName(Name)
    EnvironmentManager = property(get_EnvironmentManager, putref_EnvironmentManager, None)
    Name = property(get_Name, put_Name, None)

class IGPModelTool(_esriGeoprocessing.IGPModelTool):
    _IID = uuid.UUID('edd3b6b7-ba3c-473a-891c-d4f793ea4756')

    def __init__(self, *args, **kw):
        super(IGPModelTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Model(self):
        '''Method IGPModelTool.get_Model

           OUTPUT
            Model               : IMdModel**'''
        return super(IGPModelTool, self).get_Model()
    def putref_Model(self, Model):
        '''Method IGPModelTool.putref_Model

           INPUT
            Model               : IMdModel*'''
        return super(IGPModelTool, self).putref_Model(Model)
    def get_DiagramProperties(self):
        '''Method IGPModelTool.get_DiagramProperties

           OUTPUT
            DiagramProperties   : IMdDiagramProperties**'''
        return super(IGPModelTool, self).get_DiagramProperties()
    def putref_DiagramProperties(self, DiagramProperties):
        '''Method IGPModelTool.putref_DiagramProperties

           INPUT
            DiagramProperties   : IMdDiagramProperties*'''
        return super(IGPModelTool, self).putref_DiagramProperties(DiagramProperties)
    def AddParameter(self, Name):
        '''Method IGPModelTool.AddParameter

           INPUT
            Name                : BSTR'''
        return super(IGPModelTool, self).AddParameter(Name)
    def RemoveParameter(self, Name):
        '''Method IGPModelTool.RemoveParameter

           INPUT
            Name                : BSTR'''
        return super(IGPModelTool, self).RemoveParameter(Name)
    def FindParameter(self, Name):
        '''Method IGPModelTool.FindParameter

           INPUT
            Name                : BSTR

           OUTPUT
            ppParameter         : IGPParameter**'''
        return super(IGPModelTool, self).FindParameter(Name)
    def GenerateDefaultParameters(self):
        '''Method IGPModelTool.GenerateDefaultParameters'''
        return super(IGPModelTool, self).GenerateDefaultParameters()
    def RenameElement(self, oldName, newName):
        '''Method IGPModelTool.RenameElement

           INPUTS
            oldName             : BSTR
            newName             : BSTR'''
        return super(IGPModelTool, self).RenameElement(oldName, newName)
    def ClearParameters(self):
        '''Method IGPModelTool.ClearParameters'''
        return super(IGPModelTool, self).ClearParameters()
    def DeleteIntermediateData(self):
        '''Method IGPModelTool.DeleteIntermediateData'''
        return super(IGPModelTool, self).DeleteIntermediateData()
    def GetIntermediateVariables(self):
        '''Method IGPModelTool.GetIntermediateVariables

           OUTPUT
            ppEnumVariable      : IEnumMdVariable**'''
        return super(IGPModelTool, self).GetIntermediateVariables()
    DiagramProperties = property(get_DiagramProperties, putref_DiagramProperties, None)
    Model = property(get_Model, putref_Model, None)

class IMBImport(_esriGeoprocessing.IMBImport):
    _IID = uuid.UUID('88363696-dded-496d-951f-0504894a1119')
    def ImportXMD(self, File):
        '''Method IMBImport.ImportXMD

           INPUT
            File                : BSTR

           OUTPUT
            ppModel             : IMdModel**'''
        return super(IMBImport, self).ImportXMD(File)
    def ImportMetadata(self, File, pModel, pMetadata):
        '''Method IMBImport.ImportMetadata

           INPUTS
            File                : BSTR
            pModel              : IMdModel*
            pMetadata           : IPropertySet*'''
        return super(IMBImport, self).ImportMetadata(File, pModel, pMetadata)

class IGPVariableManagerImpl(_esriGeoprocessing.IGPVariableManagerImpl):
    _IID = uuid.UUID('abe9daf6-69dd-4b6a-848b-857369170187')

    def __init__(self, *args, **kw):
        super(IGPVariableManagerImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Model(self):
        '''Method IGPVariableManagerImpl.get_Model

           OUTPUT
            ppModel             : IMdModel**'''
        return super(IGPVariableManagerImpl, self).get_Model()
    def putref_Model(self, ppModel):
        '''Method IGPVariableManagerImpl.putref_Model

           INPUT
            ppModel             : IMdModel*'''
        return super(IGPVariableManagerImpl, self).putref_Model(ppModel)
    def SetFeedback(self, feedback):
        '''Method IGPVariableManagerImpl.SetFeedback

           INPUT
            feedback            : VARIANT_BOOL'''
        return super(IGPVariableManagerImpl, self).SetFeedback(feedback)
    def SetListIndex(self, Index):
        '''Method IGPVariableManagerImpl.SetListIndex

           INPUT
            Index               : long'''
        return super(IGPVariableManagerImpl, self).SetListIndex(Index)
    Model = property(get_Model, putref_Model, None)

class IModelScriptConverter(_esriGeoprocessing.IModelScriptConverter):
    _IID = uuid.UUID('f5bd9c86-444f-44cb-b1f1-893cb492cf96')
    def get_Name(self):
        '''Method IModelScriptConverter.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IModelScriptConverter, self).get_Name()
    def get_DisplayName(self):
        '''Method IModelScriptConverter.get_DisplayName

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IModelScriptConverter, self).get_DisplayName()
    def get_Description(self):
        '''Method IModelScriptConverter.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IModelScriptConverter, self).get_Description()
    def GetFileInfo(self):
        '''Method IModelScriptConverter.GetFileInfo

           OUTPUTS
            defaultExtension    : BSTR*
            filter              : BSTR*'''
        return super(IModelScriptConverter, self).GetFileInfo()
    def ExportToScript(self, Tool, FileName):
        '''Method IModelScriptConverter.ExportToScript

           INPUTS
            Tool                : IGPModelTool*
            FileName            : BSTR'''
        return super(IModelScriptConverter, self).ExportToScript(Tool, FileName)
    Description = property(get_Description, None, None)
    DisplayName = property(get_DisplayName, None, None)
    Name = property(get_Name, None, None)

class IMdElement(_esriGeoprocessing.IMdElement):
    _IID = uuid.UUID('bf5adcdd-a477-4cd5-936a-62c939c6d46a')

    def __init__(self, *args, **kw):
        super(IMdElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method IMdElement.get_ID

           OUTPUT
            identifier          : long*'''
        return super(IMdElement, self).get_ID()
    def put_ID(self, identifier):
        '''Method IMdElement.put_ID

           INPUT
            identifier          : long'''
        return super(IMdElement, self).put_ID(identifier)
    def get_Name(self):
        '''Method IMdElement.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMdElement, self).get_Name()
    def put_Name(self, Name):
        '''Method IMdElement.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMdElement, self).put_Name(Name)
    def get_Marked(self):
        '''Method IMdElement.get_Marked

           OUTPUT
            Marked              : VARIANT_BOOL*'''
        return super(IMdElement, self).get_Marked()
    def put_Marked(self, Marked):
        '''Method IMdElement.put_Marked

           INPUT
            Marked              : VARIANT_BOOL'''
        return super(IMdElement, self).put_Marked(Marked)
    def get_Current(self):
        '''Method IMdElement.get_Current

           OUTPUT
            Current             : VARIANT_BOOL*'''
        return super(IMdElement, self).get_Current()
    def put_Current(self, Current):
        '''Method IMdElement.put_Current

           INPUT
            Current             : VARIANT_BOOL'''
        return super(IMdElement, self).put_Current(Current)
    def get_Valid(self):
        '''Method IMdElement.get_Valid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IMdElement, self).get_Valid()
    def put_Valid(self, Valid):
        '''Method IMdElement.put_Valid

           INPUT
            Valid               : VARIANT_BOOL'''
        return super(IMdElement, self).put_Valid(Valid)
    def get_Model(self):
        '''Method IMdElement.get_Model

           OUTPUT
            Model               : IMdModel**'''
        return super(IMdElement, self).get_Model()
    def putref_Model(self, Model):
        '''Method IMdElement.putref_Model

           INPUT
            Model               : IMdModel*'''
        return super(IMdElement, self).putref_Model(Model)
    def get_State(self):
        '''Method IMdElement.get_State

           OUTPUT
            State               : esriMdElementState*'''
        return super(IMdElement, self).get_State()
    def GetDependents(self, Direction, ConnectionType):
        '''Method IMdElement.GetDependents

           INPUTS
            Direction           : esriMdDirection
            ConnectionType      : esriMdConnectionType

           OUTPUT
            ppElements          : IEnumMdElement**'''
        return super(IMdElement, self).GetDependents(Direction, ConnectionType)
    def IsDependentOn(self, pMdElement, Direction, ConnectionType):
        '''Method IMdElement.IsDependentOn

           INPUTS
            pMdElement          : IMdElement*
            Direction           : esriMdDirection
            ConnectionType      : esriMdConnectionType

           OUTPUT
            pDependentOn        : VARIANT_BOOL*'''
        return super(IMdElement, self).IsDependentOn(pMdElement, Direction, ConnectionType)
    def Validate(self, updateValues, pEnvMgr):
        '''Method IMdElement.Validate

           INPUTS
            updateValues        : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IMdElement, self).Validate(updateValues, pEnvMgr)
    def GetMessages(self):
        '''Method IMdElement.GetMessages

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IMdElement, self).GetMessages()
    def get_Altered(self):
        '''Method IMdElement.get_Altered

           OUTPUT
            Altered             : VARIANT_BOOL*'''
        return super(IMdElement, self).get_Altered()
    def put_Altered(self, Altered):
        '''Method IMdElement.put_Altered

           INPUT
            Altered             : VARIANT_BOOL'''
        return super(IMdElement, self).put_Altered(Altered)
    Altered = property(get_Altered, put_Altered, None)
    Current = property(get_Current, put_Current, None)
    ID = property(get_ID, put_ID, None)
    Marked = property(get_Marked, put_Marked, None)
    Model = property(get_Model, putref_Model, None)
    Name = property(get_Name, put_Name, None)
    State = property(get_State, None, None)
    Valid = property(get_Valid, put_Valid, None)

class IEnumMdElement(_esriGeoprocessing.IEnumMdElement):
    _IID = uuid.UUID('6bbf52e6-80d2-48d9-a8e7-6eeee9761f24')
    def Next(self):
        '''Method IEnumMdElement.Next

           OUTPUT
            Element             : IMdElement**'''
        return super(IEnumMdElement, self).Next()
    def __iter__(self):
        try:
            super(IEnumMdElement, self).Reset()
            val = super(IEnumMdElement, self).Next()
            while val:
                yield val
                val = super(IEnumMdElement, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumMdElement.Reset'''
        return super(IEnumMdElement, self).Reset()

class IMdModelIteration2(_esriGeoprocessing.IMdModelIteration2):
    _IID = uuid.UUID('d9de210b-7457-42b3-a71d-f75905582c48')

    def __init__(self, *args, **kw):
        super(IMdModelIteration2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IterationType(self):
        '''Method IMdModelIteration2.get_IterationType

           OUTPUT
            Type                : esriMdIterationType*'''
        return super(IMdModelIteration2, self).get_IterationType()
    def put_IterationType(self, Type):
        '''Method IMdModelIteration2.put_IterationType

           INPUT
            Type                : esriMdIterationType'''
        return super(IMdModelIteration2, self).put_IterationType(Type)
    def get_IterationCount(self):
        '''Method IMdModelIteration2.get_IterationCount

           OUTPUT
            Count               : long*'''
        return super(IMdModelIteration2, self).get_IterationCount()
    def put_IterationCount(self, Count):
        '''Method IMdModelIteration2.put_IterationCount

           INPUT
            Count               : long'''
        return super(IMdModelIteration2, self).put_IterationCount(Count)
    def get_IterationElement(self):
        '''Method IMdModelIteration2.get_IterationElement

           OUTPUT
            ppElement           : IMdElement**'''
        return super(IMdModelIteration2, self).get_IterationElement()
    def putref_IterationElement(self, ppElement):
        '''Method IMdModelIteration2.putref_IterationElement

           INPUT
            ppElement           : IMdElement*'''
        return super(IMdModelIteration2, self).putref_IterationElement(ppElement)
    def get_CurrentIteration(self):
        '''Method IMdModelIteration2.get_CurrentIteration

           OUTPUT
            iteration           : long*'''
        return super(IMdModelIteration2, self).get_CurrentIteration()
    CurrentIteration = property(get_CurrentIteration, None, None)
    IterationCount = property(get_IterationCount, put_IterationCount, None)
    IterationElement = property(get_IterationElement, putref_IterationElement, None)
    IterationType = property(get_IterationType, put_IterationType, None)

class IMdModelName(_esriGeoprocessing.IMdModelName):
    _IID = uuid.UUID('7e6e2861-2c8a-4576-9a66-57078496e101')

    def __init__(self, *args, **kw):
        super(IMdModelName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Elements(self):
        '''Method IMdModelName.get_Elements

           OUTPUT
            ppElements          : IEnumMdElement**'''
        return super(IMdModelName, self).get_Elements()
    def AddElement(self, pElement, X, Y):
        '''Method IMdModelName.AddElement

           INPUTS
            pElement            : IMdElement*
            X                   : long
            Y                   : long'''
        return super(IMdModelName, self).AddElement(pElement, X, Y)
    def get_Count(self):
        '''Method IMdModelName.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMdModelName, self).get_Count()
    def get_Element(self, Index):
        '''Method IMdModelName.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppElement           : IMdElement**'''
        return super(IMdModelName, self).get_Element(Index)
    def get_X(self, Index):
        '''Method IMdModelName.get_X

           INPUT
            Index               : long

           OUTPUT
            X                   : long*'''
        return super(IMdModelName, self).get_X(Index)
    def get_Y(self, Index):
        '''Method IMdModelName.get_Y

           INPUT
            Index               : long

           OUTPUT
            Y                   : long*'''
        return super(IMdModelName, self).get_Y(Index)
    def putref_ParameterNames(self, ppNames):
        '''Method IMdModelName.putref_ParameterNames

           INPUT
            ppNames             : IStringArray*'''
        return super(IMdModelName, self).putref_ParameterNames(ppNames)
    def get_ParameterNames(self):
        '''Method IMdModelName.get_ParameterNames

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IMdModelName, self).get_ParameterNames()
    Count = property(get_Count, None, None)
    Elements = property(get_Elements, None, None)
    ParameterNames = property(get_ParameterNames, putref_ParameterNames, None)
    Element = IndexProperty(get_Element, None)
    X = IndexProperty(get_X, None)
    Y = IndexProperty(get_Y, None)

class IEnumMdProcess(_esriGeoprocessing.IEnumMdProcess):
    _IID = uuid.UUID('57c5c4f9-1566-4dbe-983a-c71d4ce965ea')
    def Next(self):
        '''Method IEnumMdProcess.Next

           OUTPUT
            Process             : IMdProcess**'''
        return super(IEnumMdProcess, self).Next()
    def __iter__(self):
        try:
            super(IEnumMdProcess, self).Reset()
            val = super(IEnumMdProcess, self).Next()
            while val:
                yield val
                val = super(IEnumMdProcess, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumMdProcess.Reset'''
        return super(IEnumMdProcess, self).Reset()

class IMdProcess(_esriGeoprocessing.IMdProcess):
    _IID = uuid.UUID('890d0dd1-0f70-4235-9d01-09de87ec949c')

    def __init__(self, *args, **kw):
        super(IMdProcess, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ToolName(self):
        '''Method IMdProcess.get_ToolName

           OUTPUT
            Name                : IGPToolName**'''
        return super(IMdProcess, self).get_ToolName()
    def get_Tool(self):
        '''Method IMdProcess.get_Tool

           OUTPUT
            Tool                : IGPTool**'''
        return super(IMdProcess, self).get_Tool()
    def putref_Tool(self, Tool):
        '''Method IMdProcess.putref_Tool

           INPUT
            Tool                : IGPTool*'''
        return super(IMdProcess, self).putref_Tool(Tool)
    def get_Parameters(self):
        '''Method IMdProcess.get_Parameters

           OUTPUT
            params              : IArray**'''
        return super(IMdProcess, self).get_Parameters()
    def get_InputParameters(self):
        '''Method IMdProcess.get_InputParameters

           OUTPUT
            params              : IArray**'''
        return super(IMdProcess, self).get_InputParameters()
    def get_OutputParameters(self):
        '''Method IMdProcess.get_OutputParameters

           OUTPUT
            params              : IArray**'''
        return super(IMdProcess, self).get_OutputParameters()
    def get_Parameter(self, Name):
        '''Method IMdProcess.get_Parameter

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : IMdParameter**'''
        return super(IMdProcess, self).get_Parameter(Name)
    def get_EnvironmentManager(self):
        '''Method IMdProcess.get_EnvironmentManager

           OUTPUT
            ppEnvMgr            : IGPEnvironmentManager**'''
        return super(IMdProcess, self).get_EnvironmentManager()
    def putref_EnvironmentManager(self, ppEnvMgr):
        '''Method IMdProcess.putref_EnvironmentManager

           INPUT
            ppEnvMgr            : IGPEnvironmentManager*'''
        return super(IMdProcess, self).putref_EnvironmentManager(ppEnvMgr)
    def SetParameterValue(self, Name, Value):
        '''Method IMdProcess.SetParameterValue

           INPUTS
            Name                : BSTR
            Value               : IGPValue*'''
        return super(IMdProcess, self).SetParameterValue(Name, Value)
    def GetParameterValue(self, Name):
        '''Method IMdProcess.GetParameterValue

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IMdProcess, self).GetParameterValue(Name)
    def Execute(self, TrackCancel, pEnvMgr, Messages):
        '''Method IMdProcess.Execute

           INPUTS
            TrackCancel         : ITrackCancel*
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*'''
        return super(IMdProcess, self).Execute(TrackCancel, pEnvMgr, Messages)
    def IsToolValid(self):
        '''Method IMdProcess.IsToolValid

           OUTPUT
            IsValid             : VARIANT_BOOL*'''
        return super(IMdProcess, self).IsToolValid()
    def NeedsRepair(self):
        '''Method IMdProcess.NeedsRepair

           OUTPUT
            NeedsRepair         : VARIANT_BOOL*'''
        return super(IMdProcess, self).NeedsRepair()
    def RepairParameters(self):
        '''Method IMdProcess.RepairParameters'''
        return super(IMdProcess, self).RepairParameters()
    def get_Preconditions(self):
        '''Method IMdProcess.get_Preconditions

           OUTPUT
            ppValues            : IArray**'''
        return super(IMdProcess, self).get_Preconditions()
    def putref_Preconditions(self, ppValues):
        '''Method IMdProcess.putref_Preconditions

           INPUT
            ppValues            : IArray*'''
        return super(IMdProcess, self).putref_Preconditions(ppValues)
    EnvironmentManager = property(get_EnvironmentManager, putref_EnvironmentManager, None)
    InputParameters = property(get_InputParameters, None, None)
    OutputParameters = property(get_OutputParameters, None, None)
    Parameters = property(get_Parameters, None, None)
    Preconditions = property(get_Preconditions, putref_Preconditions, None)
    Tool = property(get_Tool, putref_Tool, None)
    ToolName = property(get_ToolName, None, None)
    Parameter = IndexProperty(get_Parameter, None)

class IProcessLayer(_esriGeoprocessing.IProcessLayer):
    _IID = uuid.UUID('787b8668-36fb-452a-a96c-6ff2d2b0f038')

    def __init__(self, *args, **kw):
        super(IProcessLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Process(self, ppProcess):
        '''Method IProcessLayer.putref_Process

           INPUT
            ppProcess           : IMdProcess*'''
        return super(IProcessLayer, self).putref_Process(ppProcess)
    def get_Process(self):
        '''Method IProcessLayer.get_Process

           OUTPUT
            ppProcess           : IMdProcess**'''
        return super(IProcessLayer, self).get_Process()
    def RefreshLayers(self, pActiveView, bConnect, pContentsChanged):
        '''Method IProcessLayer.RefreshLayers

           INPUTS
            pActiveView         : IActiveView*
            bConnect            : VARIANT_BOOL
            pContentsChanged    : VARIANT_BOOL*'''
        return super(IProcessLayer, self).RefreshLayers(pActiveView, bConnect, pContentsChanged)
    Process = property(get_Process, putref_Process, None)

class IMdModelEvents(_esriGeoprocessing.IMdModelEvents):
    _IID = uuid.UUID('a19a5a0e-ce7e-4fa2-9f0a-a027922ea20b')
    def OnBeginProcessExecution(self, Process):
        '''Method IMdModelEvents.OnBeginProcessExecution

           INPUT
            Process             : IMdProcess*'''
        return super(IMdModelEvents, self).OnBeginProcessExecution(Process)
    def OnEndProcessExecution(self, Process, Messages):
        '''Method IMdModelEvents.OnEndProcessExecution

           INPUTS
            Process             : IMdProcess*
            Messages            : IGPMessages*'''
        return super(IMdModelEvents, self).OnEndProcessExecution(Process, Messages)
    def OnProcessChanged(self, Process):
        '''Method IMdModelEvents.OnProcessChanged

           INPUT
            Process             : IMdProcess*'''
        return super(IMdModelEvents, self).OnProcessChanged(Process)

class IGPTask(_esriGeoprocessing.IGPTask):
    _IID = uuid.UUID('f25fa93f-27ff-4698-889d-115904e429ab')

    def __init__(self, *args, **kw):
        super(IGPTask, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, Process):
        '''Method IGPTask.Init

           INPUT
            Process             : IMdProcess*'''
        return super(IGPTask, self).Init(Process)
    def InitPackage(self, Process):
        '''Method IGPTask.InitPackage

           INPUT
            Process             : IMdProcess*'''
        return super(IGPTask, self).InitPackage(Process)
    def get_Mode(self):
        '''Method IGPTask.get_Mode

           OUTPUT
            Mode                : long*'''
        return super(IGPTask, self).get_Mode()
    def get_Process(self):
        '''Method IGPTask.get_Process

           OUTPUT
            Process             : IMdProcess**'''
        return super(IGPTask, self).get_Process()
    def putref_Process(self, Process):
        '''Method IGPTask.putref_Process

           INPUT
            Process             : IMdProcess*'''
        return super(IGPTask, self).putref_Process(Process)
    def get_ParameterMapping(self):
        '''Method IGPTask.get_ParameterMapping

           OUTPUT
            ParameterMapping    : IPropertySet**'''
        return super(IGPTask, self).get_ParameterMapping()
    def GetParameterInfo(self, Name):
        '''Method IGPTask.GetParameterInfo

           INPUT
            Name                : BSTR

           OUTPUTS
            Visible             : VARIANT_BOOL*
            ppParameter         : IGPParameter**
            ppDomain            : IGPDomain**'''
        return super(IGPTask, self).GetParameterInfo(Name)
    def SetParameterInfo(self, Name, Visible, pParameter, pDomain):
        '''Method IGPTask.SetParameterInfo

           INPUTS
            Name                : BSTR
            Visible             : VARIANT_BOOL
            pParameter          : IGPParameter*
            pDomain             : IGPDomain*'''
        return super(IGPTask, self).SetParameterInfo(Name, Visible, pParameter, pDomain)
    def GetRenderer(self, Name):
        '''Method IGPTask.GetRenderer

           INPUT
            Name                : BSTR

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IGPTask, self).GetRenderer(Name)
    def SetRenderer(self, Name, pRenderer):
        '''Method IGPTask.SetRenderer

           INPUTS
            Name                : BSTR
            pRenderer           : IUnknown*'''
        return super(IGPTask, self).SetRenderer(Name, pRenderer)
    def get_HasWorkspace(self):
        '''Method IGPTask.get_HasWorkspace

           OUTPUT
            pHasWorkspace       : VARIANT_BOOL*'''
        return super(IGPTask, self).get_HasWorkspace()
    def put_HasWorkspace(self, pHasWorkspace):
        '''Method IGPTask.put_HasWorkspace

           INPUT
            pHasWorkspace       : VARIANT_BOOL'''
        return super(IGPTask, self).put_HasWorkspace(pHasWorkspace)
    def GetParameterDescription(self, Name):
        '''Method IGPTask.GetParameterDescription

           INPUT
            Name                : BSTR

           OUTPUT
            desc                : BSTR*'''
        return super(IGPTask, self).GetParameterDescription(Name)
    def SetParameterDescription(self, Name, desc):
        '''Method IGPTask.SetParameterDescription

           INPUTS
            Name                : BSTR
            desc                : BSTR'''
        return super(IGPTask, self).SetParameterDescription(Name, desc)
    HasWorkspace = property(get_HasWorkspace, put_HasWorkspace, None)
    Mode = property(get_Mode, None, None)
    ParameterMapping = property(get_ParameterMapping, None, None)
    Process = property(get_Process, putref_Process, None)

class IGeoProcessorResult2(_esriGeoprocessing.IGeoProcessorResult2):
    _IID = uuid.UUID('23c0c81f-421a-44d9-a123-ae12b3c4e282')

    def __init__(self, *args, **kw):
        super(IGeoProcessorResult2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ReturnValue(self):
        '''Method IGeoProcessorResult2.get_ReturnValue

           OUTPUT
            pRetValue           : VARIANT*'''
        return super(IGeoProcessorResult2, self).get_ReturnValue()
    def get_Status(self):
        '''Method IGeoProcessorResult2.get_Status

           OUTPUT
            Status              : esriJobStatus*'''
        return super(IGeoProcessorResult2, self).get_Status()
    def get_ResultID(self):
        '''Method IGeoProcessorResult2.get_ResultID

           OUTPUT
            ResultID            : BSTR*'''
        return super(IGeoProcessorResult2, self).get_ResultID()
    def GetResultMessages(self):
        '''Method IGeoProcessorResult2.GetResultMessages

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGeoProcessorResult2, self).GetResultMessages()
    def get_MessageCount(self):
        '''Method IGeoProcessorResult2.get_MessageCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessorResult2, self).get_MessageCount()
    def GetMessage(self, Index):
        '''Method IGeoProcessorResult2.GetMessage

           INPUT
            Index               : long

           OUTPUT
            pMessage            : BSTR*'''
        return super(IGeoProcessorResult2, self).GetMessage(Index)
    def GetSeverity(self, Index):
        '''Method IGeoProcessorResult2.GetSeverity

           INPUT
            Index               : long

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessorResult2, self).GetSeverity(Index)
    def GetReturnCode(self, Index):
        '''Method IGeoProcessorResult2.GetReturnCode

           INPUT
            Index               : long

           OUTPUT
            pCode               : long*'''
        return super(IGeoProcessorResult2, self).GetReturnCode(Index)
    def GetMessages(self, severity):
        '''Method IGeoProcessorResult2.GetMessages

           INPUT
            severity            : long

           OUTPUT
            pMessages           : BSTR*'''
        return super(IGeoProcessorResult2, self).GetMessages(severity)
    def get_MaxSeverity(self):
        '''Method IGeoProcessorResult2.get_MaxSeverity

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessorResult2, self).get_MaxSeverity()
    def get_OutputCount(self):
        '''Method IGeoProcessorResult2.get_OutputCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessorResult2, self).get_OutputCount()
    def GetOutput(self, Index):
        '''Method IGeoProcessorResult2.GetOutput

           INPUT
            Index               : long

           OUTPUT
            outputValue         : IGPValue**'''
        return super(IGeoProcessorResult2, self).GetOutput(Index)
    def get_InputCount(self):
        '''Method IGeoProcessorResult2.get_InputCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessorResult2, self).get_InputCount()
    def GetInput(self, Index):
        '''Method IGeoProcessorResult2.GetInput

           INPUT
            Index               : long

           OUTPUT
            inputValue          : IGPValue**'''
        return super(IGeoProcessorResult2, self).GetInput(Index)
    def Cancel(self):
        '''Method IGeoProcessorResult2.Cancel'''
        return super(IGeoProcessorResult2, self).Cancel()
    def GetMapImageURL(self, pParamIndexes, Height, Width, resolution):
        '''Method IGeoProcessorResult2.GetMapImageURL

           INPUTS
            pParamIndexes       : ILongArray*
            Height              : long
            Width               : long
            resolution          : long

           OUTPUT
            URL                 : BSTR*'''
        return super(IGeoProcessorResult2, self).GetMapImageURL(pParamIndexes, Height, Width, resolution)
    def put_Status(self, Status):
        '''Method IGeoProcessorResult2.put_Status

           INPUT
            Status              : esriJobStatus'''
        return super(IGeoProcessorResult2, self).put_Status(Status)
    def put_ResultID(self, ResultID):
        '''Method IGeoProcessorResult2.put_ResultID

           INPUT
            ResultID            : BSTR'''
        return super(IGeoProcessorResult2, self).put_ResultID(ResultID)
    def get_Process(self):
        '''Method IGeoProcessorResult2.get_Process

           OUTPUT
            Process             : IMdProcess**'''
        return super(IGeoProcessorResult2, self).get_Process()
    def putref_Process(self, Process):
        '''Method IGeoProcessorResult2.putref_Process

           INPUT
            Process             : IMdProcess*'''
        return super(IGeoProcessorResult2, self).putref_Process(Process)
    def get_IsCanceled(self):
        '''Method IGeoProcessorResult2.get_IsCanceled

           OUTPUT
            IsCanceled          : VARIANT_BOOL*'''
        return super(IGeoProcessorResult2, self).get_IsCanceled()
    def get_IsAsync(self):
        '''Method IGeoProcessorResult2.get_IsAsync

           OUTPUT
            IsAsync             : VARIANT_BOOL*'''
        return super(IGeoProcessorResult2, self).get_IsAsync()
    InputCount = property(get_InputCount, None, None)
    IsAsync = property(get_IsAsync, None, None)
    IsCanceled = property(get_IsCanceled, None, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    MessageCount = property(get_MessageCount, None, None)
    OutputCount = property(get_OutputCount, None, None)
    Process = property(get_Process, putref_Process, None)
    ResultID = property(get_ResultID, put_ResultID, None)
    ReturnValue = property(get_ReturnValue, None, None)
    Status = property(get_Status, put_Status, None)

class IGeoProcessorEvents2(_esriGeoprocessing.IGeoProcessorEvents2):
    _IID = uuid.UUID('9fe51cc2-bdfe-4f72-b4cb-6dc4e5d9c94d')
    def OnMessageAdded(self, message):
        '''Method IGeoProcessorEvents2.OnMessageAdded

           INPUT
            message             : IGPMessage*'''
        return super(IGeoProcessorEvents2, self).OnMessageAdded(message)
    def PreToolExecute(self, Process):
        '''Method IGeoProcessorEvents2.PreToolExecute

           INPUT
            Process             : IMdProcess*'''
        return super(IGeoProcessorEvents2, self).PreToolExecute(Process)
    def PostToolExecute(self, result, Process):
        '''Method IGeoProcessorEvents2.PostToolExecute

           INPUTS
            result              : HRESULT
            Process             : IMdProcess*'''
        return super(IGeoProcessorEvents2, self).PostToolExecute(result, Process)
    def ToolboxChange(self):
        '''Method IGeoProcessorEvents2.ToolboxChange'''
        return super(IGeoProcessorEvents2, self).ToolboxChange()

class IMdModelImpl(_esriGeoprocessing.IMdModelImpl):
    _IID = uuid.UUID('7f543be3-c64a-4cdd-8305-ea646f7df97d')

    def __init__(self, *args, **kw):
        super(IMdModelImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def OnProcessChanged(self, pProcess):
        '''Method IMdModelImpl.OnProcessChanged

           INPUT
            pProcess            : IMdProcess*'''
        return super(IMdModelImpl, self).OnProcessChanged(pProcess)
    def get_MinimumProduct(self):
        '''Method IMdModelImpl.get_MinimumProduct

           OUTPUT
            product             : esriProductCode*'''
        return super(IMdModelImpl, self).get_MinimumProduct()
    def get_RequiredExtensions(self):
        '''Method IMdModelImpl.get_RequiredExtensions

           OUTPUT
            extensions          : ILongArray**'''
        return super(IMdModelImpl, self).get_RequiredExtensions()
    def InitializeOutputNames(self, pEnvMgr):
        '''Method IMdModelImpl.InitializeOutputNames

           INPUT
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            pSubModel           : VARIANT_BOOL*'''
        return super(IMdModelImpl, self).InitializeOutputNames(pEnvMgr)
    def ResetOutputNames(self, pEnvMgr, bSubModel):
        '''Method IMdModelImpl.ResetOutputNames

           INPUTS
            pEnvMgr             : IGPEnvironmentManager*
            bSubModel           : VARIANT_BOOL'''
        return super(IMdModelImpl, self).ResetOutputNames(pEnvMgr, bSubModel)
    def put_ResolveAll(self, _arg1):
        '''Method IMdModelImpl.put_ResolveAll

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IMdModelImpl, self).put_ResolveAll(_arg1)
    MinimumProduct = property(get_MinimumProduct, None, None)
    RequiredExtensions = property(get_RequiredExtensions, None, None)
    ResolveAll = property(None, put_ResolveAll, None)

class IModelScriptConverterEngineCallback(_esriGeoprocessing.IModelScriptConverterEngineCallback):
    _IID = uuid.UUID('bdde3e4f-0aee-45ca-8423-0b4bb9d9292f')
    def PreExportModel(self, Tool, Path):
        '''Method IModelScriptConverterEngineCallback.PreExportModel

           INPUTS
            Tool                : IGPModelTool*
            Path                : BSTR

           OUTPUT
            text                : BSTR*'''
        return super(IModelScriptConverterEngineCallback, self).PreExportModel(Tool, Path)
    def ExportProcess(self, Process):
        '''Method IModelScriptConverterEngineCallback.ExportProcess

           INPUT
            Process             : IMdProcess*

           OUTPUT
            text                : BSTR*'''
        return super(IModelScriptConverterEngineCallback, self).ExportProcess(Process)
    def PostExportModel(self, Tool):
        '''Method IModelScriptConverterEngineCallback.PostExportModel

           INPUT
            Tool                : IGPModelTool*

           OUTPUT
            text                : BSTR*'''
        return super(IModelScriptConverterEngineCallback, self).PostExportModel(Tool)

class IModelScriptConverterEngine(_esriGeoprocessing.IModelScriptConverterEngine):
    _IID = uuid.UUID('6a410518-b9a4-4919-94f9-5e0c5cd616ab')

    def __init__(self, *args, **kw):
        super(IModelScriptConverterEngine, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Callback(self):
        '''Method IModelScriptConverterEngine.get_Callback

           OUTPUT
            exportCallback      : IModelScriptConverterEngineCallback**'''
        return super(IModelScriptConverterEngine, self).get_Callback()
    def putref_Callback(self, exportCallback):
        '''Method IModelScriptConverterEngine.putref_Callback

           INPUT
            exportCallback      : IModelScriptConverterEngineCallback*'''
        return super(IModelScriptConverterEngine, self).putref_Callback(exportCallback)
    def ExportToScript(self, Tool, FileName):
        '''Method IModelScriptConverterEngine.ExportToScript

           INPUTS
            Tool                : IGPModelTool*
            FileName            : BSTR'''
        return super(IModelScriptConverterEngine, self).ExportToScript(Tool, FileName)
    Callback = property(get_Callback, putref_Callback, None)

class IGPJobRequest(_esriGeoprocessing.IGPJobRequest):
    _IID = uuid.UUID('a3a9bb50-3d37-4ac7-83c7-3b77f36893f4')

    def __init__(self, *args, **kw):
        super(IGPJobRequest, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Process(self):
        '''Method IGPJobRequest.get_Process

           OUTPUT
            ppProcess           : IMdProcess**'''
        return super(IGPJobRequest, self).get_Process()
    def putref_Process(self, ppProcess):
        '''Method IGPJobRequest.putref_Process

           INPUT
            ppProcess           : IMdProcess*'''
        return super(IGPJobRequest, self).putref_Process(ppProcess)
    def get_Data(self):
        '''Method IGPJobRequest.get_Data

           OUTPUT
            ppData              : IArray**'''
        return super(IGPJobRequest, self).get_Data()
    def putref_Data(self, ppData):
        '''Method IGPJobRequest.putref_Data

           INPUT
            ppData              : IArray*'''
        return super(IGPJobRequest, self).putref_Data(ppData)
    def get_Values(self):
        '''Method IGPJobRequest.get_Values

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPJobRequest, self).get_Values()
    def putref_Values(self, ppValues):
        '''Method IGPJobRequest.putref_Values

           INPUT
            ppValues            : IArray*'''
        return super(IGPJobRequest, self).putref_Values(ppValues)
    def get_ExtensionCodes(self):
        '''Method IGPJobRequest.get_ExtensionCodes

           OUTPUT
            ppCodes             : ILongArray**'''
        return super(IGPJobRequest, self).get_ExtensionCodes()
    def putref_ExtensionCodes(self, ppCodes):
        '''Method IGPJobRequest.putref_ExtensionCodes

           INPUT
            ppCodes             : ILongArray*'''
        return super(IGPJobRequest, self).putref_ExtensionCodes(ppCodes)
    Data = property(get_Data, putref_Data, None)
    ExtensionCodes = property(get_ExtensionCodes, putref_ExtensionCodes, None)
    Process = property(get_Process, putref_Process, None)
    Values = property(get_Values, putref_Values, None)

class IGPJobResult(_esriGeoprocessing.IGPJobResult):
    _IID = uuid.UUID('accbce1a-7dce-4915-935d-3da1994118fd')

    def __init__(self, *args, **kw):
        super(IGPJobResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Process(self):
        '''Method IGPJobResult.get_Process

           OUTPUT
            ppProcess           : IMdProcess**'''
        return super(IGPJobResult, self).get_Process()
    def putref_Process(self, ppProcess):
        '''Method IGPJobResult.putref_Process

           INPUT
            ppProcess           : IMdProcess*'''
        return super(IGPJobResult, self).putref_Process(ppProcess)
    def get_Data(self):
        '''Method IGPJobResult.get_Data

           OUTPUT
            ppData              : IArray**'''
        return super(IGPJobResult, self).get_Data()
    def putref_Data(self, ppData):
        '''Method IGPJobResult.putref_Data

           INPUT
            ppData              : IArray*'''
        return super(IGPJobResult, self).putref_Data(ppData)
    def get_Values(self):
        '''Method IGPJobResult.get_Values

           OUTPUT
            ppValues            : IArray**'''
        return super(IGPJobResult, self).get_Values()
    def putref_Values(self, ppValues):
        '''Method IGPJobResult.putref_Values

           INPUT
            ppValues            : IArray*'''
        return super(IGPJobResult, self).putref_Values(ppValues)
    Data = property(get_Data, putref_Data, None)
    Process = property(get_Process, putref_Process, None)
    Values = property(get_Values, putref_Values, None)

class IGPJobServer(_esriGeoprocessing.IGPJobServer):
    _IID = uuid.UUID('c2efb832-96ef-4687-bab1-dc558cc1fdd1')
    def Execute(self, pRequest, pTrackCancel):
        '''Method IGPJobServer.Execute

           INPUTS
            pRequest            : IGPJobRequest*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppResult            : IGPJobResult**'''
        return super(IGPJobServer, self).Execute(pRequest, pTrackCancel)
    def Init(self, Type):
        '''Method IGPJobServer.Init

           INPUT
            Type                : long'''
        return super(IGPJobServer, self).Init(Type)

class IGPTool(_esriGeoprocessing.IGPTool):
    _IID = uuid.UUID('252c58fd-4042-4628-a9d0-de54c158ba55')

    def __init__(self, *args, **kw):
        super(IGPTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPTool.get_Name

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IGPTool, self).get_Name()
    def put_Name(self, DisplayName):
        '''Method IGPTool.put_Name

           INPUT
            DisplayName         : BSTR'''
        return super(IGPTool, self).put_Name(DisplayName)
    def get_DisplayName(self):
        '''Method IGPTool.get_DisplayName

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IGPTool, self).get_DisplayName()
    def put_DisplayName(self, DisplayName):
        '''Method IGPTool.put_DisplayName

           INPUT
            DisplayName         : BSTR'''
        return super(IGPTool, self).put_DisplayName(DisplayName)
    def get_Description(self):
        '''Method IGPTool.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IGPTool, self).get_Description()
    def put_Description(self, Description):
        '''Method IGPTool.put_Description

           INPUT
            Description         : BSTR'''
        return super(IGPTool, self).put_Description(Description)
    def get_ToolCategory(self):
        '''Method IGPTool.get_ToolCategory

           OUTPUT
            Category            : BSTR*'''
        return super(IGPTool, self).get_ToolCategory()
    def put_ToolCategory(self, Category):
        '''Method IGPTool.put_ToolCategory

           INPUT
            Category            : BSTR'''
        return super(IGPTool, self).put_ToolCategory(Category)
    def get_Toolbox(self):
        '''Method IGPTool.get_Toolbox

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IGPTool, self).get_Toolbox()
    def get_ToolType(self):
        '''Method IGPTool.get_ToolType

           OUTPUT
            Type                : esriGPToolType*'''
        return super(IGPTool, self).get_ToolType()
    def IsValid(self):
        '''Method IGPTool.IsValid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IGPTool, self).IsValid()
    def IsLicensedForProduct(self):
        '''Method IGPTool.IsLicensedForProduct

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPTool, self).IsLicensedForProduct()
    def IsLicensed(self):
        '''Method IGPTool.IsLicensed

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPTool, self).IsLicensed()
    def get_IsDeleted(self):
        '''Method IGPTool.get_IsDeleted

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(IGPTool, self).get_IsDeleted()
    def CanAlter(self):
        '''Method IGPTool.CanAlter

           OUTPUT
            CanAlter            : VARIANT_BOOL*'''
        return super(IGPTool, self).CanAlter()
    def CanEditSource(self):
        '''Method IGPTool.CanEditSource

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IGPTool, self).CanEditSource()
    def get_ParameterInfo(self):
        '''Method IGPTool.get_ParameterInfo

           OUTPUT
            params              : IArray**'''
        return super(IGPTool, self).get_ParameterInfo()
    def get_DialogCLSID(self):
        '''Method IGPTool.get_DialogCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPTool, self).get_DialogCLSID()
    def Store(self):
        '''Method IGPTool.Store'''
        return super(IGPTool, self).Store()
    def Validate(self, paramvalues, updateValues, pEnvMgr):
        '''Method IGPTool.Validate

           INPUTS
            paramvalues         : IArray*
            updateValues        : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGPTool, self).Validate(paramvalues, updateValues, pEnvMgr)
    def Execute(self, paramvalues, TrackCancel, pEnvMgr, Messages):
        '''Method IGPTool.Execute

           INPUTS
            paramvalues         : IArray*
            TrackCancel         : ITrackCancel*
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*'''
        return super(IGPTool, self).Execute(paramvalues, TrackCancel, pEnvMgr, Messages)
    def EditProperties(self, hParent, GPEnvMgr):
        '''Method IGPTool.EditProperties

           INPUTS
            hParent             : OLE_HANDLE
            GPEnvMgr            : IGPEnvironmentManager*

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(IGPTool, self).EditProperties(hParent, GPEnvMgr)
    def GetRenderer(self, pParam):
        '''Method IGPTool.GetRenderer

           INPUT
            pParam              : IGPParameter*

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IGPTool, self).GetRenderer(pParam)
    def get_PathName(self):
        '''Method IGPTool.get_PathName

           OUTPUT
            PathName            : BSTR*'''
        return super(IGPTool, self).get_PathName()
    def get_RelativePaths(self):
        '''Method IGPTool.get_RelativePaths

           OUTPUT
            relPaths            : VARIANT_BOOL*'''
        return super(IGPTool, self).get_RelativePaths()
    def put_RelativePaths(self, relPaths):
        '''Method IGPTool.put_RelativePaths

           INPUT
            relPaths            : VARIANT_BOOL'''
        return super(IGPTool, self).put_RelativePaths(relPaths)
    def get_HelpFile(self):
        '''Method IGPTool.get_HelpFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPTool, self).get_HelpFile()
    def put_HelpFile(self, File):
        '''Method IGPTool.put_HelpFile

           INPUT
            File                : BSTR'''
        return super(IGPTool, self).put_HelpFile(File)
    def get_HelpContext(self):
        '''Method IGPTool.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IGPTool, self).get_HelpContext()
    def put_HelpContext(self, context):
        '''Method IGPTool.put_HelpContext

           INPUT
            context             : long'''
        return super(IGPTool, self).put_HelpContext(context)
    Description = property(get_Description, put_Description, None)
    DialogCLSID = property(get_DialogCLSID, None, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    HelpContext = property(get_HelpContext, put_HelpContext, None)
    HelpFile = property(get_HelpFile, put_HelpFile, None)
    IsDeleted = property(get_IsDeleted, None, None)
    Name = property(get_Name, put_Name, None)
    ParameterInfo = property(get_ParameterInfo, None, None)
    PathName = property(get_PathName, None, None)
    RelativePaths = property(get_RelativePaths, put_RelativePaths, None)
    ToolCategory = property(get_ToolCategory, put_ToolCategory, None)
    ToolType = property(get_ToolType, None, None)
    Toolbox = property(get_Toolbox, None, None)

class IEnumGPTool(_esriGeoprocessing.IEnumGPTool):
    _IID = uuid.UUID('a1e6e476-4820-4d92-8dea-7af3ead9a559')
    def Next(self):
        '''Method IEnumGPTool.Next

           OUTPUT
            Tool                : IGPTool**'''
        return super(IEnumGPTool, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPTool, self).Reset()
            val = super(IEnumGPTool, self).Next()
            while val:
                yield val
                val = super(IEnumGPTool, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPTool.Reset'''
        return super(IEnumGPTool, self).Reset()

class IGPToolboxEvents(_esriGeoprocessing.IGPToolboxEvents):
    _IID = uuid.UUID('8ec7e8d8-749a-4e24-b539-0371d8266ee0')
    def OnToolboxDeleted(self):
        '''Method IGPToolboxEvents.OnToolboxDeleted'''
        return super(IGPToolboxEvents, self).OnToolboxDeleted()
    def OnToolboxRenamed(self, oldName, newName):
        '''Method IGPToolboxEvents.OnToolboxRenamed

           INPUTS
            oldName             : BSTR
            newName             : BSTR'''
        return super(IGPToolboxEvents, self).OnToolboxRenamed(oldName, newName)
    def OnToolAdded(self, Tool):
        '''Method IGPToolboxEvents.OnToolAdded

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxEvents, self).OnToolAdded(Tool)
    def OnToolDeleted(self, Tool):
        '''Method IGPToolboxEvents.OnToolDeleted

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxEvents, self).OnToolDeleted(Tool)
    def OnToolStored(self, Tool):
        '''Method IGPToolboxEvents.OnToolStored

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxEvents, self).OnToolStored(Tool)
    def OnToolStateChanged(self, Tool):
        '''Method IGPToolboxEvents.OnToolStateChanged

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxEvents, self).OnToolStateChanged(Tool)

class IGPToolEdit(_esriGeoprocessing.IGPToolEdit):
    _IID = uuid.UUID('338e5b19-9464-4ce4-a35b-f73184c1926f')
    def CanCopy(self):
        '''Method IGPToolEdit.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IGPToolEdit, self).CanCopy()
    def Copy(self, destination):
        '''Method IGPToolEdit.Copy

           INPUT
            destination         : IUnknown*

           OUTPUT
            Copy                : IGPTool**'''
        return super(IGPToolEdit, self).Copy(destination)

class IGeoProcessorEvents(_esriGeoprocessing.IGeoProcessorEvents):
    _IID = uuid.UUID('4efba2ee-5e4c-4b7a-99c2-9f59e0fb62e4')
    def OnMessageAdded(self, message):
        '''Method IGeoProcessorEvents.OnMessageAdded

           INPUT
            message             : IGPMessage*'''
        return super(IGeoProcessorEvents, self).OnMessageAdded(message)
    def PreToolExecute(self, Tool, Values, processID):
        '''Method IGeoProcessorEvents.PreToolExecute

           INPUTS
            Tool                : IGPTool*
            Values              : IArray*
            processID           : long'''
        return super(IGeoProcessorEvents, self).PreToolExecute(Tool, Values, processID)
    def PostToolExecute(self, Tool, Values, result, Messages):
        '''Method IGeoProcessorEvents.PostToolExecute

           INPUTS
            Tool                : IGPTool*
            Values              : IArray*
            result              : HRESULT
            Messages            : IGPMessages*'''
        return super(IGeoProcessorEvents, self).PostToolExecute(Tool, Values, result, Messages)
    def ToolboxChange(self):
        '''Method IGeoProcessorEvents.ToolboxChange'''
        return super(IGeoProcessorEvents, self).ToolboxChange()

class IGeoProcessor(_esriGeoprocessing.IGeoProcessor):
    _IID = uuid.UUID('efdde95c-61fc-419d-be35-e5f18c7df160')

    def __init__(self, *args, **kw):
        super(IGeoProcessor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetEnvironmentValue(self, environmentName):
        '''Method IGeoProcessor.GetEnvironmentValue

           INPUT
            environmentName     : BSTR

           OUTPUT
            pvarResult          : VARIANT*'''
        return super(IGeoProcessor, self).GetEnvironmentValue(environmentName)
    def SetEnvironmentValue(self, environmentName, Value):
        '''Method IGeoProcessor.SetEnvironmentValue

           INPUTS
            environmentName     : BSTR
            Value               : VARIANT'''
        return super(IGeoProcessor, self).SetEnvironmentValue(environmentName, Value)
    def ResetEnvironments(self):
        '''Method IGeoProcessor.ResetEnvironments'''
        return super(IGeoProcessor, self).ResetEnvironments()
    def Execute(self, Name, ipValues, pTrackCancel):
        '''Method IGeoProcessor.Execute

           INPUTS
            Name                : BSTR
            ipValues            : IVariantArray*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IGeoProcessor, self).Execute(Name, ipValues, pTrackCancel)
    def Validate(self, Name, ipValues, bUpdateValues):
        '''Method IGeoProcessor.Validate

           INPUTS
            Name                : BSTR
            ipValues            : IVariantArray*
            bUpdateValues       : VARIANT_BOOL

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGeoProcessor, self).Validate(Name, ipValues, bUpdateValues)
    def Open(self, Value):
        '''Method IGeoProcessor.Open

           INPUT
            Value               : VARIANT

           OUTPUT
            ppResult            : IUnknown**'''
        return super(IGeoProcessor, self).Open(Value)
    def GetDataElement(self, inputValue, pDataType):
        '''Method IGeoProcessor.GetDataElement

           INPUTS
            inputValue          : VARIANT
            pDataType           : VARIANT*

           OUTPUT
            ppGpDescribe        : IDataElement**'''
        return super(IGeoProcessor, self).GetDataElement(inputValue, pDataType)
    def ListTools(self, wildCard):
        '''Method IGeoProcessor.ListTools

           INPUT
            wildCard            : BSTR

           OUTPUT
            ppGpEnumList        : IGpEnumList**'''
        return super(IGeoProcessor, self).ListTools(wildCard)
    def ListEnvironments(self, wildCard):
        '''Method IGeoProcessor.ListEnvironments

           INPUT
            wildCard            : BSTR

           OUTPUT
            ppGpEnumList        : IGpEnumList**'''
        return super(IGeoProcessor, self).ListEnvironments(wildCard)
    def ListToolboxes(self, wildCard):
        '''Method IGeoProcessor.ListToolboxes

           INPUT
            wildCard            : BSTR

           OUTPUT
            ppGpEnumList        : IGpEnumList**'''
        return super(IGeoProcessor, self).ListToolboxes(wildCard)
    def AddToolbox(self, Toolbox):
        '''Method IGeoProcessor.AddToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGeoProcessor, self).AddToolbox(Toolbox)
    def RemoveToolbox(self, Toolbox):
        '''Method IGeoProcessor.RemoveToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGeoProcessor, self).RemoveToolbox(Toolbox)
    def put_AddOutputsToMap(self, AddToMap):
        '''Method IGeoProcessor.put_AddOutputsToMap

           INPUT
            AddToMap            : VARIANT_BOOL'''
        return super(IGeoProcessor, self).put_AddOutputsToMap(AddToMap)
    def get_AddOutputsToMap(self):
        '''Method IGeoProcessor.get_AddOutputsToMap

           OUTPUT
            AddToMap            : VARIANT_BOOL*'''
        return super(IGeoProcessor, self).get_AddOutputsToMap()
    def put_OverwriteOutput(self, pOverrideOutput):
        '''Method IGeoProcessor.put_OverwriteOutput

           INPUT
            pOverrideOutput     : VARIANT_BOOL'''
        return super(IGeoProcessor, self).put_OverwriteOutput(pOverrideOutput)
    def get_OverwriteOutput(self):
        '''Method IGeoProcessor.get_OverwriteOutput

           OUTPUT
            pOverrideOutput     : VARIANT_BOOL*'''
        return super(IGeoProcessor, self).get_OverwriteOutput()
    def put_TemporaryMapLayers(self, TemporaryMapLayers):
        '''Method IGeoProcessor.put_TemporaryMapLayers

           INPUT
            TemporaryMapLayers  : VARIANT_BOOL'''
        return super(IGeoProcessor, self).put_TemporaryMapLayers(TemporaryMapLayers)
    def get_TemporaryMapLayers(self):
        '''Method IGeoProcessor.get_TemporaryMapLayers

           OUTPUT
            TemporaryMapLayers  : VARIANT_BOOL*'''
        return super(IGeoProcessor, self).get_TemporaryMapLayers()
    def put_LogHistory(self, LogHistory):
        '''Method IGeoProcessor.put_LogHistory

           INPUT
            LogHistory          : VARIANT_BOOL'''
        return super(IGeoProcessor, self).put_LogHistory(LogHistory)
    def get_LogHistory(self):
        '''Method IGeoProcessor.get_LogHistory

           OUTPUT
            LogHistory          : VARIANT_BOOL*'''
        return super(IGeoProcessor, self).get_LogHistory()
    def GetReturnMessages(self):
        '''Method IGeoProcessor.GetReturnMessages

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGeoProcessor, self).GetReturnMessages()
    def get_MessageCount(self):
        '''Method IGeoProcessor.get_MessageCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessor, self).get_MessageCount()
    def GetMessage(self, Index):
        '''Method IGeoProcessor.GetMessage

           INPUT
            Index               : long

           OUTPUT
            pMessage            : BSTR*'''
        return super(IGeoProcessor, self).GetMessage(Index)
    def GetSeverity(self, Index):
        '''Method IGeoProcessor.GetSeverity

           INPUT
            Index               : long

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessor, self).GetSeverity(Index)
    def GetReturnCode(self, Index):
        '''Method IGeoProcessor.GetReturnCode

           INPUT
            Index               : long

           OUTPUT
            pCode               : long*'''
        return super(IGeoProcessor, self).GetReturnCode(Index)
    def GetMessages(self, pSeverity):
        '''Method IGeoProcessor.GetMessages

           INPUT
            pSeverity           : VARIANT*

           OUTPUT
            pMessages           : BSTR*'''
        return super(IGeoProcessor, self).GetMessages(pSeverity)
    def get_MaxSeverity(self):
        '''Method IGeoProcessor.get_MaxSeverity

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessor, self).get_MaxSeverity()
    def AddMessage(self, message):
        '''Method IGeoProcessor.AddMessage

           INPUT
            message             : BSTR'''
        return super(IGeoProcessor, self).AddMessage(message)
    def AddError(self, message):
        '''Method IGeoProcessor.AddError

           INPUT
            message             : BSTR'''
        return super(IGeoProcessor, self).AddError(message)
    def AddWarning(self, message):
        '''Method IGeoProcessor.AddWarning

           INPUT
            message             : BSTR'''
        return super(IGeoProcessor, self).AddWarning(message)
    def AddReturnMessage(self, Index):
        '''Method IGeoProcessor.AddReturnMessage

           INPUT
            Index               : long'''
        return super(IGeoProcessor, self).AddReturnMessage(Index)
    def ClearMessages(self):
        '''Method IGeoProcessor.ClearMessages'''
        return super(IGeoProcessor, self).ClearMessages()
    def get_ParameterCount(self):
        '''Method IGeoProcessor.get_ParameterCount

           OUTPUT
            Count               : long*'''
        return super(IGeoProcessor, self).get_ParameterCount()
    def GetParameterValue(self, Index):
        '''Method IGeoProcessor.GetParameterValue

           INPUT
            Index               : long

           OUTPUT
            pValue              : VARIANT*'''
        return super(IGeoProcessor, self).GetParameterValue(Index)
    def SetParameterValue(self, Index, Value):
        '''Method IGeoProcessor.SetParameterValue

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IGeoProcessor, self).SetParameterValue(Index, Value)
    def Exists(self, inputValue, pDataType):
        '''Method IGeoProcessor.Exists

           INPUTS
            inputValue          : VARIANT
            pDataType           : VARIANT*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGeoProcessor, self).Exists(inputValue, pDataType)
    def Usage(self, Method):
        '''Method IGeoProcessor.Usage

           INPUT
            Method              : BSTR

           OUTPUT
            Usage               : BSTR*'''
        return super(IGeoProcessor, self).Usage(Method)
    def ListFeatureClasses(self, wildCard, FeatureType, dataset):
        '''Method IGeoProcessor.ListFeatureClasses

           INPUTS
            wildCard            : BSTR
            FeatureType         : BSTR
            dataset             : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor, self).ListFeatureClasses(wildCard, FeatureType, dataset)
    def ListDatasets(self, wildCard, datasetType):
        '''Method IGeoProcessor.ListDatasets

           INPUTS
            wildCard            : BSTR
            datasetType         : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor, self).ListDatasets(wildCard, datasetType)
    def ListWorkspaces(self, wildCard, workspaceType):
        '''Method IGeoProcessor.ListWorkspaces

           INPUTS
            wildCard            : BSTR
            workspaceType       : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor, self).ListWorkspaces(wildCard, workspaceType)
    def ListTables(self, wildCard, tableType):
        '''Method IGeoProcessor.ListTables

           INPUTS
            wildCard            : BSTR
            tableType           : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor, self).ListTables(wildCard, tableType)
    def ListRasters(self, wildCard, RasterType):
        '''Method IGeoProcessor.ListRasters

           INPUTS
            wildCard            : BSTR
            RasterType          : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor, self).ListRasters(wildCard, RasterType)
    def ValidateFieldName(self, inputFieldName, Workspace):
        '''Method IGeoProcessor.ValidateFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputFieldName     : BSTR*'''
        return super(IGeoProcessor, self).ValidateFieldName(inputFieldName, Workspace)
    def ValidateTableName(self, inputTableName, Workspace):
        '''Method IGeoProcessor.ValidateTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGeoProcessor, self).ValidateTableName(inputTableName, Workspace)
    def QualifyFieldName(self, inputFieldName, Workspace):
        '''Method IGeoProcessor.QualifyFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputFieldName     : BSTR*'''
        return super(IGeoProcessor, self).QualifyFieldName(inputFieldName, Workspace)
    def QualifyTableName(self, inputTableName, Workspace):
        '''Method IGeoProcessor.QualifyTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGeoProcessor, self).QualifyTableName(inputTableName, Workspace)
    def ParseFieldName(self, inputFieldName, Workspace):
        '''Method IGeoProcessor.ParseFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputParsedName    : BSTR*'''
        return super(IGeoProcessor, self).ParseFieldName(inputFieldName, Workspace)
    def ParseTableName(self, inputTableName, Workspace):
        '''Method IGeoProcessor.ParseTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputParsedName    : BSTR*'''
        return super(IGeoProcessor, self).ParseTableName(inputTableName, Workspace)
    def SaveSettings(self, FileName):
        '''Method IGeoProcessor.SaveSettings

           INPUT
            FileName            : BSTR'''
        return super(IGeoProcessor, self).SaveSettings(FileName)
    def LoadSettings(self, FileName):
        '''Method IGeoProcessor.LoadSettings

           INPUT
            FileName            : BSTR'''
        return super(IGeoProcessor, self).LoadSettings(FileName)
    def TestSchemaLock(self, FileName):
        '''Method IGeoProcessor.TestSchemaLock

           INPUT
            FileName            : BSTR

           OUTPUT
            pStatus             : BSTR*'''
        return super(IGeoProcessor, self).TestSchemaLock(FileName)
    def RegisterGeoProcessorEvents(self, pGeoProcessorEvents):
        '''Method IGeoProcessor.RegisterGeoProcessorEvents

           INPUT
            pGeoProcessorEvents : IGeoProcessorEvents*'''
        return super(IGeoProcessor, self).RegisterGeoProcessorEvents(pGeoProcessorEvents)
    def UnRegisterGeoProcessorEvents(self, pGeoProcessorEvents):
        '''Method IGeoProcessor.UnRegisterGeoProcessorEvents

           INPUT
            pGeoProcessorEvents : IGeoProcessorEvents*'''
        return super(IGeoProcessor, self).UnRegisterGeoProcessorEvents(pGeoProcessorEvents)
    def CreateResult(self, ToolName, JobID):
        '''Method IGeoProcessor.CreateResult

           INPUTS
            ToolName            : BSTR
            JobID               : BSTR

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IGeoProcessor, self).CreateResult(ToolName, JobID)
    def IsSynchronous(self, ToolName):
        '''Method IGeoProcessor.IsSynchronous

           INPUT
            ToolName            : BSTR

           OUTPUT
            IsSynchronous       : VARIANT_BOOL*'''
        return super(IGeoProcessor, self).IsSynchronous(ToolName)
    AddOutputsToMap = property(get_AddOutputsToMap, put_AddOutputsToMap, None)
    LogHistory = property(get_LogHistory, put_LogHistory, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    MessageCount = property(get_MessageCount, None, None)
    OverwriteOutput = property(get_OverwriteOutput, put_OverwriteOutput, None)
    ParameterCount = property(get_ParameterCount, None, None)
    TemporaryMapLayers = property(get_TemporaryMapLayers, put_TemporaryMapLayers, None)

class IGeoProcessor2(_esriGeoprocessing.IGeoProcessor2):
    _IID = uuid.UUID('cdad9319-2080-4c89-91c6-b679ae671975')

    def __init__(self, *args, **kw):
        super(IGeoProcessor2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetEnvironmentValue(self, environmentName):
        '''Method IGeoProcessor2.GetEnvironmentValue

           INPUT
            environmentName     : BSTR

           OUTPUT
            pvarResult          : VARIANT*'''
        return super(IGeoProcessor2, self).GetEnvironmentValue(environmentName)
    def SetEnvironmentValue(self, environmentName, Value):
        '''Method IGeoProcessor2.SetEnvironmentValue

           INPUTS
            environmentName     : BSTR
            Value               : VARIANT'''
        return super(IGeoProcessor2, self).SetEnvironmentValue(environmentName, Value)
    def ResetEnvironments(self):
        '''Method IGeoProcessor2.ResetEnvironments'''
        return super(IGeoProcessor2, self).ResetEnvironments()
    def Execute(self, Name, ipValues, pTrackCancel):
        '''Method IGeoProcessor2.Execute

           INPUTS
            Name                : BSTR
            ipValues            : IVariantArray*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IGeoProcessor2, self).Execute(Name, ipValues, pTrackCancel)
    def Validate(self, Name, ipValues, bUpdateValues):
        '''Method IGeoProcessor2.Validate

           INPUTS
            Name                : BSTR
            ipValues            : IVariantArray*
            bUpdateValues       : VARIANT_BOOL

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGeoProcessor2, self).Validate(Name, ipValues, bUpdateValues)
    def Open(self, Value):
        '''Method IGeoProcessor2.Open

           INPUT
            Value               : VARIANT

           OUTPUT
            ppResult            : IUnknown**'''
        return super(IGeoProcessor2, self).Open(Value)
    def GetDataElement(self, inputValue, pDataType):
        '''Method IGeoProcessor2.GetDataElement

           INPUTS
            inputValue          : VARIANT
            pDataType           : VARIANT*

           OUTPUT
            ppGpDescribe        : IDataElement**'''
        return super(IGeoProcessor2, self).GetDataElement(inputValue, pDataType)
    def ListTools(self, wildCard):
        '''Method IGeoProcessor2.ListTools

           INPUT
            wildCard            : BSTR

           OUTPUT
            ppGpEnumList        : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListTools(wildCard)
    def ListEnvironments(self, wildCard):
        '''Method IGeoProcessor2.ListEnvironments

           INPUT
            wildCard            : BSTR

           OUTPUT
            ppGpEnumList        : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListEnvironments(wildCard)
    def ListToolboxes(self, wildCard):
        '''Method IGeoProcessor2.ListToolboxes

           INPUT
            wildCard            : BSTR

           OUTPUT
            ppGpEnumList        : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListToolboxes(wildCard)
    def AddToolbox(self, Toolbox):
        '''Method IGeoProcessor2.AddToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGeoProcessor2, self).AddToolbox(Toolbox)
    def RemoveToolbox(self, Toolbox):
        '''Method IGeoProcessor2.RemoveToolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGeoProcessor2, self).RemoveToolbox(Toolbox)
    def put_AddOutputsToMap(self, AddToMap):
        '''Method IGeoProcessor2.put_AddOutputsToMap

           INPUT
            AddToMap            : VARIANT_BOOL'''
        return super(IGeoProcessor2, self).put_AddOutputsToMap(AddToMap)
    def get_AddOutputsToMap(self):
        '''Method IGeoProcessor2.get_AddOutputsToMap

           OUTPUT
            AddToMap            : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).get_AddOutputsToMap()
    def put_OverwriteOutput(self, pOverrideOutput):
        '''Method IGeoProcessor2.put_OverwriteOutput

           INPUT
            pOverrideOutput     : VARIANT_BOOL'''
        return super(IGeoProcessor2, self).put_OverwriteOutput(pOverrideOutput)
    def get_OverwriteOutput(self):
        '''Method IGeoProcessor2.get_OverwriteOutput

           OUTPUT
            pOverrideOutput     : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).get_OverwriteOutput()
    def put_TemporaryMapLayers(self, TemporaryMapLayers):
        '''Method IGeoProcessor2.put_TemporaryMapLayers

           INPUT
            TemporaryMapLayers  : VARIANT_BOOL'''
        return super(IGeoProcessor2, self).put_TemporaryMapLayers(TemporaryMapLayers)
    def get_TemporaryMapLayers(self):
        '''Method IGeoProcessor2.get_TemporaryMapLayers

           OUTPUT
            TemporaryMapLayers  : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).get_TemporaryMapLayers()
    def put_LogHistory(self, LogHistory):
        '''Method IGeoProcessor2.put_LogHistory

           INPUT
            LogHistory          : VARIANT_BOOL'''
        return super(IGeoProcessor2, self).put_LogHistory(LogHistory)
    def get_LogHistory(self):
        '''Method IGeoProcessor2.get_LogHistory

           OUTPUT
            LogHistory          : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).get_LogHistory()
    def GetReturnMessages(self):
        '''Method IGeoProcessor2.GetReturnMessages

           OUTPUT
            ppMessages          : IGPMessages**'''
        return super(IGeoProcessor2, self).GetReturnMessages()
    def get_MessageCount(self):
        '''Method IGeoProcessor2.get_MessageCount

           OUTPUT
            pCount              : long*'''
        return super(IGeoProcessor2, self).get_MessageCount()
    def GetMessage(self, Index):
        '''Method IGeoProcessor2.GetMessage

           INPUT
            Index               : long

           OUTPUT
            pMessage            : BSTR*'''
        return super(IGeoProcessor2, self).GetMessage(Index)
    def GetSeverity(self, Index):
        '''Method IGeoProcessor2.GetSeverity

           INPUT
            Index               : long

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessor2, self).GetSeverity(Index)
    def GetReturnCode(self, Index):
        '''Method IGeoProcessor2.GetReturnCode

           INPUT
            Index               : long

           OUTPUT
            pCode               : long*'''
        return super(IGeoProcessor2, self).GetReturnCode(Index)
    def GetMessages(self, pSeverity):
        '''Method IGeoProcessor2.GetMessages

           INPUT
            pSeverity           : VARIANT*

           OUTPUT
            pMessages           : BSTR*'''
        return super(IGeoProcessor2, self).GetMessages(pSeverity)
    def get_MaxSeverity(self):
        '''Method IGeoProcessor2.get_MaxSeverity

           OUTPUT
            pSeverity           : long*'''
        return super(IGeoProcessor2, self).get_MaxSeverity()
    def AddMessage(self, message):
        '''Method IGeoProcessor2.AddMessage

           INPUT
            message             : BSTR'''
        return super(IGeoProcessor2, self).AddMessage(message)
    def AddError(self, message):
        '''Method IGeoProcessor2.AddError

           INPUT
            message             : BSTR'''
        return super(IGeoProcessor2, self).AddError(message)
    def AddWarning(self, message):
        '''Method IGeoProcessor2.AddWarning

           INPUT
            message             : BSTR'''
        return super(IGeoProcessor2, self).AddWarning(message)
    def AddReturnMessage(self, Index):
        '''Method IGeoProcessor2.AddReturnMessage

           INPUT
            Index               : long'''
        return super(IGeoProcessor2, self).AddReturnMessage(Index)
    def ClearMessages(self):
        '''Method IGeoProcessor2.ClearMessages'''
        return super(IGeoProcessor2, self).ClearMessages()
    def get_ParameterCount(self):
        '''Method IGeoProcessor2.get_ParameterCount

           OUTPUT
            Count               : long*'''
        return super(IGeoProcessor2, self).get_ParameterCount()
    def GetParameterValue(self, Index):
        '''Method IGeoProcessor2.GetParameterValue

           INPUT
            Index               : long

           OUTPUT
            pValue              : VARIANT*'''
        return super(IGeoProcessor2, self).GetParameterValue(Index)
    def SetParameterValue(self, Index, Value):
        '''Method IGeoProcessor2.SetParameterValue

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IGeoProcessor2, self).SetParameterValue(Index, Value)
    def Exists(self, inputValue, pDataType):
        '''Method IGeoProcessor2.Exists

           INPUTS
            inputValue          : VARIANT
            pDataType           : VARIANT*

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).Exists(inputValue, pDataType)
    def Usage(self, Method):
        '''Method IGeoProcessor2.Usage

           INPUT
            Method              : BSTR

           OUTPUT
            Usage               : BSTR*'''
        return super(IGeoProcessor2, self).Usage(Method)
    def ListFeatureClasses(self, wildCard, FeatureType, dataset):
        '''Method IGeoProcessor2.ListFeatureClasses

           INPUTS
            wildCard            : BSTR
            FeatureType         : BSTR
            dataset             : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListFeatureClasses(wildCard, FeatureType, dataset)
    def ListDatasets(self, wildCard, datasetType):
        '''Method IGeoProcessor2.ListDatasets

           INPUTS
            wildCard            : BSTR
            datasetType         : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListDatasets(wildCard, datasetType)
    def ListWorkspaces(self, wildCard, workspaceType):
        '''Method IGeoProcessor2.ListWorkspaces

           INPUTS
            wildCard            : BSTR
            workspaceType       : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListWorkspaces(wildCard, workspaceType)
    def ListTables(self, wildCard, tableType):
        '''Method IGeoProcessor2.ListTables

           INPUTS
            wildCard            : BSTR
            tableType           : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListTables(wildCard, tableType)
    def ListRasters(self, wildCard, RasterType):
        '''Method IGeoProcessor2.ListRasters

           INPUTS
            wildCard            : BSTR
            RasterType          : BSTR

           OUTPUT
            ppEnumList          : IGpEnumList**'''
        return super(IGeoProcessor2, self).ListRasters(wildCard, RasterType)
    def ValidateFieldName(self, inputFieldName, Workspace):
        '''Method IGeoProcessor2.ValidateFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputFieldName     : BSTR*'''
        return super(IGeoProcessor2, self).ValidateFieldName(inputFieldName, Workspace)
    def ValidateTableName(self, inputTableName, Workspace):
        '''Method IGeoProcessor2.ValidateTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGeoProcessor2, self).ValidateTableName(inputTableName, Workspace)
    def QualifyFieldName(self, inputFieldName, Workspace):
        '''Method IGeoProcessor2.QualifyFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputFieldName     : BSTR*'''
        return super(IGeoProcessor2, self).QualifyFieldName(inputFieldName, Workspace)
    def QualifyTableName(self, inputTableName, Workspace):
        '''Method IGeoProcessor2.QualifyTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputTableName     : BSTR*'''
        return super(IGeoProcessor2, self).QualifyTableName(inputTableName, Workspace)
    def ParseFieldName(self, inputFieldName, Workspace):
        '''Method IGeoProcessor2.ParseFieldName

           INPUTS
            inputFieldName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputParsedName    : BSTR*'''
        return super(IGeoProcessor2, self).ParseFieldName(inputFieldName, Workspace)
    def ParseTableName(self, inputTableName, Workspace):
        '''Method IGeoProcessor2.ParseTableName

           INPUTS
            inputTableName      : BSTR
            Workspace           : BSTR

           OUTPUT
            outputParsedName    : BSTR*'''
        return super(IGeoProcessor2, self).ParseTableName(inputTableName, Workspace)
    def SaveSettings(self, FileName):
        '''Method IGeoProcessor2.SaveSettings

           INPUT
            FileName            : BSTR'''
        return super(IGeoProcessor2, self).SaveSettings(FileName)
    def LoadSettings(self, FileName):
        '''Method IGeoProcessor2.LoadSettings

           INPUT
            FileName            : BSTR'''
        return super(IGeoProcessor2, self).LoadSettings(FileName)
    def TestSchemaLock(self, FileName):
        '''Method IGeoProcessor2.TestSchemaLock

           INPUT
            FileName            : BSTR

           OUTPUT
            pStatus             : BSTR*'''
        return super(IGeoProcessor2, self).TestSchemaLock(FileName)
    def RegisterGeoProcessorEvents(self, pGeoProcessorEvents):
        '''Method IGeoProcessor2.RegisterGeoProcessorEvents

           INPUT
            pGeoProcessorEvents : IGeoProcessorEvents*'''
        return super(IGeoProcessor2, self).RegisterGeoProcessorEvents(pGeoProcessorEvents)
    def UnRegisterGeoProcessorEvents(self, pGeoProcessorEvents):
        '''Method IGeoProcessor2.UnRegisterGeoProcessorEvents

           INPUT
            pGeoProcessorEvents : IGeoProcessorEvents*'''
        return super(IGeoProcessor2, self).UnRegisterGeoProcessorEvents(pGeoProcessorEvents)
    def CreateResult(self, ToolName, JobID):
        '''Method IGeoProcessor2.CreateResult

           INPUTS
            ToolName            : BSTR
            JobID               : BSTR

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IGeoProcessor2, self).CreateResult(ToolName, JobID)
    def IsSynchronous(self, ToolName):
        '''Method IGeoProcessor2.IsSynchronous

           INPUT
            ToolName            : BSTR

           OUTPUT
            IsSynchronous       : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).IsSynchronous(ToolName)
    def ExecuteASync(self, Name, ipValues):
        '''Method IGeoProcessor2.ExecuteASync

           INPUTS
            Name                : BSTR
            ipValues            : IVariantArray*

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IGeoProcessor2, self).ExecuteASync(Name, ipValues)
    def RegisterGeoProcessorEvents3(self, pGeoProcessorEvents3):
        '''Method IGeoProcessor2.RegisterGeoProcessorEvents3

           INPUT
            pGeoProcessorEvents3: IGeoProcessorEvents3*'''
        return super(IGeoProcessor2, self).RegisterGeoProcessorEvents3(pGeoProcessorEvents3)
    def UnRegisterGeoProcessorEvents3(self, pGeoProcessorEvents3):
        '''Method IGeoProcessor2.UnRegisterGeoProcessorEvents3

           INPUT
            pGeoProcessorEvents3: IGeoProcessorEvents3*'''
        return super(IGeoProcessor2, self).UnRegisterGeoProcessorEvents3(pGeoProcessorEvents3)
    def CheckResultStatus(self, pGPResult):
        '''Method IGeoProcessor2.CheckResultStatus

           INPUT
            pGPResult           : IGeoProcessorResult*'''
        return super(IGeoProcessor2, self).CheckResultStatus(pGPResult)
    def put_AddToResults(self, AddToResults):
        '''Method IGeoProcessor2.put_AddToResults

           INPUT
            AddToResults        : VARIANT_BOOL'''
        return super(IGeoProcessor2, self).put_AddToResults(AddToResults)
    def get_AddToResults(self):
        '''Method IGeoProcessor2.get_AddToResults

           OUTPUT
            AddToResults        : VARIANT_BOOL*'''
        return super(IGeoProcessor2, self).get_AddToResults()
    AddOutputsToMap = property(get_AddOutputsToMap, put_AddOutputsToMap, None)
    AddToResults = property(get_AddToResults, put_AddToResults, None)
    LogHistory = property(get_LogHistory, put_LogHistory, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    MessageCount = property(get_MessageCount, None, None)
    OverwriteOutput = property(get_OverwriteOutput, put_OverwriteOutput, None)
    ParameterCount = property(get_ParameterCount, None, None)
    TemporaryMapLayers = property(get_TemporaryMapLayers, put_TemporaryMapLayers, None)

class IGPToolCommandHelper(_esriGeoprocessing.IGPToolCommandHelper):
    _IID = uuid.UUID('86d8caa9-6035-4ac9-9cdc-6c9ed6eafcea')
    def SetTool(self, Tool):
        '''Method IGPToolCommandHelper.SetTool

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolCommandHelper, self).SetTool(Tool)
    def SetToolByName(self, Toolbox, Tool):
        '''Method IGPToolCommandHelper.SetToolByName

           INPUTS
            Toolbox             : BSTR
            Tool                : BSTR'''
        return super(IGPToolCommandHelper, self).SetToolByName(Toolbox, Tool)
    def get_Tool(self):
        '''Method IGPToolCommandHelper.get_Tool

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolCommandHelper, self).get_Tool()
    def Invoke(self, Parameters):
        '''Method IGPToolCommandHelper.Invoke

           INPUT
            Parameters          : IArray*'''
        return super(IGPToolCommandHelper, self).Invoke(Parameters)
    Tool = property(get_Tool, None, None)

class IGPToolCommandHelper2(_esriGeoprocessing.IGPToolCommandHelper2):
    _IID = uuid.UUID('17c54fd8-0273-4688-a878-0e16e0e32c19')
    def InvokeModal(self, hWndParent, Parameters):
        '''Method IGPToolCommandHelper2.InvokeModal

           INPUTS
            hWndParent          : OLE_HANDLE
            Parameters          : IArray*

           OUTPUTS
            pOK                 : VARIANT_BOOL*
            ppMessages          : IGPMessages**'''
        return super(IGPToolCommandHelper2, self).InvokeModal(hWndParent, Parameters)
    def SetTool(self, Tool):
        '''Method IGPToolCommandHelper.SetTool (from IGPToolCommandHelper)

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolCommandHelper2, self).SetTool(Tool)
    def SetToolByName(self, Toolbox, Tool):
        '''Method IGPToolCommandHelper.SetToolByName (from IGPToolCommandHelper)

           INPUTS
            Toolbox             : BSTR
            Tool                : BSTR'''
        return super(IGPToolCommandHelper2, self).SetToolByName(Toolbox, Tool)
    def get_Tool(self):
        '''Method IGPToolCommandHelper.get_Tool (from IGPToolCommandHelper)

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolCommandHelper2, self).get_Tool()
    def Invoke(self, Parameters):
        '''Method IGPToolCommandHelper.Invoke (from IGPToolCommandHelper)

           INPUT
            Parameters          : IArray*'''
        return super(IGPToolCommandHelper2, self).Invoke(Parameters)
    Tool = property(get_Tool, None, None)

class IGPToolCache(_esriGeoprocessing.IGPToolCache):
    _IID = uuid.UUID('c5e4f948-ef43-4173-a2cb-b25a777b0f30')
    def RemoveFromCache(self, Tool):
        '''Method IGPToolCache.RemoveFromCache

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolCache, self).RemoveFromCache(Tool)

class IGeoProcessorResultImpl(_esriGeoprocessing.IGeoProcessorResultImpl):
    _IID = uuid.UUID('5d033aa6-ecf8-43c7-ac32-51fd266b9a0c')
    def SetToolInfo(self, resultHR, ReturnValue, pTool, pValues, pMessages):
        '''Method IGeoProcessorResultImpl.SetToolInfo

           INPUTS
            resultHR            : HRESULT
            ReturnValue         : VARIANT
            pTool               : IGPTool*
            pValues             : IArray*
            pMessages           : IGPMessages*'''
        return super(IGeoProcessorResultImpl, self).SetToolInfo(resultHR, ReturnValue, pTool, pValues, pMessages)
    def SetHRESULT(self, resultHR):
        '''Method IGeoProcessorResultImpl.SetHRESULT

           INPUT
            resultHR            : HRESULT'''
        return super(IGeoProcessorResultImpl, self).SetHRESULT(resultHR)
    def SetReturnValue(self, ReturnValue):
        '''Method IGeoProcessorResultImpl.SetReturnValue

           INPUT
            ReturnValue         : VARIANT'''
        return super(IGeoProcessorResultImpl, self).SetReturnValue(ReturnValue)
    def SetTool(self, pTool):
        '''Method IGeoProcessorResultImpl.SetTool

           INPUT
            pTool               : IGPTool*'''
        return super(IGeoProcessorResultImpl, self).SetTool(pTool)
    def SetValues(self, pValues):
        '''Method IGeoProcessorResultImpl.SetValues

           INPUT
            pValues             : IArray*'''
        return super(IGeoProcessorResultImpl, self).SetValues(pValues)
    def SetMessages(self, pMessages):
        '''Method IGeoProcessorResultImpl.SetMessages

           INPUT
            pMessages           : IGPMessages*'''
        return super(IGeoProcessorResultImpl, self).SetMessages(pMessages)
    def SetHousekeeping(self, blockAddToMap, blockPostToolExecute):
        '''Method IGeoProcessorResultImpl.SetHousekeeping

           INPUTS
            blockAddToMap       : VARIANT_BOOL
            blockPostToolExecute: VARIANT_BOOL'''
        return super(IGeoProcessorResultImpl, self).SetHousekeeping(blockAddToMap, blockPostToolExecute)
    def GetHousekeeping(self):
        '''Method IGeoProcessorResultImpl.GetHousekeeping

           OUTPUTS
            blockAddToMap       : VARIANT_BOOL*
            blockPostToolExecute: VARIANT_BOOL*'''
        return super(IGeoProcessorResultImpl, self).GetHousekeeping()
    def SetASync(self):
        '''Method IGeoProcessorResultImpl.SetASync'''
        return super(IGeoProcessorResultImpl, self).SetASync()

class IMdProcessImpl(_esriGeoprocessing.IMdProcessImpl):
    _IID = uuid.UUID('bf0ce3a9-e3be-4028-a7cb-41c358733c04')

    def __init__(self, *args, **kw):
        super(IMdProcessImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RelativeBase(self):
        '''Method IMdProcessImpl.get_RelativeBase

           OUTPUT
            basePath            : BSTR*'''
        return super(IMdProcessImpl, self).get_RelativeBase()
    def put_RelativeBase(self, basePath):
        '''Method IMdProcessImpl.put_RelativeBase

           INPUT
            basePath            : BSTR'''
        return super(IMdProcessImpl, self).put_RelativeBase(basePath)
    def PrivateSetTool(self, Tool):
        '''Method IMdProcessImpl.PrivateSetTool

           INPUT
            Tool                : IGPTool*'''
        return super(IMdProcessImpl, self).PrivateSetTool(Tool)
    def GetParameterMessage(self, __MIDL__IMdProcessImpl0000):
        '''Method IMdProcessImpl.GetParameterMessage

           INPUT
            __MIDL__IMdProcessImpl0000: BSTR

           OUTPUT
            ppMessage           : IGPMessage**'''
        return super(IMdProcessImpl, self).GetParameterMessage(__MIDL__IMdProcessImpl0000)
    def get_RunDebugger(self):
        '''Method IMdProcessImpl.get_RunDebugger

           OUTPUT
            debugger            : VARIANT_BOOL*'''
        return super(IMdProcessImpl, self).get_RunDebugger()
    def put_RunDebugger(self, debugger):
        '''Method IMdProcessImpl.put_RunDebugger

           INPUT
            debugger            : VARIANT_BOOL'''
        return super(IMdProcessImpl, self).put_RunDebugger(debugger)
    def put_ResolveAll(self, _arg1):
        '''Method IMdProcessImpl.put_ResolveAll

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IMdProcessImpl, self).put_ResolveAll(_arg1)
    def PrivateSetToolEx(self, Tool, updateToolboxEvents):
        '''Method IMdProcessImpl.PrivateSetToolEx

           INPUTS
            Tool                : IGPTool*
            updateToolboxEvents : VARIANT_BOOL'''
        return super(IMdProcessImpl, self).PrivateSetToolEx(Tool, updateToolboxEvents)
    def GetDependentValues(self, Name):
        '''Method IMdProcessImpl.GetDependentValues

           INPUT
            Name                : BSTR

           OUTPUT
            ppValues            : IArray**'''
        return super(IMdProcessImpl, self).GetDependentValues(Name)
    def GetDependentValue(self, Name):
        '''Method IMdProcessImpl.GetDependentValue

           INPUT
            Name                : BSTR

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IMdProcessImpl, self).GetDependentValue(Name)
    RelativeBase = property(get_RelativeBase, put_RelativeBase, None)
    ResolveAll = property(None, put_ResolveAll, None)
    RunDebugger = property(get_RunDebugger, put_RunDebugger, None)

class IAnalyzeTask(_esriGeoprocessing.IAnalyzeTask):
    _IID = uuid.UUID('e9a63d6f-e39c-42bc-a75a-7bf8cf30dec6')
    def AnalyzeTask(self, pTaskTool, pTool, pOther, pProps, pParams, pParsedStrings, pResultsUpdater):
        '''Method IAnalyzeTask.AnalyzeTask

           INPUTS
            pTaskTool           : IGPTool*
            pTool               : IGPTool*
            pOther              : IUnknown*
            pProps              : IPropertySet*
            pParams             : IArray*
            pParsedStrings      : IArray*
            pResultsUpdater     : IPrepareResultsUpdater*'''
        return super(IAnalyzeTask, self).AnalyzeTask(pTaskTool, pTool, pOther, pProps, pParams, pParsedStrings, pResultsUpdater)

class IGPRuntimeSupport(_esriGeoprocessing.IGPRuntimeSupport):
    _IID = uuid.UUID('88fee110-b585-4e06-b952-61780996dd8c')
    def IsToolSupported(self, pGPTool, pCATID):
        '''Method IGPRuntimeSupport.IsToolSupported

           INPUTS
            pGPTool             : IGPTool*
            pCATID              : IUID*

           OUTPUT
            bSupportedInRuntime : VARIANT_BOOL*'''
        return super(IGPRuntimeSupport, self).IsToolSupported(pGPTool, pCATID)

class IGeoProcessorSupport(_esriGeoprocessing.IGeoProcessorSupport):
    _IID = uuid.UUID('e54dc24f-c978-47c6-8c5b-943528d5ee25')
    def UpdateValueWithString(self, pGPValue, stringValue, pParameter):
        '''Method IGeoProcessorSupport.UpdateValueWithString

           INPUTS
            pGPValue            : IGPValue*
            stringValue         : BSTR
            pParameter          : IGPParameter*

           OUTPUT
            ppNewGPValue        : IGPValue**'''
        return super(IGeoProcessorSupport, self).UpdateValueWithString(pGPValue, stringValue, pParameter)
    def GetProcessById(self, processID):
        '''Method IGeoProcessorSupport.GetProcessById

           INPUT
            processID           : long

           OUTPUT
            Process             : IMdProcess**'''
        return super(IGeoProcessorSupport, self).GetProcessById(processID)
    def GetHistoryTool(self):
        '''Method IGeoProcessorSupport.GetHistoryTool

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGeoProcessorSupport, self).GetHistoryTool()
    def LoadScriptEnvironment(self):
        '''Method IGeoProcessorSupport.LoadScriptEnvironment'''
        return super(IGeoProcessorSupport, self).LoadScriptEnvironment()
    def InstallGeographicTransformations(self, pEnvMgr):
        '''Method IGeoProcessorSupport.InstallGeographicTransformations

           INPUT
            pEnvMgr             : IGPEnvironmentManager*'''
        return super(IGeoProcessorSupport, self).InstallGeographicTransformations(pEnvMgr)
    def TestGeographicTransformations(self, pParameters, pParamValues, pEnvMgr, pMessages, updateValues, Validate):
        '''Method IGeoProcessorSupport.TestGeographicTransformations

           INPUTS
            pParameters         : IArray*
            pParamValues        : IArray*
            pEnvMgr             : IGPEnvironmentManager*
            pMessages           : IGPMessages*
            updateValues        : VARIANT_BOOL
            Validate            : VARIANT_BOOL'''
        return super(IGeoProcessorSupport, self).TestGeographicTransformations(pParameters, pParamValues, pEnvMgr, pMessages, updateValues, Validate)
    def GetRunToolsInBackground(self):
        '''Method IGeoProcessorSupport.GetRunToolsInBackground

           OUTPUT
            pBackground         : VARIANT_BOOL*'''
        return super(IGeoProcessorSupport, self).GetRunToolsInBackground()
    def ProgressMessageThreaded(self, threadPos, message):
        '''Method IGeoProcessorSupport.ProgressMessageThreaded

           INPUTS
            threadPos           : long
            message             : BSTR'''
        return super(IGeoProcessorSupport, self).ProgressMessageThreaded(threadPos, message)
    def ProgressShowThreaded(self, threadPos, Show):
        '''Method IGeoProcessorSupport.ProgressShowThreaded

           INPUTS
            threadPos           : long
            Show                : VARIANT_BOOL'''
        return super(IGeoProcessorSupport, self).ProgressShowThreaded(threadPos, Show)
    def ProgressPercentageThreaded(self, threadPos, percentage):
        '''Method IGeoProcessorSupport.ProgressPercentageThreaded

           INPUTS
            threadPos           : long
            percentage          : double'''
        return super(IGeoProcessorSupport, self).ProgressPercentageThreaded(threadPos, percentage)
    def ProcessMessagesThreaded(self, threadPos, pMsgs):
        '''Method IGeoProcessorSupport.ProcessMessagesThreaded

           INPUTS
            threadPos           : long
            pMsgs               : IGPMessages*'''
        return super(IGeoProcessorSupport, self).ProcessMessagesThreaded(threadPos, pMsgs)
    def PreToolExecuteThreaded(self, threadPos):
        '''Method IGeoProcessorSupport.PreToolExecuteThreaded

           INPUT
            threadPos           : long'''
        return super(IGeoProcessorSupport, self).PreToolExecuteThreaded(threadPos)
    def PostToolExecuteThreaded(self, threadPos):
        '''Method IGeoProcessorSupport.PostToolExecuteThreaded

           INPUT
            threadPos           : long'''
        return super(IGeoProcessorSupport, self).PostToolExecuteThreaded(threadPos)
    def AnyPendingThreadedTasks(self, pPendingTasks):
        '''Method IGeoProcessorSupport.AnyPendingThreadedTasks

           INPUT
            pPendingTasks       : VARIANT_BOOL*'''
        return super(IGeoProcessorSupport, self).AnyPendingThreadedTasks(pPendingTasks)
    def CancelAllPendingThreadedTasks(self):
        '''Method IGeoProcessorSupport.CancelAllPendingThreadedTasks'''
        return super(IGeoProcessorSupport, self).CancelAllPendingThreadedTasks()
    def CanStartEditing(self, pWorkspace):
        '''Method IGeoProcessorSupport.CanStartEditing

           INPUT
            pWorkspace          : IWorkspace*

           OUTPUT
            pCanStartEditing    : VARIANT_BOOL*'''
        return super(IGeoProcessorSupport, self).CanStartEditing(pWorkspace)
    def IsPythonBeingForcedASync(self):
        '''Method IGeoProcessorSupport.IsPythonBeingForcedASync

           OUTPUT
            pASync              : VARIANT_BOOL*'''
        return super(IGeoProcessorSupport, self).IsPythonBeingForcedASync()
    def CheckBackgroundServerStatus(self):
        '''Method IGeoProcessorSupport.CheckBackgroundServerStatus'''
        return super(IGeoProcessorSupport, self).CheckBackgroundServerStatus()
    def CanProcessRunInBackground(self, pProcess):
        '''Method IGeoProcessorSupport.CanProcessRunInBackground

           INPUT
            pProcess            : IMdProcess*

           OUTPUT
            pCanRunInBackground : VARIANT_BOOL*'''
        return super(IGeoProcessorSupport, self).CanProcessRunInBackground(pProcess)
    def SetProcessDialogRecordSetCounter(self, increment):
        '''Method IGeoProcessorSupport.SetProcessDialogRecordSetCounter

           INPUT
            increment           : long'''
        return super(IGeoProcessorSupport, self).SetProcessDialogRecordSetCounter(increment)
    def CanStopEditing(self):
        '''Method IGeoProcessorSupport.CanStopEditing

           OUTPUT
            pCanStopEditing     : VARIANT_BOOL*'''
        return super(IGeoProcessorSupport, self).CanStopEditing()

class IGpPythonInterpreter(_esriGeoprocessing.IGpPythonInterpreter):
    _IID = uuid.UUID('90b03c86-3d98-4d09-a6c9-b97b45d9fd9a')
    def Initialize(self):
        '''Method IGpPythonInterpreter.Initialize'''
        return super(IGpPythonInterpreter, self).Initialize()
    def Finalize(self):
        '''Method IGpPythonInterpreter.Finalize'''
        return super(IGpPythonInterpreter, self).Finalize()
    def SetRandomGenerator(self, pRndGen):
        '''Method IGpPythonInterpreter.SetRandomGenerator

           INPUT
            pRndGen             : IGPRandomNumberGenerator*'''
        return super(IGpPythonInterpreter, self).SetRandomGenerator(pRndGen)
    def GetDocString(self, text, Method):
        '''Method IGpPythonInterpreter.GetDocString

           INPUTS
            text                : BSTR
            Method              : BSTR

           OUTPUT
            pDocString          : BSTR*'''
        return super(IGpPythonInterpreter, self).GetDocString(text, Method)
    def SendInterrupt(self):
        '''Method IGpPythonInterpreter.SendInterrupt'''
        return super(IGpPythonInterpreter, self).SendInterrupt()
    def RunInteractiveString(self, text, pTrackCancel, processMessages, blockPostToolExecute):
        '''Method IGpPythonInterpreter.RunInteractiveString

           INPUTS
            text                : BSTR
            pTrackCancel        : ITrackCancel*
            processMessages     : VARIANT_BOOL
            blockPostToolExecute: VARIANT_BOOL

           OUTPUTS
            ppNewDatasets       : IPropertySet**
            pOutputString       : BSTR*
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).RunInteractiveString(text, pTrackCancel, processMessages, blockPostToolExecute)
    def TestCodeBlock(self, CodeBlock):
        '''Method IGpPythonInterpreter.TestCodeBlock

           INPUT
            CodeBlock           : BSTR

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).TestCodeBlock(CodeBlock)
    def RunCodeBlock(self, CodeBlock):
        '''Method IGpPythonInterpreter.RunCodeBlock

           INPUT
            CodeBlock           : BSTR

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).RunCodeBlock(CodeBlock)
    def EvaluateExpression(self, expression):
        '''Method IGpPythonInterpreter.EvaluateExpression

           INPUT
            expression          : BSTR

           OUTPUTS
            pValue              : VARIANT*
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).EvaluateExpression(expression)
    def EvaluateScript(self, expression, pArgList):
        '''Method IGpPythonInterpreter.EvaluateScript

           INPUTS
            expression          : BSTR
            pArgList            : IStringArray*

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).EvaluateScript(expression, pArgList)
    def PreEvaluateScript(self):
        '''Method IGpPythonInterpreter.PreEvaluateScript'''
        return super(IGpPythonInterpreter, self).PreEvaluateScript()
    def PostEvaluateScript(self, pEnvMgr):
        '''Method IGpPythonInterpreter.PostEvaluateScript

           INPUT
            pEnvMgr             : IGPEnvironmentManager*'''
        return super(IGpPythonInterpreter, self).PostEvaluateScript(pEnvMgr)
    def InitializeParameters(self, CodeBlock, pParameters, pTool):
        '''Method IGpPythonInterpreter.InitializeParameters

           INPUTS
            CodeBlock           : BSTR
            pParameters         : IArray*
            pTool               : IGPTool*

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).InitializeParameters(CodeBlock, pParameters, pTool)
    def UpdateParameters(self, CodeBlock, pParameters, pTool):
        '''Method IGpPythonInterpreter.UpdateParameters

           INPUTS
            CodeBlock           : BSTR
            pParameters         : IArray*
            pTool               : IGPTool*

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonInterpreter, self).UpdateParameters(CodeBlock, pParameters, pTool)
    def UpdateMessages(self, CodeBlock, pParameters, pTool, pMessages):
        '''Method IGpPythonInterpreter.UpdateMessages

           INPUTS
            CodeBlock           : BSTR
            pParameters         : IArray*
            pTool               : IGPTool*
            pMessages           : IGPMessages*'''
        return super(IGpPythonInterpreter, self).UpdateMessages(CodeBlock, pParameters, pTool, pMessages)
    def SetVariantIntoDict(self, pValue, scriptVersion):
        '''Method IGpPythonInterpreter.SetVariantIntoDict

           INPUTS
            pValue              : VARIANT*
            scriptVersion       : double

           OUTPUT
            pVarName            : BSTR*'''
        return super(IGpPythonInterpreter, self).SetVariantIntoDict(pValue, scriptVersion)
    def DeleteVariantFromDict(self, varName):
        '''Method IGpPythonInterpreter.DeleteVariantFromDict

           INPUT
            varName             : BSTR'''
        return super(IGpPythonInterpreter, self).DeleteVariantFromDict(varName)
    def ConvertScriptFile(self, CodeBlock):
        '''Method IGpPythonInterpreter.ConvertScriptFile

           INPUT
            CodeBlock           : BSTR

           OUTPUT
            pCodeString         : BSTR*'''
        return super(IGpPythonInterpreter, self).ConvertScriptFile(CodeBlock)
    def ParseScript(self, oldScriptPath, pythonScriptFile, swizzle, pTrackCancel):
        '''Method IGpPythonInterpreter.ParseScript

           INPUTS
            oldScriptPath       : BSTR
            pythonScriptFile    : BSTR
            swizzle             : VARIANT_BOOL
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppArrayOfPythonStrings: IArray**'''
        return super(IGpPythonInterpreter, self).ParseScript(oldScriptPath, pythonScriptFile, swizzle, pTrackCancel)
    def QuoteParsedString(self, inputString):
        '''Method IGpPythonInterpreter.QuoteParsedString

           INPUT
            inputString         : BSTR

           OUTPUT
            pOutputString       : BSTR*'''
        return super(IGpPythonInterpreter, self).QuoteParsedString(inputString)
    def LoadPythonToolbox(self, pythonToolbox):
        '''Method IGpPythonInterpreter.LoadPythonToolbox

           INPUT
            pythonToolbox       : BSTR

           OUTPUT
            ppToolboxProps      : IPropertySet**'''
        return super(IGpPythonInterpreter, self).LoadPythonToolbox(pythonToolbox)
    def PythonToolGetInfo(self, pythonToolbox, pythonTool):
        '''Method IGpPythonInterpreter.PythonToolGetInfo

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR

           OUTPUT
            ppToolProps         : IPropertySet**'''
        return super(IGpPythonInterpreter, self).PythonToolGetInfo(pythonToolbox, pythonTool)
    def PythonToolIsLicensed(self, pythonToolbox, pythonTool):
        '''Method IGpPythonInterpreter.PythonToolIsLicensed

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR

           OUTPUT
            pIsLicensed         : VARIANT_BOOL*'''
        return super(IGpPythonInterpreter, self).PythonToolIsLicensed(pythonToolbox, pythonTool)
    def PythonToolGetParameterInfo(self, pythonToolbox, pythonTool):
        '''Method IGpPythonInterpreter.PythonToolGetParameterInfo

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR

           OUTPUT
            ppParameters        : IArray**'''
        return super(IGpPythonInterpreter, self).PythonToolGetParameterInfo(pythonToolbox, pythonTool)
    def PythonToolUpdateParameters(self, pythonToolbox, pythonTool, pParameters):
        '''Method IGpPythonInterpreter.PythonToolUpdateParameters

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            pParameters         : IArray*'''
        return super(IGpPythonInterpreter, self).PythonToolUpdateParameters(pythonToolbox, pythonTool, pParameters)
    def PythonToolUpdateMessages(self, pythonToolbox, pythonTool, pParameters, pMessages):
        '''Method IGpPythonInterpreter.PythonToolUpdateMessages

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            pParameters         : IArray*
            pMessages           : IGPMessages*'''
        return super(IGpPythonInterpreter, self).PythonToolUpdateMessages(pythonToolbox, pythonTool, pParameters, pMessages)
    def PythonToolExecute(self, pythonToolbox, pythonTool, pParameters, pMessages):
        '''Method IGpPythonInterpreter.PythonToolExecute

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            pParameters         : IArray*
            pMessages           : IGPMessages*'''
        return super(IGpPythonInterpreter, self).PythonToolExecute(pythonToolbox, pythonTool, pParameters, pMessages)
    def PythonToolGetParameterSymbology(self, pythonToolbox, pythonTool, parameterName):
        '''Method IGpPythonInterpreter.PythonToolGetParameterSymbology

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            parameterName       : BSTR

           OUTPUT
            pSymbologyPath      : BSTR*'''
        return super(IGpPythonInterpreter, self).PythonToolGetParameterSymbology(pythonToolbox, pythonTool, parameterName)

class IGpPythonExpression(_esriGeoprocessing.IGpPythonExpression):
    _IID = uuid.UUID('aabe7068-13dd-4da4-960e-dcbe9977a554')
    def Initialize(self, pRndGen):
        '''Method IGpPythonExpression.Initialize

           INPUT
            pRndGen             : IGPRandomNumberGenerator*'''
        return super(IGpPythonExpression, self).Initialize(pRndGen)
    def SetScriptVersion(self, scriptVersion):
        '''Method IGpPythonExpression.SetScriptVersion

           INPUT
            scriptVersion       : double'''
        return super(IGpPythonExpression, self).SetScriptVersion(scriptVersion)
    def GetDocString(self, text, Method):
        '''Method IGpPythonExpression.GetDocString

           INPUTS
            text                : BSTR
            Method              : BSTR

           OUTPUT
            pDocString          : BSTR*'''
        return super(IGpPythonExpression, self).GetDocString(text, Method)
    def SendInterrupt(self):
        '''Method IGpPythonExpression.SendInterrupt'''
        return super(IGpPythonExpression, self).SendInterrupt()
    def RunInteractiveString(self, text, pTrackCancel, processMessages, blockPostToolExecute):
        '''Method IGpPythonExpression.RunInteractiveString

           INPUTS
            text                : BSTR
            pTrackCancel        : ITrackCancel*
            processMessages     : VARIANT_BOOL
            blockPostToolExecute: VARIANT_BOOL

           OUTPUTS
            ppNewDatasets       : IPropertySet**
            pOutputString       : BSTR*
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).RunInteractiveString(text, pTrackCancel, processMessages, blockPostToolExecute)
    def RunCodeBlock(self, CodeBlock):
        '''Method IGpPythonExpression.RunCodeBlock

           INPUT
            CodeBlock           : BSTR

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).RunCodeBlock(CodeBlock)
    def TestCodeBlock(self, CodeBlock):
        '''Method IGpPythonExpression.TestCodeBlock

           INPUT
            CodeBlock           : BSTR

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).TestCodeBlock(CodeBlock)
    def InitializeEvaluateRow(self, pTable, expression):
        '''Method IGpPythonExpression.InitializeEvaluateRow

           INPUTS
            pTable              : ITable*
            expression          : BSTR

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).InitializeEvaluateRow(pTable, expression)
    def EvaluateRow(self, pRow):
        '''Method IGpPythonExpression.EvaluateRow

           INPUT
            pRow                : IRow*

           OUTPUTS
            pValue              : VARIANT*
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).EvaluateRow(pRow)
    def EvaluateExpression(self, expression):
        '''Method IGpPythonExpression.EvaluateExpression

           INPUT
            expression          : BSTR

           OUTPUTS
            pValue              : VARIANT*
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).EvaluateExpression(expression)
    def EvaluateScript(self, expression, pArgList):
        '''Method IGpPythonExpression.EvaluateScript

           INPUTS
            expression          : BSTR
            pArgList            : IStringArray*

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).EvaluateScript(expression, pArgList)
    def PreEvaluateScript(self):
        '''Method IGpPythonExpression.PreEvaluateScript'''
        return super(IGpPythonExpression, self).PreEvaluateScript()
    def PostEvaluateScript(self, pEnvMgr):
        '''Method IGpPythonExpression.PostEvaluateScript

           INPUT
            pEnvMgr             : IGPEnvironmentManager*'''
        return super(IGpPythonExpression, self).PostEvaluateScript(pEnvMgr)
    def InitializeParameters(self, CodeBlock, pParameters, pTool):
        '''Method IGpPythonExpression.InitializeParameters

           INPUTS
            CodeBlock           : BSTR
            pParameters         : IArray*
            pTool               : IGPTool*

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).InitializeParameters(CodeBlock, pParameters, pTool)
    def UpdateParameters(self, CodeBlock, pParameters, pTool):
        '''Method IGpPythonExpression.UpdateParameters

           INPUTS
            CodeBlock           : BSTR
            pParameters         : IArray*
            pTool               : IGPTool*

           OUTPUT
            pErrMsg             : BSTR*'''
        return super(IGpPythonExpression, self).UpdateParameters(CodeBlock, pParameters, pTool)
    def UpdateMessages(self, CodeBlock, pParameters, pTool, pMessages):
        '''Method IGpPythonExpression.UpdateMessages

           INPUTS
            CodeBlock           : BSTR
            pParameters         : IArray*
            pTool               : IGPTool*
            pMessages           : IGPMessages*'''
        return super(IGpPythonExpression, self).UpdateMessages(CodeBlock, pParameters, pTool, pMessages)
    def SetVariantIntoDict(self, pValue, scriptVersion):
        '''Method IGpPythonExpression.SetVariantIntoDict

           INPUTS
            pValue              : VARIANT*
            scriptVersion       : double

           OUTPUT
            pVarName            : BSTR*'''
        return super(IGpPythonExpression, self).SetVariantIntoDict(pValue, scriptVersion)
    def DeleteVariantFromDict(self, varName):
        '''Method IGpPythonExpression.DeleteVariantFromDict

           INPUT
            varName             : BSTR'''
        return super(IGpPythonExpression, self).DeleteVariantFromDict(varName)
    def ConvertScriptFile(self, CodeBlock):
        '''Method IGpPythonExpression.ConvertScriptFile

           INPUT
            CodeBlock           : BSTR

           OUTPUT
            pCodeString         : BSTR*'''
        return super(IGpPythonExpression, self).ConvertScriptFile(CodeBlock)
    def ParseScript(self, oldScriptPath, pythonScriptFile, swizzle, pTrackCancel):
        '''Method IGpPythonExpression.ParseScript

           INPUTS
            oldScriptPath       : BSTR
            pythonScriptFile    : BSTR
            swizzle             : VARIANT_BOOL
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppArrayOfPythonStrings: IArray**'''
        return super(IGpPythonExpression, self).ParseScript(oldScriptPath, pythonScriptFile, swizzle, pTrackCancel)
    def ReplaceParsedScriptString(self, inScriptString, pParsedStrings, swizzle):
        '''Method IGpPythonExpression.ReplaceParsedScriptString

           INPUTS
            inScriptString      : BSTR
            pParsedStrings      : IArray*
            swizzle             : VARIANT_BOOL

           OUTPUT
            pOutScriptString    : BSTR*'''
        return super(IGpPythonExpression, self).ReplaceParsedScriptString(inScriptString, pParsedStrings, swizzle)
    def QuoteParsedString(self, inputString):
        '''Method IGpPythonExpression.QuoteParsedString

           INPUT
            inputString         : BSTR

           OUTPUT
            pOutputString       : BSTR*'''
        return super(IGpPythonExpression, self).QuoteParsedString(inputString)
    def LoadPythonToolbox(self, pythonToolbox):
        '''Method IGpPythonExpression.LoadPythonToolbox

           INPUT
            pythonToolbox       : BSTR

           OUTPUT
            ppToolboxProps      : IPropertySet**'''
        return super(IGpPythonExpression, self).LoadPythonToolbox(pythonToolbox)
    def PythonToolGetInfo(self, pythonToolbox, pythonTool):
        '''Method IGpPythonExpression.PythonToolGetInfo

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR

           OUTPUT
            ppToolProps         : IPropertySet**'''
        return super(IGpPythonExpression, self).PythonToolGetInfo(pythonToolbox, pythonTool)
    def PythonToolIsLicensed(self, pythonToolbox, pythonTool):
        '''Method IGpPythonExpression.PythonToolIsLicensed

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR

           OUTPUT
            pIsLicensed         : VARIANT_BOOL*'''
        return super(IGpPythonExpression, self).PythonToolIsLicensed(pythonToolbox, pythonTool)
    def PythonToolGetParameterInfo(self, pythonToolbox, pythonTool):
        '''Method IGpPythonExpression.PythonToolGetParameterInfo

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR

           OUTPUT
            ppParameters        : IArray**'''
        return super(IGpPythonExpression, self).PythonToolGetParameterInfo(pythonToolbox, pythonTool)
    def PythonToolUpdateParameters(self, pythonToolbox, pythonTool, pParameters):
        '''Method IGpPythonExpression.PythonToolUpdateParameters

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            pParameters         : IArray*'''
        return super(IGpPythonExpression, self).PythonToolUpdateParameters(pythonToolbox, pythonTool, pParameters)
    def PythonToolUpdateMessages(self, pythonToolbox, pythonTool, pParameters, pMessages):
        '''Method IGpPythonExpression.PythonToolUpdateMessages

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            pParameters         : IArray*
            pMessages           : IGPMessages*'''
        return super(IGpPythonExpression, self).PythonToolUpdateMessages(pythonToolbox, pythonTool, pParameters, pMessages)
    def PythonToolExecute(self, pythonToolbox, pythonTool, pParameters, pMessages):
        '''Method IGpPythonExpression.PythonToolExecute

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            pParameters         : IArray*
            pMessages           : IGPMessages*'''
        return super(IGpPythonExpression, self).PythonToolExecute(pythonToolbox, pythonTool, pParameters, pMessages)
    def PythonToolGetParameterSymbology(self, pythonToolbox, pythonTool, parameterName):
        '''Method IGpPythonExpression.PythonToolGetParameterSymbology

           INPUTS
            pythonToolbox       : BSTR
            pythonTool          : BSTR
            parameterName       : BSTR

           OUTPUT
            pSymbologyPath      : BSTR*'''
        return super(IGpPythonExpression, self).PythonToolGetParameterSymbology(pythonToolbox, pythonTool, parameterName)

class IMdUtilities(_esriGeoprocessing.IMdUtilities):
    _IID = uuid.UUID('aaed5ae5-fa5e-4369-add3-b34fec0557c9')
    def GetElementIndexInEnum(self, pElements, pElement):
        '''Method IMdUtilities.GetElementIndexInEnum

           INPUTS
            pElements           : IEnumMdElement*
            pElement            : IMdElement*

           OUTPUT
            pIndex              : long*'''
        return super(IMdUtilities, self).GetElementIndexInEnum(pElements, pElement)
    def SameElement(self, pElement1, pElement2):
        '''Method IMdUtilities.SameElement

           INPUTS
            pElement1           : IMdElement*
            pElement2           : IMdElement*

           OUTPUT
            pSame               : VARIANT_BOOL*'''
        return super(IMdUtilities, self).SameElement(pElement1, pElement2)
    def CompareParameters(self, pParameter1, pParameter2):
        '''Method IMdUtilities.CompareParameters

           INPUTS
            pParameter1         : IGPParameter*
            pParameter2         : IGPParameter*

           OUTPUT
            pSame               : VARIANT_BOOL*'''
        return super(IMdUtilities, self).CompareParameters(pParameter1, pParameter2)
    def IsDatasetType(self, pUnknown):
        '''Method IMdUtilities.IsDatasetType

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IMdUtilities, self).IsDatasetType(pUnknown)
    def FindDependentProcess(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentProcess

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppProcess           : IMdProcess**'''
        return super(IMdUtilities, self).FindDependentProcess(pVariable, Direction)
    def FindDependentParameter(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentParameter

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppParameter         : IGPParameter**'''
        return super(IMdUtilities, self).FindDependentParameter(pVariable, Direction)
    def FindDependentEnvironment(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentEnvironment

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IMdUtilities, self).FindDependentEnvironment(pVariable, Direction)
    def GetVariableRenderer(self, pVariable):
        '''Method IMdUtilities.GetVariableRenderer

           INPUT
            pVariable           : IGPVariable*

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IMdUtilities, self).GetVariableRenderer(pVariable)
    def CheckProcessTool(self, pProcess):
        '''Method IMdUtilities.CheckProcessTool

           INPUT
            pProcess            : IMdProcess*

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdUtilities, self).CheckProcessTool(pProcess)
    def CheckTool(self, pTool):
        '''Method IMdUtilities.CheckTool

           INPUT
            pTool               : IGPTool*

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdUtilities, self).CheckTool(pTool)
    def GetValueTableVariables(self, pValueTable):
        '''Method IMdUtilities.GetValueTableVariables

           INPUT
            pValueTable         : IGPValueTable*

           OUTPUT
            ppVariables         : IArray**'''
        return super(IMdUtilities, self).GetValueTableVariables(pValueTable)
    def GetIndependentModelVariables(self, pMdElement, pDataType, pDomain):
        '''Method IMdUtilities.GetIndependentModelVariables

           INPUTS
            pMdElement          : IMdElement*
            pDataType           : IGPDataType*
            pDomain             : IGPDomain*

           OUTPUT
            ppVariables         : IArray**'''
        return super(IMdUtilities, self).GetIndependentModelVariables(pMdElement, pDataType, pDomain)
    def FindDependentParameters(self, pVariable, pProcess, Direction):
        '''Method IMdUtilities.FindDependentParameters

           INPUTS
            pVariable           : IGPVariable*
            pProcess            : IMdProcess*
            Direction           : esriMdDirection

           OUTPUT
            ppParameters        : IArray**'''
        return super(IMdUtilities, self).FindDependentParameters(pVariable, pProcess, Direction)
    def FindDependentEnvironments(self, pVariable, pProcess, Direction):
        '''Method IMdUtilities.FindDependentEnvironments

           INPUTS
            pVariable           : IGPVariable*
            pProcess            : IMdProcess*
            Direction           : esriMdDirection

           OUTPUT
            ppEnvironments      : IArray**'''
        return super(IMdUtilities, self).FindDependentEnvironments(pVariable, pProcess, Direction)
    def IsIntermediate(self, pVariable, pModelTool):
        '''Method IMdUtilities.IsIntermediate

           INPUTS
            pVariable           : IMdVariable*
            pModelTool          : IGPModelTool*

           OUTPUT
            pIntermediate       : VARIANT_BOOL*'''
        return super(IMdUtilities, self).IsIntermediate(pVariable, pModelTool)
    def GetElementCountInEnum(self, pElements):
        '''Method IMdUtilities.GetElementCountInEnum

           INPUT
            pElements           : IEnumMdElement*

           OUTPUT
            pCount              : long*'''
        return super(IMdUtilities, self).GetElementCountInEnum(pElements)
    def GetElementIndexInArray(self, pElements, pElement):
        '''Method IMdUtilities.GetElementIndexInArray

           INPUTS
            pElements           : IArray*
            pElement            : IMdElement*

           OUTPUT
            pIndex              : long*'''
        return super(IMdUtilities, self).GetElementIndexInArray(pElements, pElement)
    def EnumMdElementToArray(self, pElements):
        '''Method IMdUtilities.EnumMdElementToArray

           INPUT
            pElements           : IEnumMdElement*

           OUTPUT
            ppElements          : IArray**'''
        return super(IMdUtilities, self).EnumMdElementToArray(pElements)
    def AlterDependentParameters(self, pVariable):
        '''Method IMdUtilities.AlterDependentParameters

           INPUT
            pVariable           : IGPVariable*'''
        return super(IMdUtilities, self).AlterDependentParameters(pVariable)
    def PackList(self, pParameter, pList):
        '''Method IMdUtilities.PackList

           INPUTS
            pParameter          : IUnknown*
            pList               : IMdList*'''
        return super(IMdUtilities, self).PackList(pParameter, pList)
    def UnpackList(self, pParameter, bCheck):
        '''Method IMdUtilities.UnpackList

           INPUTS
            pParameter          : IUnknown*
            bCheck              : VARIANT_BOOL

           OUTPUT
            ppList              : IMdList**'''
        return super(IMdUtilities, self).UnpackList(pParameter, bCheck)
    def GetDerivedSource(self, pVariable):
        '''Method IMdUtilities.GetDerivedSource

           INPUT
            pVariable           : IGPVariable*

           OUTPUTS
            ppVariable          : IGPVariable**
            ppParameter         : IGPParameter**'''
        return super(IMdUtilities, self).GetDerivedSource(pVariable)

class IMdUtilities2(_esriGeoprocessing.IMdUtilities2):
    _IID = uuid.UUID('caafcc67-8cd1-4efc-b226-cad47311a8cc')
    def ResolveValue(self, pValue, pVariableManager):
        '''Method IMdUtilities2.ResolveValue

           INPUTS
            pValue              : IGPValue*
            pVariableManager    : IGPVariableManager*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IMdUtilities2, self).ResolveValue(pValue, pVariableManager)
    def GetAsText(self, pValue, resolve, pVariableManager):
        '''Method IMdUtilities2.GetAsText

           INPUTS
            pValue              : IGPValue*
            resolve             : VARIANT_BOOL
            pVariableManager    : IGPVariableManager*

           OUTPUT
            pText               : BSTR*'''
        return super(IMdUtilities2, self).GetAsText(pValue, resolve, pVariableManager)
    def ResolveText(self, text, pVariableManager, pText):
        '''Method IMdUtilities2.ResolveText

           INPUTS
            text                : BSTR
            pVariableManager    : IGPVariableManager*
            pText               : BSTR*'''
        return super(IMdUtilities2, self).ResolveText(text, pVariableManager, pText)
    def GetVariableNames(self, text, ppNames):
        '''Method IMdUtilities2.GetVariableNames

           INPUTS
            text                : BSTR
            ppNames             : IStringArray**'''
        return super(IMdUtilities2, self).GetVariableNames(text, ppNames)
    def GetElementIndexInEnum(self, pElements, pElement):
        '''Method IMdUtilities.GetElementIndexInEnum (from IMdUtilities)

           INPUTS
            pElements           : IEnumMdElement*
            pElement            : IMdElement*

           OUTPUT
            pIndex              : long*'''
        return super(IMdUtilities2, self).GetElementIndexInEnum(pElements, pElement)
    def SameElement(self, pElement1, pElement2):
        '''Method IMdUtilities.SameElement (from IMdUtilities)

           INPUTS
            pElement1           : IMdElement*
            pElement2           : IMdElement*

           OUTPUT
            pSame               : VARIANT_BOOL*'''
        return super(IMdUtilities2, self).SameElement(pElement1, pElement2)
    def CompareParameters(self, pParameter1, pParameter2):
        '''Method IMdUtilities.CompareParameters (from IMdUtilities)

           INPUTS
            pParameter1         : IGPParameter*
            pParameter2         : IGPParameter*

           OUTPUT
            pSame               : VARIANT_BOOL*'''
        return super(IMdUtilities2, self).CompareParameters(pParameter1, pParameter2)
    def IsDatasetType(self, pUnknown):
        '''Method IMdUtilities.IsDatasetType (from IMdUtilities)

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IMdUtilities2, self).IsDatasetType(pUnknown)
    def FindDependentProcess(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentProcess (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppProcess           : IMdProcess**'''
        return super(IMdUtilities2, self).FindDependentProcess(pVariable, Direction)
    def FindDependentParameter(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentParameter (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppParameter         : IGPParameter**'''
        return super(IMdUtilities2, self).FindDependentParameter(pVariable, Direction)
    def FindDependentEnvironment(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentEnvironment (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IMdUtilities2, self).FindDependentEnvironment(pVariable, Direction)
    def GetVariableRenderer(self, pVariable):
        '''Method IMdUtilities.GetVariableRenderer (from IMdUtilities)

           INPUT
            pVariable           : IGPVariable*

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IMdUtilities2, self).GetVariableRenderer(pVariable)
    def CheckProcessTool(self, pProcess):
        '''Method IMdUtilities.CheckProcessTool (from IMdUtilities)

           INPUT
            pProcess            : IMdProcess*

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdUtilities2, self).CheckProcessTool(pProcess)
    def CheckTool(self, pTool):
        '''Method IMdUtilities.CheckTool (from IMdUtilities)

           INPUT
            pTool               : IGPTool*

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdUtilities2, self).CheckTool(pTool)
    def GetValueTableVariables(self, pValueTable):
        '''Method IMdUtilities.GetValueTableVariables (from IMdUtilities)

           INPUT
            pValueTable         : IGPValueTable*

           OUTPUT
            ppVariables         : IArray**'''
        return super(IMdUtilities2, self).GetValueTableVariables(pValueTable)
    def GetIndependentModelVariables(self, pMdElement, pDataType, pDomain):
        '''Method IMdUtilities.GetIndependentModelVariables (from IMdUtilities)

           INPUTS
            pMdElement          : IMdElement*
            pDataType           : IGPDataType*
            pDomain             : IGPDomain*

           OUTPUT
            ppVariables         : IArray**'''
        return super(IMdUtilities2, self).GetIndependentModelVariables(pMdElement, pDataType, pDomain)
    def FindDependentParameters(self, pVariable, pProcess, Direction):
        '''Method IMdUtilities.FindDependentParameters (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            pProcess            : IMdProcess*
            Direction           : esriMdDirection

           OUTPUT
            ppParameters        : IArray**'''
        return super(IMdUtilities2, self).FindDependentParameters(pVariable, pProcess, Direction)
    def FindDependentEnvironments(self, pVariable, pProcess, Direction):
        '''Method IMdUtilities.FindDependentEnvironments (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            pProcess            : IMdProcess*
            Direction           : esriMdDirection

           OUTPUT
            ppEnvironments      : IArray**'''
        return super(IMdUtilities2, self).FindDependentEnvironments(pVariable, pProcess, Direction)
    def IsIntermediate(self, pVariable, pModelTool):
        '''Method IMdUtilities.IsIntermediate (from IMdUtilities)

           INPUTS
            pVariable           : IMdVariable*
            pModelTool          : IGPModelTool*

           OUTPUT
            pIntermediate       : VARIANT_BOOL*'''
        return super(IMdUtilities2, self).IsIntermediate(pVariable, pModelTool)
    def GetElementCountInEnum(self, pElements):
        '''Method IMdUtilities.GetElementCountInEnum (from IMdUtilities)

           INPUT
            pElements           : IEnumMdElement*

           OUTPUT
            pCount              : long*'''
        return super(IMdUtilities2, self).GetElementCountInEnum(pElements)
    def GetElementIndexInArray(self, pElements, pElement):
        '''Method IMdUtilities.GetElementIndexInArray (from IMdUtilities)

           INPUTS
            pElements           : IArray*
            pElement            : IMdElement*

           OUTPUT
            pIndex              : long*'''
        return super(IMdUtilities2, self).GetElementIndexInArray(pElements, pElement)
    def EnumMdElementToArray(self, pElements):
        '''Method IMdUtilities.EnumMdElementToArray (from IMdUtilities)

           INPUT
            pElements           : IEnumMdElement*

           OUTPUT
            ppElements          : IArray**'''
        return super(IMdUtilities2, self).EnumMdElementToArray(pElements)
    def AlterDependentParameters(self, pVariable):
        '''Method IMdUtilities.AlterDependentParameters (from IMdUtilities)

           INPUT
            pVariable           : IGPVariable*'''
        return super(IMdUtilities2, self).AlterDependentParameters(pVariable)
    def PackList(self, pParameter, pList):
        '''Method IMdUtilities.PackList (from IMdUtilities)

           INPUTS
            pParameter          : IUnknown*
            pList               : IMdList*'''
        return super(IMdUtilities2, self).PackList(pParameter, pList)
    def UnpackList(self, pParameter, bCheck):
        '''Method IMdUtilities.UnpackList (from IMdUtilities)

           INPUTS
            pParameter          : IUnknown*
            bCheck              : VARIANT_BOOL

           OUTPUT
            ppList              : IMdList**'''
        return super(IMdUtilities2, self).UnpackList(pParameter, bCheck)
    def GetDerivedSource(self, pVariable):
        '''Method IMdUtilities.GetDerivedSource (from IMdUtilities)

           INPUT
            pVariable           : IGPVariable*

           OUTPUTS
            ppVariable          : IGPVariable**
            ppParameter         : IGPParameter**'''
        return super(IMdUtilities2, self).GetDerivedSource(pVariable)

class IMdUtilities3(_esriGeoprocessing.IMdUtilities3):
    _IID = uuid.UUID('8e7671d7-c974-4a78-b153-2ca35b710b9e')
    def CheckConditionalValue(self, pValue, bCheckType):
        '''Method IMdUtilities3.CheckConditionalValue

           INPUTS
            pValue              : IGPValue*
            bCheckType          : VARIANT_BOOL

           OUTPUT
            pContinue           : VARIANT_BOOL*'''
        return super(IMdUtilities3, self).CheckConditionalValue(pValue, bCheckType)
    def ReplaceText(self, inText, search, Replace):
        '''Method IMdUtilities3.ReplaceText

           INPUTS
            inText              : BSTR
            search              : BSTR
            Replace             : BSTR

           OUTPUT
            pText               : BSTR*'''
        return super(IMdUtilities3, self).ReplaceText(inText, search, Replace)
    def ResolveValue(self, pValue, pVariableManager):
        '''Method IMdUtilities2.ResolveValue (from IMdUtilities2)

           INPUTS
            pValue              : IGPValue*
            pVariableManager    : IGPVariableManager*

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IMdUtilities3, self).ResolveValue(pValue, pVariableManager)
    def GetAsText(self, pValue, resolve, pVariableManager):
        '''Method IMdUtilities2.GetAsText (from IMdUtilities2)

           INPUTS
            pValue              : IGPValue*
            resolve             : VARIANT_BOOL
            pVariableManager    : IGPVariableManager*

           OUTPUT
            pText               : BSTR*'''
        return super(IMdUtilities3, self).GetAsText(pValue, resolve, pVariableManager)
    def ResolveText(self, text, pVariableManager, pText):
        '''Method IMdUtilities2.ResolveText (from IMdUtilities2)

           INPUTS
            text                : BSTR
            pVariableManager    : IGPVariableManager*
            pText               : BSTR*'''
        return super(IMdUtilities3, self).ResolveText(text, pVariableManager, pText)
    def GetVariableNames(self, text, ppNames):
        '''Method IMdUtilities2.GetVariableNames (from IMdUtilities2)

           INPUTS
            text                : BSTR
            ppNames             : IStringArray**'''
        return super(IMdUtilities3, self).GetVariableNames(text, ppNames)
    def GetElementIndexInEnum(self, pElements, pElement):
        '''Method IMdUtilities.GetElementIndexInEnum (from IMdUtilities)

           INPUTS
            pElements           : IEnumMdElement*
            pElement            : IMdElement*

           OUTPUT
            pIndex              : long*'''
        return super(IMdUtilities3, self).GetElementIndexInEnum(pElements, pElement)
    def SameElement(self, pElement1, pElement2):
        '''Method IMdUtilities.SameElement (from IMdUtilities)

           INPUTS
            pElement1           : IMdElement*
            pElement2           : IMdElement*

           OUTPUT
            pSame               : VARIANT_BOOL*'''
        return super(IMdUtilities3, self).SameElement(pElement1, pElement2)
    def CompareParameters(self, pParameter1, pParameter2):
        '''Method IMdUtilities.CompareParameters (from IMdUtilities)

           INPUTS
            pParameter1         : IGPParameter*
            pParameter2         : IGPParameter*

           OUTPUT
            pSame               : VARIANT_BOOL*'''
        return super(IMdUtilities3, self).CompareParameters(pParameter1, pParameter2)
    def IsDatasetType(self, pUnknown):
        '''Method IMdUtilities.IsDatasetType (from IMdUtilities)

           INPUT
            pUnknown            : IUnknown*

           OUTPUT
            pIsDataset          : VARIANT_BOOL*'''
        return super(IMdUtilities3, self).IsDatasetType(pUnknown)
    def FindDependentProcess(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentProcess (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppProcess           : IMdProcess**'''
        return super(IMdUtilities3, self).FindDependentProcess(pVariable, Direction)
    def FindDependentParameter(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentParameter (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppParameter         : IGPParameter**'''
        return super(IMdUtilities3, self).FindDependentParameter(pVariable, Direction)
    def FindDependentEnvironment(self, pVariable, Direction):
        '''Method IMdUtilities.FindDependentEnvironment (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            Direction           : esriMdDirection

           OUTPUT
            ppEnvironment       : IGPEnvironment**'''
        return super(IMdUtilities3, self).FindDependentEnvironment(pVariable, Direction)
    def GetVariableRenderer(self, pVariable):
        '''Method IMdUtilities.GetVariableRenderer (from IMdUtilities)

           INPUT
            pVariable           : IGPVariable*

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IMdUtilities3, self).GetVariableRenderer(pVariable)
    def CheckProcessTool(self, pProcess):
        '''Method IMdUtilities.CheckProcessTool (from IMdUtilities)

           INPUT
            pProcess            : IMdProcess*

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdUtilities3, self).CheckProcessTool(pProcess)
    def CheckTool(self, pTool):
        '''Method IMdUtilities.CheckTool (from IMdUtilities)

           INPUT
            pTool               : IGPTool*

           OUTPUT
            message             : IGPMessage**'''
        return super(IMdUtilities3, self).CheckTool(pTool)
    def GetValueTableVariables(self, pValueTable):
        '''Method IMdUtilities.GetValueTableVariables (from IMdUtilities)

           INPUT
            pValueTable         : IGPValueTable*

           OUTPUT
            ppVariables         : IArray**'''
        return super(IMdUtilities3, self).GetValueTableVariables(pValueTable)
    def GetIndependentModelVariables(self, pMdElement, pDataType, pDomain):
        '''Method IMdUtilities.GetIndependentModelVariables (from IMdUtilities)

           INPUTS
            pMdElement          : IMdElement*
            pDataType           : IGPDataType*
            pDomain             : IGPDomain*

           OUTPUT
            ppVariables         : IArray**'''
        return super(IMdUtilities3, self).GetIndependentModelVariables(pMdElement, pDataType, pDomain)
    def FindDependentParameters(self, pVariable, pProcess, Direction):
        '''Method IMdUtilities.FindDependentParameters (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            pProcess            : IMdProcess*
            Direction           : esriMdDirection

           OUTPUT
            ppParameters        : IArray**'''
        return super(IMdUtilities3, self).FindDependentParameters(pVariable, pProcess, Direction)
    def FindDependentEnvironments(self, pVariable, pProcess, Direction):
        '''Method IMdUtilities.FindDependentEnvironments (from IMdUtilities)

           INPUTS
            pVariable           : IGPVariable*
            pProcess            : IMdProcess*
            Direction           : esriMdDirection

           OUTPUT
            ppEnvironments      : IArray**'''
        return super(IMdUtilities3, self).FindDependentEnvironments(pVariable, pProcess, Direction)
    def IsIntermediate(self, pVariable, pModelTool):
        '''Method IMdUtilities.IsIntermediate (from IMdUtilities)

           INPUTS
            pVariable           : IMdVariable*
            pModelTool          : IGPModelTool*

           OUTPUT
            pIntermediate       : VARIANT_BOOL*'''
        return super(IMdUtilities3, self).IsIntermediate(pVariable, pModelTool)
    def GetElementCountInEnum(self, pElements):
        '''Method IMdUtilities.GetElementCountInEnum (from IMdUtilities)

           INPUT
            pElements           : IEnumMdElement*

           OUTPUT
            pCount              : long*'''
        return super(IMdUtilities3, self).GetElementCountInEnum(pElements)
    def GetElementIndexInArray(self, pElements, pElement):
        '''Method IMdUtilities.GetElementIndexInArray (from IMdUtilities)

           INPUTS
            pElements           : IArray*
            pElement            : IMdElement*

           OUTPUT
            pIndex              : long*'''
        return super(IMdUtilities3, self).GetElementIndexInArray(pElements, pElement)
    def EnumMdElementToArray(self, pElements):
        '''Method IMdUtilities.EnumMdElementToArray (from IMdUtilities)

           INPUT
            pElements           : IEnumMdElement*

           OUTPUT
            ppElements          : IArray**'''
        return super(IMdUtilities3, self).EnumMdElementToArray(pElements)
    def AlterDependentParameters(self, pVariable):
        '''Method IMdUtilities.AlterDependentParameters (from IMdUtilities)

           INPUT
            pVariable           : IGPVariable*'''
        return super(IMdUtilities3, self).AlterDependentParameters(pVariable)
    def PackList(self, pParameter, pList):
        '''Method IMdUtilities.PackList (from IMdUtilities)

           INPUTS
            pParameter          : IUnknown*
            pList               : IMdList*'''
        return super(IMdUtilities3, self).PackList(pParameter, pList)
    def UnpackList(self, pParameter, bCheck):
        '''Method IMdUtilities.UnpackList (from IMdUtilities)

           INPUTS
            pParameter          : IUnknown*
            bCheck              : VARIANT_BOOL

           OUTPUT
            ppList              : IMdList**'''
        return super(IMdUtilities3, self).UnpackList(pParameter, bCheck)
    def GetDerivedSource(self, pVariable):
        '''Method IMdUtilities.GetDerivedSource (from IMdUtilities)

           INPUT
            pVariable           : IGPVariable*

           OUTPUTS
            ppVariable          : IGPVariable**
            ppParameter         : IGPParameter**'''
        return super(IMdUtilities3, self).GetDerivedSource(pVariable)

class IGPToolbox(_esriGeoprocessing.IGPToolbox):
    _IID = uuid.UUID('8df04717-e331-49d9-980b-1079d4e61e37')
    def get_PathName(self):
        '''Method IGPToolbox.get_PathName

           OUTPUT
            Path                : BSTR*'''
        return super(IGPToolbox, self).get_PathName()
    def get_Alias(self):
        '''Method IGPToolbox.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPToolbox, self).get_Alias()
    def get_ToolNames(self):
        '''Method IGPToolbox.get_ToolNames

           OUTPUT
            names               : IEnumGPToolName**'''
        return super(IGPToolbox, self).get_ToolNames()
    def get_Tools(self):
        '''Method IGPToolbox.get_Tools

           OUTPUT
            Tools               : IEnumGPTool**'''
        return super(IGPToolbox, self).get_Tools()
    def OpenTool(self, Name):
        '''Method IGPToolbox.OpenTool

           INPUT
            Name                : BSTR

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolbox, self).OpenTool(Name)
    def get_IsDeleted(self):
        '''Method IGPToolbox.get_IsDeleted

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(IGPToolbox, self).get_IsDeleted()
    def CanCreateTool(self):
        '''Method IGPToolbox.CanCreateTool

           OUTPUT
            CanCreateTool       : VARIANT_BOOL*'''
        return super(IGPToolbox, self).CanCreateTool()
    def CreateTool(self, Type, Name, DisplayName, Description, ToolCategory, ToolExtension):
        '''Method IGPToolbox.CreateTool

           INPUTS
            Type                : esriGPToolType
            Name                : BSTR
            DisplayName         : BSTR
            Description         : BSTR
            ToolCategory        : BSTR
            ToolExtension       : IGPToolExtension*

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolbox, self).CreateTool(Type, Name, DisplayName, Description, ToolCategory, ToolExtension)
    def AlterAlias(self, newAlias):
        '''Method IGPToolbox.AlterAlias

           INPUT
            newAlias            : BSTR'''
        return super(IGPToolbox, self).AlterAlias(newAlias)
    def get_HelpFile(self):
        '''Method IGPToolbox.get_HelpFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPToolbox, self).get_HelpFile()
    def get_HelpContext(self):
        '''Method IGPToolbox.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IGPToolbox, self).get_HelpContext()
    def AlterHelpInfo(self, File, context):
        '''Method IGPToolbox.AlterHelpInfo

           INPUTS
            File                : BSTR
            context             : long'''
        return super(IGPToolbox, self).AlterHelpInfo(File, context)
    Alias = property(get_Alias, None, None)
    HelpContext = property(get_HelpContext, None, None)
    HelpFile = property(get_HelpFile, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    PathName = property(get_PathName, None, None)
    ToolNames = property(get_ToolNames, None, None)
    Tools = property(get_Tools, None, None)

class IEnumGPToolbox(_esriGeoprocessing.IEnumGPToolbox):
    _IID = uuid.UUID('dbd67870-ade5-4b28-a175-b6d6aad6ebf0')
    def Next(self):
        '''Method IEnumGPToolbox.Next

           OUTPUT
            Tool                : IGPToolbox**'''
        return super(IEnumGPToolbox, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPToolbox, self).Reset()
            val = super(IEnumGPToolbox, self).Next()
            while val:
                yield val
                val = super(IEnumGPToolbox, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPToolbox.Reset'''
        return super(IEnumGPToolbox, self).Reset()

class IToolboxWorkspace(_esriGeoprocessing.IToolboxWorkspace):
    _IID = uuid.UUID('027612f3-7e6b-4fdb-b20e-0ca4ccfa45b4')
    def get_ToolboxNames(self):
        '''Method IToolboxWorkspace.get_ToolboxNames

           OUTPUT
            names               : IEnumGPToolboxName**'''
        return super(IToolboxWorkspace, self).get_ToolboxNames()
    def get_Toolboxes(self):
        '''Method IToolboxWorkspace.get_Toolboxes

           OUTPUT
            Toolboxes           : IEnumGPToolbox**'''
        return super(IToolboxWorkspace, self).get_Toolboxes()
    def OpenToolbox(self, Name):
        '''Method IToolboxWorkspace.OpenToolbox

           INPUT
            Name                : BSTR

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IToolboxWorkspace, self).OpenToolbox(Name)
    def CreateToolbox(self, Name, Alias):
        '''Method IToolboxWorkspace.CreateToolbox

           INPUTS
            Name                : BSTR
            Alias               : BSTR

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IToolboxWorkspace, self).CreateToolbox(Name, Alias)
    def DeleteToolbox(self, Name):
        '''Method IToolboxWorkspace.DeleteToolbox

           INPUT
            Name                : BSTR'''
        return super(IToolboxWorkspace, self).DeleteToolbox(Name)
    ToolboxNames = property(get_ToolboxNames, None, None)
    Toolboxes = property(get_Toolboxes, None, None)

class IGPToolboxFactory(_esriGeoprocessing.IGPToolboxFactory):
    _IID = uuid.UUID('9fecee68-4f57-4adc-91d4-5681234ef14d')
    def OpenFromFile(self, Path):
        '''Method IGPToolboxFactory.OpenFromFile

           INPUT
            Path                : BSTR

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IGPToolboxFactory, self).OpenFromFile(Path)
    def Create(self, Path):
        '''Method IGPToolboxFactory.Create

           INPUT
            Path                : BSTR

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IGPToolboxFactory, self).Create(Path)

class IGPToolset(_esriGeoprocessing.IGPToolset):
    _IID = uuid.UUID('744b7ef0-5627-4414-abe0-0b348b2cfe88')

    def __init__(self, *args, **kw):
        super(IGPToolset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Toolbox(self):
        '''Method IGPToolset.get_Toolbox

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IGPToolset, self).get_Toolbox()
    def get_ToolCategory(self):
        '''Method IGPToolset.get_ToolCategory

           OUTPUT
            Category            : BSTR*'''
        return super(IGPToolset, self).get_ToolCategory()
    def put_ToolCategory(self, Category):
        '''Method IGPToolset.put_ToolCategory

           INPUT
            Category            : BSTR'''
        return super(IGPToolset, self).put_ToolCategory(Category)
    ToolCategory = property(get_ToolCategory, put_ToolCategory, None)
    Toolbox = property(get_Toolbox, None, None)

class IEnumGPToolset(_esriGeoprocessing.IEnumGPToolset):
    _IID = uuid.UUID('2850360d-885c-4e88-ae78-010297c457d1')
    def Next(self):
        '''Method IEnumGPToolset.Next

           OUTPUT
            Tool                : IGPToolset**'''
        return super(IEnumGPToolset, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPToolset, self).Reset()
            val = super(IEnumGPToolset, self).Next()
            while val:
                yield val
                val = super(IEnumGPToolset, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPToolset.Reset'''
        return super(IEnumGPToolset, self).Reset()

class IGPToolboxCache(_esriGeoprocessing.IGPToolboxCache):
    _IID = uuid.UUID('8126508f-fc82-44a9-ad41-d87a3b888197')
    def RemoveFromCache(self, Toolbox):
        '''Method IGPToolboxCache.RemoveFromCache

           INPUT
            Toolbox             : IGPToolbox*'''
        return super(IGPToolboxCache, self).RemoveFromCache(Toolbox)

class IGPToolboxImpl(_esriGeoprocessing.IGPToolboxImpl):
    _IID = uuid.UUID('c870f865-5b64-4aa6-b104-2296d0f7d4af')

    def __init__(self, *args, **kw):
        super(IGPToolboxImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Workspace(self, _arg1):
        '''Method IGPToolboxImpl.putref_Workspace

           INPUT
            _arg1               : IWorkspace*'''
        return super(IGPToolboxImpl, self).putref_Workspace(_arg1)
    def CanDeleteTool(self, Tool):
        '''Method IGPToolboxImpl.CanDeleteTool

           INPUT
            Tool                : IGPTool*

           OUTPUT
            canRemove           : VARIANT_BOOL*'''
        return super(IGPToolboxImpl, self).CanDeleteTool(Tool)
    def DeleteTool(self, Tool):
        '''Method IGPToolboxImpl.DeleteTool

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxImpl, self).DeleteTool(Tool)
    def CanAlterTool(self, Tool):
        '''Method IGPToolboxImpl.CanAlterTool

           INPUT
            Tool                : IGPTool*

           OUTPUT
            canRename           : VARIANT_BOOL*'''
        return super(IGPToolboxImpl, self).CanAlterTool(Tool)
    def StoreTool(self, Tool):
        '''Method IGPToolboxImpl.StoreTool

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxImpl, self).StoreTool(Tool)
    def ToolStateChanged(self, Tool):
        '''Method IGPToolboxImpl.ToolStateChanged

           INPUT
            Tool                : IGPTool*'''
        return super(IGPToolboxImpl, self).ToolStateChanged(Tool)
    def IsSystemToolbox(self):
        '''Method IGPToolboxImpl.IsSystemToolbox

           OUTPUT
            IsSystemToolbox     : VARIANT_BOOL*'''
        return super(IGPToolboxImpl, self).IsSystemToolbox()
    def AlterMetadata(self, pMetadata):
        '''Method IGPToolboxImpl.AlterMetadata

           INPUT
            pMetadata           : IPropertySet*'''
        return super(IGPToolboxImpl, self).AlterMetadata(pMetadata)
    def SetMetadata(self, pMetadata):
        '''Method IGPToolboxImpl.SetMetadata

           INPUT
            pMetadata           : IPropertySet*'''
        return super(IGPToolboxImpl, self).SetMetadata(pMetadata)
    def GetUniqueToolName(self, Type):
        '''Method IGPToolboxImpl.GetUniqueToolName

           INPUT
            Type                : esriGPToolType

           OUTPUTS
            Name                : BSTR*
            DisplayName         : BSTR*'''
        return super(IGPToolboxImpl, self).GetUniqueToolName(Type)
    def GetToolsets(self):
        '''Method IGPToolboxImpl.GetToolsets

           OUTPUT
            Tools               : IEnumGPToolset**'''
        return super(IGPToolboxImpl, self).GetToolsets()
    def CreateToolset(self, Category):
        '''Method IGPToolboxImpl.CreateToolset

           INPUT
            Category            : BSTR

           OUTPUT
            Toolset             : IGPToolset**'''
        return super(IGPToolboxImpl, self).CreateToolset(Category)
    def DeleteToolset(self, Toolset):
        '''Method IGPToolboxImpl.DeleteToolset

           INPUT
            Toolset             : IGPToolset*'''
        return super(IGPToolboxImpl, self).DeleteToolset(Toolset)
    def RenameToolset(self, Toolset, newCategory):
        '''Method IGPToolboxImpl.RenameToolset

           INPUTS
            Toolset             : IGPToolset*
            newCategory         : BSTR'''
        return super(IGPToolboxImpl, self).RenameToolset(Toolset, newCategory)
    Workspace = property(None, putref_Workspace, None)

class IGPToolboxImplEvents(_esriGeoprocessing.IGPToolboxImplEvents):
    _IID = uuid.UUID('e3b0f357-3625-461d-90cb-c951749a0c92')
    def OnToolsetAdded(self, Toolset):
        '''Method IGPToolboxImplEvents.OnToolsetAdded

           INPUT
            Toolset             : IGPToolset*'''
        return super(IGPToolboxImplEvents, self).OnToolsetAdded(Toolset)
    def OnToolsetDeleted(self, Toolset):
        '''Method IGPToolboxImplEvents.OnToolsetDeleted

           INPUT
            Toolset             : IGPToolset*'''
        return super(IGPToolboxImplEvents, self).OnToolsetDeleted(Toolset)
    def OnToolsetModified(self, Toolset):
        '''Method IGPToolboxImplEvents.OnToolsetModified

           INPUT
            Toolset             : IGPToolset*'''
        return super(IGPToolboxImplEvents, self).OnToolsetModified(Toolset)

class IGxGPToolsetImpl(_esriGeoprocessing.IGxGPToolsetImpl):
    _IID = uuid.UUID('0684590d-d3f9-44b9-8132-614c0b5d8b42')

    def __init__(self, *args, **kw):
        super(IGxGPToolsetImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Toolset(self):
        '''Method IGxGPToolsetImpl.get_Toolset

           OUTPUT
            Toolset             : IGPToolset**'''
        return super(IGxGPToolsetImpl, self).get_Toolset()
    def putref_Toolset(self, Toolset):
        '''Method IGxGPToolsetImpl.putref_Toolset

           INPUT
            Toolset             : IGPToolset*'''
        return super(IGxGPToolsetImpl, self).putref_Toolset(Toolset)
    Toolset = property(get_Toolset, putref_Toolset, None)

class IGeoProcessorImpl(_esriGeoprocessing.IGeoProcessorImpl):
    _IID = uuid.UUID('406fc33c-f2e1-4616-a43f-15c5a59e7d3e')

    def __init__(self, *args, **kw):
        super(IGeoProcessorImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ExecuteTool(self, Parent, TrackCancel, showErrorInMsgBox, performHousekeeping, Tool, Parameters):
        '''Method IGeoProcessorImpl.ExecuteTool

           INPUTS
            Parent              : OLE_HANDLE
            TrackCancel         : ITrackCancel*
            showErrorInMsgBox   : VARIANT_BOOL
            performHousekeeping : VARIANT_BOOL
            Tool                : IGPTool*
            Parameters          : IArray*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGeoProcessorImpl, self).ExecuteTool(Parent, TrackCancel, showErrorInMsgBox, performHousekeeping, Tool, Parameters)
    def ExecuteProcess(self, Parent, TrackCancel, showErrorInMsgBox, performHousekeeping, blockPostToolExecute, blockAddToMap, Process, envMgr):
        '''Method IGeoProcessorImpl.ExecuteProcess

           INPUTS
            Parent              : OLE_HANDLE
            TrackCancel         : ITrackCancel*
            showErrorInMsgBox   : VARIANT_BOOL
            performHousekeeping : VARIANT_BOOL
            blockPostToolExecute: VARIANT_BOOL
            blockAddToMap       : VARIANT_BOOL
            Process             : IMdProcess*
            envMgr              : IGPEnvironmentManager*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGeoProcessorImpl, self).ExecuteProcess(Parent, TrackCancel, showErrorInMsgBox, performHousekeeping, blockPostToolExecute, blockAddToMap, Process, envMgr)
    def GetToolboxes(self):
        '''Method IGeoProcessorImpl.GetToolboxes

           OUTPUT
            Toolboxes           : IEnumGPToolbox**'''
        return super(IGeoProcessorImpl, self).GetToolboxes()
    def AddDefaultToolboxes(self):
        '''Method IGeoProcessorImpl.AddDefaultToolboxes'''
        return super(IGeoProcessorImpl, self).AddDefaultToolboxes()
    def AddDefaultUninstalledToolboxes(self):
        '''Method IGeoProcessorImpl.AddDefaultUninstalledToolboxes'''
        return super(IGeoProcessorImpl, self).AddDefaultUninstalledToolboxes()
    def AddToolbox(self, Toolbox):
        '''Method IGeoProcessorImpl.AddToolbox

           INPUT
            Toolbox             : IGPToolbox*'''
        return super(IGeoProcessorImpl, self).AddToolbox(Toolbox)
    def RemoveToolbox(self, Toolbox):
        '''Method IGeoProcessorImpl.RemoveToolbox

           INPUT
            Toolbox             : IGPToolbox*'''
        return super(IGeoProcessorImpl, self).RemoveToolbox(Toolbox)
    def RemoveAllToolboxes(self):
        '''Method IGeoProcessorImpl.RemoveAllToolboxes'''
        return super(IGeoProcessorImpl, self).RemoveAllToolboxes()
    def OpenToolbox(self, Path):
        '''Method IGeoProcessorImpl.OpenToolbox

           INPUT
            Path                : BSTR

           OUTPUT
            Toolbox             : IGPToolbox**'''
        return super(IGeoProcessorImpl, self).OpenToolbox(Path)
    def put_Toolbox(self, Toolbox):
        '''Method IGeoProcessorImpl.put_Toolbox

           INPUT
            Toolbox             : BSTR'''
        return super(IGeoProcessorImpl, self).put_Toolbox(Toolbox)
    def get_Toolbox(self):
        '''Method IGeoProcessorImpl.get_Toolbox

           OUTPUT
            Toolbox             : BSTR*'''
        return super(IGeoProcessorImpl, self).get_Toolbox()
    def GetDataTypeNameObjects(self):
        '''Method IGeoProcessorImpl.GetDataTypeNameObjects

           OUTPUT
            gpNames             : IArray**'''
        return super(IGeoProcessorImpl, self).GetDataTypeNameObjects()
    def Usage(self, Method, fullUsage):
        '''Method IGeoProcessorImpl.Usage

           INPUTS
            Method              : BSTR
            fullUsage           : VARIANT_BOOL

           OUTPUT
            Usage               : BSTR*'''
        return super(IGeoProcessorImpl, self).Usage(Method, fullUsage)
    def CommandLine(self, CommandLine):
        '''Method IGeoProcessorImpl.CommandLine

           INPUT
            CommandLine         : BSTR

           OUTPUT
            Results             : BSTR*'''
        return super(IGeoProcessorImpl, self).CommandLine(CommandLine)
    def CommandLineEx(self, CommandLine, pTrackCancel):
        '''Method IGeoProcessorImpl.CommandLineEx

           INPUTS
            CommandLine         : BSTR
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppMsgs              : IGPMessages**'''
        return super(IGeoProcessorImpl, self).CommandLineEx(CommandLine, pTrackCancel)
    def GetToolbyNameString(self, NameString):
        '''Method IGeoProcessorImpl.GetToolbyNameString

           INPUT
            NameString          : BSTR

           OUTPUT
            ppGPTool            : IGPTool**'''
        return super(IGeoProcessorImpl, self).GetToolbyNameString(NameString)
    def SearchTools(self, wildCard):
        '''Method IGeoProcessorImpl.SearchTools

           INPUT
            wildCard            : BSTR

           OUTPUT
            Tools               : BSTR*'''
        return super(IGeoProcessorImpl, self).SearchTools(wildCard)
    def SearchEnvironments(self, wildCard):
        '''Method IGeoProcessorImpl.SearchEnvironments

           INPUT
            wildCard            : BSTR

           OUTPUT
            Environments        : BSTR*'''
        return super(IGeoProcessorImpl, self).SearchEnvironments(wildCard)
    def SearchToolboxes(self, wildCard):
        '''Method IGeoProcessorImpl.SearchToolboxes

           INPUT
            wildCard            : BSTR

           OUTPUT
            Toolboxes           : BSTR*'''
        return super(IGeoProcessorImpl, self).SearchToolboxes(wildCard)
    def SetToolParameter(self, Index, pValue):
        '''Method IGeoProcessorImpl.SetToolParameter

           INPUTS
            Index               : long
            pValue              : IGPValue*'''
        return super(IGeoProcessorImpl, self).SetToolParameter(Index, pValue)
    def GetToolParameter(self, Index):
        '''Method IGeoProcessorImpl.GetToolParameter

           INPUT
            Index               : long

           OUTPUT
            ppValue             : IGPValue**'''
        return super(IGeoProcessorImpl, self).GetToolParameter(Index)
    def SetToolParameterAsText(self, Index, argument):
        '''Method IGeoProcessorImpl.SetToolParameterAsText

           INPUTS
            Index               : long
            argument            : BSTR'''
        return super(IGeoProcessorImpl, self).SetToolParameterAsText(Index, argument)
    def GetToolParameterAsText(self, Index):
        '''Method IGeoProcessorImpl.GetToolParameterAsText

           INPUT
            Index               : long

           OUTPUT
            argument            : BSTR*'''
        return super(IGeoProcessorImpl, self).GetToolParameterAsText(Index)
    def CopyToolParameter(self, From, to):
        '''Method IGeoProcessorImpl.CopyToolParameter

           INPUTS
            from                : long
            to                  : long'''
        return super(IGeoProcessorImpl, self).CopyToolParameter(From, to)
    def GetSystemEnvironment(self, envName):
        '''Method IGeoProcessorImpl.GetSystemEnvironment

           INPUT
            envName             : BSTR

           OUTPUT
            environment         : BSTR*'''
        return super(IGeoProcessorImpl, self).GetSystemEnvironment(envName)
    def get_ToolParameterCount(self):
        '''Method IGeoProcessorImpl.get_ToolParameterCount

           OUTPUT
            Count               : long*'''
        return super(IGeoProcessorImpl, self).get_ToolParameterCount()
    def get_ReturnMessages(self):
        '''Method IGeoProcessorImpl.get_ReturnMessages

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGeoProcessorImpl, self).get_ReturnMessages()
    def putref_ReturnMessages(self, Messages):
        '''Method IGeoProcessorImpl.putref_ReturnMessages

           INPUT
            Messages            : IGPMessages*'''
        return super(IGeoProcessorImpl, self).putref_ReturnMessages(Messages)
    def GetEnvironmentManager(self):
        '''Method IGeoProcessorImpl.GetEnvironmentManager

           OUTPUT
            ppEnvMgr            : IGPEnvironmentManager**'''
        return super(IGeoProcessorImpl, self).GetEnvironmentManager()
    def GetTool(self, Toolbox, Name):
        '''Method IGeoProcessorImpl.GetTool

           INPUTS
            Toolbox             : BSTR
            Name                : BSTR

           OUTPUTS
            trueToolbox         : BSTR*
            Tool                : IGPTool**'''
        return super(IGeoProcessorImpl, self).GetTool(Toolbox, Name)
    def BootStrap(self, Toolbox):
        '''Method IGeoProcessorImpl.BootStrap

           INPUT
            Toolbox             : BSTR'''
        return super(IGeoProcessorImpl, self).BootStrap(Toolbox)
    def CreateToolboxFromFactory(self, ToolboxName, pFunctionFactory):
        '''Method IGeoProcessorImpl.CreateToolboxFromFactory

           INPUTS
            ToolboxName         : BSTR
            pFunctionFactory    : IGPFunctionFactory*'''
        return super(IGeoProcessorImpl, self).CreateToolboxFromFactory(ToolboxName, pFunctionFactory)
    def AddToolboxAsText(self, Path):
        '''Method IGeoProcessorImpl.AddToolboxAsText

           INPUT
            Path                : BSTR'''
        return super(IGeoProcessorImpl, self).AddToolboxAsText(Path)
    def RemoveToolboxAsText(self, Path):
        '''Method IGeoProcessorImpl.RemoveToolboxAsText

           INPUT
            Path                : BSTR'''
        return super(IGeoProcessorImpl, self).RemoveToolboxAsText(Path)
    def WriteSettings(self, File):
        '''Method IGeoProcessorImpl.WriteSettings

           INPUT
            File                : BSTR'''
        return super(IGeoProcessorImpl, self).WriteSettings(File)
    def ReadSettings(self, File):
        '''Method IGeoProcessorImpl.ReadSettings

           INPUT
            File                : BSTR'''
        return super(IGeoProcessorImpl, self).ReadSettings(File)
    def AddVariable(self, variable):
        '''Method IGeoProcessorImpl.AddVariable

           INPUT
            variable            : IGPVariable*'''
        return super(IGeoProcessorImpl, self).AddVariable(variable)
    def RemoveVariable(self, variable):
        '''Method IGeoProcessorImpl.RemoveVariable

           INPUT
            variable            : IGPVariable*'''
        return super(IGeoProcessorImpl, self).RemoveVariable(variable)
    def GetCommandList(self):
        '''Method IGeoProcessorImpl.GetCommandList

           OUTPUT
            list                : BSTR*'''
        return super(IGeoProcessorImpl, self).GetCommandList()
    def GetChoiceList(self, Command, Parameter, CommandLine):
        '''Method IGeoProcessorImpl.GetChoiceList

           INPUTS
            Command             : BSTR
            Parameter           : long
            CommandLine         : BSTR

           OUTPUTS
            list                : BSTR*
            ppProcess           : IMdProcess**'''
        return super(IGeoProcessorImpl, self).GetChoiceList(Command, Parameter, CommandLine)
    def GetDataTypeChoiceList(self, DataTypeName, filterString):
        '''Method IGeoProcessorImpl.GetDataTypeChoiceList

           INPUTS
            DataTypeName        : BSTR
            filterString        : BSTR

           OUTPUTS
            ppDataType          : IGPDataType**
            list                : BSTR*'''
        return super(IGeoProcessorImpl, self).GetDataTypeChoiceList(DataTypeName, filterString)
    def GetVariables(self):
        '''Method IGeoProcessorImpl.GetVariables

           OUTPUT
            Variables           : IEnumGPVariable**'''
        return super(IGeoProcessorImpl, self).GetVariables()
    def GetVariable(self, Name):
        '''Method IGeoProcessorImpl.GetVariable

           INPUT
            Name                : BSTR

           OUTPUT
            variable            : IGPVariable**'''
        return super(IGeoProcessorImpl, self).GetVariable(Name)
    def ParameterUsage(self, pGPParameterDef, fullUsage):
        '''Method IGeoProcessorImpl.ParameterUsage

           INPUTS
            pGPParameterDef     : IGPParameter*
            fullUsage           : VARIANT_BOOL

           OUTPUT
            pUsage              : BSTR*'''
        return super(IGeoProcessorImpl, self).ParameterUsage(pGPParameterDef, fullUsage)
    def Shutdown(self):
        '''Method IGeoProcessorImpl.Shutdown'''
        return super(IGeoProcessorImpl, self).Shutdown()
    def HasEnvironmentBeenInitialized(self):
        '''Method IGeoProcessorImpl.HasEnvironmentBeenInitialized

           OUTPUT
            initialized         : VARIANT_BOOL*'''
        return super(IGeoProcessorImpl, self).HasEnvironmentBeenInitialized()
    def SetInitialEnvironmentSettings(self, settings):
        '''Method IGeoProcessorImpl.SetInitialEnvironmentSettings

           INPUT
            settings            : IPropertySet*'''
        return super(IGeoProcessorImpl, self).SetInitialEnvironmentSettings(settings)
    def GetCurrentLicenseProductCode(self, ProductCode):
        '''Method IGeoProcessorImpl.GetCurrentLicenseProductCode

           INPUT
            ProductCode         : esriLicenseProductCode*'''
        return super(IGeoProcessorImpl, self).GetCurrentLicenseProductCode(ProductCode)
    def SaveScriptEnvironment(self):
        '''Method IGeoProcessorImpl.SaveScriptEnvironment'''
        return super(IGeoProcessorImpl, self).SaveScriptEnvironment()
    def Startup(self):
        '''Method IGeoProcessorImpl.Startup'''
        return super(IGeoProcessorImpl, self).Startup()
    def put_RunningFromDispatchApp(self, withinDispatchApp):
        '''Method IGeoProcessorImpl.put_RunningFromDispatchApp

           INPUT
            withinDispatchApp   : VARIANT_BOOL'''
        return super(IGeoProcessorImpl, self).put_RunningFromDispatchApp(withinDispatchApp)
    def get_RunningFromDispatchApp(self):
        '''Method IGeoProcessorImpl.get_RunningFromDispatchApp

           OUTPUT
            withinDispatchApp   : VARIANT_BOOL*'''
        return super(IGeoProcessorImpl, self).get_RunningFromDispatchApp()
    def put_RunningFromScriptBase(self, withinScriptBase):
        '''Method IGeoProcessorImpl.put_RunningFromScriptBase

           INPUT
            withinScriptBase    : VARIANT_BOOL'''
        return super(IGeoProcessorImpl, self).put_RunningFromScriptBase(withinScriptBase)
    def get_RunningFromScriptBase(self):
        '''Method IGeoProcessorImpl.get_RunningFromScriptBase

           OUTPUT
            withinScriptBase    : VARIANT_BOOL*'''
        return super(IGeoProcessorImpl, self).get_RunningFromScriptBase()
    def UpdateValueBasedUponDependencies(self, pValue, pParameters, pParameter):
        '''Method IGeoProcessorImpl.UpdateValueBasedUponDependencies

           INPUTS
            pValue              : IGPValue*
            pParameters         : IArray*
            pParameter          : IGPParameter*

           OUTPUT
            ppNewGPValue        : IGPValue**'''
        return super(IGeoProcessorImpl, self).UpdateValueBasedUponDependencies(pValue, pParameters, pParameter)
    def GenerateChoiceList(self, pParameters, pParameter):
        '''Method IGeoProcessorImpl.GenerateChoiceList

           INPUTS
            pParameters         : IArray*
            pParameter          : IGPParameter*

           OUTPUT
            ppDomain            : IGPCodedValueDomain**'''
        return super(IGeoProcessorImpl, self).GenerateChoiceList(pParameters, pParameter)
    def AddReturnMessage(self, pMsg):
        '''Method IGeoProcessorImpl.AddReturnMessage

           INPUT
            pMsg                : IGPMessage*'''
        return super(IGeoProcessorImpl, self).AddReturnMessage(pMsg)
    def PushInProcStack(self, pTrackCancel, pValues, pTool, pEnvMgr, pMsgs):
        '''Method IGeoProcessorImpl.PushInProcStack

           INPUTS
            pTrackCancel        : ITrackCancel*
            pValues             : IArray*
            pTool               : IGPTool*
            pEnvMgr             : IGPEnvironmentManager*
            pMsgs               : IGPMessages*'''
        return super(IGeoProcessorImpl, self).PushInProcStack(pTrackCancel, pValues, pTool, pEnvMgr, pMsgs)
    def PopInProcStack(self):
        '''Method IGeoProcessorImpl.PopInProcStack

           OUTPUT
            ppEnvMgr            : IGPEnvironmentManager**'''
        return super(IGeoProcessorImpl, self).PopInProcStack()
    def SetReturnMessage(self, pos, pMsg):
        '''Method IGeoProcessorImpl.SetReturnMessage

           INPUTS
            pos                 : long
            pMsg                : IGPMessage*'''
        return super(IGeoProcessorImpl, self).SetReturnMessage(pos, pMsg)
    def GetCurrentTrackCancel(self):
        '''Method IGeoProcessorImpl.GetCurrentTrackCancel

           OUTPUT
            ppTrackCancel       : ITrackCancel**'''
        return super(IGeoProcessorImpl, self).GetCurrentTrackCancel()
    def CreateDefaultParameterSchemas(self, pParameters, keepExistingSchemas):
        '''Method IGeoProcessorImpl.CreateDefaultParameterSchemas

           INPUTS
            pParameters         : IArray*
            keepExistingSchemas : VARIANT_BOOL'''
        return super(IGeoProcessorImpl, self).CreateDefaultParameterSchemas(pParameters, keepExistingSchemas)
    def GetToolParameters(self):
        '''Method IGeoProcessorImpl.GetToolParameters

           OUTPUTS
            ppValues            : IArray**
            ppTool              : IGPTool**'''
        return super(IGeoProcessorImpl, self).GetToolParameters()
    def InitializeScripting(self):
        '''Method IGeoProcessorImpl.InitializeScripting'''
        return super(IGeoProcessorImpl, self).InitializeScripting()
    def put_AddCommandLineToolToResult(self, addToResult):
        '''Method IGeoProcessorImpl.put_AddCommandLineToolToResult

           INPUT
            addToResult         : VARIANT_BOOL'''
        return super(IGeoProcessorImpl, self).put_AddCommandLineToolToResult(addToResult)
    def get_AddCommandLineToolToResult(self):
        '''Method IGeoProcessorImpl.get_AddCommandLineToolToResult

           OUTPUT
            addToResult         : VARIANT_BOOL*'''
        return super(IGeoProcessorImpl, self).get_AddCommandLineToolToResult()
    def GetChoiceListEx(self, Command, Parameter, subParameter, CommandLine):
        '''Method IGeoProcessorImpl.GetChoiceListEx

           INPUTS
            Command             : BSTR
            Parameter           : long
            subParameter        : long
            CommandLine         : BSTR

           OUTPUT
            list                : BSTR*'''
        return super(IGeoProcessorImpl, self).GetChoiceListEx(Command, Parameter, subParameter, CommandLine)
    def ExecuteProcessEx(self, Parent, TrackCancel, showErrorInMsgBox, performHousekeeping, blockPostToolExecute, blockAddToMap, blockMessages, async, waitForASync, Process, envMgr):
        '''Method IGeoProcessorImpl.ExecuteProcessEx

           INPUTS
            Parent              : OLE_HANDLE
            TrackCancel         : ITrackCancel*
            showErrorInMsgBox   : VARIANT_BOOL
            performHousekeeping : VARIANT_BOOL
            blockPostToolExecute: VARIANT_BOOL
            blockAddToMap       : VARIANT_BOOL
            blockMessages       : VARIANT_BOOL
            async               : VARIANT_BOOL
            waitForASync        : VARIANT_BOOL
            Process             : IMdProcess*
            envMgr              : IGPEnvironmentManager*

           OUTPUT
            result              : IGeoProcessorResult**'''
        return super(IGeoProcessorImpl, self).ExecuteProcessEx(Parent, TrackCancel, showErrorInMsgBox, performHousekeeping, blockPostToolExecute, blockAddToMap, blockMessages, async, waitForASync, Process, envMgr)
    def SubmitASyncProcess(self, pMdProcess, waitForASync, pWrkEdit, blockAddToMap, blockPostToolExecute):
        '''Method IGeoProcessorImpl.SubmitASyncProcess

           INPUTS
            pMdProcess          : IMdProcess*
            waitForASync        : VARIANT_BOOL
            pWrkEdit            : IWorkspaceEdit*
            blockAddToMap       : VARIANT_BOOL
            blockPostToolExecute: VARIANT_BOOL

           OUTPUT
            result              : IGeoProcessorResult**'''
        return super(IGeoProcessorImpl, self).SubmitASyncProcess(pMdProcess, waitForASync, pWrkEdit, blockAddToMap, blockPostToolExecute)
    def CheckTaskStatus(self, pGPResult):
        '''Method IGeoProcessorImpl.CheckTaskStatus

           INPUT
            pGPResult           : IGeoProcessorResult*'''
        return super(IGeoProcessorImpl, self).CheckTaskStatus(pGPResult)
    AddCommandLineToolToResult = property(get_AddCommandLineToolToResult, put_AddCommandLineToolToResult, None)
    ReturnMessages = property(get_ReturnMessages, putref_ReturnMessages, None)
    RunningFromDispatchApp = property(get_RunningFromDispatchApp, put_RunningFromDispatchApp, None)
    RunningFromScriptBase = property(get_RunningFromScriptBase, put_RunningFromScriptBase, None)
    ToolParameterCount = property(get_ToolParameterCount, None, None)
    Toolbox = property(get_Toolbox, put_Toolbox, None)

class IArcToolboxExtensionImpl(_esriGeoprocessing.IArcToolboxExtensionImpl):
    _IID = uuid.UUID('ac11da47-8f9e-489d-9997-1a3b01d8d542')
    def get_GeoProcessor(self):
        '''Method IArcToolboxExtensionImpl.get_GeoProcessor

           OUTPUT
            GeoProcessor        : IGeoProcessorImpl**'''
        return super(IArcToolboxExtensionImpl, self).get_GeoProcessor()
    def LoadDefaultSettings(self):
        '''Method IArcToolboxExtensionImpl.LoadDefaultSettings'''
        return super(IArcToolboxExtensionImpl, self).LoadDefaultSettings()
    def SaveDefaultSettings(self):
        '''Method IArcToolboxExtensionImpl.SaveDefaultSettings'''
        return super(IArcToolboxExtensionImpl, self).SaveDefaultSettings()
    def PumpMessages(self):
        '''Method IArcToolboxExtensionImpl.PumpMessages'''
        return super(IArcToolboxExtensionImpl, self).PumpMessages()
    def AddPendingResult(self, pResult):
        '''Method IArcToolboxExtensionImpl.AddPendingResult

           INPUT
            pResult             : IGeoProcessorResult*'''
        return super(IArcToolboxExtensionImpl, self).AddPendingResult(pResult)
    def CancelResult(self, pResult):
        '''Method IArcToolboxExtensionImpl.CancelResult

           INPUT
            pResult             : IGeoProcessorResult*'''
        return super(IArcToolboxExtensionImpl, self).CancelResult(pResult)
    def FindResult(self, resultName):
        '''Method IArcToolboxExtensionImpl.FindResult

           INPUT
            resultName          : BSTR

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IArcToolboxExtensionImpl, self).FindResult(resultName)
    def ResetEnvironmentPaths(self):
        '''Method IArcToolboxExtensionImpl.ResetEnvironmentPaths'''
        return super(IArcToolboxExtensionImpl, self).ResetEnvironmentPaths()
    def WriteSettings(self, File):
        '''Method IArcToolboxExtensionImpl.WriteSettings

           INPUT
            File                : BSTR'''
        return super(IArcToolboxExtensionImpl, self).WriteSettings(File)
    def ReadSettings(self, File):
        '''Method IArcToolboxExtensionImpl.ReadSettings

           INPUT
            File                : BSTR'''
        return super(IArcToolboxExtensionImpl, self).ReadSettings(File)
    GeoProcessor = property(get_GeoProcessor, None, None)

class IGPInternalEnvironment(_esriGeoprocessing.IGPInternalEnvironment):
    _IID = uuid.UUID('eb0aeaba-21c2-47e4-95d5-7130f0e7f599')
    def Initialize(self, pGeoProcessor, environmentType):
        '''Method IGPInternalEnvironment.Initialize

           INPUTS
            pGeoProcessor       : IGeoProcessorImpl*
            environmentType     : esriGPInternalEnvironmentType'''
        return super(IGPInternalEnvironment, self).Initialize(pGeoProcessor, environmentType)

class ITaskAnalyzer(_esriGeoprocessing.ITaskAnalyzer):
    _IID = uuid.UUID('5e81cc48-c772-42d1-bb42-5b3784ff9d30')
    def AnalyzeTasks(self, pTools, pProps, pResultsUpdater):
        '''Method ITaskAnalyzer.AnalyzeTasks

           INPUTS
            pTools              : IArray*
            pProps              : IPropertySet*
            pResultsUpdater     : IPrepareResultsUpdater*'''
        return super(ITaskAnalyzer, self).AnalyzeTasks(pTools, pProps, pResultsUpdater)
    def AnalyzeTools(self, pTools, pPropertyPages, pProps, pResultsUpdater):
        '''Method ITaskAnalyzer.AnalyzeTools

           INPUTS
            pTools              : IArray*
            pPropertyPages      : IArray*
            pProps              : IPropertySet*
            pResultsUpdater     : IPrepareResultsUpdater*'''
        return super(ITaskAnalyzer, self).AnalyzeTools(pTools, pPropertyPages, pProps, pResultsUpdater)
    def AnalyzeLayers(self, pLayers, pBasicMap, pResultsUpdater):
        '''Method ITaskAnalyzer.AnalyzeLayers

           INPUTS
            pLayers             : IArray*
            pBasicMap           : IBasicMap*
            pResultsUpdater     : IPrepareResultsUpdater*'''
        return super(ITaskAnalyzer, self).AnalyzeLayers(pLayers, pBasicMap, pResultsUpdater)
    def AnalyzeItemInfo(self, pToolbox, pItemInfo, pProps, pResultsUpdater):
        '''Method ITaskAnalyzer.AnalyzeItemInfo

           INPUTS
            pToolbox            : IGPToolbox*
            pItemInfo           : IPropertySet*
            pProps              : IPropertySet*
            pResultsUpdater     : IPrepareResultsUpdater*'''
        return super(ITaskAnalyzer, self).AnalyzeItemInfo(pToolbox, pItemInfo, pProps, pResultsUpdater)
    def SetTargets(self, pTaskTarget, pLayerTarget):
        '''Method ITaskAnalyzer.SetTargets

           INPUTS
            pTaskTarget         : IUID*
            pLayerTarget        : IUID*'''
        return super(ITaskAnalyzer, self).SetTargets(pTaskTarget, pLayerTarget)

class IAnalyzeTaskToolbox(_esriGeoprocessing.IAnalyzeTaskToolbox):
    _IID = uuid.UUID('26e1a375-1eb4-412c-8eda-1ce665310029')
    def AnalyzeTaskToolbox(self, pTaskToolbox, pProps, pResultsUpdater):
        '''Method IAnalyzeTaskToolbox.AnalyzeTaskToolbox

           INPUTS
            pTaskToolbox        : IGPToolbox*
            pProps              : IPropertySet*
            pResultsUpdater     : IPrepareResultsUpdater*'''
        return super(IAnalyzeTaskToolbox, self).AnalyzeTaskToolbox(pTaskToolbox, pProps, pResultsUpdater)

class IGPHolder(_esriGeoprocessing.IGPHolder):
    _IID = uuid.UUID('1da73e06-4c74-403c-beaa-56c42d37a7ca')
    def get_GeoProcessor(self):
        '''Method IGPHolder.get_GeoProcessor

           OUTPUT
            ppGeoProcessor      : IGeoProcessorImpl**'''
        return super(IGPHolder, self).get_GeoProcessor()
    def get_GeoProcessorFromGpScriptBase(self):
        '''Method IGPHolder.get_GeoProcessorFromGpScriptBase

           OUTPUT
            ppGeoProcessor      : IGeoProcessorImpl**'''
        return super(IGPHolder, self).get_GeoProcessorFromGpScriptBase()
    def ReleaseInternals(self):
        '''Method IGPHolder.ReleaseInternals'''
        return super(IGPHolder, self).ReleaseInternals()
    def get_GeoProcessorEngine(self):
        '''Method IGPHolder.get_GeoProcessorEngine

           OUTPUT
            ppGeoProcessor      : IGeoProcessorImpl**'''
        return super(IGPHolder, self).get_GeoProcessorEngine()
    def get_GeoProcessorNew(self):
        '''Method IGPHolder.get_GeoProcessorNew

           OUTPUT
            ppGeoProcessor      : IGeoProcessorImpl**'''
        return super(IGPHolder, self).get_GeoProcessorNew()
    GeoProcessor = property(get_GeoProcessor, None, None)
    GeoProcessorEngine = property(get_GeoProcessorEngine, None, None)
    GeoProcessorFromGpScriptBase = property(get_GeoProcessorFromGpScriptBase, None, None)
    GeoProcessorNew = property(get_GeoProcessorNew, None, None)

class IGPUtilitiesUI(_esriGeoprocessing.IGPUtilitiesUI):
    _IID = uuid.UUID('87773e99-a2d9-486d-83ae-da52c80f0f25')
    def StartEditOperation(self, pWorkspace, bHasPrivateEditSession):
        '''Method IGPUtilitiesUI.StartEditOperation

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            bHasPrivateEditSession: VARIANT_BOOL'''
        return super(IGPUtilitiesUI, self).StartEditOperation(pWorkspace, bHasPrivateEditSession)
    def AbortEditOperation(self, pWorkspace):
        '''Method IGPUtilitiesUI.AbortEditOperation

           INPUT
            pWorkspace          : IWorkspaceEdit*'''
        return super(IGPUtilitiesUI, self).AbortEditOperation(pWorkspace)
    def StopEditOperation(self, pWorkspace, operationLabel):
        '''Method IGPUtilitiesUI.StopEditOperation

           INPUTS
            pWorkspace          : IWorkspaceEdit*
            operationLabel      : BSTR'''
        return super(IGPUtilitiesUI, self).StopEditOperation(pWorkspace, operationLabel)
    def DoSelectFeatures(self, pLayer, pSS):
        '''Method IGPUtilitiesUI.DoSelectFeatures

           INPUTS
            pLayer              : ILayer*
            pSS                 : ISelectionSet*'''
        return super(IGPUtilitiesUI, self).DoSelectFeatures(pLayer, pSS)
    def AdviseDocumentEvents(self):
        '''Method IGPUtilitiesUI.AdviseDocumentEvents'''
        return super(IGPUtilitiesUI, self).AdviseDocumentEvents()
    def UnadviseDocumentEvents(self):
        '''Method IGPUtilitiesUI.UnadviseDocumentEvents'''
        return super(IGPUtilitiesUI, self).UnadviseDocumentEvents()
    def ActiveViewChanged(self):
        '''Method IGPUtilitiesUI.ActiveViewChanged'''
        return super(IGPUtilitiesUI, self).ActiveViewChanged()
    def InApplication(self):
        '''Method IGPUtilitiesUI.InApplication

           OUTPUT
            bInApplication      : VARIANT_BOOL*'''
        return super(IGPUtilitiesUI, self).InApplication()
    def GetGxObjectFromLocation(self, locationMoniker, pDataType):
        '''Method IGPUtilitiesUI.GetGxObjectFromLocation

           INPUTS
            locationMoniker     : BSTR
            pDataType           : IGPDataType*

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IGPUtilitiesUI, self).GetGxObjectFromLocation(locationMoniker, pDataType)
    def GetGxObjects(self, locationMoniker):
        '''Method IGPUtilitiesUI.GetGxObjects

           INPUT
            locationMoniker     : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilitiesUI, self).GetGxObjects(locationMoniker)
    def GetObjectsFromFullName(self, FullName):
        '''Method IGPUtilitiesUI.GetObjectsFromFullName

           INPUT
            FullName            : BSTR

           OUTPUT
            ppObjects           : IArray**'''
        return super(IGPUtilitiesUI, self).GetObjectsFromFullName(FullName)
    def GetActiveView(self):
        '''Method IGPUtilitiesUI.GetActiveView

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IGPUtilitiesUI, self).GetActiveView()
    def UpdateContents(self):
        '''Method IGPUtilitiesUI.UpdateContents'''
        return super(IGPUtilitiesUI, self).UpdateContents()
    def AddDocumentLayer(self, pGPValue, Name, temporary, pUnkRenderer, Visible):
        '''Method IGPUtilitiesUI.AddDocumentLayer

           INPUTS
            pGPValue            : IGPValue*
            Name                : BSTR
            temporary           : VARIANT_BOOL
            pUnkRenderer        : IUnknown*
            Visible             : VARIANT_BOOL'''
        return super(IGPUtilitiesUI, self).AddDocumentLayer(pGPValue, Name, temporary, pUnkRenderer, Visible)
    def GetCatalog(self):
        '''Method IGPUtilitiesUI.GetCatalog

           OUTPUT
            ppCatalog           : IUnknown**'''
        return super(IGPUtilitiesUI, self).GetCatalog()
    def GetGeoProcessor(self):
        '''Method IGPUtilitiesUI.GetGeoProcessor

           OUTPUT
            ppGeoProcessor      : IGeoProcessorImpl**'''
        return super(IGPUtilitiesUI, self).GetGeoProcessor()
    def EditToolProperties(self, pTool, hParent, pEnvMgr):
        '''Method IGPUtilitiesUI.EditToolProperties

           INPUTS
            pTool               : IGPTool*
            hParent             : OLE_HANDLE
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(IGPUtilitiesUI, self).EditToolProperties(pTool, hParent, pEnvMgr)
    def GetStatusBar(self, ppStatusBar):
        '''Method IGPUtilitiesUI.GetStatusBar

           INPUT
            ppStatusBar         : IStatusBar**'''
        return super(IGPUtilitiesUI, self).GetStatusBar(ppStatusBar)
    def ExportFeatureClass(self, pSourceDataElement, pTargetDataElement):
        '''Method IGPUtilitiesUI.ExportFeatureClass

           INPUTS
            pSourceDataElement  : IDataElement*
            pTargetDataElement  : IDataElement*'''
        return super(IGPUtilitiesUI, self).ExportFeatureClass(pSourceDataElement, pTargetDataElement)
    def CopyData(self, pSource, pTarget, pEnvMgr, pTrackCancel):
        '''Method IGPUtilitiesUI.CopyData

           INPUTS
            pSource             : IDataElement*
            pTarget             : IDataElement*
            pEnvMgr             : IGPEnvironmentManager*
            pTrackCancel        : ITrackCancel*'''
        return super(IGPUtilitiesUI, self).CopyData(pSource, pTarget, pEnvMgr, pTrackCancel)
    def GetDataElement(self, locationMoniker, pDataType, pExpandOptions):
        '''Method IGPUtilitiesUI.GetDataElement

           INPUTS
            locationMoniker     : BSTR
            pDataType           : IGPDataType*
            pExpandOptions      : IDEBrowseOptions*

           OUTPUT
            ppObject            : IDataElement**'''
        return super(IGPUtilitiesUI, self).GetDataElement(locationMoniker, pDataType, pExpandOptions)
    def PerformSubCalculate(self, pInputDataElement, pTable, pEnvMgr, FieldName, expression, CodeBlock, isBeingEdited, pMessages, pTrackCancel):
        '''Method IGPUtilitiesUI.PerformSubCalculate

           INPUTS
            pInputDataElement   : IGPValue*
            pTable              : ITable*
            pEnvMgr             : IGPEnvironmentManager*
            FieldName           : BSTR
            expression          : BSTR
            CodeBlock           : BSTR
            isBeingEdited       : VARIANT_BOOL
            pMessages           : IGPMessages*
            pTrackCancel        : ITrackCancel*'''
        return super(IGPUtilitiesUI, self).PerformSubCalculate(pInputDataElement, pTable, pEnvMgr, FieldName, expression, CodeBlock, isBeingEdited, pMessages, pTrackCancel)
    def ReleaseInternals(self, Level):
        '''Method IGPUtilitiesUI.ReleaseInternals

           INPUT
            Level               : long'''
        return super(IGPUtilitiesUI, self).ReleaseInternals(Level)
    def RefreshArcCatalog(self, pSourceDataElement):
        '''Method IGPUtilitiesUI.RefreshArcCatalog

           INPUT
            pSourceDataElement  : IDataElement*'''
        return super(IGPUtilitiesUI, self).RefreshArcCatalog(pSourceDataElement)
    def GetAppGTSet(self):
        '''Method IGPUtilitiesUI.GetAppGTSet

           OUTPUT
            ppGTs               : IGeoTransformationOperationSet**'''
        return super(IGPUtilitiesUI, self).GetAppGTSet()
    def RemoveLocatorFromDocument(self, pLocWks, locatorName):
        '''Method IGPUtilitiesUI.RemoveLocatorFromDocument

           INPUTS
            pLocWks             : ILocatorWorkspace*
            locatorName         : BSTR'''
        return super(IGPUtilitiesUI, self).RemoveLocatorFromDocument(pLocWks, locatorName)
    def GetPageLayout(self):
        '''Method IGPUtilitiesUI.GetPageLayout

           OUTPUT
            ppPageLayout        : IPageLayout**'''
        return super(IGPUtilitiesUI, self).GetPageLayout()
    def GetDocumentInfo(self):
        '''Method IGPUtilitiesUI.GetDocumentInfo

           OUTPUT
            ppDocumentInfo      : IDocumentInfo2**'''
        return super(IGPUtilitiesUI, self).GetDocumentInfo()
    def GetMapDocument(self):
        '''Method IGPUtilitiesUI.GetMapDocument

           OUTPUT
            ppMapDocument       : IMapDocument**'''
        return super(IGPUtilitiesUI, self).GetMapDocument()
    def DoMapDocumentSave(self):
        '''Method IGPUtilitiesUI.DoMapDocumentSave'''
        return super(IGPUtilitiesUI, self).DoMapDocumentSave()
    def DoMapDocumentSaveAsCopy(self, saveAsCopyFileName):
        '''Method IGPUtilitiesUI.DoMapDocumentSaveAsCopy

           INPUT
            saveAsCopyFileName  : BSTR'''
        return super(IGPUtilitiesUI, self).DoMapDocumentSaveAsCopy(saveAsCopyFileName)
    def PumpMessages(self):
        '''Method IGPUtilitiesUI.PumpMessages'''
        return super(IGPUtilitiesUI, self).PumpMessages()
    def AddPendingResult(self, pResult):
        '''Method IGPUtilitiesUI.AddPendingResult

           INPUT
            pResult             : IGeoProcessorResult*'''
        return super(IGPUtilitiesUI, self).AddPendingResult(pResult)
    def get_EditWorkspace(self):
        '''Method IGPUtilitiesUI.get_EditWorkspace

           OUTPUT
            ppWorkspace         : IWorkspace**'''
        return super(IGPUtilitiesUI, self).get_EditWorkspace()
    def UpdateTableWindow(self, pInObj):
        '''Method IGPUtilitiesUI.UpdateTableWindow

           INPUT
            pInObj              : IUnknown*'''
        return super(IGPUtilitiesUI, self).UpdateTableWindow(pInObj)
    def PreventRedrawTableWindow(self, pInObj, redraw):
        '''Method IGPUtilitiesUI.PreventRedrawTableWindow

           INPUTS
            pInObj              : IUnknown*
            redraw              : VARIANT_BOOL'''
        return super(IGPUtilitiesUI, self).PreventRedrawTableWindow(pInObj, redraw)
    def GetDefaultGeodatabase(self):
        '''Method IGPUtilitiesUI.GetDefaultGeodatabase

           OUTPUT
            defaultGeodatabase  : IWorkspaceName**'''
        return super(IGPUtilitiesUI, self).GetDefaultGeodatabase()
    def RefreshTOC(self):
        '''Method IGPUtilitiesUI.RefreshTOC'''
        return super(IGPUtilitiesUI, self).RefreshTOC()
    def CancelResult(self, pResult):
        '''Method IGPUtilitiesUI.CancelResult

           INPUT
            pResult             : IGeoProcessorResult*'''
        return super(IGPUtilitiesUI, self).CancelResult(pResult)
    def GetDisplayExtent(self):
        '''Method IGPUtilitiesUI.GetDisplayExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGPUtilitiesUI, self).GetDisplayExtent()
    def GenerateCrashDumpDialog(self, executionTime):
        '''Method IGPUtilitiesUI.GenerateCrashDumpDialog

           INPUT
            executionTime       : long'''
        return super(IGPUtilitiesUI, self).GenerateCrashDumpDialog(executionTime)
    def AddToolbox(self, toolboxPathName):
        '''Method IGPUtilitiesUI.AddToolbox

           INPUT
            toolboxPathName     : BSTR'''
        return super(IGPUtilitiesUI, self).AddToolbox(toolboxPathName)
    def FindResult(self, resultName):
        '''Method IGPUtilitiesUI.FindResult

           INPUT
            resultName          : BSTR

           OUTPUT
            ppResult            : IGeoProcessorResult**'''
        return super(IGPUtilitiesUI, self).FindResult(resultName)
    def InsertResult(self, resultPathname):
        '''Method IGPUtilitiesUI.InsertResult

           INPUT
            resultPathname      : BSTR'''
        return super(IGPUtilitiesUI, self).InsertResult(resultPathname)
    def GetDocumentMaps(self):
        '''Method IGPUtilitiesUI.GetDocumentMaps

           OUTPUT
            ppMaps              : IMaps**'''
        return super(IGPUtilitiesUI, self).GetDocumentMaps()
    def GetResults(self):
        '''Method IGPUtilitiesUI.GetResults

           OUTPUT
            ppResultNames       : IStringArray**'''
        return super(IGPUtilitiesUI, self).GetResults()
    def ImportLayerPackageFromFile(self, connectionFile, pWorkspace, pSpRef):
        '''Method IGPUtilitiesUI.ImportLayerPackageFromFile

           INPUTS
            connectionFile      : BSTR
            pWorkspace          : IWorkspace*
            pSpRef              : ISpatialReference*

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IGPUtilitiesUI, self).ImportLayerPackageFromFile(connectionFile, pWorkspace, pSpRef)
    EditWorkspace = property(get_EditWorkspace, None, None)

class IGPToolExtension(_esriGeoprocessing.IGPToolExtension):
    _IID = uuid.UUID('ad1cb977-d8b6-4d54-8c85-86d6e533649b')

    def __init__(self, *args, **kw):
        super(IGPToolExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ToolExtensionFactory(self):
        '''Method IGPToolExtension.get_ToolExtensionFactory

           OUTPUT
            factory             : IGPToolExtensionFactory**'''
        return super(IGPToolExtension, self).get_ToolExtensionFactory()
    def get_CustomToolHelper(self):
        '''Method IGPToolExtension.get_CustomToolHelper

           OUTPUT
            helper              : IGPCustomToolHelper**'''
        return super(IGPToolExtension, self).get_CustomToolHelper()
    def putref_CustomToolHelper(self, helper):
        '''Method IGPToolExtension.putref_CustomToolHelper

           INPUT
            helper              : IGPCustomToolHelper*'''
        return super(IGPToolExtension, self).putref_CustomToolHelper(helper)
    def get_DialogCLSID(self):
        '''Method IGPToolExtension.get_DialogCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPToolExtension, self).get_DialogCLSID()
    def get_ParameterInfo(self):
        '''Method IGPToolExtension.get_ParameterInfo

           OUTPUT
            params              : IArray**'''
        return super(IGPToolExtension, self).get_ParameterInfo()
    def IsValid(self):
        '''Method IGPToolExtension.IsValid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IGPToolExtension, self).IsValid()
    def IsLicensedForProduct(self):
        '''Method IGPToolExtension.IsLicensedForProduct

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPToolExtension, self).IsLicensedForProduct()
    def IsLicensed(self):
        '''Method IGPToolExtension.IsLicensed

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPToolExtension, self).IsLicensed()
    def CanEditSource(self):
        '''Method IGPToolExtension.CanEditSource

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IGPToolExtension, self).CanEditSource()
    def GetRenderer(self, pParam):
        '''Method IGPToolExtension.GetRenderer

           INPUT
            pParam              : IGPParameter*

           OUTPUT
            ppRenderer          : IUnknown**'''
        return super(IGPToolExtension, self).GetRenderer(pParam)
    def Validate(self, paramvalues, updateValues, pEnvMgr):
        '''Method IGPToolExtension.Validate

           INPUTS
            paramvalues         : IArray*
            updateValues        : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGPToolExtension, self).Validate(paramvalues, updateValues, pEnvMgr)
    def Execute(self, paramvalues, TrackCancel, pEnvMgr, Messages):
        '''Method IGPToolExtension.Execute

           INPUTS
            paramvalues         : IArray*
            TrackCancel         : ITrackCancel*
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*'''
        return super(IGPToolExtension, self).Execute(paramvalues, TrackCancel, pEnvMgr, Messages)
    def SynchronizeMetadata(self, action, Interval, Metadata):
        '''Method IGPToolExtension.SynchronizeMetadata

           INPUTS
            action              : esriMetadataSyncAction
            Interval            : long
            Metadata            : IPropertySet*'''
        return super(IGPToolExtension, self).SynchronizeMetadata(action, Interval, Metadata)
    CustomToolHelper = property(get_CustomToolHelper, putref_CustomToolHelper, None)
    DialogCLSID = property(get_DialogCLSID, None, None)
    ParameterInfo = property(get_ParameterInfo, None, None)
    ToolExtensionFactory = property(get_ToolExtensionFactory, None, None)

class IGPToolExtensionFactory(_esriGeoprocessing.IGPToolExtensionFactory):
    _IID = uuid.UUID('f0a6e875-ec4e-4b83-8599-77b04766d717')
    def get_CLSID(self):
        '''Method IGPToolExtensionFactory.get_CLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPToolExtensionFactory, self).get_CLSID()
    def get_ToolExtensionName(self):
        '''Method IGPToolExtensionFactory.get_ToolExtensionName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPToolExtensionFactory, self).get_ToolExtensionName()
    def get_SmallImage(self):
        '''Method IGPToolExtensionFactory.get_SmallImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactory, self).get_SmallImage()
    def get_LargeImage(self):
        '''Method IGPToolExtensionFactory.get_LargeImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactory, self).get_LargeImage()
    def get_SmallInvalidImage(self):
        '''Method IGPToolExtensionFactory.get_SmallInvalidImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactory, self).get_SmallInvalidImage()
    def get_LargeInvalidImage(self):
        '''Method IGPToolExtensionFactory.get_LargeInvalidImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactory, self).get_LargeInvalidImage()
    def get_SmallUnlicensedImage(self):
        '''Method IGPToolExtensionFactory.get_SmallUnlicensedImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactory, self).get_SmallUnlicensedImage()
    def get_LargeUnlicensedImage(self):
        '''Method IGPToolExtensionFactory.get_LargeUnlicensedImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactory, self).get_LargeUnlicensedImage()
    def Create(self, Parent, destination):
        '''Method IGPToolExtensionFactory.Create

           INPUTS
            Parent              : OLE_HANDLE
            destination         : IGPToolbox*

           OUTPUTS
            defaultName         : BSTR*
            defaultDisplayName  : BSTR*
            defaultDescription  : BSTR*
            ToolExtension       : IGPToolExtension**'''
        return super(IGPToolExtensionFactory, self).Create(Parent, destination)
    def PostCreateTool(self, Parent, ToolExtension):
        '''Method IGPToolExtensionFactory.PostCreateTool

           INPUTS
            Parent              : OLE_HANDLE
            ToolExtension       : IGPToolExtension*'''
        return super(IGPToolExtensionFactory, self).PostCreateTool(Parent, ToolExtension)
    def CanEdit(self):
        '''Method IGPToolExtensionFactory.CanEdit

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IGPToolExtensionFactory, self).CanEdit()
    def Edit(self, Parent, ToolExtension):
        '''Method IGPToolExtensionFactory.Edit

           INPUTS
            Parent              : OLE_HANDLE
            ToolExtension       : IGPToolExtension*'''
        return super(IGPToolExtensionFactory, self).Edit(Parent, ToolExtension)
    CLSID = property(get_CLSID, None, None)
    LargeImage = property(get_LargeImage, None, None)
    LargeInvalidImage = property(get_LargeInvalidImage, None, None)
    LargeUnlicensedImage = property(get_LargeUnlicensedImage, None, None)
    SmallImage = property(get_SmallImage, None, None)
    SmallInvalidImage = property(get_SmallInvalidImage, None, None)
    SmallUnlicensedImage = property(get_SmallUnlicensedImage, None, None)
    ToolExtensionName = property(get_ToolExtensionName, None, None)

class IGPCustomTool(_esriGeoprocessing.IGPCustomTool):
    _IID = uuid.UUID('bb8ca73d-a50c-4e28-b198-28985a81dbee')

    def __init__(self, *args, **kw):
        super(IGPCustomTool, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ToolExtension(self):
        '''Method IGPCustomTool.get_ToolExtension

           OUTPUT
            extension           : IGPToolExtension**'''
        return super(IGPCustomTool, self).get_ToolExtension()
    def putref_ToolExtension(self, extension):
        '''Method IGPCustomTool.putref_ToolExtension

           INPUT
            extension           : IGPToolExtension*'''
        return super(IGPCustomTool, self).putref_ToolExtension(extension)
    ToolExtension = property(get_ToolExtension, putref_ToolExtension, None)

class IGPCustomToolHelper(_esriGeoprocessing.IGPCustomToolHelper):
    _IID = uuid.UUID('90dd4f44-d116-4906-b69a-747afc24c7bd')
    def get_CustomTool(self):
        '''Method IGPCustomToolHelper.get_CustomTool

           OUTPUT
            Tool                : IGPCustomTool**'''
        return super(IGPCustomToolHelper, self).get_CustomTool()
    CustomTool = property(get_CustomTool, None, None)

class IGPToolbox2(_esriGeoprocessing.IGPToolbox2):
    _IID = uuid.UUID('2feacd0b-9351-4c88-b424-c39f1dbf3230')
    def get_PathName(self):
        '''Method IGPToolbox2.get_PathName

           OUTPUT
            Path                : BSTR*'''
        return super(IGPToolbox2, self).get_PathName()
    def get_Alias(self):
        '''Method IGPToolbox2.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPToolbox2, self).get_Alias()
    def get_ToolNames(self):
        '''Method IGPToolbox2.get_ToolNames

           OUTPUT
            names               : IEnumGPToolName**'''
        return super(IGPToolbox2, self).get_ToolNames()
    def get_Tools(self):
        '''Method IGPToolbox2.get_Tools

           OUTPUT
            Tools               : IEnumGPTool**'''
        return super(IGPToolbox2, self).get_Tools()
    def OpenTool(self, Name):
        '''Method IGPToolbox2.OpenTool

           INPUT
            Name                : BSTR

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolbox2, self).OpenTool(Name)
    def get_IsDeleted(self):
        '''Method IGPToolbox2.get_IsDeleted

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(IGPToolbox2, self).get_IsDeleted()
    def CanCreateTool(self):
        '''Method IGPToolbox2.CanCreateTool

           OUTPUT
            CanCreateTool       : VARIANT_BOOL*'''
        return super(IGPToolbox2, self).CanCreateTool()
    def CreateTool(self, Type, Name, DisplayName, Description, ToolCategory, ToolExtension):
        '''Method IGPToolbox2.CreateTool

           INPUTS
            Type                : esriGPToolType
            Name                : BSTR
            DisplayName         : BSTR
            Description         : BSTR
            ToolCategory        : BSTR
            ToolExtension       : IGPToolExtension*

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolbox2, self).CreateTool(Type, Name, DisplayName, Description, ToolCategory, ToolExtension)
    def AlterAlias(self, newAlias):
        '''Method IGPToolbox2.AlterAlias

           INPUT
            newAlias            : BSTR'''
        return super(IGPToolbox2, self).AlterAlias(newAlias)
    def get_HelpFile(self):
        '''Method IGPToolbox2.get_HelpFile

           OUTPUT
            File                : BSTR*'''
        return super(IGPToolbox2, self).get_HelpFile()
    def get_HelpContext(self):
        '''Method IGPToolbox2.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IGPToolbox2, self).get_HelpContext()
    def AlterHelpInfo(self, File, context):
        '''Method IGPToolbox2.AlterHelpInfo

           INPUTS
            File                : BSTR
            context             : long'''
        return super(IGPToolbox2, self).AlterHelpInfo(File, context)
    def get_DisplayName(self):
        '''Method IGPToolbox2.get_DisplayName

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IGPToolbox2, self).get_DisplayName()
    def CanAlterDisplayName(self):
        '''Method IGPToolbox2.CanAlterDisplayName

           OUTPUT
            CanAlterDisplayName : VARIANT_BOOL*'''
        return super(IGPToolbox2, self).CanAlterDisplayName()
    def AlterDisplayName(self, newDisplayName):
        '''Method IGPToolbox2.AlterDisplayName

           INPUT
            newDisplayName      : BSTR'''
        return super(IGPToolbox2, self).AlterDisplayName(newDisplayName)
    Alias = property(get_Alias, None, None)
    DisplayName = property(get_DisplayName, None, None)
    HelpContext = property(get_HelpContext, None, None)
    HelpFile = property(get_HelpFile, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    PathName = property(get_PathName, None, None)
    ToolNames = property(get_ToolNames, None, None)
    Tools = property(get_Tools, None, None)

class IGPToolbox3(_esriGeoprocessing.IGPToolbox3):
    _IID = uuid.UUID('6a0904b7-5705-4ab6-a6cd-652d9d0c9e8d')

    def __init__(self, *args, **kw):
        super(IGPToolbox3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Description(self):
        '''Method IGPToolbox3.get_Description

           OUTPUT
            toolboxDesc         : BSTR*'''
        return super(IGPToolbox3, self).get_Description()
    def put_Description(self, toolboxDesc):
        '''Method IGPToolbox3.put_Description

           INPUT
            toolboxDesc         : BSTR'''
        return super(IGPToolbox3, self).put_Description(toolboxDesc)
    def get_PathName(self):
        '''Method IGPToolbox2.get_PathName (from IGPToolbox2)

           OUTPUT
            Path                : BSTR*'''
        return super(IGPToolbox3, self).get_PathName()
    def get_Alias(self):
        '''Method IGPToolbox2.get_Alias (from IGPToolbox2)

           OUTPUT
            Alias               : BSTR*'''
        return super(IGPToolbox3, self).get_Alias()
    def get_ToolNames(self):
        '''Method IGPToolbox2.get_ToolNames (from IGPToolbox2)

           OUTPUT
            names               : IEnumGPToolName**'''
        return super(IGPToolbox3, self).get_ToolNames()
    def get_Tools(self):
        '''Method IGPToolbox2.get_Tools (from IGPToolbox2)

           OUTPUT
            Tools               : IEnumGPTool**'''
        return super(IGPToolbox3, self).get_Tools()
    def OpenTool(self, Name):
        '''Method IGPToolbox2.OpenTool (from IGPToolbox2)

           INPUT
            Name                : BSTR

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolbox3, self).OpenTool(Name)
    def get_IsDeleted(self):
        '''Method IGPToolbox2.get_IsDeleted (from IGPToolbox2)

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(IGPToolbox3, self).get_IsDeleted()
    def CanCreateTool(self):
        '''Method IGPToolbox2.CanCreateTool (from IGPToolbox2)

           OUTPUT
            CanCreateTool       : VARIANT_BOOL*'''
        return super(IGPToolbox3, self).CanCreateTool()
    def CreateTool(self, Type, Name, DisplayName, Description, ToolCategory, ToolExtension):
        '''Method IGPToolbox2.CreateTool (from IGPToolbox2)

           INPUTS
            Type                : esriGPToolType
            Name                : BSTR
            DisplayName         : BSTR
            Description         : BSTR
            ToolCategory        : BSTR
            ToolExtension       : IGPToolExtension*

           OUTPUT
            Tool                : IGPTool**'''
        return super(IGPToolbox3, self).CreateTool(Type, Name, DisplayName, Description, ToolCategory, ToolExtension)
    def AlterAlias(self, newAlias):
        '''Method IGPToolbox2.AlterAlias (from IGPToolbox2)

           INPUT
            newAlias            : BSTR'''
        return super(IGPToolbox3, self).AlterAlias(newAlias)
    def get_HelpFile(self):
        '''Method IGPToolbox2.get_HelpFile (from IGPToolbox2)

           OUTPUT
            File                : BSTR*'''
        return super(IGPToolbox3, self).get_HelpFile()
    def get_HelpContext(self):
        '''Method IGPToolbox2.get_HelpContext (from IGPToolbox2)

           OUTPUT
            context             : long*'''
        return super(IGPToolbox3, self).get_HelpContext()
    def AlterHelpInfo(self, File, context):
        '''Method IGPToolbox2.AlterHelpInfo (from IGPToolbox2)

           INPUTS
            File                : BSTR
            context             : long'''
        return super(IGPToolbox3, self).AlterHelpInfo(File, context)
    def get_DisplayName(self):
        '''Method IGPToolbox2.get_DisplayName (from IGPToolbox2)

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IGPToolbox3, self).get_DisplayName()
    def CanAlterDisplayName(self):
        '''Method IGPToolbox2.CanAlterDisplayName (from IGPToolbox2)

           OUTPUT
            CanAlterDisplayName : VARIANT_BOOL*'''
        return super(IGPToolbox3, self).CanAlterDisplayName()
    def AlterDisplayName(self, newDisplayName):
        '''Method IGPToolbox2.AlterDisplayName (from IGPToolbox2)

           INPUT
            newDisplayName      : BSTR'''
        return super(IGPToolbox3, self).AlterDisplayName(newDisplayName)
    Alias = property(get_Alias, None, None)
    Description = property(get_Description, put_Description, None)
    DisplayName = property(get_DisplayName, None, None)
    HelpContext = property(get_HelpContext, None, None)
    HelpFile = property(get_HelpFile, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    PathName = property(get_PathName, None, None)
    ToolNames = property(get_ToolNames, None, None)
    Tools = property(get_Tools, None, None)

class IGPParameter3(_esriGeoprocessing.IGPParameter3):
    _IID = uuid.UUID('ed520462-7c5f-4eee-bcdd-8a82a7174a91')
    def get_Schema(self):
        '''Method IGPParameter3.get_Schema

           OUTPUT
            Schema              : IGPSchema**'''
        return super(IGPParameter3, self).get_Schema()
    def get_Managed(self):
        '''Method IGPParameter2.get_Managed (from IGPParameter2)

           OUTPUT
            Managed             : VARIANT_BOOL*'''
        return super(IGPParameter3, self).get_Managed()
    def get_Name(self):
        '''Method IGPParameter.get_Name (from IGPParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter3, self).get_Name()
    def get_DisplayName(self):
        '''Method IGPParameter.get_DisplayName (from IGPParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter3, self).get_DisplayName()
    def get_Direction(self):
        '''Method IGPParameter.get_Direction (from IGPParameter)

           OUTPUT
            Direction           : esriGPParameterDirection*'''
        return super(IGPParameter3, self).get_Direction()
    def get_DataType(self):
        '''Method IGPParameter.get_DataType (from IGPParameter)

           OUTPUT
            DataType            : IGPDataType**'''
        return super(IGPParameter3, self).get_DataType()
    def get_ParameterType(self):
        '''Method IGPParameter.get_ParameterType (from IGPParameter)

           OUTPUT
            paramtype           : esriGPParameterType*'''
        return super(IGPParameter3, self).get_ParameterType()
    def get_ParameterDependencies(self):
        '''Method IGPParameter.get_ParameterDependencies (from IGPParameter)

           OUTPUT
            Dependencies        : IEnumBSTR**'''
        return super(IGPParameter3, self).get_ParameterDependencies()
    def get_Domain(self):
        '''Method IGPParameter.get_Domain (from IGPParameter)

           OUTPUT
            Domain              : IGPDomain**'''
        return super(IGPParameter3, self).get_Domain()
    def get_Enabled(self):
        '''Method IGPParameter.get_Enabled (from IGPParameter)

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(IGPParameter3, self).get_Enabled()
    def get_Value(self):
        '''Method IGPParameter.get_Value (from IGPParameter)

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPParameter3, self).get_Value()
    def get_ControlCLSID(self):
        '''Method IGPParameter.get_ControlCLSID (from IGPParameter)

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPParameter3, self).get_ControlCLSID()
    def get_DefaultEnvironmentName(self):
        '''Method IGPParameter.get_DefaultEnvironmentName (from IGPParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPParameter3, self).get_DefaultEnvironmentName()
    def get_DisplayOrder(self):
        '''Method IGPParameter.get_DisplayOrder (from IGPParameter)

           OUTPUT
            DisplayOrder        : long*'''
        return super(IGPParameter3, self).get_DisplayOrder()
    def get_Altered(self):
        '''Method IGPParameter.get_Altered (from IGPParameter)

           OUTPUT
            Altered             : VARIANT_BOOL*'''
        return super(IGPParameter3, self).get_Altered()
    def get_HasBeenValidated(self):
        '''Method IGPParameter.get_HasBeenValidated (from IGPParameter)

           OUTPUT
            validated           : VARIANT_BOOL*'''
        return super(IGPParameter3, self).get_HasBeenValidated()
    def get_Category(self):
        '''Method IGPParameter.get_Category (from IGPParameter)

           OUTPUT
            Category            : BSTR*'''
        return super(IGPParameter3, self).get_Category()
    def get_ChoiceList(self):
        '''Method IGPParameter.get_ChoiceList (from IGPParameter)

           OUTPUT
            ChoiceList          : IGPChoiceList**'''
        return super(IGPParameter3, self).get_ChoiceList()
    Altered = property(get_Altered, None, None)
    Category = property(get_Category, None, None)
    ChoiceList = property(get_ChoiceList, None, None)
    ControlCLSID = property(get_ControlCLSID, None, None)
    DataType = property(get_DataType, None, None)
    DefaultEnvironmentName = property(get_DefaultEnvironmentName, None, None)
    Direction = property(get_Direction, None, None)
    DisplayName = property(get_DisplayName, None, None)
    DisplayOrder = property(get_DisplayOrder, None, None)
    Domain = property(get_Domain, None, None)
    Enabled = property(get_Enabled, None, None)
    HasBeenValidated = property(get_HasBeenValidated, None, None)
    Managed = property(get_Managed, None, None)
    Name = property(get_Name, None, None)
    ParameterDependencies = property(get_ParameterDependencies, None, None)
    ParameterType = property(get_ParameterType, None, None)
    Schema = property(get_Schema, None, None)
    Value = property(get_Value, None, None)

class IGPSchema(_esriGeoprocessing.IGPSchema):
    _IID = uuid.UUID('5e78ce61-0b9f-43e8-84e3-c3f0c9dce34f')

    def __init__(self, *args, **kw):
        super(IGPSchema, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CloneDependency(self):
        '''Method IGPSchema.get_CloneDependency

           OUTPUT
            CloneDependency     : VARIANT_BOOL*'''
        return super(IGPSchema, self).get_CloneDependency()
    def put_CloneDependency(self, CloneDependency):
        '''Method IGPSchema.put_CloneDependency

           INPUT
            CloneDependency     : VARIANT_BOOL'''
        return super(IGPSchema, self).put_CloneDependency(CloneDependency)
    def get_GenerateOutputCatalogPath(self):
        '''Method IGPSchema.get_GenerateOutputCatalogPath

           OUTPUT
            generatePath        : VARIANT_BOOL*'''
        return super(IGPSchema, self).get_GenerateOutputCatalogPath()
    def put_GenerateOutputCatalogPath(self, generatePath):
        '''Method IGPSchema.put_GenerateOutputCatalogPath

           INPUT
            generatePath        : VARIANT_BOOL'''
        return super(IGPSchema, self).put_GenerateOutputCatalogPath(generatePath)
    def PopulateOutputValue(self, baseName, param, params, envMgr):
        '''Method IGPSchema.PopulateOutputValue

           INPUTS
            baseName            : BSTR
            param               : IGPParameter3*
            params              : IArray*
            envMgr              : IGPEnvironmentManager*'''
        return super(IGPSchema, self).PopulateOutputValue(baseName, param, params, envMgr)
    CloneDependency = property(get_CloneDependency, put_CloneDependency, None)
    GenerateOutputCatalogPath = property(get_GenerateOutputCatalogPath, put_GenerateOutputCatalogPath, None)

class IGPParameterEdit3(_esriGeoprocessing.IGPParameterEdit3):
    _IID = uuid.UUID('5353174c-8a81-4c72-a874-880ac9b7ef3f')

    def __init__(self, *args, **kw):
        super(IGPParameterEdit3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Schema(self, _arg1):
        '''Method IGPParameterEdit3.putref_Schema

           INPUT
            _arg1               : IGPSchema*'''
        return super(IGPParameterEdit3, self).putref_Schema(_arg1)
    def put_Managed(self, _arg1):
        '''Method IGPParameterEdit2.put_Managed (from IGPParameterEdit2)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit3, self).put_Managed(_arg1)
    def put_Name(self, _arg1):
        '''Method IGPParameterEdit.put_Name (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit3, self).put_Name(_arg1)
    def put_DisplayName(self, _arg1):
        '''Method IGPParameterEdit.put_DisplayName (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit3, self).put_DisplayName(_arg1)
    def put_Direction(self, _arg1):
        '''Method IGPParameterEdit.put_Direction (from IGPParameterEdit)

           INPUT
            _arg1               : esriGPParameterDirection'''
        return super(IGPParameterEdit3, self).put_Direction(_arg1)
    def putref_DataType(self, _arg1):
        '''Method IGPParameterEdit.putref_DataType (from IGPParameterEdit)

           INPUT
            _arg1               : IGPDataType*'''
        return super(IGPParameterEdit3, self).putref_DataType(_arg1)
    def put_ParameterType(self, _arg1):
        '''Method IGPParameterEdit.put_ParameterType (from IGPParameterEdit)

           INPUT
            _arg1               : esriGPParameterType'''
        return super(IGPParameterEdit3, self).put_ParameterType(_arg1)
    def put_ParameterDependencies(self, _arg1):
        '''Method IGPParameterEdit.put_ParameterDependencies (from IGPParameterEdit)

           INPUT
            _arg1               : IEnumBSTR*'''
        return super(IGPParameterEdit3, self).put_ParameterDependencies(_arg1)
    def putref_Domain(self, _arg1):
        '''Method IGPParameterEdit.putref_Domain (from IGPParameterEdit)

           INPUT
            _arg1               : IGPDomain*'''
        return super(IGPParameterEdit3, self).putref_Domain(_arg1)
    def put_Enabled(self, _arg1):
        '''Method IGPParameterEdit.put_Enabled (from IGPParameterEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit3, self).put_Enabled(_arg1)
    def putref_Value(self, _arg1):
        '''Method IGPParameterEdit.putref_Value (from IGPParameterEdit)

           INPUT
            _arg1               : IGPValue*'''
        return super(IGPParameterEdit3, self).putref_Value(_arg1)
    def put_ControlCLSID(self, _arg1):
        '''Method IGPParameterEdit.put_ControlCLSID (from IGPParameterEdit)

           INPUT
            _arg1               : IUID*'''
        return super(IGPParameterEdit3, self).put_ControlCLSID(_arg1)
    def put_DefaultEnvironmentName(self, _arg1):
        '''Method IGPParameterEdit.put_DefaultEnvironmentName (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit3, self).put_DefaultEnvironmentName(_arg1)
    def put_DisplayOrder(self, _arg1):
        '''Method IGPParameterEdit.put_DisplayOrder (from IGPParameterEdit)

           INPUT
            _arg1               : long'''
        return super(IGPParameterEdit3, self).put_DisplayOrder(_arg1)
    def put_Altered(self, _arg1):
        '''Method IGPParameterEdit.put_Altered (from IGPParameterEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit3, self).put_Altered(_arg1)
    def put_HasBeenValidated(self, _arg1):
        '''Method IGPParameterEdit.put_HasBeenValidated (from IGPParameterEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGPParameterEdit3, self).put_HasBeenValidated(_arg1)
    def AddDependency(self, Name):
        '''Method IGPParameterEdit.AddDependency (from IGPParameterEdit)

           INPUT
            Name                : BSTR'''
        return super(IGPParameterEdit3, self).AddDependency(Name)
    def put_Category(self, _arg1):
        '''Method IGPParameterEdit.put_Category (from IGPParameterEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IGPParameterEdit3, self).put_Category(_arg1)
    def putref_ChoiceList(self, _arg1):
        '''Method IGPParameterEdit.putref_ChoiceList (from IGPParameterEdit)

           INPUT
            _arg1               : IGPChoiceList*'''
        return super(IGPParameterEdit3, self).putref_ChoiceList(_arg1)
    Altered = property(None, put_Altered, None)
    Category = property(None, put_Category, None)
    ChoiceList = property(None, putref_ChoiceList, None)
    ControlCLSID = property(None, put_ControlCLSID, None)
    DataType = property(None, putref_DataType, None)
    DefaultEnvironmentName = property(None, put_DefaultEnvironmentName, None)
    Direction = property(None, put_Direction, None)
    DisplayName = property(None, put_DisplayName, None)
    DisplayOrder = property(None, put_DisplayOrder, None)
    Domain = property(None, putref_Domain, None)
    Enabled = property(None, put_Enabled, None)
    HasBeenValidated = property(None, put_HasBeenValidated, None)
    Managed = property(None, put_Managed, None)
    Name = property(None, put_Name, None)
    ParameterDependencies = property(None, put_ParameterDependencies, None)
    ParameterType = property(None, put_ParameterType, None)
    Schema = property(None, putref_Schema, None)
    Value = property(None, putref_Value, None)

class IGPToolExtensionGen(_esriGeoprocessing.IGPToolExtensionGen):
    _IID = uuid.UUID('ea078957-3cb7-41b6-82ba-2f67f4b2f64f')

    def __init__(self, *args, **kw):
        super(IGPToolExtensionGen, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ToolExtensionFactory(self):
        '''Method IGPToolExtensionGen.get_ToolExtensionFactory

           OUTPUT
            factory             : IGPToolExtensionFactoryGen**'''
        return super(IGPToolExtensionGen, self).get_ToolExtensionFactory()
    def get_CustomToolHelper(self):
        '''Method IGPToolExtensionGen.get_CustomToolHelper

           OUTPUT
            helper              : IGPCustomToolHelper**'''
        return super(IGPToolExtensionGen, self).get_CustomToolHelper()
    def putref_CustomToolHelper(self, helper):
        '''Method IGPToolExtensionGen.putref_CustomToolHelper

           INPUT
            helper              : IGPCustomToolHelper*'''
        return super(IGPToolExtensionGen, self).putref_CustomToolHelper(helper)
    def get_DialogCLSID(self):
        '''Method IGPToolExtensionGen.get_DialogCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPToolExtensionGen, self).get_DialogCLSID()
    def get_ParameterInfo(self):
        '''Method IGPToolExtensionGen.get_ParameterInfo

           OUTPUT
            params              : IArray**'''
        return super(IGPToolExtensionGen, self).get_ParameterInfo()
    def IsValid(self):
        '''Method IGPToolExtensionGen.IsValid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IGPToolExtensionGen, self).IsValid()
    def IsLicensedForProduct(self):
        '''Method IGPToolExtensionGen.IsLicensedForProduct

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPToolExtensionGen, self).IsLicensedForProduct()
    def IsLicensed(self):
        '''Method IGPToolExtensionGen.IsLicensed

           OUTPUT
            IsLicensed          : VARIANT_BOOL*'''
        return super(IGPToolExtensionGen, self).IsLicensed()
    def CanEditSource(self):
        '''Method IGPToolExtensionGen.CanEditSource

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IGPToolExtensionGen, self).CanEditSource()
    def GetRenderer(self, pParam):
        '''Method IGPToolExtensionGen.GetRenderer

           INPUT
            pParam              : IGPParameter*

           OUTPUT
            pRenderer           : VARIANT*'''
        return super(IGPToolExtensionGen, self).GetRenderer(pParam)
    def Validate(self, paramvalues, updateValues, pEnvMgr):
        '''Method IGPToolExtensionGen.Validate

           INPUTS
            paramvalues         : IArray*
            updateValues        : VARIANT_BOOL
            pEnvMgr             : IGPEnvironmentManager*

           OUTPUT
            Messages            : IGPMessages**'''
        return super(IGPToolExtensionGen, self).Validate(paramvalues, updateValues, pEnvMgr)
    def Execute(self, paramvalues, TrackCancel, pEnvMgr, Messages):
        '''Method IGPToolExtensionGen.Execute

           INPUTS
            paramvalues         : IArray*
            TrackCancel         : ITrackCancel*
            pEnvMgr             : IGPEnvironmentManager*
            Messages            : IGPMessages*'''
        return super(IGPToolExtensionGen, self).Execute(paramvalues, TrackCancel, pEnvMgr, Messages)
    def SynchronizeMetadata(self, action, Interval, Metadata):
        '''Method IGPToolExtensionGen.SynchronizeMetadata

           INPUTS
            action              : esriMetadataSyncAction
            Interval            : long
            Metadata            : IPropertySet*'''
        return super(IGPToolExtensionGen, self).SynchronizeMetadata(action, Interval, Metadata)
    CustomToolHelper = property(get_CustomToolHelper, putref_CustomToolHelper, None)
    DialogCLSID = property(get_DialogCLSID, None, None)
    ParameterInfo = property(get_ParameterInfo, None, None)
    ToolExtensionFactory = property(get_ToolExtensionFactory, None, None)

class IGPToolExtensionFactoryGen(_esriGeoprocessing.IGPToolExtensionFactoryGen):
    _IID = uuid.UUID('50544432-54a5-4317-96ef-a8d51ad09a80')
    def get_CLSID(self):
        '''Method IGPToolExtensionFactoryGen.get_CLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPToolExtensionFactoryGen, self).get_CLSID()
    def get_ToolExtensionName(self):
        '''Method IGPToolExtensionFactoryGen.get_ToolExtensionName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPToolExtensionFactoryGen, self).get_ToolExtensionName()
    def get_SmallImage(self):
        '''Method IGPToolExtensionFactoryGen.get_SmallImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactoryGen, self).get_SmallImage()
    def get_LargeImage(self):
        '''Method IGPToolExtensionFactoryGen.get_LargeImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactoryGen, self).get_LargeImage()
    def get_SmallInvalidImage(self):
        '''Method IGPToolExtensionFactoryGen.get_SmallInvalidImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactoryGen, self).get_SmallInvalidImage()
    def get_LargeInvalidImage(self):
        '''Method IGPToolExtensionFactoryGen.get_LargeInvalidImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactoryGen, self).get_LargeInvalidImage()
    def get_SmallUnlicensedImage(self):
        '''Method IGPToolExtensionFactoryGen.get_SmallUnlicensedImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactoryGen, self).get_SmallUnlicensedImage()
    def get_LargeUnlicensedImage(self):
        '''Method IGPToolExtensionFactoryGen.get_LargeUnlicensedImage

           OUTPUT
            image               : OLE_HANDLE*'''
        return super(IGPToolExtensionFactoryGen, self).get_LargeUnlicensedImage()
    def GetDefaultName(self):
        '''Method IGPToolExtensionFactoryGen.GetDefaultName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPToolExtensionFactoryGen, self).GetDefaultName()
    def GetDefaultDisplayName(self):
        '''Method IGPToolExtensionFactoryGen.GetDefaultDisplayName

           OUTPUT
            DisplayName         : BSTR*'''
        return super(IGPToolExtensionFactoryGen, self).GetDefaultDisplayName()
    def GetDefaultDescription(self):
        '''Method IGPToolExtensionFactoryGen.GetDefaultDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IGPToolExtensionFactoryGen, self).GetDefaultDescription()
    def Create(self, Parent, destination):
        '''Method IGPToolExtensionFactoryGen.Create

           INPUTS
            Parent              : OLE_HANDLE
            destination         : IGPToolbox*

           OUTPUT
            ToolExtension       : IGPToolExtensionGen**'''
        return super(IGPToolExtensionFactoryGen, self).Create(Parent, destination)
    def PostCreateTool(self, Parent, ToolExtension):
        '''Method IGPToolExtensionFactoryGen.PostCreateTool

           INPUTS
            Parent              : OLE_HANDLE
            ToolExtension       : IGPToolExtensionGen*'''
        return super(IGPToolExtensionFactoryGen, self).PostCreateTool(Parent, ToolExtension)
    def CanEdit(self):
        '''Method IGPToolExtensionFactoryGen.CanEdit

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IGPToolExtensionFactoryGen, self).CanEdit()
    def Edit(self, Parent, ToolExtension):
        '''Method IGPToolExtensionFactoryGen.Edit

           INPUTS
            Parent              : OLE_HANDLE
            ToolExtension       : IGPToolExtensionGen*'''
        return super(IGPToolExtensionFactoryGen, self).Edit(Parent, ToolExtension)
    CLSID = property(get_CLSID, None, None)
    LargeImage = property(get_LargeImage, None, None)
    LargeInvalidImage = property(get_LargeInvalidImage, None, None)
    LargeUnlicensedImage = property(get_LargeUnlicensedImage, None, None)
    SmallImage = property(get_SmallImage, None, None)
    SmallInvalidImage = property(get_SmallInvalidImage, None, None)
    SmallUnlicensedImage = property(get_SmallUnlicensedImage, None, None)
    ToolExtensionName = property(get_ToolExtensionName, None, None)

class IGPCustomToolGen(_esriGeoprocessing.IGPCustomToolGen):
    _IID = uuid.UUID('5628d7e4-d193-4ce3-a55e-9c94b66c4181')
    def get_ToolExtensionGen(self):
        '''Method IGPCustomToolGen.get_ToolExtensionGen

           OUTPUT
            extension           : IGPToolExtensionGen**'''
        return super(IGPCustomToolGen, self).get_ToolExtensionGen()
    ToolExtensionGen = property(get_ToolExtensionGen, None, None)

class ISDMapper(_esriGeoprocessing.ISDMapper):
    _IID = uuid.UUID('a52d2e6c-10e2-4561-828b-2ec8aa0de946')
    def GenerateSDMapping(self, sdManifest, sdFolder, Server):
        '''Method ISDMapper.GenerateSDMapping

           INPUTS
            sdManifest          : IUnknown*
            sdFolder            : BSTR
            Server              : IAGSServerConnection*

           OUTPUT
            sdMap               : ISDMapping**'''
        return super(ISDMapper, self).GenerateSDMapping(sdManifest, sdFolder, Server)

class ISDMapping(_esriGeoprocessing.ISDMapping):
    _IID = uuid.UUID('f3dcf739-4ac7-4310-8c03-5e805cda5552')
    def get_ExtractedObject(self):
        '''Method ISDMapping.get_ExtractedObject

           OUTPUT
            sdFolder            : BSTR*'''
        return super(ISDMapping, self).get_ExtractedObject()
    def get_ManifestObject(self):
        '''Method ISDMapping.get_ManifestObject

           OUTPUT
            sdManifest          : IUnknown**'''
        return super(ISDMapping, self).get_ManifestObject()
    def get_ServerObject(self):
        '''Method ISDMapping.get_ServerObject

           OUTPUT
            Server              : IAGSServerConnectionName**'''
        return super(ISDMapping, self).get_ServerObject()
    def get_DatabaseMappings(self):
        '''Method ISDMapping.get_DatabaseMappings

           OUTPUT
            DatabaseMappings    : IEnumSDDatabaseMapping**'''
        return super(ISDMapping, self).get_DatabaseMappings()
    def get_ResourceMapping(self):
        '''Method ISDMapping.get_ResourceMapping

           OUTPUT
            ResourceMapping     : ISDResourceMapping**'''
        return super(ISDMapping, self).get_ResourceMapping()
    def get_ConfigurationMapping(self):
        '''Method ISDMapping.get_ConfigurationMapping

           OUTPUT
            ConfigurationMapping: ISDConfigurationMapping**'''
        return super(ISDMapping, self).get_ConfigurationMapping()
    def FindDatabaseMapping(self, gdbFileName):
        '''Method ISDMapping.FindDatabaseMapping

           INPUT
            gdbFileName         : BSTR

           OUTPUT
            ppDBMapping         : ISDDatabaseMapping**'''
        return super(ISDMapping, self).FindDatabaseMapping(gdbFileName)
    ConfigurationMapping = property(get_ConfigurationMapping, None, None)
    DatabaseMappings = property(get_DatabaseMappings, None, None)
    ExtractedObject = property(get_ExtractedObject, None, None)
    ManifestObject = property(get_ManifestObject, None, None)
    ResourceMapping = property(get_ResourceMapping, None, None)
    ServerObject = property(get_ServerObject, None, None)

class ISDConfigurationMapping(_esriGeoprocessing.ISDConfigurationMapping):
    _IID = uuid.UUID('63654588-71ac-430e-bf05-c400bceb11e8')
    def get_Parent(self):
        '''Method ISDConfigurationMapping.get_Parent

           OUTPUT
            Parent              : ISDMapping**'''
        return super(ISDConfigurationMapping, self).get_Parent()
    def get_OnServerObject(self):
        '''Method ISDConfigurationMapping.get_OnServerObject

           OUTPUT
            serverConfig        : IServerObjectConfiguration**'''
        return super(ISDConfigurationMapping, self).get_OnServerObject()
    def get_ManifestObject(self):
        '''Method ISDConfigurationMapping.get_ManifestObject

           OUTPUT
            svcConfig           : IUnknown**'''
        return super(ISDConfigurationMapping, self).get_ManifestObject()
    ManifestObject = property(get_ManifestObject, None, None)
    OnServerObject = property(get_OnServerObject, None, None)
    Parent = property(get_Parent, None, None)

class ISDResourceMappingImpl(_esriGeoprocessing.ISDResourceMappingImpl):
    _IID = uuid.UUID('4c3d4673-79a9-45a5-a0b4-3a50f8363f41')

    def __init__(self, *args, **kw):
        super(ISDResourceMappingImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Parent(self, _arg1):
        '''Method ISDResourceMappingImpl.put_Parent

           INPUT
            _arg1               : ISDMapping*'''
        return super(ISDResourceMappingImpl, self).put_Parent(_arg1)
    def put_OnServerObject(self, _arg1):
        '''Method ISDResourceMappingImpl.put_OnServerObject

           INPUT
            _arg1               : BSTR'''
        return super(ISDResourceMappingImpl, self).put_OnServerObject(_arg1)
    def put_ExtractedObject(self, _arg1):
        '''Method ISDResourceMappingImpl.put_ExtractedObject

           INPUT
            _arg1               : BSTR'''
        return super(ISDResourceMappingImpl, self).put_ExtractedObject(_arg1)
    def putref_ManifestObject(self, _arg1):
        '''Method ISDResourceMappingImpl.putref_ManifestObject

           INPUT
            _arg1               : IUnknown*'''
        return super(ISDResourceMappingImpl, self).putref_ManifestObject(_arg1)
    ExtractedObject = property(None, put_ExtractedObject, None)
    ManifestObject = property(None, putref_ManifestObject, None)
    OnServerObject = property(None, put_OnServerObject, None)
    Parent = property(None, put_Parent, None)

class ISDConfigurationMappingImpl(_esriGeoprocessing.ISDConfigurationMappingImpl):
    _IID = uuid.UUID('b9e2108f-ddbd-4373-8bf7-fbb97179ecce')

    def __init__(self, *args, **kw):
        super(ISDConfigurationMappingImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Parent(self, _arg1):
        '''Method ISDConfigurationMappingImpl.put_Parent

           INPUT
            _arg1               : ISDMapping*'''
        return super(ISDConfigurationMappingImpl, self).put_Parent(_arg1)
    def putref_OnServerObject(self, _arg1):
        '''Method ISDConfigurationMappingImpl.putref_OnServerObject

           INPUT
            _arg1               : IServerObjectConfiguration*'''
        return super(ISDConfigurationMappingImpl, self).putref_OnServerObject(_arg1)
    def putref_ManifestObject(self, _arg1):
        '''Method ISDConfigurationMappingImpl.putref_ManifestObject

           INPUT
            _arg1               : IUnknown*'''
        return super(ISDConfigurationMappingImpl, self).putref_ManifestObject(_arg1)
    ManifestObject = property(None, putref_ManifestObject, None)
    OnServerObject = property(None, putref_OnServerObject, None)
    Parent = property(None, put_Parent, None)

class IEnumSDDatabaseMapping(_esriGeoprocessing.IEnumSDDatabaseMapping):
    _IID = uuid.UUID('55c815c1-94f7-4e79-9dd2-ae9d519bb1cf')
    def Next(self):
        '''Method IEnumSDDatabaseMapping.Next

           OUTPUT
            databaseMapping     : ISDDatabaseMapping**'''
        return super(IEnumSDDatabaseMapping, self).Next()
    def __iter__(self):
        try:
            super(IEnumSDDatabaseMapping, self).Reset()
            val = super(IEnumSDDatabaseMapping, self).Next()
            while val:
                yield val
                val = super(IEnumSDDatabaseMapping, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumSDDatabaseMapping.Reset'''
        return super(IEnumSDDatabaseMapping, self).Reset()

class ISDDatabaseMapping(_esriGeoprocessing.ISDDatabaseMapping):
    _IID = uuid.UUID('33c9a37f-665b-4575-b1c3-54fd3eb2fc53')
    def get_Parent(self):
        '''Method ISDDatabaseMapping.get_Parent

           OUTPUT
            Parent              : ISDMapping**'''
        return super(ISDDatabaseMapping, self).get_Parent()
    def get_OnServerObject(self):
        '''Method ISDDatabaseMapping.get_OnServerObject

           OUTPUT
            ppDSI               : IDiscoveryDataSpaceItem**'''
        return super(ISDDatabaseMapping, self).get_OnServerObject()
    def get_ExtractedObject(self):
        '''Method ISDDatabaseMapping.get_ExtractedObject

           OUTPUT
            extractedDB         : IWorkspaceName**'''
        return super(ISDDatabaseMapping, self).get_ExtractedObject()
    def get_ManifestObject(self):
        '''Method ISDDatabaseMapping.get_ManifestObject

           OUTPUT
            svcDB               : IUnknown**'''
        return super(ISDDatabaseMapping, self).get_ManifestObject()
    def get_Datasets(self):
        '''Method ISDDatabaseMapping.get_Datasets

           OUTPUT
            datasetMappings     : IEnumSDDatasetMapping**'''
        return super(ISDDatabaseMapping, self).get_Datasets()
    def GetOnServerWorkspace(self):
        '''Method ISDDatabaseMapping.GetOnServerWorkspace

           OUTPUT
            serverWS            : IWorkspaceName**'''
        return super(ISDDatabaseMapping, self).GetOnServerWorkspace()
    def GetPhysicalFileName(self):
        '''Method ISDDatabaseMapping.GetPhysicalFileName

           OUTPUT
            physicalFileName    : BSTR*'''
        return super(ISDDatabaseMapping, self).GetPhysicalFileName()
    def FindDatasetMapping(self, inPackageName):
        '''Method ISDDatabaseMapping.FindDatasetMapping

           INPUT
            inPackageName       : BSTR

           OUTPUT
            ppDatasetMapping    : ISDDatasetMapping**'''
        return super(ISDDatabaseMapping, self).FindDatasetMapping(inPackageName)
    Datasets = property(get_Datasets, None, None)
    ExtractedObject = property(get_ExtractedObject, None, None)
    ManifestObject = property(get_ManifestObject, None, None)
    OnServerObject = property(get_OnServerObject, None, None)
    Parent = property(get_Parent, None, None)

class ISDDatasetMapping(_esriGeoprocessing.ISDDatasetMapping):
    _IID = uuid.UUID('20c72ba1-d9b3-49b5-a79d-f0779316fb44')
    def get_Parent(self):
        '''Method ISDDatasetMapping.get_Parent

           OUTPUT
            Parent              : ISDDatabaseMapping**'''
        return super(ISDDatasetMapping, self).get_Parent()
    def get_OnServerObject(self):
        '''Method ISDDatasetMapping.get_OnServerObject

           OUTPUT
            ppDSI               : IDiscoveryDataSpaceItem**'''
        return super(ISDDatasetMapping, self).get_OnServerObject()
    def get_OnServerDatasetName(self):
        '''Method ISDDatasetMapping.get_OnServerDatasetName

           OUTPUT
            onServerDSN         : IDatasetName**'''
        return super(ISDDatasetMapping, self).get_OnServerDatasetName()
    def get_ExtractedObject(self):
        '''Method ISDDatasetMapping.get_ExtractedObject

           OUTPUT
            extractedDS         : IDatasetName**'''
        return super(ISDDatasetMapping, self).get_ExtractedObject()
    def get_ManifestObject(self):
        '''Method ISDDatasetMapping.get_ManifestObject

           OUTPUT
            svcDS               : IUnknown**'''
        return super(ISDDatasetMapping, self).get_ManifestObject()
    ExtractedObject = property(get_ExtractedObject, None, None)
    ManifestObject = property(get_ManifestObject, None, None)
    OnServerDatasetName = property(get_OnServerDatasetName, None, None)
    OnServerObject = property(get_OnServerObject, None, None)
    Parent = property(get_Parent, None, None)

class IEnumSDDatasetMapping(_esriGeoprocessing.IEnumSDDatasetMapping):
    _IID = uuid.UUID('9d0d4f40-936f-4bd7-99b2-a508917d9df6')
    def Next(self):
        '''Method IEnumSDDatasetMapping.Next

           OUTPUT
            datasetMapping      : ISDDatasetMapping**'''
        return super(IEnumSDDatasetMapping, self).Next()
    def __iter__(self):
        try:
            super(IEnumSDDatasetMapping, self).Reset()
            val = super(IEnumSDDatasetMapping, self).Next()
            while val:
                yield val
                val = super(IEnumSDDatasetMapping, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumSDDatasetMapping.Reset'''
        return super(IEnumSDDatasetMapping, self).Reset()

class ISDResourceMapping(_esriGeoprocessing.ISDResourceMapping):
    _IID = uuid.UUID('d90a3568-64d0-40cb-8f45-52ab39adc43c')
    def get_Parent(self):
        '''Method ISDResourceMapping.get_Parent

           OUTPUT
            Parent              : ISDMapping**'''
        return super(ISDResourceMapping, self).get_Parent()
    def get_OnServerObject(self):
        '''Method ISDResourceMapping.get_OnServerObject

           OUTPUT
            Path                : BSTR*'''
        return super(ISDResourceMapping, self).get_OnServerObject()
    def get_ExtractedObject(self):
        '''Method ISDResourceMapping.get_ExtractedObject

           OUTPUT
            Path                : BSTR*'''
        return super(ISDResourceMapping, self).get_ExtractedObject()
    def get_ManifestObject(self):
        '''Method ISDResourceMapping.get_ManifestObject

           OUTPUT
            svcRes              : IUnknown**'''
        return super(ISDResourceMapping, self).get_ManifestObject()
    def GetReferencedDatasets(self):
        '''Method ISDResourceMapping.GetReferencedDatasets

           OUTPUT
            refdDatasetMappings : IEnumSDDatasetMapping**'''
        return super(ISDResourceMapping, self).GetReferencedDatasets()
    ExtractedObject = property(get_ExtractedObject, None, None)
    ManifestObject = property(get_ManifestObject, None, None)
    OnServerObject = property(get_OnServerObject, None, None)
    Parent = property(get_Parent, None, None)

class ISDMappingImpl(_esriGeoprocessing.ISDMappingImpl):
    _IID = uuid.UUID('7ebd449b-fe0d-4a79-bff0-2229b76fcd94')

    def __init__(self, *args, **kw):
        super(ISDMappingImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, sdManifest, sdFolder, Server):
        '''Method ISDMappingImpl.Init

           INPUTS
            sdManifest          : IUnknown*
            sdFolder            : BSTR
            Server              : IAGSServerConnectionName*'''
        return super(ISDMappingImpl, self).Init(sdManifest, sdFolder, Server)
    def AddDatabaseMapping(self, databaseMapping):
        '''Method ISDMappingImpl.AddDatabaseMapping

           INPUT
            databaseMapping     : ISDDatabaseMapping*'''
        return super(ISDMappingImpl, self).AddDatabaseMapping(databaseMapping)
    def putref_ResourceMapping(self, _arg1):
        '''Method ISDMappingImpl.putref_ResourceMapping

           INPUT
            _arg1               : ISDResourceMapping*'''
        return super(ISDMappingImpl, self).putref_ResourceMapping(_arg1)
    def putref_ConfigurationMapping(self, _arg1):
        '''Method ISDMappingImpl.putref_ConfigurationMapping

           INPUT
            _arg1               : ISDConfigurationMapping*'''
        return super(ISDMappingImpl, self).putref_ConfigurationMapping(_arg1)
    def GetReferencedDatasets(self, pDSIds):
        '''Method ISDMappingImpl.GetReferencedDatasets

           INPUT
            pDSIds              : IStringArray*

           OUTPUT
            refdDatasetMappings : IEnumSDDatasetMapping**'''
        return super(ISDMappingImpl, self).GetReferencedDatasets(pDSIds)
    ConfigurationMapping = property(None, putref_ConfigurationMapping, None)
    ResourceMapping = property(None, putref_ResourceMapping, None)

class ISDDatabaseMappingImpl(_esriGeoprocessing.ISDDatabaseMappingImpl):
    _IID = uuid.UUID('7c6a4472-5ed0-4ffa-8b1d-79fd4f3cde3a')

    def __init__(self, *args, **kw):
        super(ISDDatabaseMappingImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Parent(self, _arg1):
        '''Method ISDDatabaseMappingImpl.put_Parent

           INPUT
            _arg1               : ISDMapping*'''
        return super(ISDDatabaseMappingImpl, self).put_Parent(_arg1)
    def putref_OnServerObject(self, _arg1):
        '''Method ISDDatabaseMappingImpl.putref_OnServerObject

           INPUT
            _arg1               : IDiscoveryDataSpaceItem*'''
        return super(ISDDatabaseMappingImpl, self).putref_OnServerObject(_arg1)
    def putref_ExtractedObject(self, _arg1):
        '''Method ISDDatabaseMappingImpl.putref_ExtractedObject

           INPUT
            _arg1               : IWorkspaceName*'''
        return super(ISDDatabaseMappingImpl, self).putref_ExtractedObject(_arg1)
    def putref_ManifestObject(self, _arg1):
        '''Method ISDDatabaseMappingImpl.putref_ManifestObject

           INPUT
            _arg1               : IUnknown*'''
        return super(ISDDatabaseMappingImpl, self).putref_ManifestObject(_arg1)
    def putref_OnServerWorkspace(self, _arg1):
        '''Method ISDDatabaseMappingImpl.putref_OnServerWorkspace

           INPUT
            _arg1               : IWorkspaceName*'''
        return super(ISDDatabaseMappingImpl, self).putref_OnServerWorkspace(_arg1)
    def AddSDDatasetMapping(self, datasetMapping):
        '''Method ISDDatabaseMappingImpl.AddSDDatasetMapping

           INPUT
            datasetMapping      : ISDDatasetMapping*'''
        return super(ISDDatabaseMappingImpl, self).AddSDDatasetMapping(datasetMapping)
    ExtractedObject = property(None, putref_ExtractedObject, None)
    ManifestObject = property(None, putref_ManifestObject, None)
    OnServerObject = property(None, putref_OnServerObject, None)
    OnServerWorkspace = property(None, putref_OnServerWorkspace, None)
    Parent = property(None, put_Parent, None)

class ISDDatasetMappingImpl(_esriGeoprocessing.ISDDatasetMappingImpl):
    _IID = uuid.UUID('a99dc238-d0ad-499a-b8bd-5abf9a5a9edd')

    def __init__(self, *args, **kw):
        super(ISDDatasetMappingImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Parent(self, _arg1):
        '''Method ISDDatasetMappingImpl.put_Parent

           INPUT
            _arg1               : ISDDatabaseMapping*'''
        return super(ISDDatasetMappingImpl, self).put_Parent(_arg1)
    def putref_OnServerObject(self, _arg1):
        '''Method ISDDatasetMappingImpl.putref_OnServerObject

           INPUT
            _arg1               : IDiscoveryDataSpaceItem*'''
        return super(ISDDatasetMappingImpl, self).putref_OnServerObject(_arg1)
    def putref_OnServerDatasetName(self, _arg1):
        '''Method ISDDatasetMappingImpl.putref_OnServerDatasetName

           INPUT
            _arg1               : IDatasetName*'''
        return super(ISDDatasetMappingImpl, self).putref_OnServerDatasetName(_arg1)
    def putref_ExtractedObject(self, _arg1):
        '''Method ISDDatasetMappingImpl.putref_ExtractedObject

           INPUT
            _arg1               : IDatasetName*'''
        return super(ISDDatasetMappingImpl, self).putref_ExtractedObject(_arg1)
    def putref_ManifestObject(self, _arg1):
        '''Method ISDDatasetMappingImpl.putref_ManifestObject

           INPUT
            _arg1               : IUnknown*'''
        return super(ISDDatasetMappingImpl, self).putref_ManifestObject(_arg1)
    ExtractedObject = property(None, putref_ExtractedObject, None)
    ManifestObject = property(None, putref_ManifestObject, None)
    OnServerDatasetName = property(None, putref_OnServerDatasetName, None)
    OnServerObject = property(None, putref_OnServerObject, None)
    Parent = property(None, put_Parent, None)

class IEnumDBGridComponent(_esriGeoprocessing.IEnumDBGridComponent):
    _IID = uuid.UUID('7b0d599f-bbda-4508-ba02-606407ac5894')
    def Next(self):
        '''Method IEnumDBGridComponent.Next

           OUTPUT
            component           : IDBGridComponent**'''
        return super(IEnumDBGridComponent, self).Next()
    def __iter__(self):
        try:
            super(IEnumDBGridComponent, self).Reset()
            val = super(IEnumDBGridComponent, self).Next()
            while val:
                yield val
                val = super(IEnumDBGridComponent, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumDBGridComponent.Reset'''
        return super(IEnumDBGridComponent, self).Reset()

class IDBGridComponent(_esriGeoprocessing.IDBGridComponent):
    _IID = uuid.UUID('71acd0fe-d2e7-45b1-b24e-1483a6db3c43')

    def __init__(self, *args, **kw):
        super(IDBGridComponent, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Index(self):
        '''Method IDBGridComponent.get_Index

           OUTPUT
            Index               : long*'''
        return super(IDBGridComponent, self).get_Index()
    def put_Index(self, Index):
        '''Method IDBGridComponent.put_Index

           INPUT
            Index               : long'''
        return super(IDBGridComponent, self).put_Index(Index)
    def get_Name(self):
        '''Method IDBGridComponent.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDBGridComponent, self).get_Name()
    def put_Name(self, Name):
        '''Method IDBGridComponent.put_Name

           INPUT
            Name                : BSTR'''
        return super(IDBGridComponent, self).put_Name(Name)
    def get_TypeString(self):
        '''Method IDBGridComponent.get_TypeString

           OUTPUT
            TypeString          : BSTR*'''
        return super(IDBGridComponent, self).get_TypeString()
    def get_GlobalID(self):
        '''Method IDBGridComponent.get_GlobalID

           OUTPUT
            val                 : IUID**'''
        return super(IDBGridComponent, self).get_GlobalID()
    def put_GlobalID(self, val):
        '''Method IDBGridComponent.put_GlobalID

           INPUT
            val                 : IUID*'''
        return super(IDBGridComponent, self).put_GlobalID(val)
    def GenerateKey(self, showAncestry):
        '''Method IDBGridComponent.GenerateKey

           INPUT
            showAncestry        : VARIANT_BOOL

           OUTPUT
            key                 : BSTR*'''
        return super(IDBGridComponent, self).GenerateKey(showAncestry)
    def get_Parent(self):
        '''Method IDBGridComponent.get_Parent

           OUTPUT
            component           : IDBGridComponent**'''
        return super(IDBGridComponent, self).get_Parent()
    def putref_Parent(self, component):
        '''Method IDBGridComponent.putref_Parent

           INPUT
            component           : IDBGridComponent*'''
        return super(IDBGridComponent, self).putref_Parent(component)
    def Flatten(self):
        '''Method IDBGridComponent.Flatten

           OUTPUT
            components          : IEnumDBGridComponent**'''
        return super(IDBGridComponent, self).Flatten()
    def FindComponent(self, key):
        '''Method IDBGridComponent.FindComponent

           INPUT
            key                 : BSTR

           OUTPUT
            component           : IDBGridComponent**'''
        return super(IDBGridComponent, self).FindComponent(key)
    def FindComponents(self, matchingComponent):
        '''Method IDBGridComponent.FindComponents

           INPUT
            matchingComponent   : IDBGridComponent*

           OUTPUT
            components          : IArray*'''
        return super(IDBGridComponent, self).FindComponents(matchingComponent)
    def Validate(self, cascading, TrackCancel):
        '''Method IDBGridComponent.Validate

           INPUTS
            cascading           : VARIANT_BOOL
            TrackCancel         : ITrackCancel*

           OUTPUT
            errors              : IPropertySet**'''
        return super(IDBGridComponent, self).Validate(cascading, TrackCancel)
    def RecreateFeatures(self, cascading, ipTrackCancel):
        '''Method IDBGridComponent.RecreateFeatures

           INPUTS
            cascading           : VARIANT_BOOL
            ipTrackCancel       : ITrackCancel*'''
        return super(IDBGridComponent, self).RecreateFeatures(cascading, ipTrackCancel)
    def DeleteFeatures(self, cascading, ipTrackCancel):
        '''Method IDBGridComponent.DeleteFeatures

           INPUTS
            cascading           : VARIANT_BOOL
            ipTrackCancel       : ITrackCancel*'''
        return super(IDBGridComponent, self).DeleteFeatures(cascading, ipTrackCancel)
    def get_StepCount(self, cascading):
        '''Method IDBGridComponent.get_StepCount

           INPUT
            cascading           : VARIANT_BOOL

           OUTPUT
            pCount              : long*'''
        return super(IDBGridComponent, self).get_StepCount(cascading)
    def get_FeatureClass(self):
        '''Method IDBGridComponent.get_FeatureClass

           OUTPUT
            ppFeatureClass      : IFeatureClass**'''
        return super(IDBGridComponent, self).get_FeatureClass()
    def GetEnvelope(self, cascading, ipSpatialReference, ipTrackCancel):
        '''Method IDBGridComponent.GetEnvelope

           INPUTS
            cascading           : VARIANT_BOOL
            ipSpatialReference  : ISpatialReference*
            ipTrackCancel       : ITrackCancel*

           OUTPUT
            ppEnvelope          : IEnvelope**'''
        return super(IDBGridComponent, self).GetEnvelope(cascading, ipSpatialReference, ipTrackCancel)
    def get_ParentFeatureCollection(self):
        '''Method IDBGridComponent.get_ParentFeatureCollection

           OUTPUT
            ppFeatureCollection : IArray**'''
        return super(IDBGridComponent, self).get_ParentFeatureCollection()
    def get_ParentParameter(self, vInParam):
        '''Method IDBGridComponent.get_ParentParameter

           INPUT
            vInParam            : VARIANT

           OUTPUT
            pvOutParam          : VARIANT*'''
        return super(IDBGridComponent, self).get_ParentParameter(vInParam)
    def CreateDBSchema(self, cascading, ipTrackCancel):
        '''Method IDBGridComponent.CreateDBSchema

           INPUTS
            cascading           : VARIANT_BOOL
            ipTrackCancel       : ITrackCancel*'''
        return super(IDBGridComponent, self).CreateDBSchema(cascading, ipTrackCancel)
    FeatureClass = property(get_FeatureClass, None, None)
    GlobalID = property(get_GlobalID, put_GlobalID, None)
    Index = property(get_Index, put_Index, None)
    Name = property(get_Name, put_Name, None)
    Parent = property(get_Parent, putref_Parent, None)
    ParentFeatureCollection = property(get_ParentFeatureCollection, None, None)
    TypeString = property(get_TypeString, None, None)
    ParentParameter = IndexProperty(get_ParentParameter, None)
    StepCount = IndexProperty(get_StepCount, None)

class IDBGridEnvironment(_esriGeoprocessing.IDBGridEnvironment):
    _IID = uuid.UUID('5ec8d23d-d504-4fe4-9227-c2ff044cf478')

    def __init__(self, *args, **kw):
        super(IDBGridEnvironment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SetAreaOfInterest(self, pOutlinePoly, pArcMapSR, pBoundarySourceSR, dblMapScale):
        '''Method IDBGridEnvironment.SetAreaOfInterest

           INPUTS
            pOutlinePoly        : IPolygon*
            pArcMapSR           : ISpatialReference*
            pBoundarySourceSR   : ISpatialReference*
            dblMapScale         : double'''
        return super(IDBGridEnvironment, self).SetAreaOfInterest(pOutlinePoly, pArcMapSR, pBoundarySourceSR, dblMapScale)
    def get_GPEnvironmentManager(self):
        '''Method IDBGridEnvironment.get_GPEnvironmentManager

           OUTPUT
            ppEnvMgr            : IGPEnvironmentManager**'''
        return super(IDBGridEnvironment, self).get_GPEnvironmentManager()
    def put_GPEnvironmentManager(self, ppEnvMgr):
        '''Method IDBGridEnvironment.put_GPEnvironmentManager

           INPUT
            ppEnvMgr            : IGPEnvironmentManager*'''
        return super(IDBGridEnvironment, self).put_GPEnvironmentManager(ppEnvMgr)
    def get_FeatureWorkspace(self):
        '''Method IDBGridEnvironment.get_FeatureWorkspace

           OUTPUT
            ppFeatureWorkspace  : IFeatureWorkspace**'''
        return super(IDBGridEnvironment, self).get_FeatureWorkspace()
    def get_FeatureDataset(self):
        '''Method IDBGridEnvironment.get_FeatureDataset

           OUTPUT
            ppFeatureDataset    : IFeatureDataset**'''
        return super(IDBGridEnvironment, self).get_FeatureDataset()
    def get_XYToleranceDD(self):
        '''Method IDBGridEnvironment.get_XYToleranceDD

           OUTPUT
            XYToleranceDD       : double*'''
        return super(IDBGridEnvironment, self).get_XYToleranceDD()
    def get_SpatialReference(self, srType):
        '''Method IDBGridEnvironment.get_SpatialReference

           INPUT
            srType              : esriGMSpatialReferenceType

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IDBGridEnvironment, self).get_SpatialReference(srType)
    def get_OutlinePolygon(self, pNL):
        '''Method IDBGridEnvironment.get_OutlinePolygon

           INPUT
            pNL                 : IDBGridNeatline*

           OUTPUT
            ppAreaOfInterest    : IPolygon**'''
        return super(IDBGridEnvironment, self).get_OutlinePolygon(pNL)
    def get_AOI(self):
        '''Method IDBGridEnvironment.get_AOI

           OUTPUT
            ppAreaOfInterest    : IPolygon**'''
        return super(IDBGridEnvironment, self).get_AOI()
    def get_ClipShape(self):
        '''Method IDBGridEnvironment.get_ClipShape

           OUTPUT
            ClipShape           : IPolygon**'''
        return super(IDBGridEnvironment, self).get_ClipShape()
    def put_ClipShape(self, ClipShape):
        '''Method IDBGridEnvironment.put_ClipShape

           INPUT
            ClipShape           : IPolygon*'''
        return super(IDBGridEnvironment, self).put_ClipShape(ClipShape)
    def get_MapScale(self):
        '''Method IDBGridEnvironment.get_MapScale

           OUTPUT
            dblMapScale         : double*'''
        return super(IDBGridEnvironment, self).get_MapScale()
    def get_AOICrosses180(self):
        '''Method IDBGridEnvironment.get_AOICrosses180

           OUTPUT
            bCrosses180         : VARIANT_BOOL*'''
        return super(IDBGridEnvironment, self).get_AOICrosses180()
    def UpdateLeftLongitude(self, pSpatialReference):
        '''Method IDBGridEnvironment.UpdateLeftLongitude

           INPUT
            pSpatialReference   : ISpatialReference*'''
        return super(IDBGridEnvironment, self).UpdateLeftLongitude(pSpatialReference)
    def UpdateSegmentOffset(self, pParentComponent, inOffset):
        '''Method IDBGridEnvironment.UpdateSegmentOffset

           INPUTS
            pParentComponent    : IDBGridComponent*
            inOffset            : double

           OUTPUT
            outOffset           : double*'''
        return super(IDBGridEnvironment, self).UpdateSegmentOffset(pParentComponent, inOffset)
    def UpdateConversionFactor(self, pParentComponent, eDistanceUnits, inConvFactor):
        '''Method IDBGridEnvironment.UpdateConversionFactor

           INPUTS
            pParentComponent    : IDBGridComponent*
            eDistanceUnits      : esriGMDistanceType
            inConvFactor        : double

           OUTPUT
            outConvFactor       : double*'''
        return super(IDBGridEnvironment, self).UpdateConversionFactor(pParentComponent, eDistanceUnits, inConvFactor)
    def StartEditing(self):
        '''Method IDBGridEnvironment.StartEditing'''
        return super(IDBGridEnvironment, self).StartEditing()
    def StopEditing(self):
        '''Method IDBGridEnvironment.StopEditing'''
        return super(IDBGridEnvironment, self).StopEditing()
    def put_TrackCancel(self, ppTrackCancel):
        '''Method IDBGridEnvironment.put_TrackCancel

           INPUT
            ppTrackCancel       : ITrackCancel*'''
        return super(IDBGridEnvironment, self).put_TrackCancel(ppTrackCancel)
    def get_TrackCancel(self):
        '''Method IDBGridEnvironment.get_TrackCancel

           OUTPUT
            ppTrackCancel       : ITrackCancel**'''
        return super(IDBGridEnvironment, self).get_TrackCancel()
    AOI = property(get_AOI, None, None)
    AOICrosses180 = property(get_AOICrosses180, None, None)
    ClipShape = property(get_ClipShape, put_ClipShape, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    FeatureWorkspace = property(get_FeatureWorkspace, None, None)
    GPEnvironmentManager = property(get_GPEnvironmentManager, put_GPEnvironmentManager, None)
    MapScale = property(get_MapScale, None, None)
    TrackCancel = property(get_TrackCancel, put_TrackCancel, None)
    XYToleranceDD = property(get_XYToleranceDD, None, None)
    OutlinePolygon = IndexProperty(get_OutlinePolygon, None)
    SpatialReference = IndexProperty(get_SpatialReference, None)


# IIDs
IID_IProtectNameGeoprocessing = IProtectNameGeoprocessing._IID
IID_IGPProtectNames = IGPProtectNames._IID
IID_IGPEnvironment = IGPEnvironment._IID
IID_IGPEnvironmentManager = IGPEnvironmentManager._IID
IID_IGPVariableManager = IGPVariableManager._IID
IID_IMdVariable = IMdVariable._IID
IID_IEnumMdVariable = IEnumMdVariable._IID
IID_IGPToolboxName = IGPToolboxName._IID
IID_IGPToolName = IGPToolName._IID
IID_IEnumGPToolName = IEnumGPToolName._IID
IID_IGPParameter = IGPParameter._IID
IID_IMdParameter = IMdParameter._IID
IID_IGPParameter2 = IGPParameter2._IID
IID_IBStringArray = IBStringArray._IID
IID_IGPFieldMap = IGPFieldMap._IID
IID_IGPFieldMapping = IGPFieldMapping._IID
IID_IGPFieldInfo = IGPFieldInfo._IID
IID_IGPFieldInfo2 = IGPFieldInfo2._IID
IID_IGPFieldInfo3 = IGPFieldInfo3._IID
IID_IGPFieldInfoProperty = IGPFieldInfoProperty._IID
IID_IGPFieldInfoProperty2 = IGPFieldInfoProperty2._IID
IID_IGPFieldInfoProperty3 = IGPFieldInfoProperty3._IID
IID_IGPValueTable = IGPValueTable._IID
IID_IGPValueTableType = IGPValueTableType._IID
IID_IGPMultiValue = IGPMultiValue._IID
IID_IGPMultiValueType = IGPMultiValueType._IID
IID_IGPMultiValueDataTypeName = IGPMultiValueDataTypeName._IID
IID_IGPVariant = IGPVariant._IID
IID_IGPBoolean = IGPBoolean._IID
IID_IGPString = IGPString._IID
IID_IGPDate = IGPDate._IID
IID_IGPDouble = IGPDouble._IID
IID_IGPLong = IGPLong._IID
IID_IGPEnvelope = IGPEnvelope._IID
IID_IGPExtent = IGPExtent._IID
IID_IGPSpatialReference = IGPSpatialReference._IID
IID_IGPCoordinateSystem = IGPCoordinateSystem._IID
IID_IGPXYDomain = IGPXYDomain._IID
IID_IGPZDomain = IGPZDomain._IID
IID_IGPMDomain = IGPMDomain._IID
IID_IGPPoint = IGPPoint._IID
IID_IGPPoint2 = IGPPoint2._IID
IID_IGPPolygon = IGPPolygon._IID
IID_IGPPolygon2 = IGPPolygon2._IID
IID_IGPLine = IGPLine._IID
IID_IGPLine2 = IGPLine2._IID
IID_IGPFeatureLayer = IGPFeatureLayer._IID
IID_IGPRouteMeasureEventProperties = IGPRouteMeasureEventProperties._IID
IID_IGPTableView = IGPTableView._IID
IID_IGPCodedValueDomainProperty = IGPCodedValueDomainProperty._IID
IID_IDataElementDomain = IDataElementDomain._IID
IID_IGPFieldInfoDomain = IGPFieldInfoDomain._IID
IID_IGPWorkspaceDomain = IGPWorkspaceDomain._IID
IID_IGPFileDomain = IGPFileDomain._IID
IID_IGPDatasetDomain = IGPDatasetDomain._IID
IID_IGPFeatureClassDomain = IGPFeatureClassDomain._IID
IID_IGPCoverageFeatureClassDomain = IGPCoverageFeatureClassDomain._IID
IID_IGPCoverageDomain = IGPCoverageDomain._IID
IID_IGPFieldDomain = IGPFieldDomain._IID
IID_IGPFieldDomain2 = IGPFieldDomain2._IID
IID_IGPArcInfoItemDomain = IGPArcInfoItemDomain._IID
IID_IGPFeatureSchema = IGPFeatureSchema._IID
IID_IGPTableSchema = IGPTableSchema._IID
IID_IGPRasterSchema = IGPRasterSchema._IID
IID_IGPContainerSchema = IGPContainerSchema._IID
IID_IGPParameterEdit = IGPParameterEdit._IID
IID_IGPParameterEdit2 = IGPParameterEdit2._IID
IID_IGPEnvironmentImpl = IGPEnvironmentImpl._IID
IID_IEnumGPEnvironment = IEnumGPEnvironment._IID
IID_IGPSchemaCheckImpl = IGPSchemaCheckImpl._IID
IID_IGPDefaultNameList = IGPDefaultNameList._IID
IID_IGeoProcessorSettings = IGeoProcessorSettings._IID
IID_IGeoProcessorSettings2 = IGeoProcessorSettings2._IID
IID_IGPFunction = IGPFunction._IID
IID_IGPFunction2 = IGPFunction2._IID
IID_IGPFunctionName = IGPFunctionName._IID
IID_IGPFunctionFactory = IGPFunctionFactory._IID
IID_IGPFunctionFactory2 = IGPFunctionFactory2._IID
IID_IGPParseString = IGPParseString._IID
IID_IGPParseString2 = IGPParseString2._IID
IID_IGPUtilities = IGPUtilities._IID
IID_IGPUtilities2 = IGPUtilities2._IID
IID_IGPUtilities3 = IGPUtilities3._IID
IID_IGPUtilities4 = IGPUtilities4._IID
IID_IGPCompositeDataType = IGPCompositeDataType._IID
IID_IGPCompositeDomain = IGPCompositeDomain._IID
IID_IGPFileSupport = IGPFileSupport._IID
IID_IGPLinearUnit = IGPLinearUnit._IID
IID_IGPArealUnit = IGPArealUnit._IID
IID_IGPLinearUnit2 = IGPLinearUnit2._IID
IID_IGPRandomNumberGenerator = IGPRandomNumberGenerator._IID
IID_IGPRasterLayer = IGPRasterLayer._IID
IID_IGPNumericDomain = IGPNumericDomain._IID
IID_IGPCompositeLayer = IGPCompositeLayer._IID
IID_IGPStandaloneTableCollection = IGPStandaloneTableCollection._IID
IID_IDEUtilities = IDEUtilities._IID
IID_IGPLayerSupport = IGPLayerSupport._IID
IID_IGPValueExpression = IGPValueExpression._IID
IID_IGPCreateTiles = IGPCreateTiles._IID
IID_IGPRecordSet = IGPRecordSet._IID
IID_IGPFeatureRecordSet = IGPFeatureRecordSet._IID
IID_IGPRasterData = IGPRasterData._IID
IID_IGPLayerDescription = IGPLayerDescription._IID
IID_IGPDataFile = IGPDataFile._IID
IID_IGPRasterBuilder = IGPRasterBuilder._IID
IID_IGPCellSizeXY = IGPCellSizeXY._IID
IID_IGPTest = IGPTest._IID
IID_IMdDisplayNode = IMdDisplayNode._IID
IID_IMdDisplayEdge = IMdDisplayEdge._IID
IID_IMdDiagramProperties = IMdDiagramProperties._IID
IID_IMdVariable2 = IMdVariable2._IID
IID_IMdVariable3 = IMdVariable3._IID
IID_IMdList = IMdList._IID
IID_IMdModelIteration = IMdModelIteration._IID
IID_IMBProgressor = IMBProgressor._IID
IID_IEnumGPToolboxName = IEnumGPToolboxName._IID
IID_IGPParameterInfo = IGPParameterInfo._IID
IID_IGPParameterInfos = IGPParameterInfos._IID
IID_IGPToolInfo = IGPToolInfo._IID
IID_IGPToolboxEvents2 = IGPToolboxEvents2._IID
IID_IGPFunctionTool = IGPFunctionTool._IID
IID_IGPScriptTool = IGPScriptTool._IID
IID_IGPScriptTool2 = IGPScriptTool2._IID
IID_IDEToolbox = IDEToolbox._IID
IID_IDEToolbox2 = IDEToolbox2._IID
IID_IGpEnumList = IGpEnumList._IID
IID_IGpEnumObject = IGpEnumObject._IID
IID_IGpDescribeData = IGpDescribeData._IID
IID_IGpSpRefObject = IGpSpRefObject._IID
IID_IGpValueTableObject = IGpValueTableObject._IID
IID_IGpValueTableObject2 = IGpValueTableObject2._IID
IID_IGPEnvironmentManagerImpl = IGPEnvironmentManagerImpl._IID
IID_IGeoProcessorResult = IGeoProcessorResult._IID
IID_IGeoProcessorEvents3 = IGeoProcessorEvents3._IID
IID_IGpObjectArray = IGpObjectArray._IID
IID_IGpDescribeGeometry = IGpDescribeGeometry._IID
IID_IGpPointObject = IGpPointObject._IID
IID_IGpPointObject2 = IGpPointObject2._IID
IID_IGpRandomNumberGeneratorObject = IGpRandomNumberGeneratorObject._IID
IID_IGpCursorRow = IGpCursorRow._IID
IID_IGpCursorRow2 = IGpCursorRow2._IID
IID_IGpFieldMappingsObject = IGpFieldMappingsObject._IID
IID_IGpFieldMapObject = IGpFieldMapObject._IID
IID_IGpDescribeField = IGpDescribeField._IID
IID_IGpDescribeIndex = IGpDescribeIndex._IID
IID_IGpFieldInfoObject = IGpFieldInfoObject._IID
IID_IGPNetCDFWorkspace = IGPNetCDFWorkspace._IID
IID_IGPToolBackground = IGPToolBackground._IID
IID_IGPComHelper = IGPComHelper._IID
IID_IGpDispatch = IGpDispatch._IID
IID_IGPArc = IGPArc._IID
IID_IGPLayersAndTablesDomain = IGPLayersAndTablesDomain._IID
IID_IGPTablesDomain = IGPTablesDomain._IID
IID_IGPTablesDomain2 = IGPTablesDomain2._IID
IID_IMdElementDialogSupport = IMdElementDialogSupport._IID
IID_IEnumGPVariable = IEnumGPVariable._IID
IID_IEnumGPDataType = IEnumGPDataType._IID
IID_IEnumFieldType = IEnumFieldType._IID
IID_IEnumGeometryType = IEnumGeometryType._IID
IID_IGPSAGeoDataDomain = IGPSAGeoDataDomain._IID
IID_IGPGraphUtilitiesUI = IGPGraphUtilitiesUI._IID
IID_INAClassFieldMapItemHelperImpl = INAClassFieldMapItemHelperImpl._IID
IID_INAClassFieldMappingsHelperImpl = INAClassFieldMappingsHelperImpl._IID
IID_INASolverPropertiesHelperImpl = INASolverPropertiesHelperImpl._IID
IID_IGPToolCommandHelperImpl = IGPToolCommandHelperImpl._IID
IID_IGPTableViewImpl = IGPTableViewImpl._IID
IID_IMdElementDebug = IMdElementDebug._IID
IID_IMdDiagramPropertiesImpl = IMdDiagramPropertiesImpl._IID
IID_IToolboxWorkspaceImpl = IToolboxWorkspaceImpl._IID
IID_IGPServerTool = IGPServerTool._IID
IID_IGPServerToolbox = IGPServerToolbox._IID
IID_IGPFileSystemToolbox = IGPFileSystemToolbox._IID
IID_IGDBToolbox = IGDBToolbox._IID
IID_IGPToolboxNameImpl = IGPToolboxNameImpl._IID
IID_IGPToolImpl = IGPToolImpl._IID
IID_IGPTaskImpl = IGPTaskImpl._IID
IID_IGPToolLicenseImpl = IGPToolLicenseImpl._IID
IID_IGPToolBackgroundImpl = IGPToolBackgroundImpl._IID
IID_IGPToolLocalizeImpl = IGPToolLocalizeImpl._IID
IID_IGPToolID = IGPToolID._IID
IID_IGPRecordSetImpl = IGPRecordSetImpl._IID
IID_IMdDiagramState = IMdDiagramState._IID
IID_IThreadedTrackCancel = IThreadedTrackCancel._IID
IID_IGeoProcessorWorker = IGeoProcessorWorker._IID
IID_IGPScriptToolImpl = IGPScriptToolImpl._IID
IID_IGPDefaultNameListImpl = IGPDefaultNameListImpl._IID
IID_IGPWrapper = IGPWrapper._IID
IID_IMdVariableImpl = IMdVariableImpl._IID
IID_IMdElementImpl = IMdElementImpl._IID
IID_IGPEnvironmentImpl2 = IGPEnvironmentImpl2._IID
IID_IGPModelToolImpl = IGPModelToolImpl._IID
IID_IGPServerToolName = IGPServerToolName._IID
IID_IGPServerToolboxName = IGPServerToolboxName._IID
IID_IGPFunctionFactoryImpl = IGPFunctionFactoryImpl._IID
IID_IBuildCoverageFeatureClassName = IBuildCoverageFeatureClassName._IID
IID_IBuildCoverageFeatureClassName2 = IBuildCoverageFeatureClassName2._IID
IID_IGPPythonScriptTool = IGPPythonScriptTool._IID
IID_IGPFunctionImpl = IGPFunctionImpl._IID
IID_ITransactionsObject = ITransactionsObject._IID
IID_IGeoprocessingAppHelper = IGeoprocessingAppHelper._IID
IID_IGPUtilitiesImpl = IGPUtilitiesImpl._IID
IID_IGPSAGeoDataTypeName = IGPSAGeoDataTypeName._IID
IID_IGPRasterUtil = IGPRasterUtil._IID
IID_IGPCompositeDataTypeName = IGPCompositeDataTypeName._IID
IID_IGPValueTableTypeName = IGPValueTableTypeName._IID
IID_IGPValueTableTypeNameProperty = IGPValueTableTypeNameProperty._IID
IID_IGPGxFilter = IGPGxFilter._IID
IID_IDEUtilitiesImpl = IDEUtilitiesImpl._IID
IID_IGPEncryptedString = IGPEncryptedString._IID
IID_IGPFieldInfo4 = IGPFieldInfo4._IID
IID_IGpDispatchImpl = IGpDispatchImpl._IID
IID_IGpDispatchObjectImpl = IGpDispatchObjectImpl._IID
IID_IGPFieldMapImpl = IGPFieldMapImpl._IID
IID_IGPRandomNumberGeneratorImpl = IGPRandomNumberGeneratorImpl._IID
IID_IGPFieldMappingImpl = IGPFieldMappingImpl._IID
IID_IGeoProcessorSettingsImpl = IGeoProcessorSettingsImpl._IID
IID_IGPIterator = IGPIterator._IID
IID_IGPLayerEditTemplateManagerImpl = IGPLayerEditTemplateManagerImpl._IID
IID_IGPInMemoryToolbox = IGPInMemoryToolbox._IID
IID_IGPPythonToolbox = IGPPythonToolbox._IID
IID_IGPPythonToolboxName = IGPPythonToolboxName._IID
IID_IGPDataTable = IGPDataTable._IID
IID_IGPGraphDataTable = IGPGraphDataTable._IID
IID_IGPGraph = IGPGraph._IID
IID_IGPGraphUtilities = IGPGraphUtilities._IID
IID_IGPMosaicDatasetUtilities = IGPMosaicDatasetUtilities._IID
IID_ILocalFunctionRasterEnv = ILocalFunctionRasterEnv._IID
IID_IJobResult = IJobResult._IID
IID_IGPParseStringImpl = IGPParseStringImpl._IID
IID_IGPPythonScriptParseRecord = IGPPythonScriptParseRecord._IID
IID_IGPExportWebMapExtensionImpl = IGPExportWebMapExtensionImpl._IID
IID_IGPSAGeoDataType = IGPSAGeoDataType._IID
IID_IGPRasterFormulated = IGPRasterFormulated._IID
IID_IGPRAFieldDomain = IGPRAFieldDomain._IID
IID_IGPAnalysisCellSizeType = IGPAnalysisCellSizeType._IID
IID_IMapCacheTileManager = IMapCacheTileManager._IID
IID_IMapCacheTileManagerJobResultHandler = IMapCacheTileManagerJobResultHandler._IID
IID_IMapCacheTileManagerJob = IMapCacheTileManagerJob._IID
IID_IGPRasterGDBEnvCompression = IGPRasterGDBEnvCompression._IID
IID_IGPRasterGDBEnvPyramid = IGPRasterGDBEnvPyramid._IID
IID_IGPRasterGDBEnvPyramid2 = IGPRasterGDBEnvPyramid2._IID
IID_IGPRasterGDBEnvPyramid3 = IGPRasterGDBEnvPyramid3._IID
IID_IGPRasterGDBEnvStatistics = IGPRasterGDBEnvStatistics._IID
IID_IGPRasterGDBEnvTileSize = IGPRasterGDBEnvTileSize._IID
IID_IGPRasterEnvStorageDefAdvanced = IGPRasterEnvStorageDefAdvanced._IID
IID_IGPFunctionPS = IGPFunctionPS._IID
IID_IGPRasterFormulatedPS = IGPRasterFormulatedPS._IID
IID_IGPAnalysisCellSizePS = IGPAnalysisCellSizePS._IID
IID_IGPSAGeoDataBase = IGPSAGeoDataBase._IID
IID_IGPSAValueTablePS = IGPSAValueTablePS._IID
IID_IGPSAGeoValueTablePS = IGPSAGeoValueTablePS._IID
IID_IGPRasterValueTablePS = IGPRasterValueTablePS._IID
IID_IGPRepresentationLayerDomain = IGPRepresentationLayerDomain._IID
IID_IGeocompare = IGeocompare._IID
IID_IGeocompareResult = IGeocompareResult._IID
IID_IGeocompareReport = IGeocompareReport._IID
IID_IFeatureClassGeocompare = IFeatureClassGeocompare._IID
IID_ITableGeocompare = ITableGeocompare._IID
IID_IFieldGeocompare = IFieldGeocompare._IID
IID_IRelationshipClassGeocompare = IRelationshipClassGeocompare._IID
IID_ISubtypesGeocompare = ISubtypesGeocompare._IID
IID_ISpatialReferenceGeocompare = ISpatialReferenceGeocompare._IID
IID_IGeometryGeocompare = IGeometryGeocompare._IID
IID_IRasterDatasetGeocompare = IRasterDatasetGeocompare._IID
IID_IRasterGeocompare = IRasterGeocompare._IID
IID_IRasterCatalogGeocompare = IRasterCatalogGeocompare._IID
IID_IMosaicDatasetGeocompare = IMosaicDatasetGeocompare._IID
IID_ISDERasterDatasetGeocompare = ISDERasterDatasetGeocompare._IID
IID_IFileGeocompare = IFileGeocompare._IID
IID_ITinGeocompare = ITinGeocompare._IID
IID_IGPValues = IGPValues._IID
IID_IGPToolInfo2 = IGPToolInfo2._IID
IID_IGPToolInfos = IGPToolInfos._IID
IID_IGPResult = IGPResult._IID
IID_IGPResultOptions = IGPResultOptions._IID
IID_IGPResultOptions2 = IGPResultOptions2._IID
IID_IGPServer = IGPServer._IID
IID_IGPServer2 = IGPServer2._IID
IID_IGPJobServerExe = IGPJobServerExe._IID
IID_IGPServerSync = IGPServerSync._IID
IID_IGPServerTrackCancel = IGPServerTrackCancel._IID
IID_IGPServerTrackCancel2 = IGPServerTrackCancel2._IID
IID_IGPServerExecute = IGPServerExecute._IID
IID_IGPServerDir = IGPServerDir._IID
IID_ILogUsage = ILogUsage._IID
IID_IWPSServer = IWPSServer._IID
IID_IDBGridMask = IDBGridMask._IID
IID_ICoordinateSystemRecordSet = ICoordinateSystemRecordSet._IID
IID_ICoordinateSystemZones = ICoordinateSystemZones._IID
IID_ISpatialReferenceCalculator = ISpatialReferenceCalculator._IID
IID_IDBGridPattern = IDBGridPattern._IID
IID_IDBGridAnnoGroup = IDBGridAnnoGroup._IID
IID_IDBGridAnno = IDBGridAnno._IID
IID_IDBGridEndPoint = IDBGridEndPoint._IID
IID_IDBGridTick = IDBGridTick._IID
IID_IDBGridLine = IDBGridLine._IID
IID_IDBGridPoint = IDBGridPoint._IID
IID_IDBGridSegment = IDBGridSegment._IID
IID_IDBGridNeatline = IDBGridNeatline._IID
IID_IDBGrid = IDBGrid._IID
IID_IDBGridMessages = IDBGridMessages._IID
IID_IDBGridUtilities = IDBGridUtilities._IID
IID_IMdModel = IMdModel._IID
IID_IGPModelTool = IGPModelTool._IID
IID_IMBImport = IMBImport._IID
IID_IGPVariableManagerImpl = IGPVariableManagerImpl._IID
IID_IModelScriptConverter = IModelScriptConverter._IID
IID_IMdElement = IMdElement._IID
IID_IEnumMdElement = IEnumMdElement._IID
IID_IMdModelIteration2 = IMdModelIteration2._IID
IID_IMdModelName = IMdModelName._IID
IID_IEnumMdProcess = IEnumMdProcess._IID
IID_IMdProcess = IMdProcess._IID
IID_IProcessLayer = IProcessLayer._IID
IID_IMdModelEvents = IMdModelEvents._IID
IID_IGPTask = IGPTask._IID
IID_IGeoProcessorResult2 = IGeoProcessorResult2._IID
IID_IGeoProcessorEvents2 = IGeoProcessorEvents2._IID
IID_IMdModelImpl = IMdModelImpl._IID
IID_IModelScriptConverterEngineCallback = IModelScriptConverterEngineCallback._IID
IID_IModelScriptConverterEngine = IModelScriptConverterEngine._IID
IID_IGPJobRequest = IGPJobRequest._IID
IID_IGPJobResult = IGPJobResult._IID
IID_IGPJobServer = IGPJobServer._IID
IID_IGPTool = IGPTool._IID
IID_IEnumGPTool = IEnumGPTool._IID
IID_IGPToolboxEvents = IGPToolboxEvents._IID
IID_IGPToolEdit = IGPToolEdit._IID
IID_IGeoProcessorEvents = IGeoProcessorEvents._IID
IID_IGeoProcessor = IGeoProcessor._IID
IID_IGeoProcessor2 = IGeoProcessor2._IID
IID_IGPToolCommandHelper = IGPToolCommandHelper._IID
IID_IGPToolCommandHelper2 = IGPToolCommandHelper2._IID
IID_IGPToolCache = IGPToolCache._IID
IID_IGeoProcessorResultImpl = IGeoProcessorResultImpl._IID
IID_IMdProcessImpl = IMdProcessImpl._IID
IID_IAnalyzeTask = IAnalyzeTask._IID
IID_IGPRuntimeSupport = IGPRuntimeSupport._IID
IID_IGeoProcessorSupport = IGeoProcessorSupport._IID
IID_IGpPythonInterpreter = IGpPythonInterpreter._IID
IID_IGpPythonExpression = IGpPythonExpression._IID
IID_IMdUtilities = IMdUtilities._IID
IID_IMdUtilities2 = IMdUtilities2._IID
IID_IMdUtilities3 = IMdUtilities3._IID
IID_IGPToolbox = IGPToolbox._IID
IID_IEnumGPToolbox = IEnumGPToolbox._IID
IID_IToolboxWorkspace = IToolboxWorkspace._IID
IID_IGPToolboxFactory = IGPToolboxFactory._IID
IID_IGPToolset = IGPToolset._IID
IID_IEnumGPToolset = IEnumGPToolset._IID
IID_IGPToolboxCache = IGPToolboxCache._IID
IID_IGPToolboxImpl = IGPToolboxImpl._IID
IID_IGPToolboxImplEvents = IGPToolboxImplEvents._IID
IID_IGxGPToolsetImpl = IGxGPToolsetImpl._IID
IID_IGeoProcessorImpl = IGeoProcessorImpl._IID
IID_IArcToolboxExtensionImpl = IArcToolboxExtensionImpl._IID
IID_IGPInternalEnvironment = IGPInternalEnvironment._IID
IID_ITaskAnalyzer = ITaskAnalyzer._IID
IID_IAnalyzeTaskToolbox = IAnalyzeTaskToolbox._IID
IID_IGPHolder = IGPHolder._IID
IID_IGPUtilitiesUI = IGPUtilitiesUI._IID
IID_IGPToolExtension = IGPToolExtension._IID
IID_IGPToolExtensionFactory = IGPToolExtensionFactory._IID
IID_IGPCustomTool = IGPCustomTool._IID
IID_IGPCustomToolHelper = IGPCustomToolHelper._IID
IID_IGPToolbox2 = IGPToolbox2._IID
IID_IGPToolbox3 = IGPToolbox3._IID
IID_IGPParameter3 = IGPParameter3._IID
IID_IGPSchema = IGPSchema._IID
IID_IGPParameterEdit3 = IGPParameterEdit3._IID
IID_IGPToolExtensionGen = IGPToolExtensionGen._IID
IID_IGPToolExtensionFactoryGen = IGPToolExtensionFactoryGen._IID
IID_IGPCustomToolGen = IGPCustomToolGen._IID
IID_ISDMapper = ISDMapper._IID
IID_ISDMapping = ISDMapping._IID
IID_ISDConfigurationMapping = ISDConfigurationMapping._IID
IID_ISDResourceMappingImpl = ISDResourceMappingImpl._IID
IID_ISDConfigurationMappingImpl = ISDConfigurationMappingImpl._IID
IID_IEnumSDDatabaseMapping = IEnumSDDatabaseMapping._IID
IID_ISDDatabaseMapping = ISDDatabaseMapping._IID
IID_ISDDatasetMapping = ISDDatasetMapping._IID
IID_IEnumSDDatasetMapping = IEnumSDDatasetMapping._IID
IID_ISDResourceMapping = ISDResourceMapping._IID
IID_ISDMappingImpl = ISDMappingImpl._IID
IID_ISDDatabaseMappingImpl = ISDDatabaseMappingImpl._IID
IID_ISDDatasetMappingImpl = ISDDatasetMappingImpl._IID
IID_IEnumDBGridComponent = IEnumDBGridComponent._IID
IID_IDBGridComponent = IDBGridComponent._IID
IID_IDBGridEnvironment = IDBGridEnvironment._IID
_IIDMap[IID_IProtectNameGeoprocessing] = IProtectNameGeoprocessing
_IIDMap[IID_IGPProtectNames] = IGPProtectNames
_IIDMap[IID_IGPEnvironment] = IGPEnvironment
_IIDMap[IID_IGPEnvironmentManager] = IGPEnvironmentManager
_IIDMap[IID_IGPVariableManager] = IGPVariableManager
_IIDMap[IID_IMdVariable] = IMdVariable
_IIDMap[IID_IEnumMdVariable] = IEnumMdVariable
_IIDMap[IID_IGPToolboxName] = IGPToolboxName
_IIDMap[IID_IGPToolName] = IGPToolName
_IIDMap[IID_IEnumGPToolName] = IEnumGPToolName
_IIDMap[IID_IGPParameter] = IGPParameter
_IIDMap[IID_IMdParameter] = IMdParameter
_IIDMap[IID_IGPParameter2] = IGPParameter2
_IIDMap[IID_IBStringArray] = IBStringArray
_IIDMap[IID_IGPFieldMap] = IGPFieldMap
_IIDMap[IID_IGPFieldMapping] = IGPFieldMapping
_IIDMap[IID_IGPFieldInfo] = IGPFieldInfo
_IIDMap[IID_IGPFieldInfo2] = IGPFieldInfo2
_IIDMap[IID_IGPFieldInfo3] = IGPFieldInfo3
_IIDMap[IID_IGPFieldInfoProperty] = IGPFieldInfoProperty
_IIDMap[IID_IGPFieldInfoProperty2] = IGPFieldInfoProperty2
_IIDMap[IID_IGPFieldInfoProperty3] = IGPFieldInfoProperty3
_IIDMap[IID_IGPValueTable] = IGPValueTable
_IIDMap[IID_IGPValueTableType] = IGPValueTableType
_IIDMap[IID_IGPMultiValue] = IGPMultiValue
_IIDMap[IID_IGPMultiValueType] = IGPMultiValueType
_IIDMap[IID_IGPMultiValueDataTypeName] = IGPMultiValueDataTypeName
_IIDMap[IID_IGPVariant] = IGPVariant
_IIDMap[IID_IGPBoolean] = IGPBoolean
_IIDMap[IID_IGPString] = IGPString
_IIDMap[IID_IGPDate] = IGPDate
_IIDMap[IID_IGPDouble] = IGPDouble
_IIDMap[IID_IGPLong] = IGPLong
_IIDMap[IID_IGPEnvelope] = IGPEnvelope
_IIDMap[IID_IGPExtent] = IGPExtent
_IIDMap[IID_IGPSpatialReference] = IGPSpatialReference
_IIDMap[IID_IGPCoordinateSystem] = IGPCoordinateSystem
_IIDMap[IID_IGPXYDomain] = IGPXYDomain
_IIDMap[IID_IGPZDomain] = IGPZDomain
_IIDMap[IID_IGPMDomain] = IGPMDomain
_IIDMap[IID_IGPPoint] = IGPPoint
_IIDMap[IID_IGPPoint2] = IGPPoint2
_IIDMap[IID_IGPPolygon] = IGPPolygon
_IIDMap[IID_IGPPolygon2] = IGPPolygon2
_IIDMap[IID_IGPLine] = IGPLine
_IIDMap[IID_IGPLine2] = IGPLine2
_IIDMap[IID_IGPFeatureLayer] = IGPFeatureLayer
_IIDMap[IID_IGPRouteMeasureEventProperties] = IGPRouteMeasureEventProperties
_IIDMap[IID_IGPTableView] = IGPTableView
_IIDMap[IID_IGPCodedValueDomainProperty] = IGPCodedValueDomainProperty
_IIDMap[IID_IDataElementDomain] = IDataElementDomain
_IIDMap[IID_IGPFieldInfoDomain] = IGPFieldInfoDomain
_IIDMap[IID_IGPWorkspaceDomain] = IGPWorkspaceDomain
_IIDMap[IID_IGPFileDomain] = IGPFileDomain
_IIDMap[IID_IGPDatasetDomain] = IGPDatasetDomain
_IIDMap[IID_IGPFeatureClassDomain] = IGPFeatureClassDomain
_IIDMap[IID_IGPCoverageFeatureClassDomain] = IGPCoverageFeatureClassDomain
_IIDMap[IID_IGPCoverageDomain] = IGPCoverageDomain
_IIDMap[IID_IGPFieldDomain] = IGPFieldDomain
_IIDMap[IID_IGPFieldDomain2] = IGPFieldDomain2
_IIDMap[IID_IGPArcInfoItemDomain] = IGPArcInfoItemDomain
_IIDMap[IID_IGPFeatureSchema] = IGPFeatureSchema
_IIDMap[IID_IGPTableSchema] = IGPTableSchema
_IIDMap[IID_IGPRasterSchema] = IGPRasterSchema
_IIDMap[IID_IGPContainerSchema] = IGPContainerSchema
_IIDMap[IID_IGPParameterEdit] = IGPParameterEdit
_IIDMap[IID_IGPParameterEdit2] = IGPParameterEdit2
_IIDMap[IID_IGPEnvironmentImpl] = IGPEnvironmentImpl
_IIDMap[IID_IEnumGPEnvironment] = IEnumGPEnvironment
_IIDMap[IID_IGPSchemaCheckImpl] = IGPSchemaCheckImpl
_IIDMap[IID_IGPDefaultNameList] = IGPDefaultNameList
_IIDMap[IID_IGeoProcessorSettings] = IGeoProcessorSettings
_IIDMap[IID_IGeoProcessorSettings2] = IGeoProcessorSettings2
_IIDMap[IID_IGPFunction] = IGPFunction
_IIDMap[IID_IGPFunction2] = IGPFunction2
_IIDMap[IID_IGPFunctionName] = IGPFunctionName
_IIDMap[IID_IGPFunctionFactory] = IGPFunctionFactory
_IIDMap[IID_IGPFunctionFactory2] = IGPFunctionFactory2
_IIDMap[IID_IGPParseString] = IGPParseString
_IIDMap[IID_IGPParseString2] = IGPParseString2
_IIDMap[IID_IGPUtilities] = IGPUtilities
_IIDMap[IID_IGPUtilities2] = IGPUtilities2
_IIDMap[IID_IGPUtilities3] = IGPUtilities3
_IIDMap[IID_IGPUtilities4] = IGPUtilities4
_IIDMap[IID_IGPCompositeDataType] = IGPCompositeDataType
_IIDMap[IID_IGPCompositeDomain] = IGPCompositeDomain
_IIDMap[IID_IGPFileSupport] = IGPFileSupport
_IIDMap[IID_IGPLinearUnit] = IGPLinearUnit
_IIDMap[IID_IGPArealUnit] = IGPArealUnit
_IIDMap[IID_IGPLinearUnit2] = IGPLinearUnit2
_IIDMap[IID_IGPRandomNumberGenerator] = IGPRandomNumberGenerator
_IIDMap[IID_IGPRasterLayer] = IGPRasterLayer
_IIDMap[IID_IGPNumericDomain] = IGPNumericDomain
_IIDMap[IID_IGPCompositeLayer] = IGPCompositeLayer
_IIDMap[IID_IGPStandaloneTableCollection] = IGPStandaloneTableCollection
_IIDMap[IID_IDEUtilities] = IDEUtilities
_IIDMap[IID_IGPLayerSupport] = IGPLayerSupport
_IIDMap[IID_IGPValueExpression] = IGPValueExpression
_IIDMap[IID_IGPCreateTiles] = IGPCreateTiles
_IIDMap[IID_IGPRecordSet] = IGPRecordSet
_IIDMap[IID_IGPFeatureRecordSet] = IGPFeatureRecordSet
_IIDMap[IID_IGPRasterData] = IGPRasterData
_IIDMap[IID_IGPLayerDescription] = IGPLayerDescription
_IIDMap[IID_IGPDataFile] = IGPDataFile
_IIDMap[IID_IGPRasterBuilder] = IGPRasterBuilder
_IIDMap[IID_IGPCellSizeXY] = IGPCellSizeXY
_IIDMap[IID_IGPTest] = IGPTest
_IIDMap[IID_IMdDisplayNode] = IMdDisplayNode
_IIDMap[IID_IMdDisplayEdge] = IMdDisplayEdge
_IIDMap[IID_IMdDiagramProperties] = IMdDiagramProperties
_IIDMap[IID_IMdVariable2] = IMdVariable2
_IIDMap[IID_IMdVariable3] = IMdVariable3
_IIDMap[IID_IMdList] = IMdList
_IIDMap[IID_IMdModelIteration] = IMdModelIteration
_IIDMap[IID_IMBProgressor] = IMBProgressor
_IIDMap[IID_IEnumGPToolboxName] = IEnumGPToolboxName
_IIDMap[IID_IGPParameterInfo] = IGPParameterInfo
_IIDMap[IID_IGPParameterInfos] = IGPParameterInfos
_IIDMap[IID_IGPToolInfo] = IGPToolInfo
_IIDMap[IID_IGPToolboxEvents2] = IGPToolboxEvents2
_IIDMap[IID_IGPFunctionTool] = IGPFunctionTool
_IIDMap[IID_IGPScriptTool] = IGPScriptTool
_IIDMap[IID_IGPScriptTool2] = IGPScriptTool2
_IIDMap[IID_IDEToolbox] = IDEToolbox
_IIDMap[IID_IDEToolbox2] = IDEToolbox2
_IIDMap[IID_IGpEnumList] = IGpEnumList
_IIDMap[IID_IGpEnumObject] = IGpEnumObject
_IIDMap[IID_IGpDescribeData] = IGpDescribeData
_IIDMap[IID_IGpSpRefObject] = IGpSpRefObject
_IIDMap[IID_IGpValueTableObject] = IGpValueTableObject
_IIDMap[IID_IGpValueTableObject2] = IGpValueTableObject2
_IIDMap[IID_IGPEnvironmentManagerImpl] = IGPEnvironmentManagerImpl
_IIDMap[IID_IGeoProcessorResult] = IGeoProcessorResult
_IIDMap[IID_IGeoProcessorEvents3] = IGeoProcessorEvents3
_IIDMap[IID_IGpObjectArray] = IGpObjectArray
_IIDMap[IID_IGpDescribeGeometry] = IGpDescribeGeometry
_IIDMap[IID_IGpPointObject] = IGpPointObject
_IIDMap[IID_IGpPointObject2] = IGpPointObject2
_IIDMap[IID_IGpRandomNumberGeneratorObject] = IGpRandomNumberGeneratorObject
_IIDMap[IID_IGpCursorRow] = IGpCursorRow
_IIDMap[IID_IGpCursorRow2] = IGpCursorRow2
_IIDMap[IID_IGpFieldMappingsObject] = IGpFieldMappingsObject
_IIDMap[IID_IGpFieldMapObject] = IGpFieldMapObject
_IIDMap[IID_IGpDescribeField] = IGpDescribeField
_IIDMap[IID_IGpDescribeIndex] = IGpDescribeIndex
_IIDMap[IID_IGpFieldInfoObject] = IGpFieldInfoObject
_IIDMap[IID_IGPNetCDFWorkspace] = IGPNetCDFWorkspace
_IIDMap[IID_IGPToolBackground] = IGPToolBackground
_IIDMap[IID_IGPComHelper] = IGPComHelper
_IIDMap[IID_IGpDispatch] = IGpDispatch
_IIDMap[IID_IGPArc] = IGPArc
_IIDMap[IID_IGPLayersAndTablesDomain] = IGPLayersAndTablesDomain
_IIDMap[IID_IGPTablesDomain] = IGPTablesDomain
_IIDMap[IID_IGPTablesDomain2] = IGPTablesDomain2
_IIDMap[IID_IMdElementDialogSupport] = IMdElementDialogSupport
_IIDMap[IID_IEnumGPVariable] = IEnumGPVariable
_IIDMap[IID_IEnumGPDataType] = IEnumGPDataType
_IIDMap[IID_IEnumFieldType] = IEnumFieldType
_IIDMap[IID_IEnumGeometryType] = IEnumGeometryType
_IIDMap[IID_IGPSAGeoDataDomain] = IGPSAGeoDataDomain
_IIDMap[IID_IGPGraphUtilitiesUI] = IGPGraphUtilitiesUI
_IIDMap[IID_INAClassFieldMapItemHelperImpl] = INAClassFieldMapItemHelperImpl
_IIDMap[IID_INAClassFieldMappingsHelperImpl] = INAClassFieldMappingsHelperImpl
_IIDMap[IID_INASolverPropertiesHelperImpl] = INASolverPropertiesHelperImpl
_IIDMap[IID_IGPToolCommandHelperImpl] = IGPToolCommandHelperImpl
_IIDMap[IID_IGPTableViewImpl] = IGPTableViewImpl
_IIDMap[IID_IMdElementDebug] = IMdElementDebug
_IIDMap[IID_IMdDiagramPropertiesImpl] = IMdDiagramPropertiesImpl
_IIDMap[IID_IToolboxWorkspaceImpl] = IToolboxWorkspaceImpl
_IIDMap[IID_IGPServerTool] = IGPServerTool
_IIDMap[IID_IGPServerToolbox] = IGPServerToolbox
_IIDMap[IID_IGPFileSystemToolbox] = IGPFileSystemToolbox
_IIDMap[IID_IGDBToolbox] = IGDBToolbox
_IIDMap[IID_IGPToolboxNameImpl] = IGPToolboxNameImpl
_IIDMap[IID_IGPToolImpl] = IGPToolImpl
_IIDMap[IID_IGPTaskImpl] = IGPTaskImpl
_IIDMap[IID_IGPToolLicenseImpl] = IGPToolLicenseImpl
_IIDMap[IID_IGPToolBackgroundImpl] = IGPToolBackgroundImpl
_IIDMap[IID_IGPToolLocalizeImpl] = IGPToolLocalizeImpl
_IIDMap[IID_IGPToolID] = IGPToolID
_IIDMap[IID_IGPRecordSetImpl] = IGPRecordSetImpl
_IIDMap[IID_IMdDiagramState] = IMdDiagramState
_IIDMap[IID_IThreadedTrackCancel] = IThreadedTrackCancel
_IIDMap[IID_IGeoProcessorWorker] = IGeoProcessorWorker
_IIDMap[IID_IGPScriptToolImpl] = IGPScriptToolImpl
_IIDMap[IID_IGPDefaultNameListImpl] = IGPDefaultNameListImpl
_IIDMap[IID_IGPWrapper] = IGPWrapper
_IIDMap[IID_IMdVariableImpl] = IMdVariableImpl
_IIDMap[IID_IMdElementImpl] = IMdElementImpl
_IIDMap[IID_IGPEnvironmentImpl2] = IGPEnvironmentImpl2
_IIDMap[IID_IGPModelToolImpl] = IGPModelToolImpl
_IIDMap[IID_IGPServerToolName] = IGPServerToolName
_IIDMap[IID_IGPServerToolboxName] = IGPServerToolboxName
_IIDMap[IID_IGPFunctionFactoryImpl] = IGPFunctionFactoryImpl
_IIDMap[IID_IBuildCoverageFeatureClassName] = IBuildCoverageFeatureClassName
_IIDMap[IID_IBuildCoverageFeatureClassName2] = IBuildCoverageFeatureClassName2
_IIDMap[IID_IGPPythonScriptTool] = IGPPythonScriptTool
_IIDMap[IID_IGPFunctionImpl] = IGPFunctionImpl
_IIDMap[IID_ITransactionsObject] = ITransactionsObject
_IIDMap[IID_IGeoprocessingAppHelper] = IGeoprocessingAppHelper
_IIDMap[IID_IGPUtilitiesImpl] = IGPUtilitiesImpl
_IIDMap[IID_IGPSAGeoDataTypeName] = IGPSAGeoDataTypeName
_IIDMap[IID_IGPRasterUtil] = IGPRasterUtil
_IIDMap[IID_IGPCompositeDataTypeName] = IGPCompositeDataTypeName
_IIDMap[IID_IGPValueTableTypeName] = IGPValueTableTypeName
_IIDMap[IID_IGPValueTableTypeNameProperty] = IGPValueTableTypeNameProperty
_IIDMap[IID_IGPGxFilter] = IGPGxFilter
_IIDMap[IID_IDEUtilitiesImpl] = IDEUtilitiesImpl
_IIDMap[IID_IGPEncryptedString] = IGPEncryptedString
_IIDMap[IID_IGPFieldInfo4] = IGPFieldInfo4
_IIDMap[IID_IGpDispatchImpl] = IGpDispatchImpl
_IIDMap[IID_IGpDispatchObjectImpl] = IGpDispatchObjectImpl
_IIDMap[IID_IGPFieldMapImpl] = IGPFieldMapImpl
_IIDMap[IID_IGPRandomNumberGeneratorImpl] = IGPRandomNumberGeneratorImpl
_IIDMap[IID_IGPFieldMappingImpl] = IGPFieldMappingImpl
_IIDMap[IID_IGeoProcessorSettingsImpl] = IGeoProcessorSettingsImpl
_IIDMap[IID_IGPIterator] = IGPIterator
_IIDMap[IID_IGPLayerEditTemplateManagerImpl] = IGPLayerEditTemplateManagerImpl
_IIDMap[IID_IGPInMemoryToolbox] = IGPInMemoryToolbox
_IIDMap[IID_IGPPythonToolbox] = IGPPythonToolbox
_IIDMap[IID_IGPPythonToolboxName] = IGPPythonToolboxName
_IIDMap[IID_IGPDataTable] = IGPDataTable
_IIDMap[IID_IGPGraphDataTable] = IGPGraphDataTable
_IIDMap[IID_IGPGraph] = IGPGraph
_IIDMap[IID_IGPGraphUtilities] = IGPGraphUtilities
_IIDMap[IID_IGPMosaicDatasetUtilities] = IGPMosaicDatasetUtilities
_IIDMap[IID_ILocalFunctionRasterEnv] = ILocalFunctionRasterEnv
_IIDMap[IID_IJobResult] = IJobResult
_IIDMap[IID_IGPParseStringImpl] = IGPParseStringImpl
_IIDMap[IID_IGPPythonScriptParseRecord] = IGPPythonScriptParseRecord
_IIDMap[IID_IGPExportWebMapExtensionImpl] = IGPExportWebMapExtensionImpl
_IIDMap[IID_IGPSAGeoDataType] = IGPSAGeoDataType
_IIDMap[IID_IGPRasterFormulated] = IGPRasterFormulated
_IIDMap[IID_IGPRAFieldDomain] = IGPRAFieldDomain
_IIDMap[IID_IGPAnalysisCellSizeType] = IGPAnalysisCellSizeType
_IIDMap[IID_IMapCacheTileManager] = IMapCacheTileManager
_IIDMap[IID_IMapCacheTileManagerJobResultHandler] = IMapCacheTileManagerJobResultHandler
_IIDMap[IID_IMapCacheTileManagerJob] = IMapCacheTileManagerJob
_IIDMap[IID_IGPRasterGDBEnvCompression] = IGPRasterGDBEnvCompression
_IIDMap[IID_IGPRasterGDBEnvPyramid] = IGPRasterGDBEnvPyramid
_IIDMap[IID_IGPRasterGDBEnvPyramid2] = IGPRasterGDBEnvPyramid2
_IIDMap[IID_IGPRasterGDBEnvPyramid3] = IGPRasterGDBEnvPyramid3
_IIDMap[IID_IGPRasterGDBEnvStatistics] = IGPRasterGDBEnvStatistics
_IIDMap[IID_IGPRasterGDBEnvTileSize] = IGPRasterGDBEnvTileSize
_IIDMap[IID_IGPRasterEnvStorageDefAdvanced] = IGPRasterEnvStorageDefAdvanced
_IIDMap[IID_IGPFunctionPS] = IGPFunctionPS
_IIDMap[IID_IGPRasterFormulatedPS] = IGPRasterFormulatedPS
_IIDMap[IID_IGPAnalysisCellSizePS] = IGPAnalysisCellSizePS
_IIDMap[IID_IGPSAGeoDataBase] = IGPSAGeoDataBase
_IIDMap[IID_IGPSAValueTablePS] = IGPSAValueTablePS
_IIDMap[IID_IGPSAGeoValueTablePS] = IGPSAGeoValueTablePS
_IIDMap[IID_IGPRasterValueTablePS] = IGPRasterValueTablePS
_IIDMap[IID_IGPRepresentationLayerDomain] = IGPRepresentationLayerDomain
_IIDMap[IID_IGeocompare] = IGeocompare
_IIDMap[IID_IGeocompareResult] = IGeocompareResult
_IIDMap[IID_IGeocompareReport] = IGeocompareReport
_IIDMap[IID_IFeatureClassGeocompare] = IFeatureClassGeocompare
_IIDMap[IID_ITableGeocompare] = ITableGeocompare
_IIDMap[IID_IFieldGeocompare] = IFieldGeocompare
_IIDMap[IID_IRelationshipClassGeocompare] = IRelationshipClassGeocompare
_IIDMap[IID_ISubtypesGeocompare] = ISubtypesGeocompare
_IIDMap[IID_ISpatialReferenceGeocompare] = ISpatialReferenceGeocompare
_IIDMap[IID_IGeometryGeocompare] = IGeometryGeocompare
_IIDMap[IID_IRasterDatasetGeocompare] = IRasterDatasetGeocompare
_IIDMap[IID_IRasterGeocompare] = IRasterGeocompare
_IIDMap[IID_IRasterCatalogGeocompare] = IRasterCatalogGeocompare
_IIDMap[IID_IMosaicDatasetGeocompare] = IMosaicDatasetGeocompare
_IIDMap[IID_ISDERasterDatasetGeocompare] = ISDERasterDatasetGeocompare
_IIDMap[IID_IFileGeocompare] = IFileGeocompare
_IIDMap[IID_ITinGeocompare] = ITinGeocompare
_IIDMap[IID_IGPValues] = IGPValues
_IIDMap[IID_IGPToolInfo2] = IGPToolInfo2
_IIDMap[IID_IGPToolInfos] = IGPToolInfos
_IIDMap[IID_IGPResult] = IGPResult
_IIDMap[IID_IGPResultOptions] = IGPResultOptions
_IIDMap[IID_IGPResultOptions2] = IGPResultOptions2
_IIDMap[IID_IGPServer] = IGPServer
_IIDMap[IID_IGPServer2] = IGPServer2
_IIDMap[IID_IGPJobServerExe] = IGPJobServerExe
_IIDMap[IID_IGPServerSync] = IGPServerSync
_IIDMap[IID_IGPServerTrackCancel] = IGPServerTrackCancel
_IIDMap[IID_IGPServerTrackCancel2] = IGPServerTrackCancel2
_IIDMap[IID_IGPServerExecute] = IGPServerExecute
_IIDMap[IID_IGPServerDir] = IGPServerDir
_IIDMap[IID_ILogUsage] = ILogUsage
_IIDMap[IID_IWPSServer] = IWPSServer
_IIDMap[IID_IDBGridMask] = IDBGridMask
_IIDMap[IID_ICoordinateSystemRecordSet] = ICoordinateSystemRecordSet
_IIDMap[IID_ICoordinateSystemZones] = ICoordinateSystemZones
_IIDMap[IID_ISpatialReferenceCalculator] = ISpatialReferenceCalculator
_IIDMap[IID_IDBGridPattern] = IDBGridPattern
_IIDMap[IID_IDBGridAnnoGroup] = IDBGridAnnoGroup
_IIDMap[IID_IDBGridAnno] = IDBGridAnno
_IIDMap[IID_IDBGridEndPoint] = IDBGridEndPoint
_IIDMap[IID_IDBGridTick] = IDBGridTick
_IIDMap[IID_IDBGridLine] = IDBGridLine
_IIDMap[IID_IDBGridPoint] = IDBGridPoint
_IIDMap[IID_IDBGridSegment] = IDBGridSegment
_IIDMap[IID_IDBGridNeatline] = IDBGridNeatline
_IIDMap[IID_IDBGrid] = IDBGrid
_IIDMap[IID_IDBGridMessages] = IDBGridMessages
_IIDMap[IID_IDBGridUtilities] = IDBGridUtilities
_IIDMap[IID_IMdModel] = IMdModel
_IIDMap[IID_IGPModelTool] = IGPModelTool
_IIDMap[IID_IMBImport] = IMBImport
_IIDMap[IID_IGPVariableManagerImpl] = IGPVariableManagerImpl
_IIDMap[IID_IModelScriptConverter] = IModelScriptConverter
_IIDMap[IID_IMdElement] = IMdElement
_IIDMap[IID_IEnumMdElement] = IEnumMdElement
_IIDMap[IID_IMdModelIteration2] = IMdModelIteration2
_IIDMap[IID_IMdModelName] = IMdModelName
_IIDMap[IID_IEnumMdProcess] = IEnumMdProcess
_IIDMap[IID_IMdProcess] = IMdProcess
_IIDMap[IID_IProcessLayer] = IProcessLayer
_IIDMap[IID_IMdModelEvents] = IMdModelEvents
_IIDMap[IID_IGPTask] = IGPTask
_IIDMap[IID_IGeoProcessorResult2] = IGeoProcessorResult2
_IIDMap[IID_IGeoProcessorEvents2] = IGeoProcessorEvents2
_IIDMap[IID_IMdModelImpl] = IMdModelImpl
_IIDMap[IID_IModelScriptConverterEngineCallback] = IModelScriptConverterEngineCallback
_IIDMap[IID_IModelScriptConverterEngine] = IModelScriptConverterEngine
_IIDMap[IID_IGPJobRequest] = IGPJobRequest
_IIDMap[IID_IGPJobResult] = IGPJobResult
_IIDMap[IID_IGPJobServer] = IGPJobServer
_IIDMap[IID_IGPTool] = IGPTool
_IIDMap[IID_IEnumGPTool] = IEnumGPTool
_IIDMap[IID_IGPToolboxEvents] = IGPToolboxEvents
_IIDMap[IID_IGPToolEdit] = IGPToolEdit
_IIDMap[IID_IGeoProcessorEvents] = IGeoProcessorEvents
_IIDMap[IID_IGeoProcessor] = IGeoProcessor
_IIDMap[IID_IGeoProcessor2] = IGeoProcessor2
_IIDMap[IID_IGPToolCommandHelper] = IGPToolCommandHelper
_IIDMap[IID_IGPToolCommandHelper2] = IGPToolCommandHelper2
_IIDMap[IID_IGPToolCache] = IGPToolCache
_IIDMap[IID_IGeoProcessorResultImpl] = IGeoProcessorResultImpl
_IIDMap[IID_IMdProcessImpl] = IMdProcessImpl
_IIDMap[IID_IAnalyzeTask] = IAnalyzeTask
_IIDMap[IID_IGPRuntimeSupport] = IGPRuntimeSupport
_IIDMap[IID_IGeoProcessorSupport] = IGeoProcessorSupport
_IIDMap[IID_IGpPythonInterpreter] = IGpPythonInterpreter
_IIDMap[IID_IGpPythonExpression] = IGpPythonExpression
_IIDMap[IID_IMdUtilities] = IMdUtilities
_IIDMap[IID_IMdUtilities2] = IMdUtilities2
_IIDMap[IID_IMdUtilities3] = IMdUtilities3
_IIDMap[IID_IGPToolbox] = IGPToolbox
_IIDMap[IID_IEnumGPToolbox] = IEnumGPToolbox
_IIDMap[IID_IToolboxWorkspace] = IToolboxWorkspace
_IIDMap[IID_IGPToolboxFactory] = IGPToolboxFactory
_IIDMap[IID_IGPToolset] = IGPToolset
_IIDMap[IID_IEnumGPToolset] = IEnumGPToolset
_IIDMap[IID_IGPToolboxCache] = IGPToolboxCache
_IIDMap[IID_IGPToolboxImpl] = IGPToolboxImpl
_IIDMap[IID_IGPToolboxImplEvents] = IGPToolboxImplEvents
_IIDMap[IID_IGxGPToolsetImpl] = IGxGPToolsetImpl
_IIDMap[IID_IGeoProcessorImpl] = IGeoProcessorImpl
_IIDMap[IID_IArcToolboxExtensionImpl] = IArcToolboxExtensionImpl
_IIDMap[IID_IGPInternalEnvironment] = IGPInternalEnvironment
_IIDMap[IID_ITaskAnalyzer] = ITaskAnalyzer
_IIDMap[IID_IAnalyzeTaskToolbox] = IAnalyzeTaskToolbox
_IIDMap[IID_IGPHolder] = IGPHolder
_IIDMap[IID_IGPUtilitiesUI] = IGPUtilitiesUI
_IIDMap[IID_IGPToolExtension] = IGPToolExtension
_IIDMap[IID_IGPToolExtensionFactory] = IGPToolExtensionFactory
_IIDMap[IID_IGPCustomTool] = IGPCustomTool
_IIDMap[IID_IGPCustomToolHelper] = IGPCustomToolHelper
_IIDMap[IID_IGPToolbox2] = IGPToolbox2
_IIDMap[IID_IGPToolbox3] = IGPToolbox3
_IIDMap[IID_IGPParameter3] = IGPParameter3
_IIDMap[IID_IGPSchema] = IGPSchema
_IIDMap[IID_IGPParameterEdit3] = IGPParameterEdit3
_IIDMap[IID_IGPToolExtensionGen] = IGPToolExtensionGen
_IIDMap[IID_IGPToolExtensionFactoryGen] = IGPToolExtensionFactoryGen
_IIDMap[IID_IGPCustomToolGen] = IGPCustomToolGen
_IIDMap[IID_ISDMapper] = ISDMapper
_IIDMap[IID_ISDMapping] = ISDMapping
_IIDMap[IID_ISDConfigurationMapping] = ISDConfigurationMapping
_IIDMap[IID_ISDResourceMappingImpl] = ISDResourceMappingImpl
_IIDMap[IID_ISDConfigurationMappingImpl] = ISDConfigurationMappingImpl
_IIDMap[IID_IEnumSDDatabaseMapping] = IEnumSDDatabaseMapping
_IIDMap[IID_ISDDatabaseMapping] = ISDDatabaseMapping
_IIDMap[IID_ISDDatasetMapping] = ISDDatasetMapping
_IIDMap[IID_IEnumSDDatasetMapping] = IEnumSDDatasetMapping
_IIDMap[IID_ISDResourceMapping] = ISDResourceMapping
_IIDMap[IID_ISDMappingImpl] = ISDMappingImpl
_IIDMap[IID_ISDDatabaseMappingImpl] = ISDDatabaseMappingImpl
_IIDMap[IID_ISDDatasetMappingImpl] = ISDDatasetMappingImpl
_IIDMap[IID_IEnumDBGridComponent] = IEnumDBGridComponent
_IIDMap[IID_IDBGridComponent] = IDBGridComponent
_IIDMap[IID_IDBGridEnvironment] = IDBGridEnvironment


# CLSIDs
CLSID_GPBooleanType = uuid.UUID('2c90766b-5023-4672-853c-54d4a658affe')
CLSID_GPEncryptedStringType = uuid.UUID('73c211e5-05ce-4fe9-9e97-e3be55eec797')
CLSID_GPStringType = uuid.UUID('33292dac-a6c4-40e3-89fa-f20fc4ec6eb9')
CLSID_GPDateType = uuid.UUID('753bd649-caec-4594-a2a0-3d11070ab800')
CLSID_GPDoubleType = uuid.UUID('2f418ef4-0fb4-40db-9780-b5ee3926143e')
CLSID_GPLongType = uuid.UUID('b680a910-7c41-4f40-a6e7-14b921265d86')
CLSID_GPVariantType = uuid.UUID('099ddb6d-34d8-476a-b97f-8d41ea6d8602')
CLSID_GPEnvelopeType = uuid.UUID('537ce430-2f16-4e6b-862e-72304f451499')
CLSID_GPSpatialReferenceType = uuid.UUID('b58872ac-834d-443c-b05a-e4cbdea4e3a1')
CLSID_GPCoordinateSystemType = uuid.UUID('7c9bdd1e-eaeb-4468-bc61-5572f460dcbc')
CLSID_GPXYDomainType = uuid.UUID('2ce48d8a-83e0-47b4-a979-636c46db9c4b')
CLSID_GPZDomainType = uuid.UUID('24b10698-dfc8-491d-be10-abe71c05ee71')
CLSID_GPMDomainType = uuid.UUID('f8319703-04d0-4fa7-809d-62367e7aa8de')
CLSID_GPPointType = uuid.UUID('43cf63e5-ced0-4921-90c4-64283ba1e87c')
CLSID_GPPolygonType = uuid.UUID('213e3c7f-1cc9-4988-8f3f-a28740d1c6fb')
CLSID_GPLineType = uuid.UUID('a34980ac-1341-497d-81a7-d2595a342f28')
CLSID_GPValueTableType = uuid.UUID('50e9d14f-745a-490a-bfe3-f79a19aa3e22')
CLSID_GPValueTable = uuid.UUID('98a7a0cd-3282-44cd-90b7-4f39cdb85b84')
CLSID_GPFieldInfoType = uuid.UUID('0602f3b9-e9f6-49d8-9c54-6e13e47f06c3')
CLSID_GPFieldInfo = uuid.UUID('2ece5cd7-8567-44c7-a6a3-c86faf2b5550')
CLSID_GPFieldInfoProperty = uuid.UUID('1d752f2c-4aed-48aa-bcc2-0e6449ecd806')
CLSID_GPFieldMappingType = uuid.UUID('92ad7ed4-25de-45bc-b460-bee20aff7769')
CLSID_GPFieldMapping = uuid.UUID('d9272db9-f03c-4484-8fd2-8a5047b2cbb6')
CLSID_GPFieldMap = uuid.UUID('decf43a7-578a-48ca-bca2-4b11148e2009')
CLSID_GPMultiValueType = uuid.UUID('e798aaa9-f35b-48a1-8380-83165f8b1cb8')
CLSID_GPMultiValueTypeName = uuid.UUID('35de3370-678e-40fb-9b7e-ffaf08224b99')
CLSID_GPMultiValue = uuid.UUID('6a34bc94-06b2-481b-b104-6663c4a344ef')
CLSID_GPVariant = uuid.UUID('5b82ff5e-3115-40e4-bac8-e62105ca2811')
CLSID_GPBoolean = uuid.UUID('66e9d559-5e0e-45b4-ada8-d7c207ba6b49')
CLSID_GPString = uuid.UUID('6a348533-b667-4a05-abb0-0024110d17f0')
CLSID_GPEncryptedString = uuid.UUID('b76cd4db-843b-4723-b174-a0833095f866')
CLSID_GPDate = uuid.UUID('bed6f22b-ad8e-440e-8dd5-b416396b6fd4')
CLSID_GPDouble = uuid.UUID('374c4574-5d6e-4d77-9a67-5489c6bbe932')
CLSID_GPLong = uuid.UUID('30ed7f47-12d9-4c9b-be8b-7a0ae386e574')
CLSID_GPEnvelope = uuid.UUID('01a9676b-e251-4a40-8544-5e5b65e2983c')
CLSID_GPSpatialReference = uuid.UUID('503307ea-4131-456b-9b9a-15989534be4d')
CLSID_GPCoordinateSystem = uuid.UUID('b3e1d7ed-a8d6-44a7-a911-817c361b574c')
CLSID_GPXYDomain = uuid.UUID('9776287b-3d47-4db7-801c-d679d7aa6872')
CLSID_GPZDomain = uuid.UUID('44f4fe86-8870-4375-a9c2-96aebb9de3bc')
CLSID_GPMDomain = uuid.UUID('84259b9e-73c9-462a-beb1-3bb3051e593a')
CLSID_GPPoint = uuid.UUID('a1e93082-babe-4d44-8ce3-4637748edddd')
CLSID_GPPolygon = uuid.UUID('ec1b8f0b-df38-4444-be03-0116e09537df')
CLSID_GPLine = uuid.UUID('435f80e4-6db2-476b-b977-b06bff52f978')
CLSID_GPLayerType = uuid.UUID('2340af90-c51e-48b3-87a5-9d55a60fc30f')
CLSID_GPFeatureLayerType = uuid.UUID('955a71b9-bf2b-47e0-a815-3b6aee75cd31')
CLSID_GPFeatureLayer = uuid.UUID('0e3d6df3-8d43-4a0e-8290-8ab86297ab17')
CLSID_GPLayer = uuid.UUID('6a47591e-aa16-443e-b50d-d8926659a4e1')
CLSID_GPRasterCatalogLayerType = uuid.UUID('30a6d32f-f02e-4107-896c-bda10f67ba35')
CLSID_GPRasterCatalogLayer = uuid.UUID('608f0ff1-dfec-4881-a651-2bc5ce5acd73')
CLSID_GPMosaicLayerType = uuid.UUID('ec9ee977-81d4-4bbf-b6ff-42445ffb6a37')
CLSID_GPMosaicLayer = uuid.UUID('bf2db6ea-4517-44cb-a7c4-adf9f63d4e35')
CLSID_GPTopologyLayerType = uuid.UUID('327a7b2f-2f90-443d-98bd-56670f3f6492')
CLSID_GPTopologyLayer = uuid.UUID('c17d7148-66e8-498d-855b-6c5d352ef69a')
CLSID_GPNetworkDatasetLayerType = uuid.UUID('92694b15-fe2b-4437-9f14-aab8e3d746bc')
CLSID_GPNetworkDatasetLayer = uuid.UUID('c9c873dc-ba4e-47db-ae78-75adb28fa99e')
CLSID_GPRouteMeasureEventPropertiesType = uuid.UUID('5714bb1d-9c50-4ebe-8885-b7e3dbd301fc')
CLSID_GPRouteMeasureEventProperties = uuid.UUID('35527f95-bb45-4bce-a813-ea1369e735bc')
CLSID_GPTinLayerType = uuid.UUID('90eff706-1a9d-448a-80a5-bafa22319101')
CLSID_GPTinLayer = uuid.UUID('1ff73fb6-1d74-4722-a785-dfa1f8327ab5')
CLSID_GPTerrainLayerType = uuid.UUID('cbd7604f-3625-4511-acb0-6912690dfee1')
CLSID_GPTerrainLayer = uuid.UUID('adefcf2a-9695-4422-82fc-906f44fc49f6')
CLSID_GPLasDatasetLayerType = uuid.UUID('3049bd39-6bc1-41fd-bef4-55015df0e402')
CLSID_GPLasDatasetLayer = uuid.UUID('f83945ee-cb37-4ac7-98ec-f25446a90a5d')
CLSID_GPCadastralFabricLayerType = uuid.UUID('cf42933a-35fa-4c4c-92c4-f6699b95d281')
CLSID_GPCadastralFabricLayer = uuid.UUID('6f5d8dfb-a04b-4741-8823-90ef1c56fdf1')
CLSID_GPTableViewType = uuid.UUID('beb0c568-681a-49b7-a104-99cf284501f4')
CLSID_GPTableView = uuid.UUID('cf0816ed-a6a0-4ac1-b8f1-192b3291a853')
CLSID_GPCodedValueDomain = uuid.UUID('a11e0871-6607-4bd4-87d0-35e0189aee59')
CLSID_GPCodedValueDomainProperty = uuid.UUID('6df90b4f-a916-46b4-9c20-fec253a68d90')
CLSID_GPRangeDomain = uuid.UUID('5b2241c0-a61c-11d5-931d-0080c71a3226')
CLSID_GPWorkspaceDomain = uuid.UUID('0238381e-083f-4d29-933d-09b46ecccf73')
CLSID_GPDatasetDomain = uuid.UUID('507cda98-cefd-4bfc-bf14-21a41b773e2d')
CLSID_GPFeatureClassDomain = uuid.UUID('652ec5ff-1772-49ab-b7c7-439143d44d56')
CLSID_GPGdbAnnoDomain = uuid.UUID('07db9832-c818-41d3-86d7-138f84b0a33f')
CLSID_GPCovAnnoDomain = uuid.UUID('b5c0dbcb-9953-4e01-a753-88c7ec07af4f')
CLSID_GPCadAnnoDomain = uuid.UUID('c78f0cd6-a4c2-4eae-a1a9-bc805d135c62')
CLSID_GPCoverageFeatureClassDomain = uuid.UUID('3fe7b260-ce52-11d5-933a-0080c71a3226')
CLSID_GPCoverageDomain = uuid.UUID('56781190-d49b-11d5-9341-0080c71a3226')
CLSID_GPFieldDomain = uuid.UUID('d7ffaff1-5990-4828-8263-aa93c1c0bd6a')
CLSID_GPArcInfoItemDomain = uuid.UUID('01c5ff8c-e01b-4a6d-a965-e7e30249e641')
CLSID_DataElementDomain = uuid.UUID('b6f39d28-c6f6-45b4-a60c-2601a11be4bd')
CLSID_GPFieldInfoDomain = uuid.UUID('2b22284f-a24c-4fbf-813b-09b0627cdc19')
CLSID_GPFileDomain = uuid.UUID('3edc8e3a-ff87-47e1-af34-09bb4cb22da9')
CLSID_GPParameter = uuid.UUID('31d06f12-3f00-47f8-a657-3a2e4ea85fe2')
CLSID_GPFeatureSchema = uuid.UUID('81ea3e6e-11ab-477e-8de6-44698edf5dac')
CLSID_GPTableSchema = uuid.UUID('43b03a71-40c2-48d5-8dcd-817ded2baaeb')
CLSID_GPRasterSchema = uuid.UUID('bffbe9eb-497b-4a2d-a174-86f04aead774')
CLSID_GPContainerSchema = uuid.UUID('313ee06a-e26b-4f72-ad95-9ec065a7c905')
CLSID_GPFunctionName = uuid.UUID('9a332f42-377f-4213-954b-b68cc8b9ce46')
CLSID_GPVariable = uuid.UUID('17944f95-855a-4645-bb4f-b903f19cdeab')
CLSID_GPEnvironment = uuid.UUID('a422768b-9961-47c5-b42b-d6cc69a805c9')
CLSID_GPParseString = uuid.UUID('9d1636d7-383a-45c1-b2e8-29ac59127827')
CLSID_GPUtilities = uuid.UUID('59e42101-2f33-4b6d-8cee-eed9d98d1957')
CLSID_GPCompositeDataType = uuid.UUID('69e51b7d-0e6e-4ef6-8be8-275eb9281e13')
CLSID_GPCompositeDomain = uuid.UUID('f9ae1125-48ef-412d-ab8c-ad917f3d5f8e')
CLSID_EnumBSTR = uuid.UUID('583cadf9-039f-4e85-a7c1-e234193a7151')
CLSID_EnumGPName = uuid.UUID('5b0071fc-8d88-49df-8b40-50e9e190a0f6')
CLSID_EnumGPEnvironment = uuid.UUID('38aa0de8-a116-447a-8e5d-ff145338567a')
CLSID_GPLinearUnitType = uuid.UUID('6fcfe362-9e99-487e-867d-bbe96365af8f')
CLSID_GPLinearUnit = uuid.UUID('842de5c7-80fb-4c41-8621-69dead3cc024')
CLSID_GPArealUnitType = uuid.UUID('9d28e204-b2ae-4576-b06b-91938b49732e')
CLSID_GPArealUnit = uuid.UUID('62c28a96-b84e-49f8-acf5-0b1b5a87ef08')
CLSID_GPRandomNumberGeneratorType = uuid.UUID('9639cdbb-49ce-45f7-bfc4-62103d450810')
CLSID_GPRandomNumberGenerator = uuid.UUID('a5c6674b-bca6-46c8-8205-b5b958eeaeb9')
CLSID_GPSQLExpressionType = uuid.UUID('ba73590f-5f77-47af-aa9d-69a1489f5020')
CLSID_GPSQLExpression = uuid.UUID('f966fb74-ea71-41c7-a848-8d26a71db91a')
CLSID_GPINFOExpressionType = uuid.UUID('b5f37d3b-59a9-45dd-8f9c-c3d8bd226d79')
CLSID_GPINFOExpression = uuid.UUID('32a265a6-78d2-49a5-a65b-572973a7b6a0')
CLSID_GPType = uuid.UUID('69aed191-0644-4985-af1e-f4c4374c4c70')
CLSID_DEType = uuid.UUID('7949875a-9a3f-4fb5-b4f3-388739153422')
CLSID_DEDatasetType = uuid.UUID('f01afa4e-875b-4e31-aebf-184f924724bf')
CLSID_DEGeoDatasetType = uuid.UUID('7f964acd-0fee-4a5c-882d-3591fe2ad780')
CLSID_GPExtentType = uuid.UUID('a523c978-be34-4e9e-9439-71f483f4538f')
CLSID_GPExtent = uuid.UUID('754f9cdc-ee51-412a-97ea-e573077c559f')
CLSID_GPNumericDomain = uuid.UUID('addde180-3922-48f7-87c8-342ffae41161')
CLSID_GPRasterLayerType = uuid.UUID('31c46933-b2cf-4226-a708-b798da44ea51')
CLSID_GPRasterLayer = uuid.UUID('89312279-b7e6-4787-be93-9b25cd94d768')
CLSID_GPRouteDomain = uuid.UUID('193fff2f-c923-430b-879f-50bf65f61703')
CLSID_GPRouteMeasureEventDomain = uuid.UUID('5b7d4cf9-95e0-4990-ad6e-d25ef89baea8')
CLSID_GPQueryTableFieldsDomain = uuid.UUID('9cc43668-43d8-4182-9820-b2d620305bed')
CLSID_GPQueryTableIDsDomain = uuid.UUID('74f6b060-5eb6-4851-8ffd-8b188a845f37')
CLSID_GPVirtualTableDomain = uuid.UUID('be355340-b5a9-4432-b2f4-497a50e05115')
CLSID_GPRouteIDFieldsDomain = uuid.UUID('4a4f70b0-913c-4a82-a33f-e190ffa409ea')
CLSID_GPMeasureFieldsDomain = uuid.UUID('c06e2425-30d9-4c9d-8cd3-7fe243b3afcb')
CLSID_GPFieldChoiceList = uuid.UUID('3e103003-9a7a-4cef-9e86-2f76fc3e58fa')
CLSID_GPArcInfoItemChoiceList = uuid.UUID('90024360-658f-4604-8a7c-1f98b80d94ee')
CLSID_GPGroupLayerType = uuid.UUID('74e68823-fe6c-4234-9e31-8c51bb144078')
CLSID_GPGroupLayer = uuid.UUID('10957268-803e-4cb4-bd9c-c2b660b98bdf')
CLSID_GPCompositeLayerType = uuid.UUID('f2670eef-ba0c-45e1-8ec1-402686c2f6c4')
CLSID_GPCompositeLayer = uuid.UUID('22994b51-c6ba-41ff-abe6-549615441e3f')
CLSID_GPCreateTiles = uuid.UUID('b2c861d1-5957-4bf9-af30-870b4d61a5ff')
CLSID_GPTest = uuid.UUID('0df6991c-db2b-452c-83c2-d10adbaf3a98')
CLSID_DEUtilities = uuid.UUID('f0c2aa3e-b2f1-4208-9843-6a3c70a4680a')
CLSID_GpVirtualPathParser = uuid.UUID('3f619c99-9f7b-42e3-98c8-8d75a9b7ecd6')
CLSID_StandaloneCatalogPathParser = uuid.UUID('12d0e49a-bb69-4310-a490-091d135b1920')
CLSID_AGSCatalogPathParser = uuid.UUID('57169266-9686-4c3a-800b-6a094b4a856f')
CLSID_AGOCatalogPathParser = uuid.UUID('915b1fea-00cd-4891-861d-07a9e3cad406')
CLSID_TaskServicesCatalogPathParser = uuid.UUID('51fe4907-5c24-42d5-acfe-71f1f69492cf')
CLSID_GDSCatalogPathParser = uuid.UUID('da5118fd-1f9f-435d-812a-687152386809')
CLSID_ProcessLayerFactory = uuid.UUID('96ffbdb0-6107-41e8-bae6-1b3f449f430a')
CLSID_ProcessLayer = uuid.UUID('d6e92e16-e656-4119-b8e1-88576f6833e6')
CLSID_GPRecordSetType = uuid.UUID('8e899c4e-b519-4add-ae4f-a16df1e16075')
CLSID_GPRecordSet = uuid.UUID('38db67c2-ebc1-461a-8729-011bb7dbaf0c')
CLSID_GPRasterDataType = uuid.UUID('1e0eae49-76a6-48fc-8e6b-93a58e594c11')
CLSID_GPRasterData = uuid.UUID('a4d40fbd-cfd8-4d8d-94d1-3726c6ff792f')
CLSID_GPFeatureRecordSetLayerType = uuid.UUID('066db363-bc31-468b-bdd1-d5e68e255041')
CLSID_GPFeatureRecordSetLayer = uuid.UUID('1ce6115f-a472-49a1-a228-88f601b3134e')
CLSID_GPRasterDataLayerType = uuid.UUID('7c798b94-a88d-4eeb-84da-76e83c75a6f8')
CLSID_GPRasterDataLayer = uuid.UUID('ff917e83-04f9-4328-a336-2cfd3c12d889')
CLSID_GPDataFileType = uuid.UUID('226beb3f-98f2-4240-a9ce-3ed7f81df106')
CLSID_GPDataFile = uuid.UUID('763035e4-e5c9-4aaf-a60c-65c38addb5ef')
CLSID_GPRasterBuilderType = uuid.UUID('7d879108-039c-4f3a-8457-495aacb0ac63')
CLSID_GPRasterBuilder = uuid.UUID('2fcc620c-1c8c-4a96-a0f9-465b4aa3ea7a')
CLSID_WCSCatalogPathParser = uuid.UUID('e195a699-7c96-4b48-b4c7-63d3b43c3155')
CLSID_GPCellSizeXYType = uuid.UUID('63dc53ee-fe9f-44aa-9802-cd4b99380b5b')
CLSID_GPCellSizeXY = uuid.UUID('4eb9896a-27b8-4cc2-a0c2-55e40d2e928c')
CLSID_GPCalculatorExpressionType = uuid.UUID('958e65e6-79df-4aef-a8e2-ab3aceacae9a')
CLSID_GPCalculatorExpression = uuid.UUID('952c38a0-4cef-488a-8c99-7d19b6f74f91')
CLSID_MdVariable = uuid.UUID('3a65f387-1e32-452e-9201-a3d104868d06')
CLSID_MdParameter = uuid.UUID('9abf7449-72ef-4f12-a547-5eda6161b52d')
CLSID_MdProcess = uuid.UUID('3ada678c-034d-497c-b893-7ed9e40ca9d0')
CLSID_MdModel = uuid.UUID('05bf0268-fc85-4649-9fea-5b61f4a76b46')
CLSID_MdModelEventsHelper = uuid.UUID('be4d1cb5-fb58-4e20-be9f-6adcff30fba7')
CLSID_ToolboxWorkspaceFactory = uuid.UUID('e9231b31-2a34-4729-8de2-12cf39674b1b')
CLSID_ToolboxWorkspaceExtension = uuid.UUID('4f3acff5-e59f-404e-99db-5db5d24115f4')
CLSID_GPToolboxName = uuid.UUID('fdf8deb2-eb91-479d-a410-854ba8ef6349')
CLSID_GPToolName = uuid.UUID('17e32382-8d63-4438-bbaf-d3c3a66918b0')
CLSID_GPToolboxEventsHelper = uuid.UUID('7c4f1b9e-d847-482e-b257-4634cd53d780')
CLSID_GPToolboxEvents2Helper = uuid.UUID('830a2707-accf-41ed-b04f-7947a62544de')
CLSID_DEToolbox = uuid.UUID('fec66b23-e62a-466f-b11b-a8a8f2c2504c')
CLSID_DEToolboxType = uuid.UUID('1096c79a-c554-4e3a-9898-cc9bdc20fe24')
CLSID_DETool = uuid.UUID('8cd1029a-0b56-436b-b4a6-8f9360cd63d9')
CLSID_DEToolType = uuid.UUID('34663eb0-0796-47bb-8845-b56523385a7b')
CLSID_GeoProcessor = uuid.UUID('5374ec4c-1aa2-4829-a811-de624ecec23f')
CLSID_GeoProcessorResult = uuid.UUID('867650fa-bd08-49f9-ba7a-bd4cea917d78')
CLSID_GPEnvironmentManager = uuid.UUID('2aaf2b97-8381-469b-a2a7-fbd19ae43688')
CLSID_GpSpRefObject = uuid.UUID('baaf3eda-4828-4f31-9240-091cc27ad380')
CLSID_GpObjectArray = uuid.UUID('6400d6ec-7e55-429b-8806-1f9a7ca21d96')
CLSID_GpPointObject = uuid.UUID('8e2e062c-db4a-47a3-bef8-571961643923')
CLSID_GpRandomNumberGeneratorObject = uuid.UUID('19e2acfc-ecc3-43ba-8e08-fcbb21ad39b3')
CLSID_GpFieldMappingsObject = uuid.UUID('73d95803-a962-4ce9-baa2-c02b44062ae4')
CLSID_GpFieldMapObject = uuid.UUID('878aa0cf-3bde-42d3-b244-0ceaf6c785ff')
CLSID_GpDescribeField = uuid.UUID('540b9c6b-d49f-4218-b206-67789e19be07')
CLSID_GpValueTableObject = uuid.UUID('028f4a55-e40a-4ef4-bf01-dbd60f8a1d72')
CLSID_GpFieldInfoObject = uuid.UUID('24472030-903c-4c0e-8f4e-2b652d6d8f53')
CLSID_GPNetCDFWorkspace = uuid.UUID('f6971be4-c149-4707-bcc7-5fecfbe82ae8')
CLSID_GPHolder = uuid.UUID('602b0005-0ad2-41f1-a831-c640d8586cad')
CLSID_GpDispatch = uuid.UUID('a80da45d-2ae6-4e4a-a4b8-a33f00eecf4e')
CLSID_GPArc = uuid.UUID('16bfb465-60f9-482c-b24c-c59c83cc7a98')
CLSID_GPLayersAndTablesDomain = uuid.UUID('ece7a40d-c09c-4da1-be5d-1a6d17fe6a82')
CLSID_GPTablesDomain = uuid.UUID('5bda0002-2574-492e-a397-8255fdff2d58')
CLSID_SDMapper = uuid.UUID('7e271825-7fe7-4d7e-96fc-6cc771d8a48c')
CLSID_SDMapping = uuid.UUID('9539a44c-a44c-499f-880f-7605a2c80225')
CLSID_SDDatabaseMapping = uuid.UUID('bfe5ff74-1bbb-47aa-be57-b91b4f1f6ca4')
CLSID_SDDatasetMapping = uuid.UUID('29a975dd-6188-4c50-aab0-90f765e5f4bc')
CLSID_SDResourceMapping = uuid.UUID('adb3ed2a-3e8f-4fd3-b80f-2a3d138bf7a0')
CLSID_SDConfigurationMapping = uuid.UUID('5ead4a7b-7f26-4c4b-b2ea-81d48659c32c')
CLSID_GPServerToolName = uuid.UUID('4fe00b96-9fef-41af-9ed6-9ccd470085d3')
CLSID_GPServerToolboxName = uuid.UUID('8fee5e91-d687-41bf-8599-6c9b363e934f')
CLSID_GPBuildCoverageFeatureClassName = uuid.UUID('07306850-0857-4409-9ae4-640929173d60')
CLSID_GPToolboxWorkspace = uuid.UUID('6d60a11c-6404-4c0f-b115-b599de20ebc0')
CLSID_GPToolbox = uuid.UUID('47dae641-2988-4526-ad52-b3133f05a2e6')
CLSID_GdbToolboxWorkspace = uuid.UUID('654cd9d9-7148-4a07-bc91-67ecf016c36f')
CLSID_GdbToolbox = uuid.UUID('8eb52520-a521-491c-8ea1-b0ceda3f156b')
CLSID_GPServerToolbox = uuid.UUID('41e6d437-87a8-4642-b42c-bc70c9d3c3a4')
CLSID_GPFunctionTool = uuid.UUID('60befa9d-7906-4e2d-afc4-beb08c4aceb9')
CLSID_GPServerTool = uuid.UUID('08b9f1a5-6258-49c9-8a9f-78473ceaa858')
CLSID_GPModelTool = uuid.UUID('03bdbd7d-2000-4061-bba7-1d12149f9d00')
CLSID_GPTask = uuid.UUID('0e5a15da-ab4d-4b88-9b5d-3be646cff874')
CLSID_GPScriptTool = uuid.UUID('73b8dbab-a8f2-4d4d-af84-c10aba43e607')
CLSID_TaskAnalyzer = uuid.UUID('bd7d261f-bb64-46ca-88e4-df80248ca6e0')
CLSID_TaskSolutionBuilder = uuid.UUID('b375f5dc-943e-41c6-9013-b5f2b1ca4900')
CLSID_AnalyzeToolScriptSyntaxError = uuid.UUID('ac23e1c0-dae7-4429-9591-f25822a847f0')
CLSID_AnalyzeToolScriptBrokenSourceError = uuid.UUID('b222de8a-2732-46f6-8ed5-87c79c07589c')
CLSID_AnalyzeToolScriptInvalidSourceError = uuid.UUID('a176cb0b-fab1-4928-9819-089ee4dc2775')
CLSID_AnalyzeToolScriptNonExistingToolboxError = uuid.UUID('41272b4b-26a8-4c35-92a2-7c408961b3db')
CLSID_AnalyzeToolInvalidError = uuid.UUID('e7b83335-e545-4573-b775-ee5339c7936e')
CLSID_AnalyzeToolSDEBasedToolsError = uuid.UUID('553be416-6b72-437e-9077-6a7482930a08')
CLSID_AnalyzeToolSDEBasedToolsWarning = uuid.UUID('f02ef85a-2344-40e3-a532-86cdb7677549')
CLSID_AnalyzeToolNonExistingProjectDataError = uuid.UUID('e31c18c9-3fbc-4c54-aed6-5dee8c717360')
CLSID_AnalyzeToolUnsupportedNonDataStoreProjectDataError = uuid.UUID('2a3ca476-72f8-4459-9e5d-1babe3742b5b')
CLSID_AnalyzeToolPathLengthProjectDataError = uuid.UUID('48d9d016-7651-4e07-94b1-62d2768ec557')
CLSID_AnalyzeToolNonDataStoreProjectDataWarning = uuid.UUID('5affff2b-4658-44c7-b961-3bc0dd73aac5')
CLSID_AnalyzeToolNonSupportedDataStoreProjectDataError = uuid.UUID('b02ecf10-940c-4014-9bfc-dcacc214dad5')
CLSID_AnalyzeToolPythonScriptToolboxImportingCustomScriptError = uuid.UUID('84e488c3-5d15-4cf1-aba1-5a1a475df9c1')
CLSID_AnalyzeToolTaskOutputNeedsMapServiceError = uuid.UUID('35ffda3a-25be-42cf-bf2e-c49e4ffc05a6')
CLSID_AnalyzeToolCannotPublishListVariablesError = uuid.UUID('188b088b-de84-4cb9-9b7f-69f11d4b8315')
CLSID_AnalyzeToolTaskOutputCannotUserMapServiceError = uuid.UUID('2b071fd2-c54c-42ef-9027-ec7f5326d8b0')
CLSID_AnalyzeToolVBExpressionToolsError = uuid.UUID('4ec80e1e-8fc5-4996-8aaa-10b8d7c89658')
CLSID_AnalyzeToolVBExpressionToolsWarning = uuid.UUID('d579c947-bbf2-4f9a-a671-c957b3b1461f')
CLSID_AnalyzeToolUnlicensedRuntimeToolsError = uuid.UUID('2808ed19-6933-4bcf-8363-01228e08b35d')
CLSID_AnalyzeToolUnlicensedServerToolsError = uuid.UUID('beef3015-b6f7-48a3-aff1-6c6cae8b2562')
CLSID_AnalyzeToolNotValidForServerError = uuid.UUID('38afe409-d5be-46e9-8d84-902ad569daf7')
CLSID_AnalyzeToolDLLToolsError = uuid.UUID('0eb99b93-6a2e-44a6-950a-9427369d8862')
CLSID_AnalyzeTaskMissingDescriptionError = uuid.UUID('8d86235b-70b4-46ad-a847-7aa64e6de148')
CLSID_AnalyzeTaskMissingTagsError = uuid.UUID('a934dae1-6efe-4e19-b29e-c647bee37945')
CLSID_AnalyzeToolMissingMetadataSummaryError = uuid.UUID('aae3ef0b-e761-46eb-a7b4-5a4eb9cbb988')
CLSID_AnalyzeToolMissingMetadataParameterDescriptionError = uuid.UUID('03d0cd0f-4e37-494f-82c0-51e1e6d64ef4')
CLSID_GPPythonScriptTool = uuid.UUID('ba4229bf-45d9-417f-8f70-becc3acfce54')
CLSID_GPCustomTool = uuid.UUID('2ed3c2b9-81d1-40f5-8964-39f076c5e274')
CLSID_GPToolExtensionFactoryWrapper = uuid.UUID('4074f5e6-9721-4618-9f1b-f1a46ad6c745')
CLSID_GPToolExtensionWrapper = uuid.UUID('5a0751f6-f0cf-4f50-8cb6-7d369a5b21c1')
CLSID_GPToolboxImplEventsHelper = uuid.UUID('c6fa07f2-7d05-4e30-b7ba-353b1996df7a')
CLSID_GPInternalEnvironment = uuid.UUID('781650a6-4f8f-4d8e-90b8-01b84d742993')
CLSID_ModelToPythonConverter = uuid.UUID('4a50f277-b0a6-42b4-bd1a-fd85e2ebb6b4')
CLSID_ModelToVbscriptConverter = uuid.UUID('f63cd5a0-4a47-4d87-8606-9e03d7456c84')
CLSID_ModelToJscriptConverter = uuid.UUID('d06a6e17-64f5-4086-bbab-68b704b90b36')
CLSID_ModelScriptConverterEngine = uuid.UUID('d0b9f6ea-0c2f-4e90-aa0f-6caf6ec86d26')
CLSID_ModelToPythonConverterEngineCallback = uuid.UUID('ff06f6ca-2bc0-4e95-ab15-157c574d661d')
CLSID_ModelToVbscriptConverterEngineCallback = uuid.UUID('19c87909-241c-441e-92c5-0cc1823efc55')
CLSID_ModelToJscriptConverterEngineCallback = uuid.UUID('fca56583-a815-47fc-b8ff-a002774f2638')
CLSID_GPCalculatorCallback = uuid.UUID('1add7f93-3869-4831-90a4-89019d100a10')
CLSID_GPDataTypeFactory = uuid.UUID('e41cfd44-5741-4f2b-8ace-1a49e146d329')
CLSID_GPESRIDataTypeFactory = uuid.UUID('f36c7ec2-4aa3-4f63-b643-1a25795f3727')
CLSID_GPESRIFunctionFactory = uuid.UUID('12ae9542-b212-4273-aaec-b2838bf2489b')
CLSID_GPESRIConversionFunctionFactory = uuid.UUID('9d630a4d-74d1-416f-8c01-4aa7ddcff0fa')
CLSID_GPESRIAnalysisFunctionFactory = uuid.UUID('3d5470fd-33a4-4d44-ada2-abb2224da89e')
CLSID_GPESRIDataManagementFunctionFactory = uuid.UUID('4ba98dfb-1425-4b7b-b330-dc74606580fa')
CLSID_GPESRIEditingFunctionFactory = uuid.UUID('b4545bad-ba2c-447a-a876-c350f6546faf')
CLSID_GPESRILinearReferencingFunctionFactory = uuid.UUID('21bbee55-5f39-48c9-9930-84cf87e4c10e')
CLSID_GPAdjust = uuid.UUID('be51845e-df23-4727-a610-ed821180c7ae')
CLSID_GPAppend = uuid.UUID('5d951343-a692-4f1f-88ec-8beaac7bafee')
CLSID_GPAreaquery = uuid.UUID('eaff5c11-38ba-40b9-98c3-a1bf6f476e5b')
CLSID_GPBuffer = uuid.UUID('a93e2580-c52d-4c94-aeb4-a9f1635aeefd')
CLSID_GPClip = uuid.UUID('13cd9b43-94f4-47ff-9a03-cea473adae1c')
CLSID_GPDissolve = uuid.UUID('07e6fb8d-1420-4822-a618-2ecfbebe866b')
CLSID_GPEliminate = uuid.UUID('c44aa6e2-5873-4d87-82f1-bba661ee7cdc')
CLSID_GPErase = uuid.UUID('0ef6e54a-7db9-477d-9fd3-701b246bc2b3')
CLSID_GPIdentity = uuid.UUID('7f821cb5-e2fa-4e0d-89be-d92dc191a2a2')
CLSID_GPIntersect = uuid.UUID('d9231115-bdb4-4f8e-a257-b67c64b2bafa')
CLSID_GPReselect = uuid.UUID('0914e847-0ee0-4655-8467-fbf853f0e41d')
CLSID_GPSplit = uuid.UUID('75625721-fbf3-43fc-b262-56897c788724')
CLSID_GPTransform = uuid.UUID('b07dcade-02f0-43b3-aa78-09135152197c')
CLSID_GPUnion = uuid.UUID('bf8f9e21-cf58-4e03-9d05-55042df64170')
CLSID_GPUpdate = uuid.UUID('1e7d06aa-4d69-4658-bad2-b9dcc59bdfce')
CLSID_GPSymDiff = uuid.UUID('3a08a5e9-760d-4044-a4de-8017157a22f7')
CLSID_GPBuildCover = uuid.UUID('e2d09476-aaf3-46bb-b9e4-167e6cf163c9')
CLSID_GPTabulate = uuid.UUID('d21f5c3a-8149-47bc-a724-1c700079d701')
CLSID_GPPolygonNeighbor = uuid.UUID('cb1b3b73-c66d-41ac-858a-06266ba8633b')
CLSID_GPImportE00 = uuid.UUID('8abb54dd-9fd6-4c50-8454-e5430b6d05bf')
CLSID_GPDeleteRows = uuid.UUID('8dd34583-fea7-4f09-bdef-8f1fd3e47ce5')
CLSID_GPDeleteFeatures = uuid.UUID('1b507576-a3d1-4f2e-b6a3-2c46ba2af4c3')
CLSID_GPCopyRows = uuid.UUID('9627c727-bdc4-469e-8e34-99439e76955c')
CLSID_GPCopyFeatures = uuid.UUID('e1c17988-77ca-4108-b9df-7227d0b60255')
CLSID_GPAddField = uuid.UUID('fc5f2232-e45f-4daf-adb2-8c547ccf3420')
CLSID_GPDropField = uuid.UUID('a83ac80a-bdfa-4f87-a926-175750a472a3')
CLSID_GPCalculate = uuid.UUID('e7f00040-43df-47ef-a854-278f0a1dc711')
CLSID_GPDelete = uuid.UUID('8321edd9-727f-44e1-907d-4e9521ee05fb')
CLSID_GPRename = uuid.UUID('8dc95413-4b23-4739-8e92-f910bee26c3b')
CLSID_GPCreateLayer = uuid.UUID('8ae26a4c-cb82-46c0-9266-a657a31ba0f0')
CLSID_GPAddJoin = uuid.UUID('1445de8a-f00c-467e-a72c-06a543bfd244')
CLSID_GPDropJoin = uuid.UUID('435829c8-80ce-4d58-8048-9ad368954edb')
CLSID_GPJoinItem = uuid.UUID('caef4b60-36bd-46b6-bae6-ce74434d37d4')
CLSID_GPMigrateStorage = uuid.UUID('12d0d421-9477-40bd-af3a-7c23e513386d')
CLSID_GPRemoveWorkspaceCache = uuid.UUID('1920af4d-e820-4f60-a716-8304fdf6df18')
CLSID_GPNear = uuid.UUID('6d82b238-6f51-4386-854c-53d57d2d74d7')
CLSID_GPNearTable = uuid.UUID('a8f56933-104d-40b7-9400-3131c844e0ed')
CLSID_GPPointDistance = uuid.UUID('5cf90534-93bd-466d-83a3-a3dd1d7b9162')
CLSID_GPCreateCentroids = uuid.UUID('72ca7cff-d845-453a-b1ae-b8f1f9833b13')
CLSID_GPCreatePersonalGDB = uuid.UUID('9b2f3946-812f-4d69-bfce-a64541c357ea')
CLSID_GPCreateFileGDB = uuid.UUID('7588753f-9c4b-40f3-81ab-e53f319894ee')
CLSID_GPCreateArcInfoWorkspace = uuid.UUID('95afa886-1f4a-4040-8fcd-76f6c6f36b79')
CLSID_GPCreateFolder = uuid.UUID('7d43065a-d4a2-4744-8ceb-0ae9b0ec3ea2')
CLSID_GPCreateFeatureDataset = uuid.UUID('8a0cbd7b-84ae-48bd-a099-1c75c5d52339')
CLSID_GPCreateTable = uuid.UUID('b6e479e4-c855-49dc-8fb7-16f5c217143a')
CLSID_GPCreateFeatureClass = uuid.UUID('c6ac0764-8c21-41b3-bf4a-bd3d77290e95')
CLSID_GPCreateUnRegisteredTable = uuid.UUID('d0471e3a-da9e-4719-a3e5-2d09f11d1310')
CLSID_GPCreateUnRegisteredFeatureClass = uuid.UUID('bfcb2043-95c8-4bfd-956b-1ca1c830ce63')
CLSID_GPAddRasterField = uuid.UUID('fa30721b-0ed9-4821-91a3-ca244f362dc9')
CLSID_GPAddXMLField = uuid.UUID('787aaa19-0962-4ad6-978d-3329653e8f16')
CLSID_GPAssignFieldAsSubtypeField = uuid.UUID('31d7ba3f-24a1-46ef-9d96-dd23e7948cb1')
CLSID_GPAddSubtype = uuid.UUID('28ddaba4-7e82-4aca-8381-84a468fdab95')
CLSID_GPRemoveSubtype = uuid.UUID('d15a90b7-a6e8-405f-bc76-e48553069c1d')
CLSID_GPCreateRelationshipClass = uuid.UUID('16c97389-6da8-4ca1-b7c5-eb74d87a3d74')
CLSID_GPCreateRelationshipClassFromTable = uuid.UUID('562ac822-b78a-4cfd-a2d9-7cbd1a368ea9')
CLSID_GPAnalyze = uuid.UUID('ea53553d-c6ce-4d59-b21c-bdbcd8c29ff7')
CLSID_GPAnalyzeDatasets = uuid.UUID('286ba055-6d1a-4327-9670-0b6657567ac9')
CLSID_GPRebuildIndexes = uuid.UUID('7122220a-c314-40af-9fb7-687505d2c5c8')
CLSID_GPChangePrivileges = uuid.UUID('7d3a9b5c-9b32-4da2-a0ac-6c95e9f24d15')
CLSID_GPCreateVersionedView = uuid.UUID('d0991b81-2cd4-495b-857b-444ea5a526b9')
CLSID_GPDisableEditorTracking = uuid.UUID('3a1d2848-571a-4548-a8ec-c872fc9bc038')
CLSID_GPEnableEditorTracking = uuid.UUID('decee1ed-8956-47db-a38c-7c9c3417fb88')
CLSID_GPCreateVersion = uuid.UUID('dc3af540-a4ef-44b7-b7ea-9d0ff327c44d')
CLSID_GPDeleteVersion = uuid.UUID('367868eb-d687-4028-8700-42558093d3ae')
CLSID_GPReconcileVersion = uuid.UUID('3a3e11b0-251b-410b-b545-a4fa88af5cda')
CLSID_GPReconcileVersions = uuid.UUID('a0e1d552-4bbb-415b-aa76-c873d4a23689')
CLSID_GPRegisterAsVersioned = uuid.UUID('8a400dde-cf09-4324-a6fd-746928f452ee')
CLSID_GPUnregisterAsVersioned = uuid.UUID('23199319-7643-4e8c-a5d5-9f754eb24505')
CLSID_GPAlterVersion = uuid.UUID('37716233-d0e5-4c72-b2ee-b6ee49a28d23')
CLSID_GPCreateCADXData = uuid.UUID('fb0811f7-1adf-4dfa-ad22-e38e1612dade')
CLSID_GPExportCAD = uuid.UUID('cdadee1c-62b2-4a13-9e9b-d81f37d03187')
CLSID_GPImportCAD = uuid.UUID('98105431-2b09-434b-bc12-d9a4c43b4b09')
CLSID_GPCadToGeodatabase = uuid.UUID('0649cc5f-661b-4a8b-a285-2e8279b04e8b')
CLSID_GPAssignCADAlias = uuid.UUID('d22c3c87-c23d-4b6d-81a9-06ed9d329021')
CLSID_GPAddCADFields = uuid.UUID('792178f3-f4ce-45d1-bf97-58640b7de59a')
CLSID_GPCreateIndex = uuid.UUID('7bc5463b-faac-4809-81fc-21c440d67d61')
CLSID_GPDeleteIndex = uuid.UUID('a458c143-8cce-46c5-a12a-2d66c4922b56')
CLSID_GPRebuildAttributeIndexes = uuid.UUID('88d2b149-2620-4885-ad37-811147f4b9a8')
CLSID_GPCreateSpatialIndex = uuid.UUID('203e1dc9-13c6-42e2-895e-8ffd000903e6')
CLSID_GPDropSpatialIndex = uuid.UUID('32a2238c-17af-47f2-8da1-aad3672ca4fe')
CLSID_GPSelect = uuid.UUID('cb1a64b2-c325-47c6-8435-b363896fb9cf')
CLSID_GPTableSelect = uuid.UUID('89ce9fe7-7102-4d7e-b4c9-4dc970169170')
CLSID_GPCreateEnvelopes = uuid.UUID('3d0995e9-298a-4ec9-86a0-3fc557c15fa9')
CLSID_GPCreatePoints = uuid.UUID('dd308a9d-8db7-460f-b670-4b03c7e56b03')
CLSID_GPCreateLines = uuid.UUID('39511be5-5ca2-43c7-9baf-c2e7cea55a33')
CLSID_GPCreateAreas = uuid.UUID('6df2584b-fd52-4720-a788-0b53aa2311eb')
CLSID_GPExtendLine = uuid.UUID('482613dd-2f20-403a-8145-28f3fcf19383')
CLSID_GPPolyLine = uuid.UUID('e6f5b8e2-dab4-44c5-9c9a-76c9a8489c70')
CLSID_GPSplitLines = uuid.UUID('1e90635e-1e5d-473e-a46d-e5082a313177')
CLSID_GPPivotTable = uuid.UUID('97588f57-565b-4b79-b56e-4a7e4fdb8dcc')
CLSID_GPCreateTableView = uuid.UUID('9e53fa4d-9f2c-4936-81f5-01a0bdc65b74')
CLSID_GPSetSubtypeField = uuid.UUID('13ba61f5-e0a3-41ed-874e-f7fbbe115c88')
CLSID_GPSetDefaultSubtype = uuid.UUID('98a8e017-88b5-4d35-a0f9-0f6309bcbeb3')
CLSID_GPLineSimplify = uuid.UUID('c5ea266b-ddee-42c9-9bbc-85f5b35c8331')
CLSID_GPCreateDomain = uuid.UUID('129c0479-ca56-461c-a1cd-86cd501fb056')
CLSID_GPDeleteDomain = uuid.UUID('3ee3c673-316f-4b1d-a30d-ff379993d658')
CLSID_GPAddCodedValue = uuid.UUID('183cc6ae-a684-4fa9-a1f5-8b708829f3ca')
CLSID_GPDeleteCodedValue = uuid.UUID('89fd5315-2f4c-4768-bab5-c2c4c97ee277')
CLSID_GPSetValueForRangeDomain = uuid.UUID('e2bee910-8b0d-4e4b-8394-a57ccc529aaa')
CLSID_GPAssignDomainToField = uuid.UUID('29a74ed1-d8f4-4a08-839f-36cb91633a58')
CLSID_GPRemoveDomainFromField = uuid.UUID('29c569a3-81c5-49d9-8608-cc2920b41fdf')
CLSID_GPDomainFromTable = uuid.UUID('a78e7c2e-bdb2-40c1-b390-cfb0fe9a81aa')
CLSID_GPTableFromDomain = uuid.UUID('ed02e1f6-bdf6-4642-917b-47d5f8858672')
CLSID_GPSortCodedValueDomain = uuid.UUID('26fa7827-f61c-4b18-b146-b6af3e7be288')
CLSID_GPTruncateTable = uuid.UUID('92f8b254-04d5-49a8-9629-d9da8cab06d7')
CLSID_GPExplode = uuid.UUID('9cd757b3-ebc1-4bb9-bfd1-d13384d8a7ee')
CLSID_GPVegematic = uuid.UUID('32dd6933-9acf-4427-bf20-9ff79cc1665d')
CLSID_GPFindDupFeatures = uuid.UUID('e93104d1-ca2b-48db-b983-54f8bfd4156d')
CLSID_GPDeleteDupFeatures = uuid.UUID('09f0f606-9fc9-4e80-b3e2-ea6c8df85ef9')
CLSID_GPTrimLine = uuid.UUID('e46c8d34-7df6-432f-8ecf-8f245c1e4353')
CLSID_GPWeedFeatures = uuid.UUID('04583914-7d28-4422-af64-4e044fca56e1')
CLSID_GPDensifyFeatures = uuid.UUID('e9b8be18-a615-46e2-bf38-4708d8fcc0a7')
CLSID_GPSnapFeatures = uuid.UUID('fe353998-5466-4e07-8281-9f9eae917056')
CLSID_GPEraseClipFeatures = uuid.UUID('33219aed-f4eb-4979-8385-4f53222887c0')
CLSID_GPFlipFeatures = uuid.UUID('b5a446d8-15ba-46d2-832a-a2182b743792')
CLSID_GPUnsplitLineFeatures = uuid.UUID('69e99367-dead-457a-89a0-a2c4b9144960')
CLSID_GPSortFeatures = uuid.UUID('ec85f413-65b3-4bd7-9d33-63f7d3f0b1ad')
CLSID_GPSplitLineAtPointFeatures = uuid.UUID('e8177a94-347c-48f5-ba50-08b619391cfb')
CLSID_GPSelectData = uuid.UUID('7fa804b9-3c80-4e5f-96cb-1dd7751f2a36')
CLSID_GPCompress = uuid.UUID('1cd18f6c-8842-4cd3-b81b-a38b797397eb')
CLSID_GPCompact = uuid.UUID('1e458cd9-54e9-4202-9c45-14fc346dc818')
CLSID_GPCheckOut = uuid.UUID('f256d8e6-d90a-4891-8bb2-468a272582f9')
CLSID_GPCheckIn = uuid.UUID('7cf8103a-e40a-48a9-b644-e5690940da1f')
CLSID_GPCreateArcSDEConnectionFile = uuid.UUID('6cbbbec3-6e98-4aa0-b28a-319df2aa9aee')
CLSID_GPCreateDatabaseConnection = uuid.UUID('e28ae3b6-4896-4364-b761-dd5d71417173')
CLSID_GPCreateDatabaseView = uuid.UUID('d9362bc8-99b5-496a-82b4-ffc0656748f3')
CLSID_GPZScoreRendering = uuid.UUID('14c31413-f8bd-4f62-a7c0-8ac8a2f94f1c')
CLSID_GPCountRendering = uuid.UUID('93b6af94-db0a-40ec-81db-4a33a0be0cdf')
CLSID_GPPackageLayer = uuid.UUID('b8ac2396-9d7d-40b4-b6ec-b5efaebd4813')
CLSID_GPPackageMap = uuid.UUID('672c28fe-8deb-4aad-b464-9c0114b4f141')
CLSID_GPPackageToolbox = uuid.UUID('2e9828d3-eb19-459e-abd7-4af09cd72b7c')
CLSID_GPPackageMapTile = uuid.UUID('b35029e8-d8d6-4141-864a-d5780b88ea2c')
CLSID_GPPublishPackage = uuid.UUID('ab3e4e29-0e87-4f98-a498-72268be3a27b')
CLSID_GPStageService = uuid.UUID('3637b5dc-ee75-4282-9d66-aca61dba6014')
CLSID_GPExtractPackage = uuid.UUID('33f37088-58cd-4ae5-a94b-984a2dd15ba0')
CLSID_GPUploadServiceDefinition = uuid.UUID('69f1cd81-6737-4fc7-bc26-5b0b1edff8f5')
CLSID_GPSignInToPortal = uuid.UUID('0175428b-3ee1-4888-b3f5-7d19ce40e31e')
CLSID_GPSignOutFromPortal = uuid.UUID('9dbfb7ac-91df-4dad-8903-bab7b65618c4')
CLSID_GPPublishServiceDefinition = uuid.UUID('a471292c-b2e0-412a-89d6-669a1f1f891c')
CLSID_GPValidateServerDataStore = uuid.UUID('6983dfa0-c666-47de-a9ce-a1e8a07cb9c0')
CLSID_GPGetDatabaseConnectionString = uuid.UUID('0bb75463-44d3-428b-8dfd-34b8bbfe5a8b')
CLSID_GPGetCacheInfo = uuid.UUID('bee6f4db-b4d3-4809-aae7-043aa0c5ce06')
CLSID_GPDownloadPortalItemData = uuid.UUID('c2891bc4-034a-4d24-8496-d19f65b89652')
CLSID_GPAnalyzeFeaturesForPortal = uuid.UUID('d9c2fae2-b7ef-470e-8f51-2b280414c12e')
CLSID_GPGenerateFeaturesForPortal = uuid.UUID('ff1b0135-d870-487a-8eea-a3e8e0661f47')
CLSID_GPStageFeatureServiceFromFile = uuid.UUID('fea56751-beee-46ed-b8e0-acf82fba7408')
CLSID_GPPublishPortalService = uuid.UUID('550406f7-2cad-4780-a959-68a71a9cefaf')
CLSID_GPConsolidateLayer = uuid.UUID('5bc9e805-f81d-47ac-91ea-8ffb52586c70')
CLSID_GPConsolidateMap = uuid.UUID('3e72deed-987a-4b24-b7f2-1b8257bd8c18')
CLSID_GPConsolidateToolbox = uuid.UUID('48681a73-eddc-4e88-b662-8561ffac8331')
CLSID_GPConsolidateResult = uuid.UUID('68e2a670-198b-4071-8edc-85e49b10dabe')
CLSID_GPPackageResult = uuid.UUID('f2289d8f-22d2-459b-a4cc-ef3bba9ae160')
CLSID_GPConsolidateLocator = uuid.UUID('e856dc84-f834-4018-a5a2-e4d3b7a15fb9')
CLSID_GPPackageLocator = uuid.UUID('bbdce4a6-fc46-4ed5-8ffe-ea4bf371ca07')
CLSID_GPCreateEnterpriseGeodatabase = uuid.UUID('f6614324-fd19-4c50-81f6-20069f15341b')
CLSID_GPEnableEnterpriseGeodatabase = uuid.UUID('c2d6f98b-3828-4c4c-a10e-cad4f6c60ffc')
CLSID_GPCreateSpatialType = uuid.UUID('3c815f4e-468e-4cf5-9cff-7e6f66140bbb')
CLSID_GPCreateDatabaseUser = uuid.UUID('debe1bf6-d33d-4b90-a536-5ba86b2c4a40')
CLSID_GPAddIncrementingIDField = uuid.UUID('a908085b-9d49-4541-932a-a86b9103e6ca')
CLSID_GPCreateRole = uuid.UUID('457d9702-7512-45ec-a1d9-665321dfe9e0')
CLSID_GPRecoverFileGDB = uuid.UUID('42f8e769-6f67-471b-b63a-37a9f5e3040e')
CLSID_GPUpgradeSpatialReference = uuid.UUID('da02da55-cd38-4cf8-894c-fddb67aceaf8')
CLSID_GPUpgradeDataset = uuid.UUID('5b188a0a-22a2-455b-9d7d-17afbe7e5787')
CLSID_GPUpgradeGDB = uuid.UUID('5b188a0a-22a2-455b-9d7d-17afbe7e5dbb')
CLSID_GPEnableAttachments = uuid.UUID('c8f28968-5d4c-475f-a317-057cf364145a')
CLSID_GPDisableAttachments = uuid.UUID('7897f575-081c-4826-80b2-d02cbb0bae73')
CLSID_GPAddAttachments = uuid.UUID('2b57adb4-b9b7-4a88-8220-530bb36c9a8e')
CLSID_GPRemoveAttachments = uuid.UUID('955b8de8-3a13-475e-8821-bc2e7b1218dd')
CLSID_GPGenerateAttachmentMatchTable = uuid.UUID('6a93bd93-70c8-4d0f-8124-540cd8fab509')
CLSID_GPEnableArchiving = uuid.UUID('04c0781a-31db-4aa0-8e8b-ae8befa099d2')
CLSID_GPDisableArchiving = uuid.UUID('d11e0f7e-98d8-42f2-94cf-1e6fc6b02652')
CLSID_GPCreateGeometricNetwork = uuid.UUID('86fa9b00-f59f-4837-b074-cc764a9e8773')
CLSID_GPAddEdgeJunctionConnectivityRuleToGeometricNetwork = uuid.UUID('207bf079-6361-4d84-96f7-df0920a34dd5')
CLSID_GPAddEdgeEdgeConnectivityRuleToGeometricNetwork = uuid.UUID('bc51a5ba-ce05-4375-943b-1e41b7f933f9')
CLSID_GPRemoveConnectivityRuleFromGeometricNetwork = uuid.UUID('d5fe1d06-0d29-4680-8b17-2c57aea84dec')
CLSID_GPRemoveEmptyFeatureClassFromGeometricNetwork = uuid.UUID('96ca5080-3543-49fe-8774-48a5f0365cdb')
CLSID_GPTraceGeometricNetwork = uuid.UUID('20086378-8d25-426b-bfa8-234e0de0c969')
CLSID_GPSetFlowDirection = uuid.UUID('bab64f7e-edbb-4422-9817-1e95a2bc7eec')
CLSID_GPExportTopologyErrors = uuid.UUID('be9022c0-1191-4e0f-9257-4350b5560eb0')
CLSID_GPTransposeFields = uuid.UUID('d633ab8e-67ab-4e19-9244-7646614b7064')
CLSID_GPCalculateEndTime = uuid.UUID('9a6973cc-826f-40ca-9d7f-8b2f84421b0f')
CLSID_GPConvertTimeField = uuid.UUID('2a692dd1-a4ce-4877-8d73-0f20d569fc42')
CLSID_GPConvertTimeZone = uuid.UUID('d5f41172-226d-4d8d-8f7d-b7e64120feea')
CLSID_GPCreateReplicaFromServer = uuid.UUID('830a3273-b77a-485a-b076-d89096f1cb96')
CLSID_GPCreateReplica = uuid.UUID('cd6f7457-d7e9-43db-844e-18767f3b0415')
CLSID_GPSynchronize = uuid.UUID('03bf0ac2-abff-41a4-a89a-408587407928')
CLSID_GPExportDataChangeMessage = uuid.UUID('233b426c-9f4a-48f5-9673-79872d4af8da')
CLSID_GPExportAcknowledgementMessage = uuid.UUID('f15eb6ba-6147-4327-b3da-39e3c66ee95b')
CLSID_GPImportMessage = uuid.UUID('ceabb211-dbf1-4e67-a255-7e6e4e8b8c72')
CLSID_GPExportReplicaSchema = uuid.UUID('e0b061d1-1042-4099-baf8-0a499f4b5830')
CLSID_GPReExportUnacknowledgedMessages = uuid.UUID('7ce2fb18-d1da-4989-9835-61e35975b6b6')
CLSID_GPCompareReplicaSchema = uuid.UUID('5aad85ef-f361-4382-ba1f-75879ba71c47')
CLSID_GPImportReplicaSchema = uuid.UUID('d3afebdf-b6ff-447d-b84c-0b3595d1c547')
CLSID_GPCreateReplicaLayer = uuid.UUID('63a262a9-298b-4772-9034-fd1c89381c14')
CLSID_GPAdd_Global_IDs = uuid.UUID('525fccb2-d77a-4fa7-a02a-c92daeecb759')
CLSID_GPWFSExtract = uuid.UUID('6ac3a91d-9908-43a7-909e-ccad81cd77f4')
CLSID_GPLineSmooth = uuid.UUID('7811a298-e142-456e-98d3-84b60468a8f1')
CLSID_GPSaveLayer = uuid.UUID('d3c5bf2d-d9cf-40c7-95ef-fa17b3913c84')
CLSID_GPAddXY = uuid.UUID('a31a7acb-f4f2-4ac1-82d7-d5e1a6e7ce05')
CLSID_GPCopy = uuid.UUID('38f232b7-3898-4aa3-9cee-e44fae954d10')
CLSID_GPFrequency = uuid.UUID('f649dbe4-b18a-4c36-953b-5d7bfcc6809a')
CLSID_GPStatistics = uuid.UUID('c93078b4-f4c4-48db-982c-ad03b8ae0704')
CLSID_GPProjectDefine = uuid.UUID('40a3e560-d5f0-4ffd-a6aa-18c8c1e1855b')
CLSID_GPProject = uuid.UUID('a18f58c9-ac7d-4564-bd32-a5b6917c0c6d')
CLSID_GPSelectLayerAttribute = uuid.UUID('fb028483-3dd4-47af-a693-fe1f6e26b179')
CLSID_GPSelectLayerLocation = uuid.UUID('1f4cb83d-2153-4ae1-a5ae-e20c3c9c1dfd')
CLSID_GPMakeQueryLayer = uuid.UUID('22e1e7a2-ca4a-44c6-8cf1-55ca10960f21')
CLSID_GPCalculateDefaultGridIndex = uuid.UUID('87284444-fdaf-4c5c-ac15-ae16696642b8')
CLSID_GPCalculateDefaultClusterTolerance = uuid.UUID('7f852f61-c7ff-498d-84ac-15477d399358')
CLSID_GPCreateTopology = uuid.UUID('0d9254c8-1be2-40b6-bf7c-e3e1955861e5')
CLSID_GPAddFeatureClassToTopology = uuid.UUID('db76cb43-8ede-479f-b0dd-6d95f57e5b4d')
CLSID_GPRemoveFeatureClassFromTopology = uuid.UUID('7e28f8af-d7e4-42cf-9282-581a8bcfb615')
CLSID_GPAddRuleToTopology = uuid.UUID('71007c9c-a389-4e55-a6a3-cf91a9024eae')
CLSID_GPRemoveRuleFromTopology = uuid.UUID('bff15392-d601-4c15-b9bf-ac90277013f6')
CLSID_GPValidateTopology = uuid.UUID('b468c991-2bbc-47fd-98dd-c8cd121191cb')
CLSID_GPSetClusterTolerance = uuid.UUID('00c8095c-815f-41ac-93d7-11f3652d24ef')
CLSID_GPGetCount = uuid.UUID('e2132d21-5f8e-41e9-a123-3d9f26184f8f')
CLSID_GPExportDeltaDatabase = uuid.UUID('fbd41708-e86d-4a14-b47a-b790565427a1')
CLSID_GPCheckInDeltaDatabase = uuid.UUID('7538e01d-2c05-4cc5-8b71-fbb30b8c0ee2')
CLSID_GPIntegrate = uuid.UUID('e8b4bf65-a984-4e7d-ad63-07038824c2cb')
CLSID_GPCheckGeometries = uuid.UUID('6b4d2663-7bab-494c-b369-cb4035b1ca24')
CLSID_GPRepairGeometries = uuid.UUID('fe9b8f28-6ce7-4bf5-9771-e014ce6796d0')
CLSID_GPCalculateValue = uuid.UUID('c9f4c2d5-ee6b-41fd-92b2-0ce4ab6c5d39')
CLSID_GPMergeBranch = uuid.UUID('2057b23b-6707-4ea8-bdd2-d31b7e68c70c')
CLSID_GPMakeXYEventLayer = uuid.UUID('938f979e-40d4-4d47-ba8b-9e0a5b21ab97')
CLSID_GPMakeRouteEventLayer = uuid.UUID('ead9f8e2-891a-4b7a-aeef-85d44e8af376')
CLSID_GPDissolveEvents = uuid.UUID('bd705bc0-dd85-4459-8115-a67c057df35b')
CLSID_GPOverlayEvents = uuid.UUID('b59debfa-98e4-4b78-9a1b-f411780045cd')
CLSID_GPTransformRouteMeasureEvents = uuid.UUID('b5b5dc5e-dd4c-41a8-b21d-4756e6785e0d')
CLSID_GPLocateFeaturesAlongRoutes = uuid.UUID('24f1b83d-641a-4d84-b45d-e189bec4dd7a')
CLSID_GPCreateRoutes = uuid.UUID('42b6ca12-7fd0-47ad-8813-f2cda7989edc')
CLSID_GPCalibrateRoutes = uuid.UUID('6cf2af63-f0d4-4d8d-8de9-8aa6e25b3c38')
CLSID_GPMakeQueryTable = uuid.UUID('67332b86-c0d5-444a-81c0-9cfdea0238aa')
CLSID_GPFeatureGeocompare = uuid.UUID('01587841-82df-4340-8730-72a5ce13e759')
CLSID_GPRasterGeocompare = uuid.UUID('153a026f-23e6-4e75-b3c3-7647aa52e955')
CLSID_GPTableGeocompare = uuid.UUID('d7a64b1f-92a6-4dc2-bed3-eedc60767c78')
CLSID_GPFileGeocompare = uuid.UUID('ad410048-57c0-481c-9e82-3399bf6c5ca1')
CLSID_GPTinGeocompare = uuid.UUID('47081960-1785-4821-b6cc-355604f9e304')
CLSID_GPAggregatePolygons = uuid.UUID('354fe8b2-c6cb-4961-882e-22cdbd1252fe')
CLSID_GPCollapseDualLines = uuid.UUID('92a39012-41d1-4b57-a6a0-d9dbc0b270c5')
CLSID_GPSimplifyBuilding = uuid.UUID('397a79ca-78b4-47b5-a9f4-ca390653e957')
CLSID_GPSimplifyPolygon = uuid.UUID('891a155c-4cc9-4828-b6ad-f3feb093257f')
CLSID_GPSmoothPolygon = uuid.UUID('c9e6d59b-25c9-4c7b-8607-10a407749932')
CLSID_GPAggregatePoints = uuid.UUID('e2903ca4-b7d1-4a99-b532-754844269e86')
CLSID_GPUpdateAnno = uuid.UUID('0e9bee15-5615-4e19-a35e-fb1118e8a23b')
CLSID_GPAppendAnno = uuid.UUID('8855db16-39fe-472c-9203-5df7375a9ed5')
CLSID_GPImportCovAnno = uuid.UUID('6afaf2bc-6607-4b70-93c1-9c4655edf1ee')
CLSID_GPImportCadAnno = uuid.UUID('ecf945f8-3045-4303-939b-760ea9d214fe')
CLSID_GPCreateRasterDataset = uuid.UUID('6a5a85d7-4119-4ef7-b970-a437fe02d4ee')
CLSID_GPCopyRaster = uuid.UUID('eddef8d5-ff4e-4219-81ad-e70d780badcc')
CLSID_GPContourRasterBarrier = uuid.UUID('9ba82988-5f0e-4e3a-9de0-7937537d4b4a')
CLSID_GPTiledLabelsToAnnotation = uuid.UUID('123ed12a-7274-1001-ab2f-800102be1fe2')
CLSID_GPMapServerCacheTilingSchemeToPolygons = uuid.UUID('132633fe-5656-8675-ef30-00155fabb140')
CLSID_GPContourAnnotation = uuid.UUID('fe44a01e-5490-eed2-bb09-76fe4a0f0101')
CLSID_GPMosaic = uuid.UUID('44c8b0d4-34e1-45bd-b2c2-e10098c62b98')
CLSID_GPCreateRandomPoints = uuid.UUID('af5cf362-f5d2-4639-a48e-21516d63657d')
CLSID_GPConvexHull = uuid.UUID('41c06efe-769c-4f2f-b542-fc75510f8caa')
CLSID_GPEliminatePolygonPart = uuid.UUID('47e10ccd-ac23-4969-a712-c6d933eef2d4')
CLSID_GPRepairRasterCatalogPaths = uuid.UUID('91257bde-f712-4cf3-848f-05c92b43450c')
CLSID_GPExportRasterCatalogPaths = uuid.UUID('c94f48fa-7898-40a0-88e4-b1cc76a6905f')
CLSID_GPCreateRandomRaster = uuid.UUID('c7868733-8245-4de3-bdea-dee6f9058b83')
CLSID_GPPolygon2Raster = uuid.UUID('67eef564-b361-4f05-a7a4-b9319963366f')
CLSID_GPPolyline2Raster = uuid.UUID('7013aa42-a929-415d-9c54-f783c39213d3')
CLSID_GPPoint2Raster = uuid.UUID('69d19000-ec86-4baa-b625-a5d4fc437d94')
CLSID_GPCreateRasterCatalog = uuid.UUID('5a45c46a-37aa-4215-b992-487c6315269e')
CLSID_GPCreateMosaicDataset = uuid.UUID('80d92f50-f7c5-4d9b-b7bb-7ec41d9da6cb')
CLSID_GPExportMosaicDatasetPaths = uuid.UUID('59fd56bd-8eb0-4689-99c5-6f80532fdfdd')
CLSID_GPRepairMosaicDatasetPaths = uuid.UUID('70d43539-5efd-4f0d-a19d-2bc9c40558e4')
CLSID_GPMergeMosaicDatasetItems = uuid.UUID('16c050f6-1a40-473b-9640-ee211973c2bf')
CLSID_GPSplitMosaicDatasetItems = uuid.UUID('73c31a92-0105-4d9d-a6b3-e3bc6250cc64')
CLSID_GPAlterMosaicDatasetSchema = uuid.UUID('ebfb23f4-cd2e-472c-8b78-a879dd54b7f0')
CLSID_GPCreateReferencedMosaicDataset = uuid.UUID('4335bb8d-7918-4a03-a73e-f4ed2dbe63a4')
CLSID_GPCalculateCellSizeRanges = uuid.UUID('df74199c-8f53-4b52-aa04-706f2a4447e0')
CLSID_GPSynchronizeMosaicDataset = uuid.UUID('ef968e8e-3b48-4e0e-8b32-6592710a8a1f')
CLSID_GPAnalyzeMosaicDataset = uuid.UUID('3adfa07d-cef6-4688-8c26-1fe8b0cbf613')
CLSID_GPRemoveMosaicCatalogItems = uuid.UUID('eaa14ae2-9aab-4dd6-9933-b256edc95ba1')
CLSID_GPBuildFootprints = uuid.UUID('0c70363d-874a-4141-83d5-b48cb677e174')
CLSID_GPBuildBoundary = uuid.UUID('e4f202e0-d4ab-4d67-9dc3-daab022c0af7')
CLSID_GPComputeDirtyArea = uuid.UUID('508a6ee7-065a-4b17-89e4-3e950f941d32')
CLSID_GPBuildSeamlines = uuid.UUID('1e51651f-1fb6-40c3-8d4d-04d720de52c8')
CLSID_GPDeleteMosaicDataset = uuid.UUID('a587ee3c-e1d2-4b29-9214-531562ced854')
CLSID_GPDefineOverviews = uuid.UUID('10dde9fe-7877-402d-bdd6-25740872b6d2')
CLSID_GPDefineNoData = uuid.UUID('3bb2af3e-043b-49d9-a468-c9bd5be6bc8c')
CLSID_GPBuildItemCache = uuid.UUID('38ad8560-11a4-4120-bfaa-0bc8f69a6fa1')
CLSID_GPBuildOverviews = uuid.UUID('83e0ece7-555e-4536-915d-38fba8b53621')
CLSID_GPImportMosaicGeometry = uuid.UUID('188903b6-2935-4e23-9a3e-62ceb62282d1')
CLSID_GPCopyRasterCatalogFeatures = uuid.UUID('ff6c1b83-9ffa-4b88-b3bd-dbae803e10a7')
CLSID_GPDeleteRasterCatalogFeatures = uuid.UUID('0a9d1c12-68f7-47e5-bc89-a268dce4cfc8')
CLSID_GPCalculateSpatialReference = uuid.UUID('f786ba18-fd99-454b-a08d-3fd73404e9ad')
CLSID_GPCreateRasterCatalogLayer = uuid.UUID('4cdac8c1-d9ff-49c3-a237-a0054f814fd5')
CLSID_GPAltercolormap = uuid.UUID('c2204ac7-122a-4aeb-b0d4-54db907f462c')
CLSID_GPDeletecolormap = uuid.UUID('914aa868-6a9e-4a8a-b39a-e8847181e6e7')
CLSID_GPAddAttributeTable = uuid.UUID('390cef6f-278c-40a5-bd15-c1bdb658e793')
CLSID_GPDropAttributeTable = uuid.UUID('e288872f-1bb4-49b7-9ecf-2958a201cb28')
CLSID_GPLoadWsToRasterDs = uuid.UUID('33f068c8-776e-4074-818f-d7959a68a387')
CLSID_GPLoadWs2RasterCatalog = uuid.UUID('354bd205-0173-4ecf-b00e-f025fecefea8')
CLSID_GPAddRasters = uuid.UUID('2feb11db-3043-442b-a94b-c545c9a39f93')
CLSID_GPCreateOrthoCorrectedRasterDs = uuid.UUID('3653a2cb-0647-4ca1-9db9-7021cd882965')
CLSID_GPCreatePansharpenedRasterDs = uuid.UUID('182fe6ca-ba06-4dd2-9c34-29981b389e58')
CLSID_GPComputePansharpenWeights = uuid.UUID('9b2a8593-f179-4d3b-ae71-f9994021832a')
CLSID_GPClipRaster = uuid.UUID('26c4b68d-4e0f-470e-9ade-501381018840')
CLSID_GPResampleRaster = uuid.UUID('65d282f0-f940-4fff-8f55-d0e36d4b6f20')
CLSID_GPCompositeBands = uuid.UUID('dd0d9c51-a77a-479b-bf7f-6629452be148')
CLSID_GPBuildPyramids = uuid.UUID('ca1fb5e3-c6f3-4a35-a22a-6ca075cddaec')
CLSID_GPBatchStatsPyramids = uuid.UUID('b399bd3a-9f84-4157-b514-00807da480a1')
CLSID_GPCalculateStatistics = uuid.UUID('26a39065-501d-458a-ae8c-14011a13053a')
CLSID_GPRasterCatalogToRasterDataset = uuid.UUID('40fbac30-e8af-4222-aad5-1f3b413633bb')
CLSID_GPExtractSubdataset = uuid.UUID('2ba94009-997f-49e8-b33f-fcddc9cf8f81')
CLSID_GPCreateWorldFile = uuid.UUID('bab12840-eee7-403f-8f8d-f1185d92402a')
CLSID_GPGetCellValue = uuid.UUID('824aea9a-8feb-4864-a672-2e6531a5c961')
CLSID_GPMakeImageServerLayer = uuid.UUID('79ee8995-7213-46c4-bb36-6b6817e1226e')
CLSID_GPMakeWCSLayer = uuid.UUID('fb5d0f07-ee50-404c-b62c-3d810a2f9851')
CLSID_GPPostVersion = uuid.UUID('2cfe21db-c4de-4a07-aa26-a4acaa1d9f83')
CLSID_GPAssignDefaultToField = uuid.UUID('4f468d24-a76f-40bf-ae7b-f5ca30a68463')
CLSID_GPFC2FC = uuid.UUID('f9b21df9-775d-4865-b823-f9961957b6ec')
CLSID_GPTable2Table = uuid.UUID('a0c96f80-39da-4aaf-95ea-59be57ed4908')
CLSID_GPMerge = uuid.UUID('f86f6d00-6b93-480d-8ace-563e64b7a914')
CLSID_GPAdjust3DZ = uuid.UUID('74641a00-d25b-4c95-b302-b6e3efcce1ed')
CLSID_GPCreateFishnet = uuid.UUID('978f3917-85b7-4a87-9c15-f8e7f36a9c5f')
CLSID_GPFindRelationships = uuid.UUID('346c74ab-e5c0-44ed-9620-aa530c804e49')
CLSID_GPCreateThiessenPolygons = uuid.UUID('053ca6c1-7f96-43af-b121-76d74a07db77')
CLSID_GPCreateCustomGeoTransformation = uuid.UUID('ae30b269-4f71-43ee-a25d-a56af2b13187')
CLSID_GPSpatialJoin = uuid.UUID('4b9475fb-859c-40ba-9d9d-39988c0375c8')
CLSID_GPApplySymbologyFromLayer = uuid.UUID('a1b352f5-932f-4e07-afda-cea39ab99add')
CLSID_GPMosaicToNewRaster = uuid.UUID('f8a77be5-9557-4ab6-ac76-604eeeb872e5')
CLSID_GPSplitRaster = uuid.UUID('f5f246a3-d242-47ab-937a-7949410435b8')
CLSID_GPCreateVideoFromImages = uuid.UUID('2194818b-be40-4d18-be8f-7f46d5c9c23f')
CLSID_GPMakeLasDatasetLayer = uuid.UUID('926923a7-af2e-4766-ade5-4cd8f945d068')
CLSID_GPColorBalancing = uuid.UUID('2b9b9ebd-873a-410d-9cfe-ff97f6a78249')
CLSID_GPGenerateExcludeArea = uuid.UUID('63390514-3467-4dff-ab55-23170f55807e')
CLSID_GPConvertCoordinateNotation = uuid.UUID('7bebba6f-78f6-4f0b-be58-4ec8da7e5475')
CLSID_GPBearingDistanceToLine = uuid.UUID('28669a79-9d9f-4bc3-9d85-513576d2027e')
CLSID_GPTableToEllipse = uuid.UUID('370a8487-77d2-4403-b94d-3d2b63f74f9a')
CLSID_GPXYToLine = uuid.UUID('732a6b88-6440-4f74-8069-caaa575aaa7e')
CLSID_GPRasterToDTED = uuid.UUID('4a7df08f-000a-47ec-997d-9b8094685c79')
CLSID_GPMakeMosaicLayer = uuid.UUID('a7e06e6f-837c-469e-929d-aca0461bd25e')
CLSID_GPDownloadRasters = uuid.UUID('cb52a85a-8997-4ed2-9a4b-86bebee1b6de')
CLSID_GPWarpFromFile = uuid.UUID('421fff51-9d0d-4e27-bb5e-0f0d5f5ede28')
CLSID_GPAddRasterFunction = uuid.UUID('d5deeb5e-49b1-4df9-a451-f535eddee999')
CLSID_GPSetMosaicDatasetProperties = uuid.UUID('46e1c2ea-c273-4cd7-b08f-f3883f035868')
CLSID_GPSetRasterProperties = uuid.UUID('4835b161-bb38-4046-8f37-3842b2a7166c')
CLSID_GPComputeTiePoints = uuid.UUID('77546d13-df11-4fc3-96f4-5e9010d974b8')
CLSID_GPComputeAdjustments = uuid.UUID('cf1eacbc-59ea-4db8-8a65-6846150c10bf')
CLSID_GPApplyAdjustments = uuid.UUID('fe15b48d-4c1c-49f5-a5c2-8f5fa2dea962')
CLSID_GPRegisterRaster = uuid.UUID('a7fc26fb-12af-4cbf-84fb-aa760153dcc7')
CLSID_GPLocalCacheImportTileCache = uuid.UUID('8e84b4ad-b81b-49a0-9dc5-92019f1c566a')
CLSID_GPLocalCacheExportTileCache = uuid.UUID('60ccc69c-d8db-4248-a313-8e33318c7c6e')
CLSID_GPLocalCacheManageTileCache = uuid.UUID('21c488e0-b835-44c3-8896-a7174b7fb623')
CLSID_GPGenerateCacheTilingScheme = uuid.UUID('a711e3b7-264b-4d2a-badd-0034e33a5028')
CLSID_GPFeaturesToJSON = uuid.UUID('392b75a1-aa13-483e-a23e-97206d94f900')
CLSID_GPJSONToFeatures = uuid.UUID('3f18310e-8340-4ffa-9447-d9b2c138c98e')
CLSID_GeoProcessorOPs = uuid.UUID('37f83208-134d-4264-9e4c-fff8c4bebc7e')
CLSID_GeoProcessorEventsHelper = uuid.UUID('7cb6d8dc-1458-481d-b159-8dc4fadd066a')
CLSID_GeoProcessorEventsHelper2 = uuid.UUID('e32e2ec9-3a2d-4cee-afe9-840fb88a1af2')
CLSID_GeoProcessorEventsHelper3 = uuid.UUID('730841b2-f693-42e3-a0a6-135d06983c83')
CLSID_GpPythonInterpreter = uuid.UUID('42cebf6c-3523-4f32-b15b-616ec3454297')
CLSID_GpPythonExpression = uuid.UUID('05fd67f4-a441-41d9-82af-ce68e3daff74')
CLSID_GPArcFunctionFactory = uuid.UUID('f568caff-f3ae-417c-95f1-971cdfd9c34d')
CLSID_GPArcUnion = uuid.UUID('c0fcd1a0-caba-4539-88cd-a4c515e342e3')
CLSID_GPArcClip = uuid.UUID('4763b6db-efd3-4886-857e-32d091d08ae7')
CLSID_GPArcErase = uuid.UUID('eb88e3e4-8df4-4af5-996a-bd060d1d1671')
CLSID_GPArcIdentity = uuid.UUID('ff7c2c00-62e3-4131-9a93-b07426484f23')
CLSID_GPArcIntersect = uuid.UUID('f932c41d-bc38-462c-bbf9-8bf3f0708779')
CLSID_GPArcUpdate = uuid.UUID('394127a6-ae12-4192-aba4-51e5fe239f60')
CLSID_GPArcBuffer = uuid.UUID('05ba3bf7-ea0b-4cf9-a026-b9d10e3f7885')
CLSID_GPArcThiessen = uuid.UUID('246cfdda-640a-4e17-9d7b-134f99e71ae9')
CLSID_GPArcNear = uuid.UUID('32c82bde-4e33-4f1c-8397-87db5620f379')
CLSID_GPArcPointDistance = uuid.UUID('c118c7a2-1227-466b-bac4-fcb7d1ae02eb')
CLSID_GPArcBuild = uuid.UUID('a593638a-fd19-4714-8555-786a6ec9cb57')
CLSID_GPArcClean = uuid.UUID('b0d7c0c8-d4d3-4618-a4e5-03befc7d2da5')
CLSID_GPArcCreateLabels = uuid.UUID('19edf2d5-c12f-48aa-a05c-a40740682bd5')
CLSID_GPArcIDEdit = uuid.UUID('fb79e0d6-f626-4e9e-8da7-cac45ee0760f')
CLSID_GPArcAddXY = uuid.UUID('2118a342-217a-44e0-9a87-503df4c5a5ba')
CLSID_GPArcRenode = uuid.UUID('bb7d5501-1956-439f-98ba-144443d061f5')
CLSID_GPArcPointNode = uuid.UUID('d9cbddad-ac54-4c4f-98d0-4b1dd3e62b24')
CLSID_GPArcDefineProjection = uuid.UUID('435c7de6-a57f-4911-99e3-21a5c4a80bd5')
CLSID_GPArcJoinItem = uuid.UUID('3b75f8f9-92dd-4d09-a746-127062a4c0aa')
CLSID_GPArcSplit = uuid.UUID('d989273b-b072-44e7-8b18-f6c00d3b8190')
CLSID_GPArcPolyRegion = uuid.UUID('6b22afa3-2e41-4bdf-b5a9-e2d687368e1d')
CLSID_GPArcRegionPoly = uuid.UUID('81df1e47-02a3-4739-a725-aa624debea7a')
CLSID_GPArcArcDLG = uuid.UUID('bfe78444-d2b3-4618-8e1f-5ce1ff412667')
CLSID_GPArcArcRoute = uuid.UUID('407b7b5f-84aa-480c-8168-ff300b15b89d')
CLSID_GPArcDLGArc = uuid.UUID('7489fb62-6f22-473f-b243-a07648e67b4e')
CLSID_GPArcUngenerate = uuid.UUID('375dceba-2ce2-4935-a4fc-46e9a7f2e84b')
CLSID_GPArcRegionClass = uuid.UUID('7e0aafb1-ed41-4f9c-95f4-6762b290a213')
CLSID_GPArcAddItem = uuid.UUID('f59aa9da-d0c7-4cb8-8eaa-80aa3a7e9672')
CLSID_GPArcIndexItem = uuid.UUID('b33da933-aada-4a5c-8b8c-670c15b208fe')
CLSID_GPArcDropIndex = uuid.UUID('e856eac9-8b08-42b4-adc9-b323ccecf07d')
CLSID_GPArcDropItem = uuid.UUID('b8c2d842-5287-4c0a-934c-908ae9acb087')
CLSID_GPArcCenterline = uuid.UUID('28986b5a-2356-420b-a287-3a5a8c4b71ea')
CLSID_GPArcFindConflicts = uuid.UUID('4faaefa2-87ff-4795-8a12-75afc0c10a2a')
CLSID_GPArcBuildingSimplify = uuid.UUID('3dc60108-c99a-4b5c-af62-394e4447d6e7')
CLSID_GPArcLineSimplify = uuid.UUID('14a037a5-735a-40ee-9513-db531a777e2c')
CLSID_GPArcAreaAggregate = uuid.UUID('438c303f-3340-40d5-8ebb-0a344b098a3a')
CLSID_GPArcTolerance = uuid.UUID('6c5e5652-21db-46c3-aece-f0fbb61f879b')
CLSID_GPArcDissolve = uuid.UUID('d28cd296-ae1e-4e6c-ba63-17b9ba01b0b3')
CLSID_GPArcCreateCoverage = uuid.UUID('65d0d56b-4a00-4f84-908a-e4f7ec60eebb')
CLSID_GPArcTransform = uuid.UUID('ff6ffb20-759c-4dac-af36-a10e206d1463')
CLSID_GPArcGenerate = uuid.UUID('6eb42b10-e500-45fe-acc5-b19db1ba459b')
CLSID_GPArcImport = uuid.UUID('164649a1-733e-4e7b-94c6-a22a5a188bb1')
CLSID_GPArcExport = uuid.UUID('50edec8b-1e20-4ed3-a836-4fc076761460')
CLSID_GPArcS57Arc = uuid.UUID('a704546e-cfd5-492c-85af-d6c62c88570c')
CLSID_GPArcArcS57 = uuid.UUID('ba6e9d37-57c5-4aed-9063-bf400bb6f167')
CLSID_GPArcVPFImport = uuid.UUID('ea5c5e92-1433-47c4-959c-90ca13006aa0')
CLSID_GPArcVPFExport = uuid.UUID('120c9899-2784-4db7-beeb-8b1f69a78f1f')
CLSID_GPArcVPFTile = uuid.UUID('03b8db56-9a7c-4b48-94ae-8c213a3f7e6c')
CLSID_GPArcSDTSExport = uuid.UUID('47fef600-7176-480b-86a8-a8a38e999346')
CLSID_GPArcSDTSImport = uuid.UUID('1309fc69-83d8-4bbf-ab21-3f8ab08057e3')
CLSID_GPArcTigerArc = uuid.UUID('f626d290-ad5e-456e-b598-9b5e65f76ae2')
CLSID_GPArcProject = uuid.UUID('b3e94821-38de-47ce-89d7-c32bd7c4f909')
CLSID_GPArcAppend = uuid.UUID('879ee0b8-70d5-423d-b3f6-c9dd778d93fb')
CLSID_GPArcTigerTool = uuid.UUID('fcad0d1f-622c-4b14-851b-7101081ba3de')
CLSID_GPArcReselect = uuid.UUID('b564fe78-5d05-445b-96c4-d7eedaf1ea0c')
CLSID_GPArcEliminate = uuid.UUID('ec622792-1203-4ce3-84d8-8bf410b02360')
CLSID_GPArcSelectChild = uuid.UUID('34b449b9-5fd4-4ae2-bc0d-4f849f133488')
CLSID_GPCartographyFuncFactory = uuid.UUID('3de7c1d5-19c6-4f13-9fd2-0a54240e76f5')
CLSID_GPFeaturesOutlinesToMasks = uuid.UUID('32ddc5c0-10c4-45ec-800e-659661396ded')
CLSID_GPMasksForNonConnectedLines = uuid.UUID('7a639dfb-d2ec-49e7-b4bd-b49dc117244d')
CLSID_GPLayersIntersectToMasks = uuid.UUID('7664a58e-bfdf-4482-be6b-a7288e7a8ee3')
CLSID_AddRepresentation = uuid.UUID('64b0dffc-307f-4dc3-82ac-90831824027a')
CLSID_DropRepresentation = uuid.UUID('20cf91a6-f13b-4340-a282-5eb7eb7850de')
CLSID_RemoveOverride = uuid.UUID('9fc569a4-888e-4c83-9f78-49b13e0cf24a')
CLSID_UpdateOverride = uuid.UUID('0ec4ac91-ea90-4ef0-89e8-83eb86adc6f9')
CLSID_AssignRule = uuid.UUID('d4d02e5a-730d-483b-8a1e-ea3803f1cb79')
CLSID_SelectOverride = uuid.UUID('f5694030-b8fc-4c0c-bf33-2e1eb59711d8')
CLSID_MakeRepresentationLayer = uuid.UUID('3f44621d-c8c6-4718-92b4-19a50e3cdd5a')
CLSID_AddControlPoints = uuid.UUID('a1a19802-9401-4962-a2ea-db153aa0705c')
CLSID_AddControlPointsAtIntersects = uuid.UUID('492ad9e5-df72-4c80-81d0-ce93d96c67c3')
CLSID_CalculatePolygonMainAngle = uuid.UUID('66c83df1-b435-4b9b-a0ec-adfa26a8e53b')
CLSID_CalculateGeodesicAngle = uuid.UUID('07566aab-5ce5-405d-9d15-71ef10f5b7e5')
CLSID_CreateOverpass = uuid.UUID('2b69abe8-6024-40b3-a25d-2da455d6adf8')
CLSID_CreateUnderpass = uuid.UUID('d48077c6-91c0-48a9-b7b4-a5ea6ba85743')
CLSID_CalculateLineCaps = uuid.UUID('eda745e4-4887-42e1-82d1-e596577ce557')
CLSID_AlignMarker = uuid.UUID('e99b2988-da9f-47b8-b5df-b066e286424f')
CLSID_DispersePoints = uuid.UUID('b407ae05-4d9c-44dd-884c-2089d317ec0c')
CLSID_DetectOverlap = uuid.UUID('b4c53fc0-cb08-4801-86fe-cbbb3949e96c')
CLSID_CalculateUTMZone = uuid.UUID('67ecfb21-b4c4-4d13-b630-acbee62fcf72')
CLSID_CalculateCentralMeridianAndParallels = uuid.UUID('9dbd3b2d-94a7-4c4a-8f84-73bcdd85574d')
CLSID_CalculateGridConvergenceAngle = uuid.UUID('496f50d2-2502-4f8e-8633-4a623b436c3d')
CLSID_CalculateAdjacentFields = uuid.UUID('c34d48bf-687a-4bc5-b3c4-4216fee452ad')
CLSID_GridIndexFeatures = uuid.UUID('094686e9-7460-45f5-ae9a-b7885fc6538a')
CLSID_StripMapIndexFeatures = uuid.UUID('b89ea58c-9e05-4c11-8da8-5cb037d892a6')
CLSID_GPThinRoadNetwork = uuid.UUID('af2807cc-fe67-4983-84f7-d3fa1e6a9098')
CLSID_GPMergeDividedRoads = uuid.UUID('8afa751f-95ec-4e1a-9df3-3332c6722fbf')
CLSID_GPResolveRoadConflicts = uuid.UUID('a08fdec6-319c-4579-a9d5-5688243bc651')
CLSID_GPPropagateDisplacement = uuid.UUID('60baae5f-a0e0-4c6b-b103-2fe0bc299f03')
CLSID_GPResolveBuildingConflicts = uuid.UUID('6de28671-a897-4677-84ec-584ada14cbe3')
CLSID_GPCreatePartitions = uuid.UUID('56c9f2e5-88d5-40c5-a6c7-32fae9039330')
CLSID_GPCollapseRoadDetail = uuid.UUID('6a633141-4c24-4d28-989c-4af11f98704f')
CLSID_GPCreateBuiltUpAreas = uuid.UUID('20b76208-6771-462a-951b-7387356ffe76')
CLSID_MakeGridsAndGraticulesLayer = uuid.UUID('87fc2b0d-8d5d-44f7-8356-0d50a5bad59a')
CLSID_DeleteGridsAndGraticules = uuid.UUID('fbb68639-65fb-4f77-b0b2-0315d03e0cdf')
CLSID_GPGeocodeAddresses = uuid.UUID('5077a819-ac31-4c5b-8eff-d6a1f76abee4')
CLSID_GPRebuildGeocodingIndexes = uuid.UUID('64cf17d0-720c-45a0-82f5-b13fd6926b74')
CLSID_GPCreateAddressLocator = uuid.UUID('d44850ae-adfa-4ccc-ba86-8f829eb7efef')
CLSID_GPReverseGeocode = uuid.UUID('39a4824a-0211-4b44-86f3-725ef6997c6d')
CLSID_GPCreateCompositeAddressLocator = uuid.UUID('57de0bfe-25a3-4e75-b5a9-0286be100550')
CLSID_GPStandardizeAddresses = uuid.UUID('48c14c98-0214-4b25-a99f-d7e8495719bc')
CLSID_GPDeleteAddressLocator = uuid.UUID('865b8b52-e0c5-4fd5-b269-b465a316ee68')
CLSID_GPAutomateGeocodingIndexes = uuid.UUID('95729348-ce64-4522-a636-bea14d3dfdd1')
CLSID_GPDeautomateGeocodingIndexes = uuid.UUID('802ccba5-e797-48f2-a6b5-0ad4c2ef3064')
CLSID_GPRematchAddresses = uuid.UUID('a42650cb-6722-4ac1-889f-0512180408cf')
CLSID_GPGeocodingFunctionFactory = uuid.UUID('3a35f634-df55-4beb-a3d5-a7c09c939e3c')
CLSID_GPBlockByAttribute = uuid.UUID('dbde8bbc-a98c-4bf9-bd2e-2345111599ca')
CLSID_GPBlockByClass = uuid.UUID('657e5045-4706-47d3-8752-9fb745233067')
CLSID_GPBlockByProximity = uuid.UUID('4433504d-9a8c-4534-85c9-3887a6c9366d')
CLSID_GPCalculateCompressionParameters = uuid.UUID('6f08f044-74c7-4be6-ba21-67e4e112946c')
CLSID_GPCustomizeCompressionParameters = uuid.UUID('9a6486cc-b24a-4627-9813-8b0d90a66398')
CLSID_GPCompressDataset = uuid.UUID('de08d919-f839-4892-a43c-5a03f3278490')
CLSID_GPCompressFileGeodatabaseData = uuid.UUID('dd8ea62b-f689-47df-a5e4-92d7452ec889')
CLSID_GPUncompressDataset = uuid.UUID('c4372057-dd4d-4a88-9247-ca1f953aab5e')
CLSID_GPFileGDBFunctionFactory = uuid.UUID('086b1c37-4451-4a6a-a94b-40b84964f5e7')
CLSID_GPMakeNetCDFRasterLayer = uuid.UUID('e0fa1438-399d-40a3-9aa0-b0ff676b7eaf')
CLSID_GPRasterToNetCDF = uuid.UUID('20c40e46-ad3b-46ce-af2b-0410481ca4be')
CLSID_GPSelectByDimension = uuid.UUID('586cbf48-d26f-4f6b-a09e-2180e75ec46a')
CLSID_GPMakeNetCDFTableView = uuid.UUID('f907e436-f608-444c-91f7-9c968b7e50a1')
CLSID_GPTableToNetCDF = uuid.UUID('5d4a8615-b7c5-4277-b4e4-728750c5af87')
CLSID_GPMakeNetCDFFeatureLayer = uuid.UUID('c2630c12-ce2b-4989-b110-54f523295d0e')
CLSID_GPFeatureToNetCDF = uuid.UUID('a4519af9-9bbe-43ba-acdd-eb4aa293fa91')
CLSID_GpNcFunctionFactory = uuid.UUID('f9c04d04-f4df-4050-9047-e3c249cf27c7')
CLSID_GPSAGeoDataTypeName = uuid.UUID('49af74e6-6a05-4974-bc0b-d44fe8c35fdf')
CLSID_GPRasterDataTypeFactory = uuid.UUID('e001defc-e935-4000-8b3b-ce497a5bd87c')
CLSID_GPRasterUtil = uuid.UUID('5919840a-fb1b-4ffb-856d-261745416d93')
CLSID_GPRasterFunctionFactory = uuid.UUID('c033faa1-ba35-4e36-a451-3ee348fdebf3')
CLSID_GPSAASCIIToRaster = uuid.UUID('b83ee306-e8aa-49fa-a2ee-efd2f8c64daf')
CLSID_GPSADEMToRaster = uuid.UUID('d2e77872-95cb-4fe3-81e4-c7a9af589600')
CLSID_GPSAFloatToRaster = uuid.UUID('6b081d65-a264-43a7-add8-52fab7de5bd7')
CLSID_GPSARasterToPoint = uuid.UUID('c3cb1e1c-5311-4af8-a827-96204714479d')
CLSID_GPSARasterToPolygon = uuid.UUID('d2c13e55-3f87-47de-beb4-b0c621ab2d6a')
CLSID_GPSARasterToPolyline = uuid.UUID('7a310d20-2e4c-4f97-a061-c4bd095c592a')
CLSID_GPSAFeatureToRaster = uuid.UUID('0b1b86db-07e0-4f29-bc64-2d9a392575c9')
CLSID_GPSAMultipatchToRaster = uuid.UUID('9aba8e90-ef10-4474-9865-c9184374a2d0')
CLSID_GPSARasterToASCII = uuid.UUID('20bb134f-d56a-4dce-932a-039f5b357e9b')
CLSID_GPSARasterToFloat = uuid.UUID('258bd486-81c1-44c5-ac77-fd06755b6b1f')
CLSID_GPSAMakeRasterLayer = uuid.UUID('5a969a9d-5081-44c3-a624-9d25d62687f1')
CLSID_GPGetRasterProperties = uuid.UUID('34829fac-c839-43e6-8824-e1095b24e00c')
CLSID_GPSARotate = uuid.UUID('3284731e-78fe-4512-941d-c3f83e9ff9b6')
CLSID_GPSARescale = uuid.UUID('6288444d-e684-47c3-be2b-414d5b1722f5')
CLSID_GPSAFlip = uuid.UUID('ad1a2542-245a-44ef-8422-65f03d721a6a')
CLSID_GPSAMirror = uuid.UUID('5e65214a-4976-40be-8c57-1a7b02d6d97c')
CLSID_GPSAShift = uuid.UUID('443648e2-6c33-4107-882a-b74333861994')
CLSID_GPSAWarp = uuid.UUID('8e597b9f-24bc-4044-b4b5-1483a3907a9e')
CLSID_GPSAProjectRaster = uuid.UUID('63a41825-3bf0-46a5-a9fa-9af0c1a92f3a')
CLSID_MdModelName = uuid.UUID('007295cd-5afd-4a53-b402-b0748613a0a1')
CLSID_MdUtilities = uuid.UUID('a0bd1dd1-d912-41af-ba32-a11abf3a4ec9')
CLSID_MdDiagramProperties = uuid.UUID('5814fb13-e2d5-41d6-8542-2f9637fce967')
CLSID_MdDisplayNode = uuid.UUID('37e53c6a-eeb0-4529-ad61-13d6470188a6')
CLSID_MdDisplayEdge = uuid.UUID('ce54d183-4e32-4428-a078-ac935f67f8de')
CLSID_GPCompositeDataTypeName = uuid.UUID('409f1684-a968-43ed-9c7a-747b6e66cadd')
CLSID_GPValueTableTypeName = uuid.UUID('65521a5f-7da6-4893-ae58-f70fd3cd1dee')
CLSID_GPValueTableTypeNameProperty = uuid.UUID('bcbab8f3-85d8-4e59-b582-0b9d583a7106')
CLSID_GPUtilitiesUI = uuid.UUID('51c0a408-7f26-4c55-9721-963a6c89cff6')
CLSID_GeoprocessingAppHelper = uuid.UUID('0f57dc34-1cd6-46f6-8bc8-8a0a7f911912')
CLSID_GeoProcessorWorker = uuid.UUID('9b278f4b-5812-4ac7-aa29-82cbfff0b68e')
CLSID_GPModelFunctionFactory = uuid.UUID('0ba8756d-420e-4f32-be0a-36291d8cddfd')
CLSID_GPFieldValueIterator = uuid.UUID('c1002668-087e-4511-ba0d-508ee1780d4e')
CLSID_GPFeatureClassIterator = uuid.UUID('c43eba4e-c590-4b70-802b-e479e176ed0c')
CLSID_GPTableIterator = uuid.UUID('09094e44-9d69-4f6a-920c-71223d842570')
CLSID_GPRasterIterator = uuid.UUID('f14818c5-3521-479d-a9bd-f3863c8c923b')
CLSID_GPDatasetIterator = uuid.UUID('1f596f10-1824-43af-a4ab-7e8681711de2')
CLSID_GPWorkspaceIterator = uuid.UUID('3e73ac60-93bc-4705-bd94-e30c3dff6c58')
CLSID_GPFileIterator = uuid.UUID('ea69bccc-396b-4f81-af65-4836d1a6a00b')
CLSID_GPMultivalueIterator = uuid.UUID('0066442f-5b93-4e3b-9341-75587584a04a')
CLSID_GPFeatureSelectionIterator = uuid.UUID('abbf1c43-0a8d-4da1-a106-8a921b69b35c')
CLSID_GPRowSelectionIterator = uuid.UUID('7c3a9f3b-da40-4a30-9bd9-24a8b4f789db')
CLSID_GPCountIterator = uuid.UUID('df433f4f-2fd4-4379-8424-43a1bde20eae')
CLSID_GPConditionalIterator = uuid.UUID('4ab9bdc8-4a09-4872-b47f-8ac5492dc60e')
CLSID_GPStop = uuid.UUID('2c915da3-af5f-4f1e-ba98-d01b29307b21')
CLSID_GPCollectValues = uuid.UUID('e705ad93-b0fa-4b8c-83eb-1bcfeb1d05e1')
CLSID_GPGetFieldValue = uuid.UUID('677ee4b9-b4fb-46de-baa9-5f18fbfbf2af')
CLSID_GPParsePath = uuid.UUID('8b5f0b77-9c19-47b7-ba60-8de608eabcf7')
CLSID_GPConnectPoints = uuid.UUID('7104d60f-d22b-4331-9681-f0331a260728')
CLSID_GPInMemoryToolboxName = uuid.UUID('da1e6fe3-78fa-4960-a8f4-e3120dff9dfb')
CLSID_GPInMemoryToolbox = uuid.UUID('cc49e623-334f-48a0-a4f2-6b6b3539a5e1')
CLSID_GPPythonToolboxName = uuid.UUID('fd545954-8ce2-4be0-875b-12e84b80b252')
CLSID_GPPythonToolbox = uuid.UUID('11a2a9a9-13aa-4951-bb09-1d2deed9a3fb')
CLSID_GPGraphDataTableTypeName = uuid.UUID('6b4f4815-00b3-4b5f-ba22-e763952273e5')
CLSID_GPGraphDataTableType = uuid.UUID('dd1972d2-0c7a-4f5e-959c-cd2d5cced50a')
CLSID_GPGraphDataTable = uuid.UUID('15d5d06b-9ba8-4256-b5d5-d32ef707d29c')
CLSID_GPGraphType = uuid.UUID('26995ebf-efdf-4127-89bc-cbdd4b288053')
CLSID_GPGraph = uuid.UUID('5de89480-6059-45d8-a35b-7dfc48f45e54')
CLSID_GPMakeGraph = uuid.UUID('6d6874b9-b43b-4bbf-8b15-a691bf530e4d')
CLSID_GPSaveGraph = uuid.UUID('b38c4659-9d2f-435c-a6ff-e8d4e6c96100')
CLSID_GPChangeVersion = uuid.UUID('c5910276-e7dc-4257-a3be-b6b4043b2814')
CLSID_GPRegisterWithGeodatabase = uuid.UUID('390115da-0ef8-44b4-9707-297519c4e64e')
CLSID_GPBackgroundObject = uuid.UUID('1bf3cb47-db78-46c0-a894-4e2b0ece03a9')
CLSID_GPPythonScriptParseRecord = uuid.UUID('ef3ecf6f-4285-47ec-a48a-3b1496a2ae8c')
CLSID_GPJobServerLP = uuid.UUID('dfa42f40-b96d-4d8c-a190-d831be18e7d7')
CLSID_GPJobServerIP = uuid.UUID('79845850-b190-4ab1-9914-eec618366ff6')
CLSID_GPJobServerObjectDescription = uuid.UUID('f328c1b7-a642-4363-87f3-cc4040aa6dfb')
CLSID_GPJobRequest = uuid.UUID('0d10b909-b8d2-4d22-a051-0e8bec6a21e6')
CLSID_GPJobResult = uuid.UUID('3fd16cc0-0b4c-4f5e-b044-d51259c5ff01')
CLSID_GPImportXMLWorkspaceDocument = uuid.UUID('113cc334-6fb8-440a-be0f-1fbc3d2b6098')
CLSID_GPExportXMLWorkspaceDocument = uuid.UUID('1e8258b9-bcf9-43b9-9eb8-4509e6a45f57')
CLSID_NAClassFieldMappingsHelper = uuid.UUID('f9b06640-b7e9-4f87-bab9-783cf262c9e5')
CLSID_NASolverPropertiesHelper = uuid.UUID('67d8804b-d290-442a-94c3-f185c4aa9a1d')
CLSID_GPInternetTiledLayerType = uuid.UUID('823ade1b-d4b2-4402-8d28-a6f194916aaf')
CLSID_GPInternetTiledLayer = uuid.UUID('e5110091-587d-4000-806f-39722e3c092a')
CLSID_GPMapServerLayerType = uuid.UUID('053d9c46-499b-4f4f-8a10-ad8992a9262c')
CLSID_GPMapServerLayer = uuid.UUID('60c614b0-b350-4e9e-8c84-6c2bdf0774fa')
CLSID_GPServerFunctionFactory = uuid.UUID('f8ac2c04-deec-43f4-86ef-246f91f12856')
CLSID_GPUpdateMapServerCache = uuid.UUID('7f8ce87f-9bd2-40f8-8dbb-2224c51222a0')
CLSID_GPManageMapServerCacheTiles = uuid.UUID('fa92f2cf-a38e-4999-bbf5-901c1ac1570d')
CLSID_GPValidateMapServerCacheTiles = uuid.UUID('d92fa6d3-eb38-45e8-8961-ceaa46ac8ef0')
CLSID_GPExportMapServerCache = uuid.UUID('17f1bc9d-e3a1-41ad-ab01-86578485a4d4')
CLSID_GPImportMapServerCache = uuid.UUID('9c243be3-2116-4304-961a-987165fb3207')
CLSID_GPConvertMapServerCacheStorageFormat = uuid.UUID('450c82a0-c274-4038-8fd8-eb0018867820')
CLSID_GPDeleteMapServerCache = uuid.UUID('d9bd0f46-bc3b-40b7-9ff8-93c521a589bf')
CLSID_GPGenerateMapServerCache = uuid.UUID('3254c180-5059-4ec7-9ad4-37137fed7cc5')
CLSID_GPCreateMapServerCache = uuid.UUID('b28d53d5-612a-4c93-9f11-5d4b7b7cf2f5')
CLSID_GPGenerateMapServerCacheTilingScheme = uuid.UUID('ef165d0a-963c-4b5e-989d-d2e1a45f44a7')
CLSID_GPUpdateMapServerCacheScales = uuid.UUID('c876a3e1-10ed-4840-833f-74450246e240')
CLSID_ExportWebMap = uuid.UUID('64194667-a362-4e40-9f6a-c636255df601')
CLSID_GPESRIAvailableFonts = uuid.UUID('01e4c3c7-e793-443a-8237-4d455be6ee6d')
CLSID_GPServerProxyHelper = uuid.UUID('ba0df3e4-bef2-4810-ba83-d4d2e795e0fe')
CLSID_GPServerCachingFunctionFactory = uuid.UUID('14dbf4fc-b5f0-4517-a0e4-cc646f62f238')
CLSID_GPSuggestDefaultScales = uuid.UUID('6059dc33-1484-4638-b010-96bf0cc29a10')
CLSID_GPManageMapCacheScales = uuid.UUID('e51a1749-7dbe-4a23-a972-f001d16e7eb0')
CLSID_GPServerCachingManageMapCacheTiles = uuid.UUID('146c00e9-448d-4d2a-977e-b22b9c6a446b')
CLSID_GPServerCachingValidateMapCacheTiles = uuid.UUID('1cf3ff42-1c26-42bd-8789-263f14bc4bc4')
CLSID_GPServerCachingManageMapCacheTilesWorker = uuid.UUID('effae3c7-d681-428c-9fe4-b28af7208c0a')
CLSID_GPServerCachingValidateMapCacheTilesWorker = uuid.UUID('6984f70d-97fc-4738-983d-0876f031c3a3')
CLSID_GPServerCachingDeleteMapCache = uuid.UUID('24620c31-dab4-403d-8d1b-6b582d938c4a')
CLSID_GPServerCachingCreateMapCache = uuid.UUID('9a118e96-8704-4263-935e-edade2a47433')
CLSID_GPReportCacheStatus = uuid.UUID('949aa15c-cae6-43ca-9e3b-44d1aefb825b')
CLSID_GPConvertCacheStorageFormat = uuid.UUID('0c640e26-3472-427c-bfd0-887643d742d8')
CLSID_GPConvertCacheStorageFormatWorker = uuid.UUID('8f2f3af5-8691-481b-a4fa-13e343c4f200')
CLSID_GPExportCacheWorker = uuid.UUID('95324251-dc6c-4fb7-9795-5dc875af6834')
CLSID_GPExportCache = uuid.UUID('b94d3e46-bc76-4cbb-98dd-dfe8e76578f4')
CLSID_GPImportCacheWorker = uuid.UUID('29cd3e7a-6191-48e3-a456-83bb15a6c1e4')
CLSID_GPImportCache = uuid.UUID('111fe3a4-4e66-4af2-a95a-50dd7a7960d1')
CLSID_GPESRICreateFeatureServiceReplica = uuid.UUID('f1e917ec-2244-4667-9a90-d187d56c9214')
CLSID_GPESRISyncFeatureServiceReplica = uuid.UUID('42c961b1-60b8-4258-863c-d4d77623871f')
CLSID_GPSAGeoDataDomain = uuid.UUID('616f905f-756d-46c1-a5e9-a77076c8c740')
CLSID_GPSAGeoDataType = uuid.UUID('1ecb7ea1-271a-4dad-861c-da32d045f913')
CLSID_GPRasterFormulatedType = uuid.UUID('3f0b0c21-f0e9-48f0-be22-72a4a405bf8a')
CLSID_GPRasterFormulated = uuid.UUID('ffa58e93-059a-435f-af2b-5a348a882c29')
CLSID_GPRAFieldDomain = uuid.UUID('4b6ca858-5716-4ac3-a2ee-70ee2d29c1bd')
CLSID_GPRasterGDBEnvCompressionType = uuid.UUID('3a6e3231-e3e8-4827-b8bd-49e17b43d1a9')
CLSID_GPRasterGDBEnvCompression = uuid.UUID('21afa897-84ae-411f-9bf9-140448e3b070')
CLSID_GPRasterGDBEnvPyramidType = uuid.UUID('59ba607a-071b-44f3-806e-cd4751c49eb9')
CLSID_GPRasterGDBEnvPyramid = uuid.UUID('23fb67ca-72ad-4a7b-b4ac-3705c1c5d6cf')
CLSID_GPRasterGDBEnvStatisticsType = uuid.UUID('35907611-034a-4ca4-a707-4f98ed961efa')
CLSID_GPRasterGDBEnvStatistics = uuid.UUID('94f81626-002e-4c51-8829-a04c6cb5e8ea')
CLSID_GPRasterGDBEnvTileSizeType = uuid.UUID('c3778095-767d-43e1-8764-6e2eb67031cd')
CLSID_GPRasterGDBEnvTileSize = uuid.UUID('ce32fff3-f75f-4915-b9e0-2a6d42e5fb20')
CLSID_GPAnalysisCellSizeType = uuid.UUID('380b3870-c00b-45d1-98b5-7878e42f37b7')
CLSID_GPAnalysisCellSize = uuid.UUID('d042dff8-eaa2-4706-b3de-6e62cfeda76a')
CLSID_MapCacheTileManager = uuid.UUID('00a848f7-f9dc-4526-885d-a1247b55c345')
CLSID_MapCacheTileManagerJobResultHandler = uuid.UUID('d4bad81d-e858-429f-8cd9-426f411c77d8')
CLSID_MapCacheTileManagerJob = uuid.UUID('9370bae3-1cdd-48b4-815a-75a2d33d9808')
CLSID_GPRepresentationLayerDomain = uuid.UUID('821acb85-5063-48a3-b2d5-3a95f1c8c73d')
CLSID_GeocompareEngine = uuid.UUID('6cebde06-afda-4285-8623-8ea46888855e')
CLSID_GeocompareResult = uuid.UUID('0da24960-0b5a-4a65-8f98-4b21b963b87e')
CLSID_GeocompareReport = uuid.UUID('08ca6c14-8116-42b5-975a-e84a09b7a331')
CLSID_GPServerLP = uuid.UUID('2a81cfc0-a826-474f-b837-fb9417589b76')
CLSID_GPServerIP = uuid.UUID('02b03067-0726-40d2-b96f-c037d4348041')
CLSID_GPServerObjectDescription = uuid.UUID('e99b6049-44b2-497c-89fc-86382514fc7b')
CLSID_GPToolInfo = uuid.UUID('a8b64980-52f0-417e-812d-3619e1fafe28')
CLSID_GPToolInfos = uuid.UUID('6c30c082-89ea-4453-9d94-1e6f117bd3c5')
CLSID_GPParameterInfo = uuid.UUID('d3595417-981c-4ab2-94d5-9f973e08b65b')
CLSID_GPParameterInfos = uuid.UUID('b5032edb-25db-40c3-9bb8-dca636f810c9')
CLSID_GPValues = uuid.UUID('c0988d01-3c6c-4b1e-aab4-695bbe84dab1')
CLSID_GPResult = uuid.UUID('e1e4e281-9880-41bd-a226-84280a264071')
CLSID_GPResultOptions = uuid.UUID('07c5b59e-0717-434e-b594-b00a62b630b1')
CLSID_GPServer = uuid.UUID('e3d37962-5bdf-424a-8b2d-dd31c540ce26')
CLSID_GPServerConfigurationFactory = uuid.UUID('2367266a-53d4-4c91-b752-4a16845d4308')
CLSID_GPServerSync = uuid.UUID('a6da33b7-4804-4116-b54d-a72d77dd4081')
CLSID_GPServerTrackCancel = uuid.UUID('f6fab3c2-2427-4f83-8a20-cac94b817975')
CLSID_GPJobServer = uuid.UUID('79db0749-8845-40f6-8b9a-53402f2f6344')
CLSID_WPSServer = uuid.UUID('41e1075d-43bc-4101-97bc-8e25ee8f0e48')
CLSID_DBGridReporter = uuid.UUID('63bff56a-5770-4f85-9964-1a7233c0b447')
CLSID_DBGrid = uuid.UUID('c642b387-5d04-4dd2-9142-f02433dccf3f')
CLSID_DBGridNeatline = uuid.UUID('139f1c5d-3c49-4127-966d-b4b1b024f7ab')
CLSID_DBGridMask = uuid.UUID('24773d9c-8fd6-4e40-a11a-18883eca50fd')
CLSID_DBGridSegment = uuid.UUID('219d9091-005c-4cf3-bed0-27c4ca87029b')
CLSID_DBGridTick = uuid.UUID('abd5ba7d-2265-4941-975a-714f611fb5dc')
CLSID_DBGridLine = uuid.UUID('e7ce6a40-7f3b-4df5-bff0-427e2d234cdf')
CLSID_DBGridPoint = uuid.UUID('3d88efe3-875c-4dec-89db-7472280ce146')
CLSID_DBGridEndPoint = uuid.UUID('ddead767-e2cf-41b8-b2e6-50476383d94c')
CLSID_DBGridAnno = uuid.UUID('5971dc95-f637-4d16-a0a6-cb4c7ee7cdd6')
CLSID_DBGridAnnoGroup = uuid.UUID('85796066-6448-4dec-9c4f-3e4249d374fe')
CLSID_DBGridUtilities = uuid.UUID('24c4f397-bbde-475e-82e3-c5283eba73de')
CLSID_CoordinateSystemRecordSet = uuid.UUID('459d876d-2977-4d3d-9fcf-c1812bd1a5ca')
CLSID_SpatialReferenceCalculator = uuid.UUID('f6ea33ba-b65e-4c09-81ff-f5509130fc5b')
CLSID_DBGridPattern = uuid.UUID('7bbbb08c-4a70-40c0-8406-febdc9dac253')

# Enumerations
class esriMdElementState(Enumeration):
    __slots__ = ['esriMdElementNotValid',
                 'esriMdElementReadyToRun',
                 'esriMdElementHasRun']
    esriMdElementNotValid = 0
    esriMdElementReadyToRun = 1
    esriMdElementHasRun = 2

class esriMdDirection(Enumeration):
    __slots__ = ['esriMdDirectionInput',
                 'esriMdDirectionOutput']
    esriMdDirectionInput = 0
    esriMdDirectionOutput = 1

class esriMdConnectionType(Enumeration):
    __slots__ = ['esriMdConnectionTypeAny',
                 'esriMdConnectionTypeParameter',
                 'esriMdConnectionTypeEnvironment',
                 'esriMdConnectionTypePrecondition',
                 'esriMdConnectionTypeFeedback']
    esriMdConnectionTypeAny = 0
    esriMdConnectionTypeParameter = 101
    esriMdConnectionTypeEnvironment = 102
    esriMdConnectionTypePrecondition = 103
    esriMdConnectionTypeFeedback = 104

class esriGPToolType(Enumeration):
    __slots__ = ['esriGPFunctionTool',
                 'esriGPModelTool',
                 'esriGPScriptTool',
                 'esriGPCustomTool',
                 'esriGPServerTool',
                 'esriGPPythonScriptTool',
                 'esriGPTaskTool']
    esriGPFunctionTool = 1
    esriGPModelTool = 2
    esriGPScriptTool = 3
    esriGPCustomTool = 4
    esriGPServerTool = 5
    esriGPPythonScriptTool = 6
    esriGPTaskTool = 7

class esriGPParameterDirection(Enumeration):
    __slots__ = ['esriGPParameterDirectionInput',
                 'esriGPParameterDirectionOutput']
    esriGPParameterDirectionInput = 0
    esriGPParameterDirectionOutput = 1

class esriGPParameterType(Enumeration):
    __slots__ = ['esriGPParameterTypeRequired',
                 'esriGPParameterTypeOptional',
                 'esriGPParameterTypeDerived']
    esriGPParameterTypeRequired = 0
    esriGPParameterTypeOptional = 1
    esriGPParameterTypeDerived = 2

class esriGPFieldMapMergeRule(Enumeration):
    __slots__ = ['esriGPFieldMapMergeRuleNone',
                 'esriGPFieldMapMergeRuleMinimum',
                 'esriGPFieldMapMergeRuleMaximum',
                 'esriGPFieldMapMergeRuleStandardDeviation',
                 'esriGPFieldMapMergeRuleMean',
                 'esriGPFieldMapMergeRuleMedian',
                 'esriGPFieldMapMergeRuleSum',
                 'esriGPFieldMapMergeRuleJoin',
                 'esriGPFieldMapMergeRuleFirst',
                 'esriGPFieldMapMergeRuleLast',
                 'esriGPFieldMapMergeRuleMode',
                 'esriGPFieldMapMergeRuleCount',
                 'esriGPFieldMapMergeRuleRange']
    esriGPFieldMapMergeRuleNone = 0
    esriGPFieldMapMergeRuleMinimum = 1
    esriGPFieldMapMergeRuleMaximum = 2
    esriGPFieldMapMergeRuleStandardDeviation = 3
    esriGPFieldMapMergeRuleMean = 4
    esriGPFieldMapMergeRuleMedian = 5
    esriGPFieldMapMergeRuleSum = 6
    esriGPFieldMapMergeRuleJoin = 7
    esriGPFieldMapMergeRuleFirst = 8
    esriGPFieldMapMergeRuleLast = 9
    esriGPFieldMapMergeRuleMode = 10
    esriGPFieldMapMergeRuleCount = 11
    esriGPFieldMapMergeRuleRange = 12

class esriGPFieldInfoMergeRule(Enumeration):
    __slots__ = ['esriGPFieldInfoMergeRuleNone',
                 'esriGPFieldInfoMergeRuleMinimum',
                 'esriGPFieldInfoMergeRuleMaximum',
                 'esriGPFieldInfoMergeRuleMedian',
                 'esriGPFieldInfoMergeRuleMean',
                 'esriGPFieldInfoMergeRuleStandard',
                 'esriGPFieldInfoMergeRuleDeviation',
                 'esriGPFieldInfoMergeRuleSum']
    esriGPFieldInfoMergeRuleNone = 0
    esriGPFieldInfoMergeRuleMinimum = 1
    esriGPFieldInfoMergeRuleMaximum = 2
    esriGPFieldInfoMergeRuleMedian = 3
    esriGPFieldInfoMergeRuleMean = 4
    esriGPFieldInfoMergeRuleStandard = 5
    esriGPFieldInfoMergeRuleDeviation = 6
    esriGPFieldInfoMergeRuleSum = 7

class esriGPFieldInfoSplitRule(Enumeration):
    __slots__ = ['esriGPFieldInfoSplitRuleNone',
                 'esriGPFieldInfoSplitRuleRatio']
    esriGPFieldInfoSplitRuleNone = 0
    esriGPFieldInfoSplitRuleRatio = 1

class esriGPExtentEnum(Enumeration):
    __slots__ = ['esriGPExtentUnknown',
                 'esriGPExtentMaxOf',
                 'esriGPExtentMinOf',
                 'esriGPExtentValue']
    esriGPExtentUnknown = 0
    esriGPExtentMaxOf = 1
    esriGPExtentMinOf = 2
    esriGPExtentValue = 3

class esriRandomNumberGeneratorType(Enumeration):
    __slots__ = ['esriRNGStandardCRand',
                 'esriRNGAlgorithmACM599',
                 'esriRNGMersenneTwister']
    esriRNGStandardCRand = 0
    esriRNGAlgorithmACM599 = 1
    esriRNGMersenneTwister = 2

class esriRandomDistributionType(Enumeration):
    __slots__ = ['esriRandDistributionNone',
                 'esriRandDistributionUniform',
                 'esriRandDistributionUniformInteger',
                 'esriRandDistributionNormal',
                 'esriRandDistributionExponential',
                 'esriRandDistributionPoisson',
                 'esriRandDistributionGamma',
                 'esriRandDistributionBinomial',
                 'esriRandDistributionGeometric',
                 'esriRandDistributionNegativeBinomial']
    esriRandDistributionNone = 0
    esriRandDistributionUniform = 1
    esriRandDistributionUniformInteger = 2
    esriRandDistributionNormal = 3
    esriRandDistributionExponential = 4
    esriRandDistributionPoisson = 5
    esriRandDistributionGamma = 6
    esriRandDistributionBinomial = 7
    esriRandDistributionGeometric = 8
    esriRandDistributionNegativeBinomial = 9

class esriGPSchemaFieldsType(Enumeration):
    __slots__ = ['esriGPSchemaFieldsUnset',
                 'esriGPSchemaFieldsFirstDependency',
                 'esriGPSchemaFieldsFirstDependencyFIDs',
                 'esriGPSchemaFieldsAll',
                 'esriGPSchemaFieldsAllNoFIDs',
                 'esriGPSchemaFieldsAllFIDsOnly',
                 'esriGPSchemaFieldsNone']
    esriGPSchemaFieldsUnset = -1
    esriGPSchemaFieldsFirstDependency = 0
    esriGPSchemaFieldsFirstDependencyFIDs = 1
    esriGPSchemaFieldsAll = 2
    esriGPSchemaFieldsAllNoFIDs = 3
    esriGPSchemaFieldsAllFIDsOnly = 4
    esriGPSchemaFieldsNone = 5

class esriGPSchemaGeometryType(Enumeration):
    __slots__ = ['esriGPSchemaGeometryUnset',
                 'esriGPSchemaGeometryFirstDependency',
                 'esriGPSchemaGeometryMin',
                 'esriGPSchemaGeometryMax',
                 'esriGPSchemaGeometryAsSpecified',
                 'esriGPSchemaGeometryUnknown']
    esriGPSchemaGeometryUnset = -1
    esriGPSchemaGeometryFirstDependency = 0
    esriGPSchemaGeometryMin = 1
    esriGPSchemaGeometryMax = 2
    esriGPSchemaGeometryAsSpecified = 3
    esriGPSchemaGeometryUnknown = 4

class esriGPSchemaFeatureType(Enumeration):
    __slots__ = ['esriGPSchemaFeatureUnset',
                 'esriGPSchemaFeatureFirstDependency',
                 'esriGPSchemaFeatureAsSpecified',
                 'esriGPSchemaFeatureUnknown']
    esriGPSchemaFeatureUnset = -1
    esriGPSchemaFeatureFirstDependency = 0
    esriGPSchemaFeatureAsSpecified = 1
    esriGPSchemaFeatureUnknown = 2

class esriGPSchemaExtentType(Enumeration):
    __slots__ = ['esriGPSchemaExtentUnset',
                 'esriGPSchemaExtentFirstDependency',
                 'esriGPSchemaExtentIntersection',
                 'esriGPSchemaExtentUnion',
                 'esriGPSchemaExtentEnvironment',
                 'esriGPSchemaExtentAsSpecified']
    esriGPSchemaExtentUnset = -1
    esriGPSchemaExtentFirstDependency = 0
    esriGPSchemaExtentIntersection = 1
    esriGPSchemaExtentUnion = 2
    esriGPSchemaExtentEnvironment = 3
    esriGPSchemaExtentAsSpecified = 4

class esriGPSchemaCellSizeType(Enumeration):
    __slots__ = ['esriGPSchemaCellSizeUnset',
                 'esriGPSchemaCellSizeFirstDependency',
                 'esriGPSchemaCellSizeMin',
                 'esriGPSchemaCellSizeMax',
                 'esriGPSchemaCellSizeEnvironment',
                 'esriGPSchemaCellSizeAsSpecified']
    esriGPSchemaCellSizeUnset = -1
    esriGPSchemaCellSizeFirstDependency = 0
    esriGPSchemaCellSizeMin = 1
    esriGPSchemaCellSizeMax = 2
    esriGPSchemaCellSizeEnvironment = 3
    esriGPSchemaCellSizeAsSpecified = 4

class esriGPSchemaRasterType(Enumeration):
    __slots__ = ['esriGPSchemaRasterUnset',
                 'esriGPSchemaRasterFirstDependency',
                 'esriGPSchemaRasterMin',
                 'esriGPSchemaRasterMax',
                 'esriGPSchemaRasterInteger',
                 'esriGPSchemaRasterFloat']
    esriGPSchemaRasterUnset = -1
    esriGPSchemaRasterFirstDependency = 0
    esriGPSchemaRasterMin = 1
    esriGPSchemaRasterMax = 2
    esriGPSchemaRasterInteger = 3
    esriGPSchemaRasterFloat = 4

class esriGPSchemaRasterFormatType(Enumeration):
    __slots__ = ['esriGPSchemaRasterFormatIMG',
                 'esriGPSchemaRasterFormatGRID']
    esriGPSchemaRasterFormatIMG = 0
    esriGPSchemaRasterFormatGRID = 1

class esriGPTimeIntervalType(Enumeration):
    __slots__ = ['esriGPTimeIntervalUnlimited',
                 'esriGPTimeIntervalNone',
                 'esriGPTimeInterval1Day',
                 'esriGPTimeInterval2Days',
                 'esriGPTimeInterval3Days',
                 'esriGPTimeInterval4Days',
                 'esriGPTimeInterval5Days',
                 'esriGPTimeInterval1Week',
                 'esriGPTimeInterval2Weeks',
                 'esriGPTimeInterval3Weeks',
                 'esriGPTimeInterval1Month',
                 'esriGPTimeInterval2Months',
                 'esriGPTimeInterval3Months']
    esriGPTimeIntervalUnlimited = 0
    esriGPTimeIntervalNone = 1
    esriGPTimeInterval1Day = 2
    esriGPTimeInterval2Days = 3
    esriGPTimeInterval3Days = 4
    esriGPTimeInterval4Days = 5
    esriGPTimeInterval5Days = 6
    esriGPTimeInterval1Week = 7
    esriGPTimeInterval2Weeks = 8
    esriGPTimeInterval3Weeks = 9
    esriGPTimeInterval1Month = 10
    esriGPTimeInterval2Months = 11
    esriGPTimeInterval3Months = 12

class esriModelDiagramNodeType(Enumeration):
    __slots__ = ['esriModelDiagramNodeTypeDataset',
                 'esriModelDiagramNodeTypeConstant',
                 'esriModelDiagramNodeTypeDerivedDataset',
                 'esriModelDiagramNodeTypeDerivedConstant',
                 'esriModelDiagramNodeTypeTool',
                 'esriModelDiagramNodeTypeLabel',
                 'esriModelDiagramNodeTypeIterator',
                 'esriModelDiagramNodeTypeStop']
    esriModelDiagramNodeTypeDataset = 0
    esriModelDiagramNodeTypeConstant = 1
    esriModelDiagramNodeTypeDerivedDataset = 2
    esriModelDiagramNodeTypeDerivedConstant = 3
    esriModelDiagramNodeTypeTool = 4
    esriModelDiagramNodeTypeLabel = 5
    esriModelDiagramNodeTypeIterator = 6
    esriModelDiagramNodeTypeStop = 7

class esriModelDiagramNodeShape(Enumeration):
    __slots__ = ['esriModelDiagramNodeShapeRectangle',
                 'esriModelDiagramNodeShapeRoundedRectangle',
                 'esriModelDiagramNodeShapeEllipse',
                 'esriModelDiagramNodeShapePentagon',
                 'esriModelDiagramNodeShapeHexagon1',
                 'esriModelDiagramNodeShapeHexagon2',
                 'esriModelDiagramNodeShapeOctagon',
                 'esriModelDiagramNodeShapeTriangle',
                 'esriModelDiagramNodeShapeTriangleDown',
                 'esriModelDiagramNodeShapeTriangleLeft',
                 'esriModelDiagramNodeShapeTriangleRight',
                 'esriModelDiagramNodeShapeDiamond',
                 'esriModelDiagramNodeShapeParallelogram',
                 'esriModelDiagramNodeShapeStar',
                 'esriModelDiagramNodeShapeCross']
    esriModelDiagramNodeShapeRectangle = 0
    esriModelDiagramNodeShapeRoundedRectangle = 1
    esriModelDiagramNodeShapeEllipse = 2
    esriModelDiagramNodeShapePentagon = 3
    esriModelDiagramNodeShapeHexagon1 = 4
    esriModelDiagramNodeShapeHexagon2 = 5
    esriModelDiagramNodeShapeOctagon = 6
    esriModelDiagramNodeShapeTriangle = 7
    esriModelDiagramNodeShapeTriangleDown = 8
    esriModelDiagramNodeShapeTriangleLeft = 9
    esriModelDiagramNodeShapeTriangleRight = 10
    esriModelDiagramNodeShapeDiamond = 11
    esriModelDiagramNodeShapeParallelogram = 12
    esriModelDiagramNodeShapeStar = 13
    esriModelDiagramNodeShapeCross = 14

class esriModelDiagramEdgeStyle(Enumeration):
    __slots__ = ['esriModelDiagramEdgeStyleSolid',
                 'esriModelDiagramEdgeStyleDash',
                 'esriModelDiagramEdgeStyleDot',
                 'esriModelDiagramEdgeStyleDashDot',
                 'esriModelDiagramEdgeStyleDashDotDash']
    esriModelDiagramEdgeStyleSolid = 0
    esriModelDiagramEdgeStyleDash = 1
    esriModelDiagramEdgeStyleDot = 2
    esriModelDiagramEdgeStyleDashDot = 3
    esriModelDiagramEdgeStyleDashDotDash = 4

class esriModelDiagramLayoutQuality(Enumeration):
    __slots__ = ['esriModelDiagramLayoutQualityDraft',
                 'esriModelDiagramLayoutQualityDefault',
                 'esriModelDiagramLayoutQualityProof']
    esriModelDiagramLayoutQualityDraft = 0
    esriModelDiagramLayoutQualityDefault = 1
    esriModelDiagramLayoutQualityProof = 2

class esriModelDiagramLevelOrientation(Enumeration):
    __slots__ = ['esriModelDiagramLevelOrientationLeftToRight',
                 'esriModelDiagramLevelOrientationBottomToTop',
                 'esriModelDiagramLevelOrientationRightToLeft',
                 'esriModelDiagramLevelOrientationTopToBottom']
    esriModelDiagramLevelOrientationLeftToRight = 0
    esriModelDiagramLevelOrientationBottomToTop = 1
    esriModelDiagramLevelOrientationRightToLeft = 2
    esriModelDiagramLevelOrientationTopToBottom = 3

class esriModelDiagramLevelConstraint(Enumeration):
    __slots__ = ['esriModelDiagramLevelConstraintNone',
                 'esriModelDiagramLevelConstraintTowardsInput',
                 'esriModelDiagramLevelConstraintTowardsOutput']
    esriModelDiagramLevelConstraintNone = 0
    esriModelDiagramLevelConstraintTowardsInput = 1
    esriModelDiagramLevelConstraintTowardsOutput = 2

class esriModelDiagramLevelAlignment(Enumeration):
    __slots__ = ['esriModelDiagramLevelAlignmentCenter',
                 'esriModelDiagramLevelAlignmentLeft',
                 'esriModelDiagramLevelAlignmentRight',
                 'esriModelDiagramLevelAlignmentTop',
                 'esriModelDiagramLevelAlignmentBottom']
    esriModelDiagramLevelAlignmentCenter = 0
    esriModelDiagramLevelAlignmentLeft = 1
    esriModelDiagramLevelAlignmentRight = 2
    esriModelDiagramLevelAlignmentTop = 1
    esriModelDiagramLevelAlignmentBottom = 2

class esriModelDiagramGridType(Enumeration):
    __slots__ = ['esriModelDiagramGridTypeLines',
                 'esriModelDiagramGridTypePoints']
    esriModelDiagramGridTypeLines = 1
    esriModelDiagramGridTypePoints = 2

class esriMdListType(Enumeration):
    __slots__ = ['esriMdListTypeSingle',
                 'esriMdListTypeList',
                 'esriMdListTypeSeries']
    esriMdListTypeSingle = 0
    esriMdListTypeList = 1
    esriMdListTypeSeries = 2

class esriMdIterationType(Enumeration):
    __slots__ = ['esriMdIterationTypeFixed',
                 'esriMdIterationTypeConditional']
    esriMdIterationTypeFixed = 0
    esriMdIterationTypeConditional = 1

class esriGPInternalEnvironmentType(Enumeration):
    __slots__ = ['esriGPNoEnv',
                 'esriGPCurrentWorkspaceEnv',
                 'esriGPOverwriteOutputsEnv']
    esriGPNoEnv = 0
    esriGPCurrentWorkspaceEnv = 1
    esriGPOverwriteOutputsEnv = 2

class esriBuildCoverageFeatureClassType(Enumeration):
    __slots__ = ['esriBCFCTUnknown',
                 'esriBCFCTPoint',
                 'esriBCFCTArc',
                 'esriBCFCTPolygon',
                 'esriBCFCTNode',
                 'esriBCFCTTic',
                 'esriBCFCTAnnotation',
                 'esriBCFCTSection',
                 'esriBCFCTRoute',
                 'esriBCFCTLink',
                 'esriBCFCTRegion',
                 'esriBCFCTLabel']
    esriBCFCTUnknown = 0
    esriBCFCTPoint = 1
    esriBCFCTArc = 2
    esriBCFCTPolygon = 3
    esriBCFCTNode = 4
    esriBCFCTTic = 5
    esriBCFCTAnnotation = 6
    esriBCFCTSection = 7
    esriBCFCTRoute = 8
    esriBCFCTLink = 9
    esriBCFCTRegion = 11
    esriBCFCTLabel = 51

class esriRasterDistributionEnum(Enumeration):
    __slots__ = ['esriRasterInvalidDistribution',
                 'esriRasterIntegerConstant',
                 'esriRasterFloatConstant',
                 'esriRasterNormalDistribution',
                 'esriRasterRandomDistribution']
    esriRasterInvalidDistribution = 0
    esriRasterIntegerConstant = 1
    esriRasterFloatConstant = 2
    esriRasterNormalDistribution = 3
    esriRasterRandomDistribution = 4

class esriMultiBandOutputEnum(Enumeration):
    __slots__ = ['esriMultiBandOutput_No',
                 'esriMultiBandOutput_First',
                 'esriMultiBandOutput_Second',
                 'esriMultiBandOutput_All',
                 'esriMultiBandOutput_Yes',
                 'esriMultiBandOutput_Function']
    esriMultiBandOutput_No = 0
    esriMultiBandOutput_First = 1
    esriMultiBandOutput_Second = 2
    esriMultiBandOutput_All = 3
    esriMultiBandOutput_Yes = 4
    esriMultiBandOutput_Function = 9

class esriExecutionType(Enumeration):
    __slots__ = ['esriExecutionTypeAsynchronous',
                 'esriExecutionTypeSynchronous']
    esriExecutionTypeAsynchronous = 1
    esriExecutionTypeSynchronous = 2

class esriGPServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriGPServerMessageCode_InitSucceeded',
                 'esriGPServerMessageCode_InitFailed',
                 'esriGPServerMessageCode_JobCatalogInitSucceeded',
                 'esriGPServerMessageCode_JobCatalogInitFailed',
                 'esriGPServerMessageCode_ConstructSucceeded',
                 'esriGPServerMessageCode_ConstructFailed',
                 'esriGPServerMessageCode_SubmitJobSucceeded',
                 'esriGPServerMessageCode_SubmitJobFailed',
                 'esriGPServerMessageCode_ExecuteFailed',
                 'esriGPServerMessageCode_AddCfgFailed',
                 'esriGPServerMessageCode_StartCfgFailed',
                 'esriGPServerMessageCode_StopCfgFailed',
                 'esriGPServerMessageCode_DeleteCfgFailed',
                 'esriGPServerMessageCode_JobsDirNotFound',
                 'esriGPServerMessageCode_NotLicensed',
                 'esriGPServerMessageCode_OutputDirNotFound',
                 'esriGPServerMessageCode_CreateDirFailed',
                 'esriGPServerMessageCode_TransferDirFailed',
                 'esriGPServerMessageCode_ExecuteTime',
                 'esriGPServerMessageCode_LoadTime',
                 'esriGPServerMessageCode_SaveTime',
                 'esriGPServerMessageCode_Debug',
                 'esriGPServerMessageCode_OutputDirNotExist',
                 'esriGPServerMessageCode_OutputDirCreateFailed',
                 'esriGPServerMessageCode_JobsDirNotExist',
                 'esriGPServerMessageCode_JobsDirRenameFailed',
                 'esriGPServerMessageCode_OpenGeoprocessingResultFailed',
                 'esriGPServerMessageCode_InvalidLayer',
                 'esriGPServerMessageCode_CreateMSDFailed']
    esriGPServerMessageCode_InitSucceeded = 20002
    esriGPServerMessageCode_InitFailed = 20003
    esriGPServerMessageCode_JobCatalogInitSucceeded = 20004
    esriGPServerMessageCode_JobCatalogInitFailed = 20005
    esriGPServerMessageCode_ConstructSucceeded = 20006
    esriGPServerMessageCode_ConstructFailed = 20007
    esriGPServerMessageCode_SubmitJobSucceeded = 20008
    esriGPServerMessageCode_SubmitJobFailed = 20009
    esriGPServerMessageCode_ExecuteFailed = 20010
    esriGPServerMessageCode_AddCfgFailed = 20013
    esriGPServerMessageCode_StartCfgFailed = 20014
    esriGPServerMessageCode_StopCfgFailed = 20015
    esriGPServerMessageCode_DeleteCfgFailed = 20016
    esriGPServerMessageCode_JobsDirNotFound = 20017
    esriGPServerMessageCode_NotLicensed = 20018
    esriGPServerMessageCode_OutputDirNotFound = 20019
    esriGPServerMessageCode_CreateDirFailed = 20020
    esriGPServerMessageCode_TransferDirFailed = 20021
    esriGPServerMessageCode_ExecuteTime = 20022
    esriGPServerMessageCode_LoadTime = 20023
    esriGPServerMessageCode_SaveTime = 20024
    esriGPServerMessageCode_Debug = 20025
    esriGPServerMessageCode_OutputDirNotExist = 20026
    esriGPServerMessageCode_OutputDirCreateFailed = 20027
    esriGPServerMessageCode_JobsDirNotExist = 20028
    esriGPServerMessageCode_JobsDirRenameFailed = 20029
    esriGPServerMessageCode_OpenGeoprocessingResultFailed = 20030
    esriGPServerMessageCode_InvalidLayer = 20031
    esriGPServerMessageCode_CreateMSDFailed = 20032

class esriWPSHttpVerb(Enumeration):
    __slots__ = ['esriWPSGet',
                 'esriWPSPost']
    esriWPSGet = 0
    esriWPSPost = 1

class esriWPSServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriWPSServerMessageCode_SkippedDataset',
                 'esriWPSServerMessageCode_FailedToGenerateTransactionResponse',
                 'esriWPSServerMessageCode_FailedToDeleteLock',
                 'esriWPSServerMessageCode_FailedToDeleteOutstandingTransactionVersions',
                 'esriWPSServerMessageCode_NotLicensed',
                 'esriWPSServerMessageCode_GetRequest',
                 'esriWPSServerMessageCode_PostRequest',
                 'esriWPSServerMessageCode_WPSExceptionReport',
                 'esriWPSServerMessageCode_Debug',
                 'esriWPSServerMessageCode_FailedToReleaseLocks',
                 'esriWPSServerMessageCode_ConstructStart',
                 'esriWPSServerMessageCode_ErrorInvalidAppSchemaNamespace',
                 'esriWPSServerMessageCode_ErrorInvalidAppSchemaPrefix',
                 'esriWPSServerMessageCode_ErrorInvalidDefaultLockExpiration',
                 'esriWPSServerMessageCode_ErrorPublishedWorkspaceIsntVersioned',
                 'esriWPSServerMessageCode_ConstructEnded',
                 'esriWPSServerMessageCode_ErrorInvalid10AxisOrder',
                 'esriWPSServerMessageCode_ErrorInvalid11AxisOrder',
                 'esriWPSServerMessageCode_ErrorInvalidUseSRSNameFormat',
                 'esriWPSServerMessageCode_FailedToReconcileAgainstSelf',
                 'esriWPSServerMessageCode_FailedToStopEditing',
                 'esriWPSServerMessageCode_ServerTooBusyToProcessTransaction',
                 'esriWPSServerMessageCode_FailedToImportTransactionChanges',
                 'esriWPSServerMessageCode_FailedCreatingTransactionResponse',
                 'esriWPSServerMessageCode_TransactionFailedStoppingEditOperation',
                 'esriWPSServerMessageCode_FailedToStartEditing',
                 'esriWPSServerMessageCode_ConflictDetected']
    esriWPSServerMessageCode_SkippedDataset = 92000
    esriWPSServerMessageCode_FailedToGenerateTransactionResponse = 92001
    esriWPSServerMessageCode_FailedToDeleteLock = 92002
    esriWPSServerMessageCode_FailedToDeleteOutstandingTransactionVersions = 92003
    esriWPSServerMessageCode_NotLicensed = 92004
    esriWPSServerMessageCode_GetRequest = 92005
    esriWPSServerMessageCode_PostRequest = 92006
    esriWPSServerMessageCode_WPSExceptionReport = 92007
    esriWPSServerMessageCode_Debug = 92008
    esriWPSServerMessageCode_FailedToReleaseLocks = 92009
    esriWPSServerMessageCode_ConstructStart = 92010
    esriWPSServerMessageCode_ErrorInvalidAppSchemaNamespace = 92011
    esriWPSServerMessageCode_ErrorInvalidAppSchemaPrefix = 92012
    esriWPSServerMessageCode_ErrorInvalidDefaultLockExpiration = 92013
    esriWPSServerMessageCode_ErrorPublishedWorkspaceIsntVersioned = 92014
    esriWPSServerMessageCode_ConstructEnded = 92015
    esriWPSServerMessageCode_ErrorInvalid10AxisOrder = 92016
    esriWPSServerMessageCode_ErrorInvalid11AxisOrder = 92017
    esriWPSServerMessageCode_ErrorInvalidUseSRSNameFormat = 92018
    esriWPSServerMessageCode_FailedToReconcileAgainstSelf = 92019
    esriWPSServerMessageCode_FailedToStopEditing = 92020
    esriWPSServerMessageCode_ServerTooBusyToProcessTransaction = 92021
    esriWPSServerMessageCode_FailedToImportTransactionChanges = 92022
    esriWPSServerMessageCode_FailedCreatingTransactionResponse = 92023
    esriWPSServerMessageCode_TransactionFailedStoppingEditOperation = 92024
    esriWPSServerMessageCode_FailedToStartEditing = 92025
    esriWPSServerMessageCode_ConflictDetected = 92026

class esriGMFeatureClassType(Enumeration):
    __slots__ = ['esriGMFCTGrid',
                 'esriGMFCTMask',
                 'esriGMFCTSegments',
                 'esriGMFCTGridlines',
                 'esriGMFCTTicks',
                 'esriGMFCTPoints',
                 'esriGMFCTEndpoints',
                 'esriGMFCTAnnotation',
                 'esriGMFCTClipNeatline']
    esriGMFCTGrid = 0
    esriGMFCTMask = 1
    esriGMFCTSegments = 2
    esriGMFCTGridlines = 3
    esriGMFCTTicks = 4
    esriGMFCTPoints = 5
    esriGMFCTEndpoints = 6
    esriGMFCTAnnotation = 7
    esriGMFCTClipNeatline = 8

class esriGMDistanceType(Enumeration):
    __slots__ = ['esriGMDTNone',
                 'esriGMDTPercentage',
                 'esriGMDTInch',
                 'esriGMDTMillimeter',
                 'esriGMDTCentimeter',
                 'esriGMDTMeter',
                 'esriGMDTFoot',
                 'esriGMDTSurveyFoot',
                 'esriGMDTNauticalMile',
                 'esriGMDTKilometer',
                 'esriGMDTSurveyMile',
                 'esriGMDTSearsYard',
                 'esriGMDTDegree',
                 'esriGMDTArcMinute',
                 'esriGMDTArcSecond']
    esriGMDTNone = 0
    esriGMDTPercentage = -9999
    esriGMDTInch = 1
    esriGMDTMillimeter = 7
    esriGMDTCentimeter = 8
    esriGMDTMeter = 9001
    esriGMDTFoot = 9002
    esriGMDTSurveyFoot = 9003
    esriGMDTNauticalMile = 9030
    esriGMDTKilometer = 9036
    esriGMDTSurveyMile = 9035
    esriGMDTSearsYard = 9040
    esriGMDTDegree = 9102
    esriGMDTArcMinute = 9103
    esriGMDTArcSecond = 9104

class esriGMNeatlineType(Enumeration):
    __slots__ = ['esriGMNTConnected',
                 'esriGMNTUnconnected']
    esriGMNTConnected = 0
    esriGMNTUnconnected = 1

class esriGMNeatlineSetting(Enumeration):
    __slots__ = ['esriGMNSAllSegmentsSame',
                 'esriGMNSEachSegmentDifferent']
    esriGMNSAllSegmentsSame = 0
    esriGMNSEachSegmentDifferent = 1

class esriGMMaskType(Enumeration):
    __slots__ = ['esriGMMTAutoSize',
                 'esriGMMTManuallySize']
    esriGMMTAutoSize = 0
    esriGMMTManuallySize = 1

class esriGMCoordinateSystemType(Enumeration):
    __slots__ = ['esriGMCSTPrimary',
                 'esriGMCSTAncillary']
    esriGMCSTPrimary = 0
    esriGMCSTAncillary = 1

class esriGMCoordinateSystemMethod(Enumeration):
    __slots__ = ['esriGMCSMUseBaseValue',
                 'esriGMCSMCalculateUTM',
                 'esriGMCSMCalculateParams',
                 'esriGMCSMUseEnvironment',
                 'esriGMCSMUseCoordinateSystemZones',
                 'esriGMCSMCalculateNearestUTM']
    esriGMCSMUseBaseValue = 0
    esriGMCSMCalculateUTM = 1
    esriGMCSMCalculateParams = 2
    esriGMCSMUseEnvironment = 3
    esriGMCSMUseCoordinateSystemZones = 4
    esriGMCSMCalculateNearestUTM = 5

class esriGMOrientation(Enumeration):
    __slots__ = ['esriGMOUndefined',
                 'esriGMONorthSouth',
                 'esriGMOEastWest']
    esriGMOUndefined = -9999
    esriGMONorthSouth = 0
    esriGMOEastWest = 1

class esriGMIntervalType(Enumeration):
    __slots__ = ['esriGMITAlongAOO',
                 'esriGMITAlongSegment']
    esriGMITAlongAOO = 0
    esriGMITAlongSegment = 1

class esriGMRepetitionType(Enumeration):
    __slots__ = ['esriGMRTEndOfExtent',
                 'esriGMRTCustom']
    esriGMRTEndOfExtent = 0
    esriGMRTCustom = 1

class esriGMStartType(Enumeration):
    __slots__ = ['esriGMSTNeatline',
                 'esriGMSTCoordinateSystem']
    esriGMSTNeatline = 0
    esriGMSTCoordinateSystem = 1

class esriGMSegmentType(Enumeration):
    __slots__ = ['esriGMSegUncalibrated',
                 'esriGMSegCalibrated']
    esriGMSegUncalibrated = 0
    esriGMSegCalibrated = 1

class esriGMSectionOrigin(Enumeration):
    __slots__ = ['esriGMSOCenter',
                 'esriGMSOFromPoint',
                 'esriGMSOToPoint']
    esriGMSOCenter = 0
    esriGMSOFromPoint = 1
    esriGMSOToPoint = 2

class esriGMAngleType(Enumeration):
    __slots__ = ['esriGMATSegment',
                 'esriGMATCoordSystem',
                 'esriGMATCustom']
    esriGMATSegment = 0
    esriGMATCoordSystem = 1
    esriGMATCustom = 2

class esriGMTickType(Enumeration):
    __slots__ = ['esriGMTTNoCorner',
                 'esriGMTTCorner']
    esriGMTTNoCorner = 0
    esriGMTTCorner = 1

class esriGMTickCornerType(Enumeration):
    __slots__ = ['esriGMTCTMitered',
                 'esriGMTCTSquare',
                 'esriGMTCTSquareInward']
    esriGMTCTMitered = 0
    esriGMTCTSquare = 1
    esriGMTCTSquareInward = 2

class esriGMTickDirection(Enumeration):
    __slots__ = ['esriGMTDOutward',
                 'esriGMTDInward']
    esriGMTDOutward = 0
    esriGMTDInward = 1

class esriGMAnnotateXY(Enumeration):
    __slots__ = ['esriGMAnnotateX',
                 'esriGMAnnotateY']
    esriGMAnnotateX = 0
    esriGMAnnotateY = 1

class esriGMAnnoFormat(Enumeration):
    __slots__ = ['esriGMAFGeographic',
                 'esriGMAFProjected',
                 'esriGMAFAlphaNum']
    esriGMAFGeographic = 0
    esriGMAFProjected = 1
    esriGMAFAlphaNum = 2

class esriGMAnnoFormatType(Enumeration):
    __slots__ = ['esriGMAFT1K',
                 'esriGMAFT10K',
                 'esriGMAFTFull',
                 'esriGMAFTDelimited',
                 'esriGMAFTMGRS',
                 'esriGMAFTDD',
                 'esriGMAFTDMS',
                 'esriGMAFTLetters',
                 'esriGMAFTNumbers',
                 'esriGMAFTCoordSys',
                 'esriGMAFTProjection',
                 'esriGMAFTDatum',
                 'esriGMAFTSpheroid',
                 'esriGMAFTUnits',
                 'esriGMAFTMGRSCustomPrecision',
                 'esriGMAFTGeoRef',
                 'esriGMAFTSingleDigits',
                 'esriGMAFTDDM',
                 'esriGMAFTDG_DMS',
                 'esriGMAFTDirections',
                 'esriGMAFT100',
                 'esriGMAFTLength']
    esriGMAFT1K = 0
    esriGMAFT10K = 1
    esriGMAFTFull = 2
    esriGMAFTDelimited = 3
    esriGMAFTMGRS = 4
    esriGMAFTDD = 5
    esriGMAFTDMS = 6
    esriGMAFTLetters = 7
    esriGMAFTNumbers = 8
    esriGMAFTCoordSys = 9
    esriGMAFTProjection = 10
    esriGMAFTDatum = 11
    esriGMAFTSpheroid = 12
    esriGMAFTUnits = 13
    esriGMAFTMGRSCustomPrecision = 14
    esriGMAFTGeoRef = 15
    esriGMAFTSingleDigits = 16
    esriGMAFTDDM = 17
    esriGMAFTDG_DMS = 18
    esriGMAFTDirections = 19
    esriGMAFT100 = 20
    esriGMAFTLength = 21

class esriGMEndPointPosition(Enumeration):
    __slots__ = ['esriGMEPPFromPoint',
                 'esriGMEPPToPoint',
                 'esriGMEPPBoth']
    esriGMEPPFromPoint = 1
    esriGMEPPToPoint = 2
    esriGMEPPBoth = 3

class esriGMEndPointSelection(Enumeration):
    __slots__ = ['esriGMEPSFirst',
                 'esriGMEPSLast',
                 'esriGMEPSEnds',
                 'esriGMEPSInterior',
                 'esriGMEPSAll']
    esriGMEPSFirst = 1
    esriGMEPSLast = 2
    esriGMEPSEnds = 3
    esriGMEPSInterior = 4
    esriGMEPSAll = 7

class esriGMNeatlineDensificationType(Enumeration):
    __slots__ = ['esriGMNTDensificationSourceAOI',
                 'esriGMNTDensificationPrimaryCS']
    esriGMNTDensificationSourceAOI = 0
    esriGMNTDensificationPrimaryCS = 1

class esriGMPerpendicularity(Enumeration):
    __slots__ = ['esriGMPerpendicularToSegment',
                 'esriGMPerpendicularToGeographic',
                 'esriGMCustomAngle']
    esriGMPerpendicularToSegment = 0
    esriGMPerpendicularToGeographic = 1
    esriGMCustomAngle = 2

class esriGMZoneSelectionRule(Enumeration):
    __slots__ = ['esriGMZSRLargestArea',
                 'esriGMZSRSmallestArea',
                 'esriGMZSRHighestZone',
                 'esriGMZSRLowestZone',
                 'esriGMZSROrdinalMatch']
    esriGMZSRLargestArea = 0
    esriGMZSRSmallestArea = 1
    esriGMZSRHighestZone = 2
    esriGMZSRLowestZone = 3
    esriGMZSROrdinalMatch = 4

class esriGMSpatialReferenceType(Enumeration):
    __slots__ = ['esriGMSpatialReferenceMask',
                 'esriGMSpatialReferenceFeatureDatasetGCS',
                 'esriGMSpatialReferenceMaskDensification',
                 'esriGMSpatialReferenceArcMap',
                 'esriGMSpatialReferenceBoundary',
                 'esriGMSpatialReferenceEndpoint']
    esriGMSpatialReferenceMask = 0
    esriGMSpatialReferenceFeatureDatasetGCS = 1
    esriGMSpatialReferenceMaskDensification = 2
    esriGMSpatialReferenceArcMap = 3
    esriGMSpatialReferenceBoundary = 4
    esriGMSpatialReferenceEndpoint = 5

class esriGMReferenceScaleType(Enumeration):
    __slots__ = ['esriGMRSTFixed',
                 'esriGMRSTUseEnvironment']
    esriGMRSTFixed = 0
    esriGMRSTUseEnvironment = 1

class esriGMRotationType(Enumeration):
    __slots__ = ['esriGMRTFixed',
                 'esriGMRTCalcTrueNorth',
                 'esriGMRTUseEnvironment']
    esriGMRTFixed = 0
    esriGMRTCalcTrueNorth = 1
    esriGMRTUseEnvironment = 2

class esriGMMessageSeverity(Enumeration):
    __slots__ = ['esriGMMSInformative',
                 'esriGMMSWarning',
                 'esriGMMSError',
                 'esriGMMSAbort']
    esriGMMSInformative = 0
    esriGMMSWarning = 1
    esriGMMSError = 2
    esriGMMSAbort = 3

